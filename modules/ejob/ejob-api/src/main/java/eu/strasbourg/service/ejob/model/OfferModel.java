/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.ejob.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedAuditedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Offer service. Represents a row in the &quot;ejob_Offer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>eu.strasbourg.service.ejob.model.impl.OfferModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>eu.strasbourg.service.ejob.model.impl.OfferImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Offer
 * @generated
 */
@ProviderType
public interface OfferModel
	extends BaseModel<Offer>, GroupedModel, LocalizedModel, ShardedModel,
			StagedAuditedModel, WorkflowedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a offer model instance should use the {@link Offer} interface instead.
	 */

	/**
	 * Returns the primary key of this offer.
	 *
	 * @return the primary key of this offer
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this offer.
	 *
	 * @param primaryKey the primary key of this offer
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this offer.
	 *
	 * @return the uuid of this offer
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this offer.
	 *
	 * @param uuid the uuid of this offer
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the offer ID of this offer.
	 *
	 * @return the offer ID of this offer
	 */
	public long getOfferId();

	/**
	 * Sets the offer ID of this offer.
	 *
	 * @param offerId the offer ID of this offer
	 */
	public void setOfferId(long offerId);

	/**
	 * Returns the group ID of this offer.
	 *
	 * @return the group ID of this offer
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this offer.
	 *
	 * @param groupId the group ID of this offer
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this offer.
	 *
	 * @return the company ID of this offer
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this offer.
	 *
	 * @param companyId the company ID of this offer
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this offer.
	 *
	 * @return the user ID of this offer
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this offer.
	 *
	 * @param userId the user ID of this offer
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this offer.
	 *
	 * @return the user uuid of this offer
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this offer.
	 *
	 * @param userUuid the user uuid of this offer
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this offer.
	 *
	 * @return the user name of this offer
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this offer.
	 *
	 * @param userName the user name of this offer
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this offer.
	 *
	 * @return the create date of this offer
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this offer.
	 *
	 * @param createDate the create date of this offer
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this offer.
	 *
	 * @return the modified date of this offer
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this offer.
	 *
	 * @param modifiedDate the modified date of this offer
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the status of this offer.
	 *
	 * @return the status of this offer
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this offer.
	 *
	 * @param status the status of this offer
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this offer.
	 *
	 * @return the status by user ID of this offer
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this offer.
	 *
	 * @param statusByUserId the status by user ID of this offer
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this offer.
	 *
	 * @return the status by user uuid of this offer
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this offer.
	 *
	 * @param statusByUserUuid the status by user uuid of this offer
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this offer.
	 *
	 * @return the status by user name of this offer
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this offer.
	 *
	 * @param statusByUserName the status by user name of this offer
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this offer.
	 *
	 * @return the status date of this offer
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this offer.
	 *
	 * @param statusDate the status date of this offer
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the publication ID of this offer.
	 *
	 * @return the publication ID of this offer
	 */
	@AutoEscape
	public String getPublicationId();

	/**
	 * Sets the publication ID of this offer.
	 *
	 * @param publicationId the publication ID of this offer
	 */
	public void setPublicationId(String publicationId);

	/**
	 * Returns the post number of this offer.
	 *
	 * @return the post number of this offer
	 */
	@AutoEscape
	public String getPostNumber();

	/**
	 * Sets the post number of this offer.
	 *
	 * @param postNumber the post number of this offer
	 */
	public void setPostNumber(String postNumber);

	/**
	 * Returns the job creation description of this offer.
	 *
	 * @return the job creation description of this offer
	 */
	public String getJobCreationDescription();

	/**
	 * Returns the localized job creation description of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized job creation description of this offer
	 */
	@AutoEscape
	public String getJobCreationDescription(Locale locale);

	/**
	 * Returns the localized job creation description of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized job creation description of this offer. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getJobCreationDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized job creation description of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized job creation description of this offer
	 */
	@AutoEscape
	public String getJobCreationDescription(String languageId);

	/**
	 * Returns the localized job creation description of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized job creation description of this offer
	 */
	@AutoEscape
	public String getJobCreationDescription(
		String languageId, boolean useDefault);

	@AutoEscape
	public String getJobCreationDescriptionCurrentLanguageId();

	@AutoEscape
	public String getJobCreationDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized job creation descriptions of this offer.
	 *
	 * @return the locales and localized job creation descriptions of this offer
	 */
	public Map<Locale, String> getJobCreationDescriptionMap();

	/**
	 * Sets the job creation description of this offer.
	 *
	 * @param jobCreationDescription the job creation description of this offer
	 */
	public void setJobCreationDescription(String jobCreationDescription);

	/**
	 * Sets the localized job creation description of this offer in the language.
	 *
	 * @param jobCreationDescription the localized job creation description of this offer
	 * @param locale the locale of the language
	 */
	public void setJobCreationDescription(
		String jobCreationDescription, Locale locale);

	/**
	 * Sets the localized job creation description of this offer in the language, and sets the default locale.
	 *
	 * @param jobCreationDescription the localized job creation description of this offer
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setJobCreationDescription(
		String jobCreationDescription, Locale locale, Locale defaultLocale);

	public void setJobCreationDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized job creation descriptions of this offer from the map of locales and localized job creation descriptions.
	 *
	 * @param jobCreationDescriptionMap the locales and localized job creation descriptions of this offer
	 */
	public void setJobCreationDescriptionMap(
		Map<Locale, String> jobCreationDescriptionMap);

	/**
	 * Sets the localized job creation descriptions of this offer from the map of locales and localized job creation descriptions, and sets the default locale.
	 *
	 * @param jobCreationDescriptionMap the locales and localized job creation descriptions of this offer
	 * @param defaultLocale the default locale
	 */
	public void setJobCreationDescriptionMap(
		Map<Locale, String> jobCreationDescriptionMap, Locale defaultLocale);

	/**
	 * Returns the start date of this offer.
	 *
	 * @return the start date of this offer
	 */
	public Date getStartDate();

	/**
	 * Sets the start date of this offer.
	 *
	 * @param startDate the start date of this offer
	 */
	public void setStartDate(Date startDate);

	/**
	 * Returns the motif of this offer.
	 *
	 * @return the motif of this offer
	 */
	public String getMotif();

	/**
	 * Returns the localized motif of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized motif of this offer
	 */
	@AutoEscape
	public String getMotif(Locale locale);

	/**
	 * Returns the localized motif of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized motif of this offer. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getMotif(Locale locale, boolean useDefault);

	/**
	 * Returns the localized motif of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized motif of this offer
	 */
	@AutoEscape
	public String getMotif(String languageId);

	/**
	 * Returns the localized motif of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized motif of this offer
	 */
	@AutoEscape
	public String getMotif(String languageId, boolean useDefault);

	@AutoEscape
	public String getMotifCurrentLanguageId();

	@AutoEscape
	public String getMotifCurrentValue();

	/**
	 * Returns a map of the locales and localized motifs of this offer.
	 *
	 * @return the locales and localized motifs of this offer
	 */
	public Map<Locale, String> getMotifMap();

	/**
	 * Sets the motif of this offer.
	 *
	 * @param motif the motif of this offer
	 */
	public void setMotif(String motif);

	/**
	 * Sets the localized motif of this offer in the language.
	 *
	 * @param motif the localized motif of this offer
	 * @param locale the locale of the language
	 */
	public void setMotif(String motif, Locale locale);

	/**
	 * Sets the localized motif of this offer in the language, and sets the default locale.
	 *
	 * @param motif the localized motif of this offer
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setMotif(String motif, Locale locale, Locale defaultLocale);

	public void setMotifCurrentLanguageId(String languageId);

	/**
	 * Sets the localized motifs of this offer from the map of locales and localized motifs.
	 *
	 * @param motifMap the locales and localized motifs of this offer
	 */
	public void setMotifMap(Map<Locale, String> motifMap);

	/**
	 * Sets the localized motifs of this offer from the map of locales and localized motifs, and sets the default locale.
	 *
	 * @param motifMap the locales and localized motifs of this offer
	 * @param defaultLocale the default locale
	 */
	public void setMotifMap(Map<Locale, String> motifMap, Locale defaultLocale);

	/**
	 * Returns the permanent description of this offer.
	 *
	 * @return the permanent description of this offer
	 */
	public String getPermanentDescription();

	/**
	 * Returns the localized permanent description of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized permanent description of this offer
	 */
	@AutoEscape
	public String getPermanentDescription(Locale locale);

	/**
	 * Returns the localized permanent description of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized permanent description of this offer. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getPermanentDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized permanent description of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized permanent description of this offer
	 */
	@AutoEscape
	public String getPermanentDescription(String languageId);

	/**
	 * Returns the localized permanent description of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized permanent description of this offer
	 */
	@AutoEscape
	public String getPermanentDescription(
		String languageId, boolean useDefault);

	@AutoEscape
	public String getPermanentDescriptionCurrentLanguageId();

	@AutoEscape
	public String getPermanentDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized permanent descriptions of this offer.
	 *
	 * @return the locales and localized permanent descriptions of this offer
	 */
	public Map<Locale, String> getPermanentDescriptionMap();

	/**
	 * Sets the permanent description of this offer.
	 *
	 * @param permanentDescription the permanent description of this offer
	 */
	public void setPermanentDescription(String permanentDescription);

	/**
	 * Sets the localized permanent description of this offer in the language.
	 *
	 * @param permanentDescription the localized permanent description of this offer
	 * @param locale the locale of the language
	 */
	public void setPermanentDescription(
		String permanentDescription, Locale locale);

	/**
	 * Sets the localized permanent description of this offer in the language, and sets the default locale.
	 *
	 * @param permanentDescription the localized permanent description of this offer
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setPermanentDescription(
		String permanentDescription, Locale locale, Locale defaultLocale);

	public void setPermanentDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized permanent descriptions of this offer from the map of locales and localized permanent descriptions.
	 *
	 * @param permanentDescriptionMap the locales and localized permanent descriptions of this offer
	 */
	public void setPermanentDescriptionMap(
		Map<Locale, String> permanentDescriptionMap);

	/**
	 * Sets the localized permanent descriptions of this offer from the map of locales and localized permanent descriptions, and sets the default locale.
	 *
	 * @param permanentDescriptionMap the locales and localized permanent descriptions of this offer
	 * @param defaultLocale the default locale
	 */
	public void setPermanentDescriptionMap(
		Map<Locale, String> permanentDescriptionMap, Locale defaultLocale);

	/**
	 * Returns the duration of this offer.
	 *
	 * @return the duration of this offer
	 */
	public String getDuration();

	/**
	 * Returns the localized duration of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized duration of this offer
	 */
	@AutoEscape
	public String getDuration(Locale locale);

	/**
	 * Returns the localized duration of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized duration of this offer. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDuration(Locale locale, boolean useDefault);

	/**
	 * Returns the localized duration of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized duration of this offer
	 */
	@AutoEscape
	public String getDuration(String languageId);

	/**
	 * Returns the localized duration of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized duration of this offer
	 */
	@AutoEscape
	public String getDuration(String languageId, boolean useDefault);

	@AutoEscape
	public String getDurationCurrentLanguageId();

	@AutoEscape
	public String getDurationCurrentValue();

	/**
	 * Returns a map of the locales and localized durations of this offer.
	 *
	 * @return the locales and localized durations of this offer
	 */
	public Map<Locale, String> getDurationMap();

	/**
	 * Sets the duration of this offer.
	 *
	 * @param duration the duration of this offer
	 */
	public void setDuration(String duration);

	/**
	 * Sets the localized duration of this offer in the language.
	 *
	 * @param duration the localized duration of this offer
	 * @param locale the locale of the language
	 */
	public void setDuration(String duration, Locale locale);

	/**
	 * Sets the localized duration of this offer in the language, and sets the default locale.
	 *
	 * @param duration the localized duration of this offer
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDuration(
		String duration, Locale locale, Locale defaultLocale);

	public void setDurationCurrentLanguageId(String languageId);

	/**
	 * Sets the localized durations of this offer from the map of locales and localized durations.
	 *
	 * @param durationMap the locales and localized durations of this offer
	 */
	public void setDurationMap(Map<Locale, String> durationMap);

	/**
	 * Sets the localized durations of this offer from the map of locales and localized durations, and sets the default locale.
	 *
	 * @param durationMap the locales and localized durations of this offer
	 * @param defaultLocale the default locale
	 */
	public void setDurationMap(
		Map<Locale, String> durationMap, Locale defaultLocale);

	/**
	 * Returns the post of this offer.
	 *
	 * @return the post of this offer
	 */
	public String getPost();

	/**
	 * Returns the localized post of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized post of this offer
	 */
	@AutoEscape
	public String getPost(Locale locale);

	/**
	 * Returns the localized post of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized post of this offer. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getPost(Locale locale, boolean useDefault);

	/**
	 * Returns the localized post of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized post of this offer
	 */
	@AutoEscape
	public String getPost(String languageId);

	/**
	 * Returns the localized post of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized post of this offer
	 */
	@AutoEscape
	public String getPost(String languageId, boolean useDefault);

	@AutoEscape
	public String getPostCurrentLanguageId();

	@AutoEscape
	public String getPostCurrentValue();

	/**
	 * Returns a map of the locales and localized posts of this offer.
	 *
	 * @return the locales and localized posts of this offer
	 */
	public Map<Locale, String> getPostMap();

	/**
	 * Sets the post of this offer.
	 *
	 * @param post the post of this offer
	 */
	public void setPost(String post);

	/**
	 * Sets the localized post of this offer in the language.
	 *
	 * @param post the localized post of this offer
	 * @param locale the locale of the language
	 */
	public void setPost(String post, Locale locale);

	/**
	 * Sets the localized post of this offer in the language, and sets the default locale.
	 *
	 * @param post the localized post of this offer
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setPost(String post, Locale locale, Locale defaultLocale);

	public void setPostCurrentLanguageId(String languageId);

	/**
	 * Sets the localized posts of this offer from the map of locales and localized posts.
	 *
	 * @param postMap the locales and localized posts of this offer
	 */
	public void setPostMap(Map<Locale, String> postMap);

	/**
	 * Sets the localized posts of this offer from the map of locales and localized posts, and sets the default locale.
	 *
	 * @param postMap the locales and localized posts of this offer
	 * @param defaultLocale the default locale
	 */
	public void setPostMap(Map<Locale, String> postMap, Locale defaultLocale);

	/**
	 * Returns the is full time of this offer.
	 *
	 * @return the is full time of this offer
	 */
	public boolean getIsFullTime();

	/**
	 * Returns <code>true</code> if this offer is is full time.
	 *
	 * @return <code>true</code> if this offer is is full time; <code>false</code> otherwise
	 */
	public boolean isIsFullTime();

	/**
	 * Sets whether this offer is is full time.
	 *
	 * @param isFullTime the is full time of this offer
	 */
	public void setIsFullTime(boolean isFullTime);

	/**
	 * Returns the full time description of this offer.
	 *
	 * @return the full time description of this offer
	 */
	public String getFullTimeDescription();

	/**
	 * Returns the localized full time description of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized full time description of this offer
	 */
	@AutoEscape
	public String getFullTimeDescription(Locale locale);

	/**
	 * Returns the localized full time description of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized full time description of this offer. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getFullTimeDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized full time description of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized full time description of this offer
	 */
	@AutoEscape
	public String getFullTimeDescription(String languageId);

	/**
	 * Returns the localized full time description of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized full time description of this offer
	 */
	@AutoEscape
	public String getFullTimeDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getFullTimeDescriptionCurrentLanguageId();

	@AutoEscape
	public String getFullTimeDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized full time descriptions of this offer.
	 *
	 * @return the locales and localized full time descriptions of this offer
	 */
	public Map<Locale, String> getFullTimeDescriptionMap();

	/**
	 * Sets the full time description of this offer.
	 *
	 * @param fullTimeDescription the full time description of this offer
	 */
	public void setFullTimeDescription(String fullTimeDescription);

	/**
	 * Sets the localized full time description of this offer in the language.
	 *
	 * @param fullTimeDescription the localized full time description of this offer
	 * @param locale the locale of the language
	 */
	public void setFullTimeDescription(
		String fullTimeDescription, Locale locale);

	/**
	 * Sets the localized full time description of this offer in the language, and sets the default locale.
	 *
	 * @param fullTimeDescription the localized full time description of this offer
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setFullTimeDescription(
		String fullTimeDescription, Locale locale, Locale defaultLocale);

	public void setFullTimeDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized full time descriptions of this offer from the map of locales and localized full time descriptions.
	 *
	 * @param fullTimeDescriptionMap the locales and localized full time descriptions of this offer
	 */
	public void setFullTimeDescriptionMap(
		Map<Locale, String> fullTimeDescriptionMap);

	/**
	 * Sets the localized full time descriptions of this offer from the map of locales and localized full time descriptions, and sets the default locale.
	 *
	 * @param fullTimeDescriptionMap the locales and localized full time descriptions of this offer
	 * @param defaultLocale the default locale
	 */
	public void setFullTimeDescriptionMap(
		Map<Locale, String> fullTimeDescriptionMap, Locale defaultLocale);

	/**
	 * Returns the introduction of this offer.
	 *
	 * @return the introduction of this offer
	 */
	public String getIntroduction();

	/**
	 * Returns the localized introduction of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized introduction of this offer
	 */
	@AutoEscape
	public String getIntroduction(Locale locale);

	/**
	 * Returns the localized introduction of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized introduction of this offer. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getIntroduction(Locale locale, boolean useDefault);

	/**
	 * Returns the localized introduction of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized introduction of this offer
	 */
	@AutoEscape
	public String getIntroduction(String languageId);

	/**
	 * Returns the localized introduction of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized introduction of this offer
	 */
	@AutoEscape
	public String getIntroduction(String languageId, boolean useDefault);

	@AutoEscape
	public String getIntroductionCurrentLanguageId();

	@AutoEscape
	public String getIntroductionCurrentValue();

	/**
	 * Returns a map of the locales and localized introductions of this offer.
	 *
	 * @return the locales and localized introductions of this offer
	 */
	public Map<Locale, String> getIntroductionMap();

	/**
	 * Sets the introduction of this offer.
	 *
	 * @param introduction the introduction of this offer
	 */
	public void setIntroduction(String introduction);

	/**
	 * Sets the localized introduction of this offer in the language.
	 *
	 * @param introduction the localized introduction of this offer
	 * @param locale the locale of the language
	 */
	public void setIntroduction(String introduction, Locale locale);

	/**
	 * Sets the localized introduction of this offer in the language, and sets the default locale.
	 *
	 * @param introduction the localized introduction of this offer
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setIntroduction(
		String introduction, Locale locale, Locale defaultLocale);

	public void setIntroductionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized introductions of this offer from the map of locales and localized introductions.
	 *
	 * @param introductionMap the locales and localized introductions of this offer
	 */
	public void setIntroductionMap(Map<Locale, String> introductionMap);

	/**
	 * Sets the localized introductions of this offer from the map of locales and localized introductions, and sets the default locale.
	 *
	 * @param introductionMap the locales and localized introductions of this offer
	 * @param defaultLocale the default locale
	 */
	public void setIntroductionMap(
		Map<Locale, String> introductionMap, Locale defaultLocale);

	/**
	 * Returns the activities of this offer.
	 *
	 * @return the activities of this offer
	 */
	public String getActivities();

	/**
	 * Returns the localized activities of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized activities of this offer
	 */
	@AutoEscape
	public String getActivities(Locale locale);

	/**
	 * Returns the localized activities of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized activities of this offer. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getActivities(Locale locale, boolean useDefault);

	/**
	 * Returns the localized activities of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized activities of this offer
	 */
	@AutoEscape
	public String getActivities(String languageId);

	/**
	 * Returns the localized activities of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized activities of this offer
	 */
	@AutoEscape
	public String getActivities(String languageId, boolean useDefault);

	@AutoEscape
	public String getActivitiesCurrentLanguageId();

	@AutoEscape
	public String getActivitiesCurrentValue();

	/**
	 * Returns a map of the locales and localized activitieses of this offer.
	 *
	 * @return the locales and localized activitieses of this offer
	 */
	public Map<Locale, String> getActivitiesMap();

	/**
	 * Sets the activities of this offer.
	 *
	 * @param activities the activities of this offer
	 */
	public void setActivities(String activities);

	/**
	 * Sets the localized activities of this offer in the language.
	 *
	 * @param activities the localized activities of this offer
	 * @param locale the locale of the language
	 */
	public void setActivities(String activities, Locale locale);

	/**
	 * Sets the localized activities of this offer in the language, and sets the default locale.
	 *
	 * @param activities the localized activities of this offer
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setActivities(
		String activities, Locale locale, Locale defaultLocale);

	public void setActivitiesCurrentLanguageId(String languageId);

	/**
	 * Sets the localized activitieses of this offer from the map of locales and localized activitieses.
	 *
	 * @param activitiesMap the locales and localized activitieses of this offer
	 */
	public void setActivitiesMap(Map<Locale, String> activitiesMap);

	/**
	 * Sets the localized activitieses of this offer from the map of locales and localized activitieses, and sets the default locale.
	 *
	 * @param activitiesMap the locales and localized activitieses of this offer
	 * @param defaultLocale the default locale
	 */
	public void setActivitiesMap(
		Map<Locale, String> activitiesMap, Locale defaultLocale);

	/**
	 * Returns the profil of this offer.
	 *
	 * @return the profil of this offer
	 */
	public String getProfil();

	/**
	 * Returns the localized profil of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized profil of this offer
	 */
	@AutoEscape
	public String getProfil(Locale locale);

	/**
	 * Returns the localized profil of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized profil of this offer. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getProfil(Locale locale, boolean useDefault);

	/**
	 * Returns the localized profil of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized profil of this offer
	 */
	@AutoEscape
	public String getProfil(String languageId);

	/**
	 * Returns the localized profil of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized profil of this offer
	 */
	@AutoEscape
	public String getProfil(String languageId, boolean useDefault);

	@AutoEscape
	public String getProfilCurrentLanguageId();

	@AutoEscape
	public String getProfilCurrentValue();

	/**
	 * Returns a map of the locales and localized profils of this offer.
	 *
	 * @return the locales and localized profils of this offer
	 */
	public Map<Locale, String> getProfilMap();

	/**
	 * Sets the profil of this offer.
	 *
	 * @param profil the profil of this offer
	 */
	public void setProfil(String profil);

	/**
	 * Sets the localized profil of this offer in the language.
	 *
	 * @param profil the localized profil of this offer
	 * @param locale the locale of the language
	 */
	public void setProfil(String profil, Locale locale);

	/**
	 * Sets the localized profil of this offer in the language, and sets the default locale.
	 *
	 * @param profil the localized profil of this offer
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setProfil(String profil, Locale locale, Locale defaultLocale);

	public void setProfilCurrentLanguageId(String languageId);

	/**
	 * Sets the localized profils of this offer from the map of locales and localized profils.
	 *
	 * @param profilMap the locales and localized profils of this offer
	 */
	public void setProfilMap(Map<Locale, String> profilMap);

	/**
	 * Sets the localized profils of this offer from the map of locales and localized profils, and sets the default locale.
	 *
	 * @param profilMap the locales and localized profils of this offer
	 * @param defaultLocale the default locale
	 */
	public void setProfilMap(
		Map<Locale, String> profilMap, Locale defaultLocale);

	/**
	 * Returns the conditions of this offer.
	 *
	 * @return the conditions of this offer
	 */
	public String getConditions();

	/**
	 * Returns the localized conditions of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized conditions of this offer
	 */
	@AutoEscape
	public String getConditions(Locale locale);

	/**
	 * Returns the localized conditions of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized conditions of this offer. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getConditions(Locale locale, boolean useDefault);

	/**
	 * Returns the localized conditions of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized conditions of this offer
	 */
	@AutoEscape
	public String getConditions(String languageId);

	/**
	 * Returns the localized conditions of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized conditions of this offer
	 */
	@AutoEscape
	public String getConditions(String languageId, boolean useDefault);

	@AutoEscape
	public String getConditionsCurrentLanguageId();

	@AutoEscape
	public String getConditionsCurrentValue();

	/**
	 * Returns a map of the locales and localized conditionses of this offer.
	 *
	 * @return the locales and localized conditionses of this offer
	 */
	public Map<Locale, String> getConditionsMap();

	/**
	 * Sets the conditions of this offer.
	 *
	 * @param conditions the conditions of this offer
	 */
	public void setConditions(String conditions);

	/**
	 * Sets the localized conditions of this offer in the language.
	 *
	 * @param conditions the localized conditions of this offer
	 * @param locale the locale of the language
	 */
	public void setConditions(String conditions, Locale locale);

	/**
	 * Sets the localized conditions of this offer in the language, and sets the default locale.
	 *
	 * @param conditions the localized conditions of this offer
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setConditions(
		String conditions, Locale locale, Locale defaultLocale);

	public void setConditionsCurrentLanguageId(String languageId);

	/**
	 * Sets the localized conditionses of this offer from the map of locales and localized conditionses.
	 *
	 * @param conditionsMap the locales and localized conditionses of this offer
	 */
	public void setConditionsMap(Map<Locale, String> conditionsMap);

	/**
	 * Sets the localized conditionses of this offer from the map of locales and localized conditionses, and sets the default locale.
	 *
	 * @param conditionsMap the locales and localized conditionses of this offer
	 * @param defaultLocale the default locale
	 */
	public void setConditionsMap(
		Map<Locale, String> conditionsMap, Locale defaultLocale);

	/**
	 * Returns the avantages of this offer.
	 *
	 * @return the avantages of this offer
	 */
	public String getAvantages();

	/**
	 * Returns the localized avantages of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized avantages of this offer
	 */
	@AutoEscape
	public String getAvantages(Locale locale);

	/**
	 * Returns the localized avantages of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized avantages of this offer. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getAvantages(Locale locale, boolean useDefault);

	/**
	 * Returns the localized avantages of this offer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized avantages of this offer
	 */
	@AutoEscape
	public String getAvantages(String languageId);

	/**
	 * Returns the localized avantages of this offer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized avantages of this offer
	 */
	@AutoEscape
	public String getAvantages(String languageId, boolean useDefault);

	@AutoEscape
	public String getAvantagesCurrentLanguageId();

	@AutoEscape
	public String getAvantagesCurrentValue();

	/**
	 * Returns a map of the locales and localized avantageses of this offer.
	 *
	 * @return the locales and localized avantageses of this offer
	 */
	public Map<Locale, String> getAvantagesMap();

	/**
	 * Sets the avantages of this offer.
	 *
	 * @param avantages the avantages of this offer
	 */
	public void setAvantages(String avantages);

	/**
	 * Sets the localized avantages of this offer in the language.
	 *
	 * @param avantages the localized avantages of this offer
	 * @param locale the locale of the language
	 */
	public void setAvantages(String avantages, Locale locale);

	/**
	 * Sets the localized avantages of this offer in the language, and sets the default locale.
	 *
	 * @param avantages the localized avantages of this offer
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setAvantages(
		String avantages, Locale locale, Locale defaultLocale);

	public void setAvantagesCurrentLanguageId(String languageId);

	/**
	 * Sets the localized avantageses of this offer from the map of locales and localized avantageses.
	 *
	 * @param avantagesMap the locales and localized avantageses of this offer
	 */
	public void setAvantagesMap(Map<Locale, String> avantagesMap);

	/**
	 * Sets the localized avantageses of this offer from the map of locales and localized avantageses, and sets the default locale.
	 *
	 * @param avantagesMap the locales and localized avantageses of this offer
	 * @param defaultLocale the default locale
	 */
	public void setAvantagesMap(
		Map<Locale, String> avantagesMap, Locale defaultLocale);

	/**
	 * Returns the limit date of this offer.
	 *
	 * @return the limit date of this offer
	 */
	public Date getLimitDate();

	/**
	 * Sets the limit date of this offer.
	 *
	 * @param limitDate the limit date of this offer
	 */
	public void setLimitDate(Date limitDate);

	/**
	 * Returns the contact of this offer.
	 *
	 * @return the contact of this offer
	 */
	@AutoEscape
	public String getContact();

	/**
	 * Sets the contact of this offer.
	 *
	 * @param contact the contact of this offer
	 */
	public void setContact(String contact);

	/**
	 * Returns the emails of this offer.
	 *
	 * @return the emails of this offer
	 */
	@AutoEscape
	public String getEmails();

	/**
	 * Sets the emails of this offer.
	 *
	 * @param emails the emails of this offer
	 */
	public void setEmails(String emails);

	/**
	 * Returns the share linkedin of this offer.
	 *
	 * @return the share linkedin of this offer
	 */
	public boolean getShareLinkedin();

	/**
	 * Returns <code>true</code> if this offer is share linkedin.
	 *
	 * @return <code>true</code> if this offer is share linkedin; <code>false</code> otherwise
	 */
	public boolean isShareLinkedin();

	/**
	 * Sets whether this offer is share linkedin.
	 *
	 * @param shareLinkedin the share linkedin of this offer
	 */
	public void setShareLinkedin(boolean shareLinkedin);

	/**
	 * Returns the export totem of this offer.
	 *
	 * @return the export totem of this offer
	 */
	@AutoEscape
	public String getExportTotem();

	/**
	 * Sets the export totem of this offer.
	 *
	 * @param exportTotem the export totem of this offer
	 */
	public void setExportTotem(String exportTotem);

	/**
	 * Returns the publication start date of this offer.
	 *
	 * @return the publication start date of this offer
	 */
	public Date getPublicationStartDate();

	/**
	 * Sets the publication start date of this offer.
	 *
	 * @param publicationStartDate the publication start date of this offer
	 */
	public void setPublicationStartDate(Date publicationStartDate);

	/**
	 * Returns the publication end date of this offer.
	 *
	 * @return the publication end date of this offer
	 */
	public Date getPublicationEndDate();

	/**
	 * Sets the publication end date of this offer.
	 *
	 * @param publicationEndDate the publication end date of this offer
	 */
	public void setPublicationEndDate(Date publicationEndDate);

	/**
	 * Returns <code>true</code> if this offer is approved.
	 *
	 * @return <code>true</code> if this offer is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this offer is denied.
	 *
	 * @return <code>true</code> if this offer is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this offer is a draft.
	 *
	 * @return <code>true</code> if this offer is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this offer is expired.
	 *
	 * @return <code>true</code> if this offer is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this offer is inactive.
	 *
	 * @return <code>true</code> if this offer is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this offer is incomplete.
	 *
	 * @return <code>true</code> if this offer is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this offer is pending.
	 *
	 * @return <code>true</code> if this offer is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this offer is scheduled.
	 *
	 * @return <code>true</code> if this offer is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(eu.strasbourg.service.ejob.model.Offer offer);

	@Override
	public int hashCode();

	@Override
	public CacheModel<eu.strasbourg.service.ejob.model.Offer> toCacheModel();

	@Override
	public eu.strasbourg.service.ejob.model.Offer toEscapedModel();

	@Override
	public eu.strasbourg.service.ejob.model.Offer toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();

}