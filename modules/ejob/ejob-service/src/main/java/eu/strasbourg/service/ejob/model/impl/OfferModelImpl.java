/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.ejob.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import eu.strasbourg.service.ejob.model.Offer;
import eu.strasbourg.service.ejob.model.OfferModel;

import java.io.Serializable;
import java.lang.reflect.InvocationHandler;
import java.sql.Blob;
import java.sql.Types;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Offer service. Represents a row in the &quot;ejob_Offer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>OfferModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OfferImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OfferImpl
 * @generated
 */
@JSON(strict = true)
public class OfferModelImpl extends BaseModelImpl<Offer> implements OfferModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a offer model instance should use the <code>Offer</code> interface instead.
	 */
	public static final String TABLE_NAME = "ejob_Offer";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"offerId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"publicationId", Types.VARCHAR}, {"postNumber", Types.VARCHAR},
		{"jobCreationDescription", Types.VARCHAR},
		{"startDate", Types.TIMESTAMP}, {"permanentDescription", Types.VARCHAR},
		{"duration", Types.VARCHAR}, {"post", Types.VARCHAR},
		{"isFullTime", Types.BOOLEAN}, {"fullTimeDescription", Types.VARCHAR},
		{"introduction", Types.CLOB}, {"activities", Types.CLOB},
		{"profil", Types.CLOB}, {"conditions", Types.CLOB},
		{"avantages", Types.CLOB}, {"limitDate", Types.TIMESTAMP},
		{"contact", Types.VARCHAR}, {"emails", Types.VARCHAR},
		{"shareLinkedin", Types.BOOLEAN},
		{"publicationStartDate", Types.TIMESTAMP},
		{"publicationEndDate", Types.TIMESTAMP}, {"isExported", Types.INTEGER},
		{"emailSend", Types.INTEGER}, {"emailPartnerSent", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("offerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("publicationId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jobCreationDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("permanentDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("duration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("post", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isFullTime", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("fullTimeDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("introduction", Types.CLOB);
		TABLE_COLUMNS_MAP.put("activities", Types.CLOB);
		TABLE_COLUMNS_MAP.put("profil", Types.CLOB);
		TABLE_COLUMNS_MAP.put("conditions", Types.CLOB);
		TABLE_COLUMNS_MAP.put("avantages", Types.CLOB);
		TABLE_COLUMNS_MAP.put("limitDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("contact", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emails", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shareLinkedin", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("publicationStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("publicationEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("isExported", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("emailSend", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("emailPartnerSent", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ejob_Offer (uuid_ VARCHAR(75) null,offerId LONG not null primary key IDENTITY,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,publicationId VARCHAR(75) null,postNumber VARCHAR(75) null,jobCreationDescription STRING null,startDate DATE null,permanentDescription STRING null,duration STRING null,post STRING null,isFullTime BOOLEAN,fullTimeDescription STRING null,introduction TEXT null,activities TEXT null,profil TEXT null,conditions TEXT null,avantages TEXT null,limitDate DATE null,contact VARCHAR(75) null,emails VARCHAR(75) null,shareLinkedin BOOLEAN,publicationStartDate DATE null,publicationEndDate DATE null,isExported INTEGER,emailSend INTEGER,emailPartnerSent INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table ejob_Offer";

	public static final String ORDER_BY_JPQL = " ORDER BY offer.offerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ejob_Offer.offerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMAILPARTNERSENT_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ISEXPORTED_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PUBLICATIONID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PUBLICATIONSTARTDATE_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OFFERID_COLUMN_BITMASK = 128L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.ejob.service.util.ServiceProps.get(
			"lock.expiration.time.eu.strasbourg.service.ejob.model.Offer"));

	public OfferModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _offerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOfferId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _offerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Offer.class;
	}

	@Override
	public String getModelClassName() {
		return Offer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Offer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Offer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Offer, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Offer)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Offer, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Offer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Offer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Offer, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Offer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Offer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Offer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Offer, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Offer, Object>>();
		Map<String, BiConsumer<Offer, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Offer, ?>>();

		attributeGetterFunctions.put("uuid", Offer::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Offer, String>)Offer::setUuid);
		attributeGetterFunctions.put("offerId", Offer::getOfferId);
		attributeSetterBiConsumers.put(
			"offerId", (BiConsumer<Offer, Long>)Offer::setOfferId);
		attributeGetterFunctions.put("groupId", Offer::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Offer, Long>)Offer::setGroupId);
		attributeGetterFunctions.put("companyId", Offer::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Offer, Long>)Offer::setCompanyId);
		attributeGetterFunctions.put("userId", Offer::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Offer, Long>)Offer::setUserId);
		attributeGetterFunctions.put("userName", Offer::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Offer, String>)Offer::setUserName);
		attributeGetterFunctions.put("createDate", Offer::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Offer, Date>)Offer::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Offer::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Offer, Date>)Offer::setModifiedDate);
		attributeGetterFunctions.put("status", Offer::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Offer, Integer>)Offer::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", Offer::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<Offer, Long>)Offer::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", Offer::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<Offer, String>)Offer::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", Offer::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate", (BiConsumer<Offer, Date>)Offer::setStatusDate);
		attributeGetterFunctions.put("publicationId", Offer::getPublicationId);
		attributeSetterBiConsumers.put(
			"publicationId",
			(BiConsumer<Offer, String>)Offer::setPublicationId);
		attributeGetterFunctions.put("postNumber", Offer::getPostNumber);
		attributeSetterBiConsumers.put(
			"postNumber", (BiConsumer<Offer, String>)Offer::setPostNumber);
		attributeGetterFunctions.put(
			"jobCreationDescription", Offer::getJobCreationDescription);
		attributeSetterBiConsumers.put(
			"jobCreationDescription",
			(BiConsumer<Offer, String>)Offer::setJobCreationDescription);
		attributeGetterFunctions.put("startDate", Offer::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate", (BiConsumer<Offer, Date>)Offer::setStartDate);
		attributeGetterFunctions.put(
			"permanentDescription", Offer::getPermanentDescription);
		attributeSetterBiConsumers.put(
			"permanentDescription",
			(BiConsumer<Offer, String>)Offer::setPermanentDescription);
		attributeGetterFunctions.put("duration", Offer::getDuration);
		attributeSetterBiConsumers.put(
			"duration", (BiConsumer<Offer, String>)Offer::setDuration);
		attributeGetterFunctions.put("post", Offer::getPost);
		attributeSetterBiConsumers.put(
			"post", (BiConsumer<Offer, String>)Offer::setPost);
		attributeGetterFunctions.put("isFullTime", Offer::getIsFullTime);
		attributeSetterBiConsumers.put(
			"isFullTime", (BiConsumer<Offer, Boolean>)Offer::setIsFullTime);
		attributeGetterFunctions.put(
			"fullTimeDescription", Offer::getFullTimeDescription);
		attributeSetterBiConsumers.put(
			"fullTimeDescription",
			(BiConsumer<Offer, String>)Offer::setFullTimeDescription);
		attributeGetterFunctions.put("introduction", Offer::getIntroduction);
		attributeSetterBiConsumers.put(
			"introduction", (BiConsumer<Offer, String>)Offer::setIntroduction);
		attributeGetterFunctions.put("activities", Offer::getActivities);
		attributeSetterBiConsumers.put(
			"activities", (BiConsumer<Offer, String>)Offer::setActivities);
		attributeGetterFunctions.put("profil", Offer::getProfil);
		attributeSetterBiConsumers.put(
			"profil", (BiConsumer<Offer, String>)Offer::setProfil);
		attributeGetterFunctions.put("conditions", Offer::getConditions);
		attributeSetterBiConsumers.put(
			"conditions", (BiConsumer<Offer, String>)Offer::setConditions);
		attributeGetterFunctions.put("avantages", Offer::getAvantages);
		attributeSetterBiConsumers.put(
			"avantages", (BiConsumer<Offer, String>)Offer::setAvantages);
		attributeGetterFunctions.put("limitDate", Offer::getLimitDate);
		attributeSetterBiConsumers.put(
			"limitDate", (BiConsumer<Offer, Date>)Offer::setLimitDate);
		attributeGetterFunctions.put("contact", Offer::getContact);
		attributeSetterBiConsumers.put(
			"contact", (BiConsumer<Offer, String>)Offer::setContact);
		attributeGetterFunctions.put("emails", Offer::getEmails);
		attributeSetterBiConsumers.put(
			"emails", (BiConsumer<Offer, String>)Offer::setEmails);
		attributeGetterFunctions.put("shareLinkedin", Offer::getShareLinkedin);
		attributeSetterBiConsumers.put(
			"shareLinkedin",
			(BiConsumer<Offer, Boolean>)Offer::setShareLinkedin);
		attributeGetterFunctions.put(
			"publicationStartDate", Offer::getPublicationStartDate);
		attributeSetterBiConsumers.put(
			"publicationStartDate",
			(BiConsumer<Offer, Date>)Offer::setPublicationStartDate);
		attributeGetterFunctions.put(
			"publicationEndDate", Offer::getPublicationEndDate);
		attributeSetterBiConsumers.put(
			"publicationEndDate",
			(BiConsumer<Offer, Date>)Offer::setPublicationEndDate);
		attributeGetterFunctions.put("isExported", Offer::getIsExported);
		attributeSetterBiConsumers.put(
			"isExported", (BiConsumer<Offer, Integer>)Offer::setIsExported);
		attributeGetterFunctions.put("emailSend", Offer::getEmailSend);
		attributeSetterBiConsumers.put(
			"emailSend", (BiConsumer<Offer, Integer>)Offer::setEmailSend);
		attributeGetterFunctions.put(
			"emailPartnerSent", Offer::getEmailPartnerSent);
		attributeSetterBiConsumers.put(
			"emailPartnerSent",
			(BiConsumer<Offer, Integer>)Offer::setEmailPartnerSent);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getOfferId() {
		return _offerId;
	}

	@Override
	public void setOfferId(long offerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_offerId = offerId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getPublicationId() {
		if (_publicationId == null) {
			return "";
		}
		else {
			return _publicationId;
		}
	}

	@Override
	public void setPublicationId(String publicationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_publicationId = publicationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPublicationId() {
		return getColumnOriginalValue("publicationId");
	}

	@JSON
	@Override
	public String getPostNumber() {
		if (_postNumber == null) {
			return "";
		}
		else {
			return _postNumber;
		}
	}

	@Override
	public void setPostNumber(String postNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postNumber = postNumber;
	}

	@JSON
	@Override
	public String getJobCreationDescription() {
		if (_jobCreationDescription == null) {
			return "";
		}
		else {
			return _jobCreationDescription;
		}
	}

	@Override
	public String getJobCreationDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getJobCreationDescription(languageId);
	}

	@Override
	public String getJobCreationDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getJobCreationDescription(languageId, useDefault);
	}

	@Override
	public String getJobCreationDescription(String languageId) {
		return LocalizationUtil.getLocalization(
			getJobCreationDescription(), languageId);
	}

	@Override
	public String getJobCreationDescription(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getJobCreationDescription(), languageId, useDefault);
	}

	@Override
	public String getJobCreationDescriptionCurrentLanguageId() {
		return _jobCreationDescriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getJobCreationDescriptionCurrentValue() {
		Locale locale = getLocale(_jobCreationDescriptionCurrentLanguageId);

		return getJobCreationDescription(locale);
	}

	@Override
	public Map<Locale, String> getJobCreationDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getJobCreationDescription());
	}

	@Override
	public void setJobCreationDescription(String jobCreationDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jobCreationDescription = jobCreationDescription;
	}

	@Override
	public void setJobCreationDescription(
		String jobCreationDescription, Locale locale) {

		setJobCreationDescription(
			jobCreationDescription, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setJobCreationDescription(
		String jobCreationDescription, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(jobCreationDescription)) {
			setJobCreationDescription(
				LocalizationUtil.updateLocalization(
					getJobCreationDescription(), "JobCreationDescription",
					jobCreationDescription, languageId, defaultLanguageId));
		}
		else {
			setJobCreationDescription(
				LocalizationUtil.removeLocalization(
					getJobCreationDescription(), "JobCreationDescription",
					languageId));
		}
	}

	@Override
	public void setJobCreationDescriptionCurrentLanguageId(String languageId) {
		_jobCreationDescriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setJobCreationDescriptionMap(
		Map<Locale, String> jobCreationDescriptionMap) {

		setJobCreationDescriptionMap(
			jobCreationDescriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setJobCreationDescriptionMap(
		Map<Locale, String> jobCreationDescriptionMap, Locale defaultLocale) {

		if (jobCreationDescriptionMap == null) {
			return;
		}

		setJobCreationDescription(
			LocalizationUtil.updateLocalization(
				jobCreationDescriptionMap, getJobCreationDescription(),
				"JobCreationDescription",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@JSON
	@Override
	public String getPermanentDescription() {
		if (_permanentDescription == null) {
			return "";
		}
		else {
			return _permanentDescription;
		}
	}

	@Override
	public String getPermanentDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPermanentDescription(languageId);
	}

	@Override
	public String getPermanentDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPermanentDescription(languageId, useDefault);
	}

	@Override
	public String getPermanentDescription(String languageId) {
		return LocalizationUtil.getLocalization(
			getPermanentDescription(), languageId);
	}

	@Override
	public String getPermanentDescription(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getPermanentDescription(), languageId, useDefault);
	}

	@Override
	public String getPermanentDescriptionCurrentLanguageId() {
		return _permanentDescriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPermanentDescriptionCurrentValue() {
		Locale locale = getLocale(_permanentDescriptionCurrentLanguageId);

		return getPermanentDescription(locale);
	}

	@Override
	public Map<Locale, String> getPermanentDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getPermanentDescription());
	}

	@Override
	public void setPermanentDescription(String permanentDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permanentDescription = permanentDescription;
	}

	@Override
	public void setPermanentDescription(
		String permanentDescription, Locale locale) {

		setPermanentDescription(
			permanentDescription, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPermanentDescription(
		String permanentDescription, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(permanentDescription)) {
			setPermanentDescription(
				LocalizationUtil.updateLocalization(
					getPermanentDescription(), "PermanentDescription",
					permanentDescription, languageId, defaultLanguageId));
		}
		else {
			setPermanentDescription(
				LocalizationUtil.removeLocalization(
					getPermanentDescription(), "PermanentDescription",
					languageId));
		}
	}

	@Override
	public void setPermanentDescriptionCurrentLanguageId(String languageId) {
		_permanentDescriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setPermanentDescriptionMap(
		Map<Locale, String> permanentDescriptionMap) {

		setPermanentDescriptionMap(
			permanentDescriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPermanentDescriptionMap(
		Map<Locale, String> permanentDescriptionMap, Locale defaultLocale) {

		if (permanentDescriptionMap == null) {
			return;
		}

		setPermanentDescription(
			LocalizationUtil.updateLocalization(
				permanentDescriptionMap, getPermanentDescription(),
				"PermanentDescription",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDuration() {
		if (_duration == null) {
			return "";
		}
		else {
			return _duration;
		}
	}

	@Override
	public String getDuration(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDuration(languageId);
	}

	@Override
	public String getDuration(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDuration(languageId, useDefault);
	}

	@Override
	public String getDuration(String languageId) {
		return LocalizationUtil.getLocalization(getDuration(), languageId);
	}

	@Override
	public String getDuration(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDuration(), languageId, useDefault);
	}

	@Override
	public String getDurationCurrentLanguageId() {
		return _durationCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDurationCurrentValue() {
		Locale locale = getLocale(_durationCurrentLanguageId);

		return getDuration(locale);
	}

	@Override
	public Map<Locale, String> getDurationMap() {
		return LocalizationUtil.getLocalizationMap(getDuration());
	}

	@Override
	public void setDuration(String duration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_duration = duration;
	}

	@Override
	public void setDuration(String duration, Locale locale) {
		setDuration(duration, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDuration(
		String duration, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(duration)) {
			setDuration(
				LocalizationUtil.updateLocalization(
					getDuration(), "Duration", duration, languageId,
					defaultLanguageId));
		}
		else {
			setDuration(
				LocalizationUtil.removeLocalization(
					getDuration(), "Duration", languageId));
		}
	}

	@Override
	public void setDurationCurrentLanguageId(String languageId) {
		_durationCurrentLanguageId = languageId;
	}

	@Override
	public void setDurationMap(Map<Locale, String> durationMap) {
		setDurationMap(durationMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDurationMap(
		Map<Locale, String> durationMap, Locale defaultLocale) {

		if (durationMap == null) {
			return;
		}

		setDuration(
			LocalizationUtil.updateLocalization(
				durationMap, getDuration(), "Duration",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPost() {
		if (_post == null) {
			return "";
		}
		else {
			return _post;
		}
	}

	@Override
	public String getPost(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPost(languageId);
	}

	@Override
	public String getPost(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPost(languageId, useDefault);
	}

	@Override
	public String getPost(String languageId) {
		return LocalizationUtil.getLocalization(getPost(), languageId);
	}

	@Override
	public String getPost(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getPost(), languageId, useDefault);
	}

	@Override
	public String getPostCurrentLanguageId() {
		return _postCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPostCurrentValue() {
		Locale locale = getLocale(_postCurrentLanguageId);

		return getPost(locale);
	}

	@Override
	public Map<Locale, String> getPostMap() {
		return LocalizationUtil.getLocalizationMap(getPost());
	}

	@Override
	public void setPost(String post) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_post = post;
	}

	@Override
	public void setPost(String post, Locale locale) {
		setPost(post, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPost(String post, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(post)) {
			setPost(
				LocalizationUtil.updateLocalization(
					getPost(), "Post", post, languageId, defaultLanguageId));
		}
		else {
			setPost(
				LocalizationUtil.removeLocalization(
					getPost(), "Post", languageId));
		}
	}

	@Override
	public void setPostCurrentLanguageId(String languageId) {
		_postCurrentLanguageId = languageId;
	}

	@Override
	public void setPostMap(Map<Locale, String> postMap) {
		setPostMap(postMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPostMap(Map<Locale, String> postMap, Locale defaultLocale) {
		if (postMap == null) {
			return;
		}

		setPost(
			LocalizationUtil.updateLocalization(
				postMap, getPost(), "Post",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public boolean getIsFullTime() {
		return _isFullTime;
	}

	@JSON
	@Override
	public boolean isIsFullTime() {
		return _isFullTime;
	}

	@Override
	public void setIsFullTime(boolean isFullTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isFullTime = isFullTime;
	}

	@JSON
	@Override
	public String getFullTimeDescription() {
		if (_fullTimeDescription == null) {
			return "";
		}
		else {
			return _fullTimeDescription;
		}
	}

	@Override
	public String getFullTimeDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFullTimeDescription(languageId);
	}

	@Override
	public String getFullTimeDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFullTimeDescription(languageId, useDefault);
	}

	@Override
	public String getFullTimeDescription(String languageId) {
		return LocalizationUtil.getLocalization(
			getFullTimeDescription(), languageId);
	}

	@Override
	public String getFullTimeDescription(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getFullTimeDescription(), languageId, useDefault);
	}

	@Override
	public String getFullTimeDescriptionCurrentLanguageId() {
		return _fullTimeDescriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getFullTimeDescriptionCurrentValue() {
		Locale locale = getLocale(_fullTimeDescriptionCurrentLanguageId);

		return getFullTimeDescription(locale);
	}

	@Override
	public Map<Locale, String> getFullTimeDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getFullTimeDescription());
	}

	@Override
	public void setFullTimeDescription(String fullTimeDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fullTimeDescription = fullTimeDescription;
	}

	@Override
	public void setFullTimeDescription(
		String fullTimeDescription, Locale locale) {

		setFullTimeDescription(
			fullTimeDescription, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setFullTimeDescription(
		String fullTimeDescription, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(fullTimeDescription)) {
			setFullTimeDescription(
				LocalizationUtil.updateLocalization(
					getFullTimeDescription(), "FullTimeDescription",
					fullTimeDescription, languageId, defaultLanguageId));
		}
		else {
			setFullTimeDescription(
				LocalizationUtil.removeLocalization(
					getFullTimeDescription(), "FullTimeDescription",
					languageId));
		}
	}

	@Override
	public void setFullTimeDescriptionCurrentLanguageId(String languageId) {
		_fullTimeDescriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setFullTimeDescriptionMap(
		Map<Locale, String> fullTimeDescriptionMap) {

		setFullTimeDescriptionMap(
			fullTimeDescriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setFullTimeDescriptionMap(
		Map<Locale, String> fullTimeDescriptionMap, Locale defaultLocale) {

		if (fullTimeDescriptionMap == null) {
			return;
		}

		setFullTimeDescription(
			LocalizationUtil.updateLocalization(
				fullTimeDescriptionMap, getFullTimeDescription(),
				"FullTimeDescription", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getIntroduction() {
		if (_introduction == null) {
			return "";
		}
		else {
			return _introduction;
		}
	}

	@Override
	public String getIntroduction(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getIntroduction(languageId);
	}

	@Override
	public String getIntroduction(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getIntroduction(languageId, useDefault);
	}

	@Override
	public String getIntroduction(String languageId) {
		return LocalizationUtil.getLocalization(getIntroduction(), languageId);
	}

	@Override
	public String getIntroduction(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getIntroduction(), languageId, useDefault);
	}

	@Override
	public String getIntroductionCurrentLanguageId() {
		return _introductionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getIntroductionCurrentValue() {
		Locale locale = getLocale(_introductionCurrentLanguageId);

		return getIntroduction(locale);
	}

	@Override
	public Map<Locale, String> getIntroductionMap() {
		return LocalizationUtil.getLocalizationMap(getIntroduction());
	}

	@Override
	public void setIntroduction(String introduction) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_introduction = introduction;
	}

	@Override
	public void setIntroduction(String introduction, Locale locale) {
		setIntroduction(introduction, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setIntroduction(
		String introduction, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(introduction)) {
			setIntroduction(
				LocalizationUtil.updateLocalization(
					getIntroduction(), "Introduction", introduction, languageId,
					defaultLanguageId));
		}
		else {
			setIntroduction(
				LocalizationUtil.removeLocalization(
					getIntroduction(), "Introduction", languageId));
		}
	}

	@Override
	public void setIntroductionCurrentLanguageId(String languageId) {
		_introductionCurrentLanguageId = languageId;
	}

	@Override
	public void setIntroductionMap(Map<Locale, String> introductionMap) {
		setIntroductionMap(introductionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setIntroductionMap(
		Map<Locale, String> introductionMap, Locale defaultLocale) {

		if (introductionMap == null) {
			return;
		}

		setIntroduction(
			LocalizationUtil.updateLocalization(
				introductionMap, getIntroduction(), "Introduction",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getActivities() {
		if (_activities == null) {
			return "";
		}
		else {
			return _activities;
		}
	}

	@Override
	public String getActivities(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getActivities(languageId);
	}

	@Override
	public String getActivities(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getActivities(languageId, useDefault);
	}

	@Override
	public String getActivities(String languageId) {
		return LocalizationUtil.getLocalization(getActivities(), languageId);
	}

	@Override
	public String getActivities(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getActivities(), languageId, useDefault);
	}

	@Override
	public String getActivitiesCurrentLanguageId() {
		return _activitiesCurrentLanguageId;
	}

	@JSON
	@Override
	public String getActivitiesCurrentValue() {
		Locale locale = getLocale(_activitiesCurrentLanguageId);

		return getActivities(locale);
	}

	@Override
	public Map<Locale, String> getActivitiesMap() {
		return LocalizationUtil.getLocalizationMap(getActivities());
	}

	@Override
	public void setActivities(String activities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_activities = activities;
	}

	@Override
	public void setActivities(String activities, Locale locale) {
		setActivities(activities, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setActivities(
		String activities, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(activities)) {
			setActivities(
				LocalizationUtil.updateLocalization(
					getActivities(), "Activities", activities, languageId,
					defaultLanguageId));
		}
		else {
			setActivities(
				LocalizationUtil.removeLocalization(
					getActivities(), "Activities", languageId));
		}
	}

	@Override
	public void setActivitiesCurrentLanguageId(String languageId) {
		_activitiesCurrentLanguageId = languageId;
	}

	@Override
	public void setActivitiesMap(Map<Locale, String> activitiesMap) {
		setActivitiesMap(activitiesMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setActivitiesMap(
		Map<Locale, String> activitiesMap, Locale defaultLocale) {

		if (activitiesMap == null) {
			return;
		}

		setActivities(
			LocalizationUtil.updateLocalization(
				activitiesMap, getActivities(), "Activities",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getProfil() {
		if (_profil == null) {
			return "";
		}
		else {
			return _profil;
		}
	}

	@Override
	public String getProfil(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProfil(languageId);
	}

	@Override
	public String getProfil(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProfil(languageId, useDefault);
	}

	@Override
	public String getProfil(String languageId) {
		return LocalizationUtil.getLocalization(getProfil(), languageId);
	}

	@Override
	public String getProfil(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getProfil(), languageId, useDefault);
	}

	@Override
	public String getProfilCurrentLanguageId() {
		return _profilCurrentLanguageId;
	}

	@JSON
	@Override
	public String getProfilCurrentValue() {
		Locale locale = getLocale(_profilCurrentLanguageId);

		return getProfil(locale);
	}

	@Override
	public Map<Locale, String> getProfilMap() {
		return LocalizationUtil.getLocalizationMap(getProfil());
	}

	@Override
	public void setProfil(String profil) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_profil = profil;
	}

	@Override
	public void setProfil(String profil, Locale locale) {
		setProfil(profil, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setProfil(String profil, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(profil)) {
			setProfil(
				LocalizationUtil.updateLocalization(
					getProfil(), "Profil", profil, languageId,
					defaultLanguageId));
		}
		else {
			setProfil(
				LocalizationUtil.removeLocalization(
					getProfil(), "Profil", languageId));
		}
	}

	@Override
	public void setProfilCurrentLanguageId(String languageId) {
		_profilCurrentLanguageId = languageId;
	}

	@Override
	public void setProfilMap(Map<Locale, String> profilMap) {
		setProfilMap(profilMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setProfilMap(
		Map<Locale, String> profilMap, Locale defaultLocale) {

		if (profilMap == null) {
			return;
		}

		setProfil(
			LocalizationUtil.updateLocalization(
				profilMap, getProfil(), "Profil",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getConditions() {
		if (_conditions == null) {
			return "";
		}
		else {
			return _conditions;
		}
	}

	@Override
	public String getConditions(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getConditions(languageId);
	}

	@Override
	public String getConditions(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getConditions(languageId, useDefault);
	}

	@Override
	public String getConditions(String languageId) {
		return LocalizationUtil.getLocalization(getConditions(), languageId);
	}

	@Override
	public String getConditions(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getConditions(), languageId, useDefault);
	}

	@Override
	public String getConditionsCurrentLanguageId() {
		return _conditionsCurrentLanguageId;
	}

	@JSON
	@Override
	public String getConditionsCurrentValue() {
		Locale locale = getLocale(_conditionsCurrentLanguageId);

		return getConditions(locale);
	}

	@Override
	public Map<Locale, String> getConditionsMap() {
		return LocalizationUtil.getLocalizationMap(getConditions());
	}

	@Override
	public void setConditions(String conditions) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_conditions = conditions;
	}

	@Override
	public void setConditions(String conditions, Locale locale) {
		setConditions(conditions, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setConditions(
		String conditions, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(conditions)) {
			setConditions(
				LocalizationUtil.updateLocalization(
					getConditions(), "Conditions", conditions, languageId,
					defaultLanguageId));
		}
		else {
			setConditions(
				LocalizationUtil.removeLocalization(
					getConditions(), "Conditions", languageId));
		}
	}

	@Override
	public void setConditionsCurrentLanguageId(String languageId) {
		_conditionsCurrentLanguageId = languageId;
	}

	@Override
	public void setConditionsMap(Map<Locale, String> conditionsMap) {
		setConditionsMap(conditionsMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setConditionsMap(
		Map<Locale, String> conditionsMap, Locale defaultLocale) {

		if (conditionsMap == null) {
			return;
		}

		setConditions(
			LocalizationUtil.updateLocalization(
				conditionsMap, getConditions(), "Conditions",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getAvantages() {
		if (_avantages == null) {
			return "";
		}
		else {
			return _avantages;
		}
	}

	@Override
	public String getAvantages(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAvantages(languageId);
	}

	@Override
	public String getAvantages(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAvantages(languageId, useDefault);
	}

	@Override
	public String getAvantages(String languageId) {
		return LocalizationUtil.getLocalization(getAvantages(), languageId);
	}

	@Override
	public String getAvantages(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getAvantages(), languageId, useDefault);
	}

	@Override
	public String getAvantagesCurrentLanguageId() {
		return _avantagesCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAvantagesCurrentValue() {
		Locale locale = getLocale(_avantagesCurrentLanguageId);

		return getAvantages(locale);
	}

	@Override
	public Map<Locale, String> getAvantagesMap() {
		return LocalizationUtil.getLocalizationMap(getAvantages());
	}

	@Override
	public void setAvantages(String avantages) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_avantages = avantages;
	}

	@Override
	public void setAvantages(String avantages, Locale locale) {
		setAvantages(avantages, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAvantages(
		String avantages, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(avantages)) {
			setAvantages(
				LocalizationUtil.updateLocalization(
					getAvantages(), "Avantages", avantages, languageId,
					defaultLanguageId));
		}
		else {
			setAvantages(
				LocalizationUtil.removeLocalization(
					getAvantages(), "Avantages", languageId));
		}
	}

	@Override
	public void setAvantagesCurrentLanguageId(String languageId) {
		_avantagesCurrentLanguageId = languageId;
	}

	@Override
	public void setAvantagesMap(Map<Locale, String> avantagesMap) {
		setAvantagesMap(avantagesMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAvantagesMap(
		Map<Locale, String> avantagesMap, Locale defaultLocale) {

		if (avantagesMap == null) {
			return;
		}

		setAvantages(
			LocalizationUtil.updateLocalization(
				avantagesMap, getAvantages(), "Avantages",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Date getLimitDate() {
		return _limitDate;
	}

	@Override
	public void setLimitDate(Date limitDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_limitDate = limitDate;
	}

	@JSON
	@Override
	public String getContact() {
		if (_contact == null) {
			return "";
		}
		else {
			return _contact;
		}
	}

	@Override
	public void setContact(String contact) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contact = contact;
	}

	@JSON
	@Override
	public String getEmails() {
		if (_emails == null) {
			return "";
		}
		else {
			return _emails;
		}
	}

	@Override
	public void setEmails(String emails) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emails = emails;
	}

	@JSON
	@Override
	public boolean getShareLinkedin() {
		return _shareLinkedin;
	}

	@JSON
	@Override
	public boolean isShareLinkedin() {
		return _shareLinkedin;
	}

	@Override
	public void setShareLinkedin(boolean shareLinkedin) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shareLinkedin = shareLinkedin;
	}

	@JSON
	@Override
	public Date getPublicationStartDate() {
		return _publicationStartDate;
	}

	@Override
	public void setPublicationStartDate(Date publicationStartDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_publicationStartDate = publicationStartDate;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Date getOriginalPublicationStartDate() {
		return getColumnOriginalValue("publicationStartDate");
	}

	@JSON
	@Override
	public Date getPublicationEndDate() {
		return _publicationEndDate;
	}

	@Override
	public void setPublicationEndDate(Date publicationEndDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_publicationEndDate = publicationEndDate;
	}

	@JSON
	@Override
	public int getIsExported() {
		return _isExported;
	}

	@Override
	public void setIsExported(int isExported) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isExported = isExported;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalIsExported() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("isExported"));
	}

	@JSON
	@Override
	public int getEmailSend() {
		return _emailSend;
	}

	@Override
	public void setEmailSend(int emailSend) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailSend = emailSend;
	}

	@JSON
	@Override
	public int getEmailPartnerSent() {
		return _emailPartnerSent;
	}

	@Override
	public void setEmailPartnerSent(int emailPartnerSent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailPartnerSent = emailPartnerSent;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalEmailPartnerSent() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("emailPartnerSent"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Offer.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Offer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> jobCreationDescriptionMap =
			getJobCreationDescriptionMap();

		for (Map.Entry<Locale, String> entry :
				jobCreationDescriptionMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> permanentDescriptionMap =
			getPermanentDescriptionMap();

		for (Map.Entry<Locale, String> entry :
				permanentDescriptionMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> durationMap = getDurationMap();

		for (Map.Entry<Locale, String> entry : durationMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> postMap = getPostMap();

		for (Map.Entry<Locale, String> entry : postMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> fullTimeDescriptionMap =
			getFullTimeDescriptionMap();

		for (Map.Entry<Locale, String> entry :
				fullTimeDescriptionMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> introductionMap = getIntroductionMap();

		for (Map.Entry<Locale, String> entry : introductionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> activitiesMap = getActivitiesMap();

		for (Map.Entry<Locale, String> entry : activitiesMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> profilMap = getProfilMap();

		for (Map.Entry<Locale, String> entry : profilMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> conditionsMap = getConditionsMap();

		for (Map.Entry<Locale, String> entry : conditionsMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> avantagesMap = getAvantagesMap();

		for (Map.Entry<Locale, String> entry : avantagesMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getJobCreationDescription();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			Offer.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String jobCreationDescription = getJobCreationDescription(
			defaultLocale);

		if (Validator.isNull(jobCreationDescription)) {
			setJobCreationDescription(
				getJobCreationDescription(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setJobCreationDescription(
				getJobCreationDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String permanentDescription = getPermanentDescription(defaultLocale);

		if (Validator.isNull(permanentDescription)) {
			setPermanentDescription(
				getPermanentDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPermanentDescription(
				getPermanentDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String duration = getDuration(defaultLocale);

		if (Validator.isNull(duration)) {
			setDuration(getDuration(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDuration(
				getDuration(defaultLocale), defaultLocale, defaultLocale);
		}

		String post = getPost(defaultLocale);

		if (Validator.isNull(post)) {
			setPost(getPost(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPost(getPost(defaultLocale), defaultLocale, defaultLocale);
		}

		String fullTimeDescription = getFullTimeDescription(defaultLocale);

		if (Validator.isNull(fullTimeDescription)) {
			setFullTimeDescription(
				getFullTimeDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setFullTimeDescription(
				getFullTimeDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String introduction = getIntroduction(defaultLocale);

		if (Validator.isNull(introduction)) {
			setIntroduction(
				getIntroduction(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setIntroduction(
				getIntroduction(defaultLocale), defaultLocale, defaultLocale);
		}

		String activities = getActivities(defaultLocale);

		if (Validator.isNull(activities)) {
			setActivities(getActivities(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setActivities(
				getActivities(defaultLocale), defaultLocale, defaultLocale);
		}

		String profil = getProfil(defaultLocale);

		if (Validator.isNull(profil)) {
			setProfil(getProfil(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setProfil(getProfil(defaultLocale), defaultLocale, defaultLocale);
		}

		String conditions = getConditions(defaultLocale);

		if (Validator.isNull(conditions)) {
			setConditions(getConditions(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setConditions(
				getConditions(defaultLocale), defaultLocale, defaultLocale);
		}

		String avantages = getAvantages(defaultLocale);

		if (Validator.isNull(avantages)) {
			setAvantages(getAvantages(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setAvantages(
				getAvantages(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Offer toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Offer>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OfferImpl offerImpl = new OfferImpl();

		offerImpl.setUuid(getUuid());
		offerImpl.setOfferId(getOfferId());
		offerImpl.setGroupId(getGroupId());
		offerImpl.setCompanyId(getCompanyId());
		offerImpl.setUserId(getUserId());
		offerImpl.setUserName(getUserName());
		offerImpl.setCreateDate(getCreateDate());
		offerImpl.setModifiedDate(getModifiedDate());
		offerImpl.setStatus(getStatus());
		offerImpl.setStatusByUserId(getStatusByUserId());
		offerImpl.setStatusByUserName(getStatusByUserName());
		offerImpl.setStatusDate(getStatusDate());
		offerImpl.setPublicationId(getPublicationId());
		offerImpl.setPostNumber(getPostNumber());
		offerImpl.setJobCreationDescription(getJobCreationDescription());
		offerImpl.setStartDate(getStartDate());
		offerImpl.setPermanentDescription(getPermanentDescription());
		offerImpl.setDuration(getDuration());
		offerImpl.setPost(getPost());
		offerImpl.setIsFullTime(isIsFullTime());
		offerImpl.setFullTimeDescription(getFullTimeDescription());
		offerImpl.setIntroduction(getIntroduction());
		offerImpl.setActivities(getActivities());
		offerImpl.setProfil(getProfil());
		offerImpl.setConditions(getConditions());
		offerImpl.setAvantages(getAvantages());
		offerImpl.setLimitDate(getLimitDate());
		offerImpl.setContact(getContact());
		offerImpl.setEmails(getEmails());
		offerImpl.setShareLinkedin(isShareLinkedin());
		offerImpl.setPublicationStartDate(getPublicationStartDate());
		offerImpl.setPublicationEndDate(getPublicationEndDate());
		offerImpl.setIsExported(getIsExported());
		offerImpl.setEmailSend(getEmailSend());
		offerImpl.setEmailPartnerSent(getEmailPartnerSent());

		offerImpl.resetOriginalValues();

		return offerImpl;
	}

	@Override
	public Offer cloneWithOriginalValues() {
		OfferImpl offerImpl = new OfferImpl();

		offerImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		offerImpl.setOfferId(this.<Long>getColumnOriginalValue("offerId"));
		offerImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		offerImpl.setCompanyId(this.<Long>getColumnOriginalValue("companyId"));
		offerImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		offerImpl.setUserName(this.<String>getColumnOriginalValue("userName"));
		offerImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		offerImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		offerImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
		offerImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		offerImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		offerImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));
		offerImpl.setPublicationId(
			this.<String>getColumnOriginalValue("publicationId"));
		offerImpl.setPostNumber(
			this.<String>getColumnOriginalValue("postNumber"));
		offerImpl.setJobCreationDescription(
			this.<String>getColumnOriginalValue("jobCreationDescription"));
		offerImpl.setStartDate(this.<Date>getColumnOriginalValue("startDate"));
		offerImpl.setPermanentDescription(
			this.<String>getColumnOriginalValue("permanentDescription"));
		offerImpl.setDuration(this.<String>getColumnOriginalValue("duration"));
		offerImpl.setPost(this.<String>getColumnOriginalValue("post"));
		offerImpl.setIsFullTime(
			this.<Boolean>getColumnOriginalValue("isFullTime"));
		offerImpl.setFullTimeDescription(
			this.<String>getColumnOriginalValue("fullTimeDescription"));
		offerImpl.setIntroduction(
			this.<String>getColumnOriginalValue("introduction"));
		offerImpl.setActivities(
			this.<String>getColumnOriginalValue("activities"));
		offerImpl.setProfil(this.<String>getColumnOriginalValue("profil"));
		offerImpl.setConditions(
			this.<String>getColumnOriginalValue("conditions"));
		offerImpl.setAvantages(
			this.<String>getColumnOriginalValue("avantages"));
		offerImpl.setLimitDate(this.<Date>getColumnOriginalValue("limitDate"));
		offerImpl.setContact(this.<String>getColumnOriginalValue("contact"));
		offerImpl.setEmails(this.<String>getColumnOriginalValue("emails"));
		offerImpl.setShareLinkedin(
			this.<Boolean>getColumnOriginalValue("shareLinkedin"));
		offerImpl.setPublicationStartDate(
			this.<Date>getColumnOriginalValue("publicationStartDate"));
		offerImpl.setPublicationEndDate(
			this.<Date>getColumnOriginalValue("publicationEndDate"));
		offerImpl.setIsExported(
			this.<Integer>getColumnOriginalValue("isExported"));
		offerImpl.setEmailSend(
			this.<Integer>getColumnOriginalValue("emailSend"));
		offerImpl.setEmailPartnerSent(
			this.<Integer>getColumnOriginalValue("emailPartnerSent"));

		return offerImpl;
	}

	@Override
	public int compareTo(Offer offer) {
		long primaryKey = offer.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Offer)) {
			return false;
		}

		Offer offer = (Offer)object;

		long primaryKey = offer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Offer> toCacheModel() {
		OfferCacheModel offerCacheModel = new OfferCacheModel();

		offerCacheModel.uuid = getUuid();

		String uuid = offerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			offerCacheModel.uuid = null;
		}

		offerCacheModel.offerId = getOfferId();

		offerCacheModel.groupId = getGroupId();

		offerCacheModel.companyId = getCompanyId();

		offerCacheModel.userId = getUserId();

		offerCacheModel.userName = getUserName();

		String userName = offerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			offerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			offerCacheModel.createDate = createDate.getTime();
		}
		else {
			offerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			offerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			offerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		offerCacheModel.status = getStatus();

		offerCacheModel.statusByUserId = getStatusByUserId();

		offerCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = offerCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			offerCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			offerCacheModel.statusDate = statusDate.getTime();
		}
		else {
			offerCacheModel.statusDate = Long.MIN_VALUE;
		}

		offerCacheModel.publicationId = getPublicationId();

		String publicationId = offerCacheModel.publicationId;

		if ((publicationId != null) && (publicationId.length() == 0)) {
			offerCacheModel.publicationId = null;
		}

		offerCacheModel.postNumber = getPostNumber();

		String postNumber = offerCacheModel.postNumber;

		if ((postNumber != null) && (postNumber.length() == 0)) {
			offerCacheModel.postNumber = null;
		}

		offerCacheModel.jobCreationDescription = getJobCreationDescription();

		String jobCreationDescription = offerCacheModel.jobCreationDescription;

		if ((jobCreationDescription != null) &&
			(jobCreationDescription.length() == 0)) {

			offerCacheModel.jobCreationDescription = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			offerCacheModel.startDate = startDate.getTime();
		}
		else {
			offerCacheModel.startDate = Long.MIN_VALUE;
		}

		offerCacheModel.permanentDescription = getPermanentDescription();

		String permanentDescription = offerCacheModel.permanentDescription;

		if ((permanentDescription != null) &&
			(permanentDescription.length() == 0)) {

			offerCacheModel.permanentDescription = null;
		}

		offerCacheModel.duration = getDuration();

		String duration = offerCacheModel.duration;

		if ((duration != null) && (duration.length() == 0)) {
			offerCacheModel.duration = null;
		}

		offerCacheModel.post = getPost();

		String post = offerCacheModel.post;

		if ((post != null) && (post.length() == 0)) {
			offerCacheModel.post = null;
		}

		offerCacheModel.isFullTime = isIsFullTime();

		offerCacheModel.fullTimeDescription = getFullTimeDescription();

		String fullTimeDescription = offerCacheModel.fullTimeDescription;

		if ((fullTimeDescription != null) &&
			(fullTimeDescription.length() == 0)) {

			offerCacheModel.fullTimeDescription = null;
		}

		offerCacheModel.introduction = getIntroduction();

		String introduction = offerCacheModel.introduction;

		if ((introduction != null) && (introduction.length() == 0)) {
			offerCacheModel.introduction = null;
		}

		offerCacheModel.activities = getActivities();

		String activities = offerCacheModel.activities;

		if ((activities != null) && (activities.length() == 0)) {
			offerCacheModel.activities = null;
		}

		offerCacheModel.profil = getProfil();

		String profil = offerCacheModel.profil;

		if ((profil != null) && (profil.length() == 0)) {
			offerCacheModel.profil = null;
		}

		offerCacheModel.conditions = getConditions();

		String conditions = offerCacheModel.conditions;

		if ((conditions != null) && (conditions.length() == 0)) {
			offerCacheModel.conditions = null;
		}

		offerCacheModel.avantages = getAvantages();

		String avantages = offerCacheModel.avantages;

		if ((avantages != null) && (avantages.length() == 0)) {
			offerCacheModel.avantages = null;
		}

		Date limitDate = getLimitDate();

		if (limitDate != null) {
			offerCacheModel.limitDate = limitDate.getTime();
		}
		else {
			offerCacheModel.limitDate = Long.MIN_VALUE;
		}

		offerCacheModel.contact = getContact();

		String contact = offerCacheModel.contact;

		if ((contact != null) && (contact.length() == 0)) {
			offerCacheModel.contact = null;
		}

		offerCacheModel.emails = getEmails();

		String emails = offerCacheModel.emails;

		if ((emails != null) && (emails.length() == 0)) {
			offerCacheModel.emails = null;
		}

		offerCacheModel.shareLinkedin = isShareLinkedin();

		Date publicationStartDate = getPublicationStartDate();

		if (publicationStartDate != null) {
			offerCacheModel.publicationStartDate =
				publicationStartDate.getTime();
		}
		else {
			offerCacheModel.publicationStartDate = Long.MIN_VALUE;
		}

		Date publicationEndDate = getPublicationEndDate();

		if (publicationEndDate != null) {
			offerCacheModel.publicationEndDate = publicationEndDate.getTime();
		}
		else {
			offerCacheModel.publicationEndDate = Long.MIN_VALUE;
		}

		offerCacheModel.isExported = getIsExported();

		offerCacheModel.emailSend = getEmailSend();

		offerCacheModel.emailPartnerSent = getEmailPartnerSent();

		return offerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Offer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Offer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Offer, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Offer)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Offer>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Offer.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _offerId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _publicationId;
	private String _postNumber;
	private String _jobCreationDescription;
	private String _jobCreationDescriptionCurrentLanguageId;
	private Date _startDate;
	private String _permanentDescription;
	private String _permanentDescriptionCurrentLanguageId;
	private String _duration;
	private String _durationCurrentLanguageId;
	private String _post;
	private String _postCurrentLanguageId;
	private boolean _isFullTime;
	private String _fullTimeDescription;
	private String _fullTimeDescriptionCurrentLanguageId;
	private String _introduction;
	private String _introductionCurrentLanguageId;
	private String _activities;
	private String _activitiesCurrentLanguageId;
	private String _profil;
	private String _profilCurrentLanguageId;
	private String _conditions;
	private String _conditionsCurrentLanguageId;
	private String _avantages;
	private String _avantagesCurrentLanguageId;
	private Date _limitDate;
	private String _contact;
	private String _emails;
	private boolean _shareLinkedin;
	private Date _publicationStartDate;
	private Date _publicationEndDate;
	private int _isExported;
	private int _emailSend;
	private int _emailPartnerSent;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Offer, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Offer)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("offerId", _offerId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("publicationId", _publicationId);
		_columnOriginalValues.put("postNumber", _postNumber);
		_columnOriginalValues.put(
			"jobCreationDescription", _jobCreationDescription);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put(
			"permanentDescription", _permanentDescription);
		_columnOriginalValues.put("duration", _duration);
		_columnOriginalValues.put("post", _post);
		_columnOriginalValues.put("isFullTime", _isFullTime);
		_columnOriginalValues.put("fullTimeDescription", _fullTimeDescription);
		_columnOriginalValues.put("introduction", _introduction);
		_columnOriginalValues.put("activities", _activities);
		_columnOriginalValues.put("profil", _profil);
		_columnOriginalValues.put("conditions", _conditions);
		_columnOriginalValues.put("avantages", _avantages);
		_columnOriginalValues.put("limitDate", _limitDate);
		_columnOriginalValues.put("contact", _contact);
		_columnOriginalValues.put("emails", _emails);
		_columnOriginalValues.put("shareLinkedin", _shareLinkedin);
		_columnOriginalValues.put(
			"publicationStartDate", _publicationStartDate);
		_columnOriginalValues.put("publicationEndDate", _publicationEndDate);
		_columnOriginalValues.put("isExported", _isExported);
		_columnOriginalValues.put("emailSend", _emailSend);
		_columnOriginalValues.put("emailPartnerSent", _emailPartnerSent);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("offerId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("status", 256L);

		columnBitmasks.put("statusByUserId", 512L);

		columnBitmasks.put("statusByUserName", 1024L);

		columnBitmasks.put("statusDate", 2048L);

		columnBitmasks.put("publicationId", 4096L);

		columnBitmasks.put("postNumber", 8192L);

		columnBitmasks.put("jobCreationDescription", 16384L);

		columnBitmasks.put("startDate", 32768L);

		columnBitmasks.put("permanentDescription", 65536L);

		columnBitmasks.put("duration", 131072L);

		columnBitmasks.put("post", 262144L);

		columnBitmasks.put("isFullTime", 524288L);

		columnBitmasks.put("fullTimeDescription", 1048576L);

		columnBitmasks.put("introduction", 2097152L);

		columnBitmasks.put("activities", 4194304L);

		columnBitmasks.put("profil", 8388608L);

		columnBitmasks.put("conditions", 16777216L);

		columnBitmasks.put("avantages", 33554432L);

		columnBitmasks.put("limitDate", 67108864L);

		columnBitmasks.put("contact", 134217728L);

		columnBitmasks.put("emails", 268435456L);

		columnBitmasks.put("shareLinkedin", 536870912L);

		columnBitmasks.put("publicationStartDate", 1073741824L);

		columnBitmasks.put("publicationEndDate", 2147483648L);

		columnBitmasks.put("isExported", 4294967296L);

		columnBitmasks.put("emailSend", 8589934592L);

		columnBitmasks.put("emailPartnerSent", 17179869184L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Offer _escapedModel;

}