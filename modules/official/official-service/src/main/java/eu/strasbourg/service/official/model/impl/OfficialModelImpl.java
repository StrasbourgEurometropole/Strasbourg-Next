/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.official.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.official.model.Official;
import eu.strasbourg.service.official.model.OfficialModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Official service. Represents a row in the &quot;official_Official&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>OfficialModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OfficialImpl}.
 * </p>
 *
 * @author AngeliqueZUNINO
 * @see OfficialImpl
 * @generated
 */
@JSON(strict = true)
public class OfficialModelImpl
	extends BaseModelImpl<Official> implements OfficialModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a official model instance should use the <code>Official</code> interface instead.
	 */
	public static final String TABLE_NAME = "official_Official";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"officialId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"lastPublishDate", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}, {"gender", Types.INTEGER},
		{"lastName", Types.VARCHAR}, {"firstName", Types.VARCHAR},
		{"thematicDelegation", Types.CLOB}, {"missions", Types.CLOB},
		{"wasMinister", Types.BOOLEAN}, {"contact", Types.CLOB},
		{"orderDeputyMayor", Types.INTEGER},
		{"orderVicePresident", Types.INTEGER}, {"listeContact", Types.VARCHAR},
		{"resumeFonction", Types.VARCHAR}, {"imageId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("officialId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("gender", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thematicDelegation", Types.CLOB);
		TABLE_COLUMNS_MAP.put("missions", Types.CLOB);
		TABLE_COLUMNS_MAP.put("wasMinister", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("contact", Types.CLOB);
		TABLE_COLUMNS_MAP.put("orderDeputyMayor", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("orderVicePresident", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("listeContact", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("resumeFonction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table official_Official (uuid_ VARCHAR(75) null,officialId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,lastPublishDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,gender INTEGER,lastName VARCHAR(75) null,firstName VARCHAR(75) null,thematicDelegation TEXT null,missions TEXT null,wasMinister BOOLEAN,contact TEXT null,orderDeputyMayor INTEGER,orderVicePresident INTEGER,listeContact VARCHAR(2000) null,resumeFonction STRING null,imageId LONG)";

	public static final String TABLE_SQL_DROP = "drop table official_Official";

	public static final String ORDER_BY_JPQL =
		" ORDER BY official.modifiedDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY official_Official.modifiedDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 8L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.official.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.official.model.Official"));

	public OfficialModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _officialId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOfficialId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _officialId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Official.class;
	}

	@Override
	public String getModelClassName() {
		return Official.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Official, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Official, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Official, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Official)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Official, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Official, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Official)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Official, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Official, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Official, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Official, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Official, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Official, Object>>();
		Map<String, BiConsumer<Official, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Official, ?>>();

		attributeGetterFunctions.put("uuid", Official::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Official, String>)Official::setUuid);
		attributeGetterFunctions.put("officialId", Official::getOfficialId);
		attributeSetterBiConsumers.put(
			"officialId", (BiConsumer<Official, Long>)Official::setOfficialId);
		attributeGetterFunctions.put("groupId", Official::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Official, Long>)Official::setGroupId);
		attributeGetterFunctions.put("companyId", Official::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Official, Long>)Official::setCompanyId);
		attributeGetterFunctions.put("userId", Official::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Official, Long>)Official::setUserId);
		attributeGetterFunctions.put("userName", Official::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Official, String>)Official::setUserName);
		attributeGetterFunctions.put("createDate", Official::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Official, Date>)Official::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Official::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Official, Date>)Official::setModifiedDate);
		attributeGetterFunctions.put(
			"lastPublishDate", Official::getLastPublishDate);
		attributeSetterBiConsumers.put(
			"lastPublishDate",
			(BiConsumer<Official, Date>)Official::setLastPublishDate);
		attributeGetterFunctions.put("status", Official::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Official, Integer>)Official::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", Official::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<Official, Long>)Official::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", Official::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<Official, String>)Official::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", Official::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate", (BiConsumer<Official, Date>)Official::setStatusDate);
		attributeGetterFunctions.put("gender", Official::getGender);
		attributeSetterBiConsumers.put(
			"gender", (BiConsumer<Official, Integer>)Official::setGender);
		attributeGetterFunctions.put("lastName", Official::getLastName);
		attributeSetterBiConsumers.put(
			"lastName", (BiConsumer<Official, String>)Official::setLastName);
		attributeGetterFunctions.put("firstName", Official::getFirstName);
		attributeSetterBiConsumers.put(
			"firstName", (BiConsumer<Official, String>)Official::setFirstName);
		attributeGetterFunctions.put(
			"thematicDelegation", Official::getThematicDelegation);
		attributeSetterBiConsumers.put(
			"thematicDelegation",
			(BiConsumer<Official, String>)Official::setThematicDelegation);
		attributeGetterFunctions.put("missions", Official::getMissions);
		attributeSetterBiConsumers.put(
			"missions", (BiConsumer<Official, String>)Official::setMissions);
		attributeGetterFunctions.put("wasMinister", Official::getWasMinister);
		attributeSetterBiConsumers.put(
			"wasMinister",
			(BiConsumer<Official, Boolean>)Official::setWasMinister);
		attributeGetterFunctions.put("contact", Official::getContact);
		attributeSetterBiConsumers.put(
			"contact", (BiConsumer<Official, String>)Official::setContact);
		attributeGetterFunctions.put(
			"orderDeputyMayor", Official::getOrderDeputyMayor);
		attributeSetterBiConsumers.put(
			"orderDeputyMayor",
			(BiConsumer<Official, Integer>)Official::setOrderDeputyMayor);
		attributeGetterFunctions.put(
			"orderVicePresident", Official::getOrderVicePresident);
		attributeSetterBiConsumers.put(
			"orderVicePresident",
			(BiConsumer<Official, Integer>)Official::setOrderVicePresident);
		attributeGetterFunctions.put("listeContact", Official::getListeContact);
		attributeSetterBiConsumers.put(
			"listeContact",
			(BiConsumer<Official, String>)Official::setListeContact);
		attributeGetterFunctions.put(
			"resumeFonction", Official::getResumeFonction);
		attributeSetterBiConsumers.put(
			"resumeFonction",
			(BiConsumer<Official, String>)Official::setResumeFonction);
		attributeGetterFunctions.put("imageId", Official::getImageId);
		attributeSetterBiConsumers.put(
			"imageId", (BiConsumer<Official, Long>)Official::setImageId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getOfficialId() {
		return _officialId;
	}

	@Override
	public void setOfficialId(long officialId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_officialId = officialId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastPublishDate = lastPublishDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public int getGender() {
		return _gender;
	}

	@Override
	public void setGender(int gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	@JSON
	@Override
	public String getThematicDelegation() {
		if (_thematicDelegation == null) {
			return "";
		}
		else {
			return _thematicDelegation;
		}
	}

	@Override
	public String getThematicDelegation(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getThematicDelegation(languageId);
	}

	@Override
	public String getThematicDelegation(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getThematicDelegation(languageId, useDefault);
	}

	@Override
	public String getThematicDelegation(String languageId) {
		return LocalizationUtil.getLocalization(
			getThematicDelegation(), languageId);
	}

	@Override
	public String getThematicDelegation(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getThematicDelegation(), languageId, useDefault);
	}

	@Override
	public String getThematicDelegationCurrentLanguageId() {
		return _thematicDelegationCurrentLanguageId;
	}

	@JSON
	@Override
	public String getThematicDelegationCurrentValue() {
		Locale locale = getLocale(_thematicDelegationCurrentLanguageId);

		return getThematicDelegation(locale);
	}

	@Override
	public Map<Locale, String> getThematicDelegationMap() {
		return LocalizationUtil.getLocalizationMap(getThematicDelegation());
	}

	@Override
	public void setThematicDelegation(String thematicDelegation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_thematicDelegation = thematicDelegation;
	}

	@Override
	public void setThematicDelegation(
		String thematicDelegation, Locale locale) {

		setThematicDelegation(
			thematicDelegation, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setThematicDelegation(
		String thematicDelegation, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(thematicDelegation)) {
			setThematicDelegation(
				LocalizationUtil.updateLocalization(
					getThematicDelegation(), "ThematicDelegation",
					thematicDelegation, languageId, defaultLanguageId));
		}
		else {
			setThematicDelegation(
				LocalizationUtil.removeLocalization(
					getThematicDelegation(), "ThematicDelegation", languageId));
		}
	}

	@Override
	public void setThematicDelegationCurrentLanguageId(String languageId) {
		_thematicDelegationCurrentLanguageId = languageId;
	}

	@Override
	public void setThematicDelegationMap(
		Map<Locale, String> thematicDelegationMap) {

		setThematicDelegationMap(
			thematicDelegationMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setThematicDelegationMap(
		Map<Locale, String> thematicDelegationMap, Locale defaultLocale) {

		if (thematicDelegationMap == null) {
			return;
		}

		setThematicDelegation(
			LocalizationUtil.updateLocalization(
				thematicDelegationMap, getThematicDelegation(),
				"ThematicDelegation", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getMissions() {
		if (_missions == null) {
			return "";
		}
		else {
			return _missions;
		}
	}

	@Override
	public String getMissions(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getMissions(languageId);
	}

	@Override
	public String getMissions(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getMissions(languageId, useDefault);
	}

	@Override
	public String getMissions(String languageId) {
		return LocalizationUtil.getLocalization(getMissions(), languageId);
	}

	@Override
	public String getMissions(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getMissions(), languageId, useDefault);
	}

	@Override
	public String getMissionsCurrentLanguageId() {
		return _missionsCurrentLanguageId;
	}

	@JSON
	@Override
	public String getMissionsCurrentValue() {
		Locale locale = getLocale(_missionsCurrentLanguageId);

		return getMissions(locale);
	}

	@Override
	public Map<Locale, String> getMissionsMap() {
		return LocalizationUtil.getLocalizationMap(getMissions());
	}

	@Override
	public void setMissions(String missions) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_missions = missions;
	}

	@Override
	public void setMissions(String missions, Locale locale) {
		setMissions(missions, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setMissions(
		String missions, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(missions)) {
			setMissions(
				LocalizationUtil.updateLocalization(
					getMissions(), "Missions", missions, languageId,
					defaultLanguageId));
		}
		else {
			setMissions(
				LocalizationUtil.removeLocalization(
					getMissions(), "Missions", languageId));
		}
	}

	@Override
	public void setMissionsCurrentLanguageId(String languageId) {
		_missionsCurrentLanguageId = languageId;
	}

	@Override
	public void setMissionsMap(Map<Locale, String> missionsMap) {
		setMissionsMap(missionsMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setMissionsMap(
		Map<Locale, String> missionsMap, Locale defaultLocale) {

		if (missionsMap == null) {
			return;
		}

		setMissions(
			LocalizationUtil.updateLocalization(
				missionsMap, getMissions(), "Missions",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public boolean getWasMinister() {
		return _wasMinister;
	}

	@JSON
	@Override
	public boolean isWasMinister() {
		return _wasMinister;
	}

	@Override
	public void setWasMinister(boolean wasMinister) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_wasMinister = wasMinister;
	}

	@JSON
	@Override
	public String getContact() {
		if (_contact == null) {
			return "";
		}
		else {
			return _contact;
		}
	}

	@Override
	public String getContact(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContact(languageId);
	}

	@Override
	public String getContact(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContact(languageId, useDefault);
	}

	@Override
	public String getContact(String languageId) {
		return LocalizationUtil.getLocalization(getContact(), languageId);
	}

	@Override
	public String getContact(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getContact(), languageId, useDefault);
	}

	@Override
	public String getContactCurrentLanguageId() {
		return _contactCurrentLanguageId;
	}

	@JSON
	@Override
	public String getContactCurrentValue() {
		Locale locale = getLocale(_contactCurrentLanguageId);

		return getContact(locale);
	}

	@Override
	public Map<Locale, String> getContactMap() {
		return LocalizationUtil.getLocalizationMap(getContact());
	}

	@Override
	public void setContact(String contact) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contact = contact;
	}

	@Override
	public void setContact(String contact, Locale locale) {
		setContact(contact, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setContact(
		String contact, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(contact)) {
			setContact(
				LocalizationUtil.updateLocalization(
					getContact(), "Contact", contact, languageId,
					defaultLanguageId));
		}
		else {
			setContact(
				LocalizationUtil.removeLocalization(
					getContact(), "Contact", languageId));
		}
	}

	@Override
	public void setContactCurrentLanguageId(String languageId) {
		_contactCurrentLanguageId = languageId;
	}

	@Override
	public void setContactMap(Map<Locale, String> contactMap) {
		setContactMap(contactMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setContactMap(
		Map<Locale, String> contactMap, Locale defaultLocale) {

		if (contactMap == null) {
			return;
		}

		setContact(
			LocalizationUtil.updateLocalization(
				contactMap, getContact(), "Contact",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public int getOrderDeputyMayor() {
		return _orderDeputyMayor;
	}

	@Override
	public void setOrderDeputyMayor(int orderDeputyMayor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orderDeputyMayor = orderDeputyMayor;
	}

	@JSON
	@Override
	public int getOrderVicePresident() {
		return _orderVicePresident;
	}

	@Override
	public void setOrderVicePresident(int orderVicePresident) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orderVicePresident = orderVicePresident;
	}

	@JSON
	@Override
	public String getListeContact() {
		if (_listeContact == null) {
			return "";
		}
		else {
			return _listeContact;
		}
	}

	@Override
	public void setListeContact(String listeContact) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_listeContact = listeContact;
	}

	@JSON
	@Override
	public String getResumeFonction() {
		if (_resumeFonction == null) {
			return "";
		}
		else {
			return _resumeFonction;
		}
	}

	@Override
	public String getResumeFonction(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getResumeFonction(languageId);
	}

	@Override
	public String getResumeFonction(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getResumeFonction(languageId, useDefault);
	}

	@Override
	public String getResumeFonction(String languageId) {
		return LocalizationUtil.getLocalization(
			getResumeFonction(), languageId);
	}

	@Override
	public String getResumeFonction(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getResumeFonction(), languageId, useDefault);
	}

	@Override
	public String getResumeFonctionCurrentLanguageId() {
		return _resumeFonctionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getResumeFonctionCurrentValue() {
		Locale locale = getLocale(_resumeFonctionCurrentLanguageId);

		return getResumeFonction(locale);
	}

	@Override
	public Map<Locale, String> getResumeFonctionMap() {
		return LocalizationUtil.getLocalizationMap(getResumeFonction());
	}

	@Override
	public void setResumeFonction(String resumeFonction) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_resumeFonction = resumeFonction;
	}

	@Override
	public void setResumeFonction(String resumeFonction, Locale locale) {
		setResumeFonction(resumeFonction, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setResumeFonction(
		String resumeFonction, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(resumeFonction)) {
			setResumeFonction(
				LocalizationUtil.updateLocalization(
					getResumeFonction(), "ResumeFonction", resumeFonction,
					languageId, defaultLanguageId));
		}
		else {
			setResumeFonction(
				LocalizationUtil.removeLocalization(
					getResumeFonction(), "ResumeFonction", languageId));
		}
	}

	@Override
	public void setResumeFonctionCurrentLanguageId(String languageId) {
		_resumeFonctionCurrentLanguageId = languageId;
	}

	@Override
	public void setResumeFonctionMap(Map<Locale, String> resumeFonctionMap) {
		setResumeFonctionMap(resumeFonctionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setResumeFonctionMap(
		Map<Locale, String> resumeFonctionMap, Locale defaultLocale) {

		if (resumeFonctionMap == null) {
			return;
		}

		setResumeFonction(
			LocalizationUtil.updateLocalization(
				resumeFonctionMap, getResumeFonction(), "ResumeFonction",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(Long imageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_imageId = imageId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Official.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Official.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> thematicDelegationMap = getThematicDelegationMap();

		for (Map.Entry<Locale, String> entry :
				thematicDelegationMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> missionsMap = getMissionsMap();

		for (Map.Entry<Locale, String> entry : missionsMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> contactMap = getContactMap();

		for (Map.Entry<Locale, String> entry : contactMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> resumeFonctionMap = getResumeFonctionMap();

		for (Map.Entry<Locale, String> entry : resumeFonctionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getThematicDelegation();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			Official.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String thematicDelegation = getThematicDelegation(defaultLocale);

		if (Validator.isNull(thematicDelegation)) {
			setThematicDelegation(
				getThematicDelegation(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setThematicDelegation(
				getThematicDelegation(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String missions = getMissions(defaultLocale);

		if (Validator.isNull(missions)) {
			setMissions(getMissions(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setMissions(
				getMissions(defaultLocale), defaultLocale, defaultLocale);
		}

		String contact = getContact(defaultLocale);

		if (Validator.isNull(contact)) {
			setContact(getContact(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setContact(getContact(defaultLocale), defaultLocale, defaultLocale);
		}

		String resumeFonction = getResumeFonction(defaultLocale);

		if (Validator.isNull(resumeFonction)) {
			setResumeFonction(
				getResumeFonction(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setResumeFonction(
				getResumeFonction(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Official toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Official>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OfficialImpl officialImpl = new OfficialImpl();

		officialImpl.setUuid(getUuid());
		officialImpl.setOfficialId(getOfficialId());
		officialImpl.setGroupId(getGroupId());
		officialImpl.setCompanyId(getCompanyId());
		officialImpl.setUserId(getUserId());
		officialImpl.setUserName(getUserName());
		officialImpl.setCreateDate(getCreateDate());
		officialImpl.setModifiedDate(getModifiedDate());
		officialImpl.setLastPublishDate(getLastPublishDate());
		officialImpl.setStatus(getStatus());
		officialImpl.setStatusByUserId(getStatusByUserId());
		officialImpl.setStatusByUserName(getStatusByUserName());
		officialImpl.setStatusDate(getStatusDate());
		officialImpl.setGender(getGender());
		officialImpl.setLastName(getLastName());
		officialImpl.setFirstName(getFirstName());
		officialImpl.setThematicDelegation(getThematicDelegation());
		officialImpl.setMissions(getMissions());
		officialImpl.setWasMinister(isWasMinister());
		officialImpl.setContact(getContact());
		officialImpl.setOrderDeputyMayor(getOrderDeputyMayor());
		officialImpl.setOrderVicePresident(getOrderVicePresident());
		officialImpl.setListeContact(getListeContact());
		officialImpl.setResumeFonction(getResumeFonction());
		officialImpl.setImageId(getImageId());

		officialImpl.resetOriginalValues();

		return officialImpl;
	}

	@Override
	public Official cloneWithOriginalValues() {
		OfficialImpl officialImpl = new OfficialImpl();

		officialImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		officialImpl.setOfficialId(
			this.<Long>getColumnOriginalValue("officialId"));
		officialImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		officialImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		officialImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		officialImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		officialImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		officialImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		officialImpl.setLastPublishDate(
			this.<Date>getColumnOriginalValue("lastPublishDate"));
		officialImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
		officialImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		officialImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		officialImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));
		officialImpl.setGender(this.<Integer>getColumnOriginalValue("gender"));
		officialImpl.setLastName(
			this.<String>getColumnOriginalValue("lastName"));
		officialImpl.setFirstName(
			this.<String>getColumnOriginalValue("firstName"));
		officialImpl.setThematicDelegation(
			this.<String>getColumnOriginalValue("thematicDelegation"));
		officialImpl.setMissions(
			this.<String>getColumnOriginalValue("missions"));
		officialImpl.setWasMinister(
			this.<Boolean>getColumnOriginalValue("wasMinister"));
		officialImpl.setContact(this.<String>getColumnOriginalValue("contact"));
		officialImpl.setOrderDeputyMayor(
			this.<Integer>getColumnOriginalValue("orderDeputyMayor"));
		officialImpl.setOrderVicePresident(
			this.<Integer>getColumnOriginalValue("orderVicePresident"));
		officialImpl.setListeContact(
			this.<String>getColumnOriginalValue("listeContact"));
		officialImpl.setResumeFonction(
			this.<String>getColumnOriginalValue("resumeFonction"));
		officialImpl.setImageId(this.<Long>getColumnOriginalValue("imageId"));

		return officialImpl;
	}

	@Override
	public int compareTo(Official official) {
		int value = 0;

		value = DateUtil.compareTo(
			getModifiedDate(), official.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Official)) {
			return false;
		}

		Official official = (Official)object;

		long primaryKey = official.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Official> toCacheModel() {
		OfficialCacheModel officialCacheModel = new OfficialCacheModel();

		officialCacheModel.uuid = getUuid();

		String uuid = officialCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			officialCacheModel.uuid = null;
		}

		officialCacheModel.officialId = getOfficialId();

		officialCacheModel.groupId = getGroupId();

		officialCacheModel.companyId = getCompanyId();

		officialCacheModel.userId = getUserId();

		officialCacheModel.userName = getUserName();

		String userName = officialCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			officialCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			officialCacheModel.createDate = createDate.getTime();
		}
		else {
			officialCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			officialCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			officialCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			officialCacheModel.lastPublishDate = lastPublishDate.getTime();
		}
		else {
			officialCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		officialCacheModel.status = getStatus();

		officialCacheModel.statusByUserId = getStatusByUserId();

		officialCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = officialCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			officialCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			officialCacheModel.statusDate = statusDate.getTime();
		}
		else {
			officialCacheModel.statusDate = Long.MIN_VALUE;
		}

		officialCacheModel.gender = getGender();

		officialCacheModel.lastName = getLastName();

		String lastName = officialCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			officialCacheModel.lastName = null;
		}

		officialCacheModel.firstName = getFirstName();

		String firstName = officialCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			officialCacheModel.firstName = null;
		}

		officialCacheModel.thematicDelegation = getThematicDelegation();

		String thematicDelegation = officialCacheModel.thematicDelegation;

		if ((thematicDelegation != null) &&
			(thematicDelegation.length() == 0)) {

			officialCacheModel.thematicDelegation = null;
		}

		officialCacheModel.missions = getMissions();

		String missions = officialCacheModel.missions;

		if ((missions != null) && (missions.length() == 0)) {
			officialCacheModel.missions = null;
		}

		officialCacheModel.wasMinister = isWasMinister();

		officialCacheModel.contact = getContact();

		String contact = officialCacheModel.contact;

		if ((contact != null) && (contact.length() == 0)) {
			officialCacheModel.contact = null;
		}

		officialCacheModel.orderDeputyMayor = getOrderDeputyMayor();

		officialCacheModel.orderVicePresident = getOrderVicePresident();

		officialCacheModel.listeContact = getListeContact();

		String listeContact = officialCacheModel.listeContact;

		if ((listeContact != null) && (listeContact.length() == 0)) {
			officialCacheModel.listeContact = null;
		}

		officialCacheModel.resumeFonction = getResumeFonction();

		String resumeFonction = officialCacheModel.resumeFonction;

		if ((resumeFonction != null) && (resumeFonction.length() == 0)) {
			officialCacheModel.resumeFonction = null;
		}

		Long imageId = getImageId();

		if (imageId != null) {
			officialCacheModel.imageId = imageId;
		}

		return officialCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Official, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Official, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Official, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Official)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Official>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Official.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _officialId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _lastPublishDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private int _gender;
	private String _lastName;
	private String _firstName;
	private String _thematicDelegation;
	private String _thematicDelegationCurrentLanguageId;
	private String _missions;
	private String _missionsCurrentLanguageId;
	private boolean _wasMinister;
	private String _contact;
	private String _contactCurrentLanguageId;
	private int _orderDeputyMayor;
	private int _orderVicePresident;
	private String _listeContact;
	private String _resumeFonction;
	private String _resumeFonctionCurrentLanguageId;
	private Long _imageId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Official, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Official)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("officialId", _officialId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("lastPublishDate", _lastPublishDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("lastName", _lastName);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("thematicDelegation", _thematicDelegation);
		_columnOriginalValues.put("missions", _missions);
		_columnOriginalValues.put("wasMinister", _wasMinister);
		_columnOriginalValues.put("contact", _contact);
		_columnOriginalValues.put("orderDeputyMayor", _orderDeputyMayor);
		_columnOriginalValues.put("orderVicePresident", _orderVicePresident);
		_columnOriginalValues.put("listeContact", _listeContact);
		_columnOriginalValues.put("resumeFonction", _resumeFonction);
		_columnOriginalValues.put("imageId", _imageId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("officialId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("lastPublishDate", 256L);

		columnBitmasks.put("status", 512L);

		columnBitmasks.put("statusByUserId", 1024L);

		columnBitmasks.put("statusByUserName", 2048L);

		columnBitmasks.put("statusDate", 4096L);

		columnBitmasks.put("gender", 8192L);

		columnBitmasks.put("lastName", 16384L);

		columnBitmasks.put("firstName", 32768L);

		columnBitmasks.put("thematicDelegation", 65536L);

		columnBitmasks.put("missions", 131072L);

		columnBitmasks.put("wasMinister", 262144L);

		columnBitmasks.put("contact", 524288L);

		columnBitmasks.put("orderDeputyMayor", 1048576L);

		columnBitmasks.put("orderVicePresident", 2097152L);

		columnBitmasks.put("listeContact", 4194304L);

		columnBitmasks.put("resumeFonction", 8388608L);

		columnBitmasks.put("imageId", 16777216L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Official _escapedModel;

}