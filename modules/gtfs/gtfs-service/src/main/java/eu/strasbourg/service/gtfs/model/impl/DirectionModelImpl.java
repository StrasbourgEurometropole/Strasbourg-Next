/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.gtfs.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import eu.strasbourg.service.gtfs.model.Direction;
import eu.strasbourg.service.gtfs.model.DirectionModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Direction service. Represents a row in the &quot;gtfs_Direction&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>DirectionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DirectionImpl}.
 * </p>
 *
 * @author Cedric Henry
 * @see DirectionImpl
 * @generated
 */
@ProviderType
public class DirectionModelImpl
	extends BaseModelImpl<Direction> implements DirectionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a direction model instance should use the <code>Direction</code> interface instead.
	 */
	public static final String TABLE_NAME = "gtfs_Direction";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"directionId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"tripId", Types.VARCHAR}, {"stopId", Types.VARCHAR},
		{"routeId", Types.VARCHAR}, {"destinationName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("directionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tripId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stopId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("routeId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("destinationName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table gtfs_Direction (uuid_ VARCHAR(75) null,directionId LONG not null primary key,groupId LONG,companyId LONG,tripId VARCHAR(75) null,stopId VARCHAR(75) null,routeId VARCHAR(75) null,destinationName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table gtfs_Direction";

	public static final String ORDER_BY_JPQL =
		" ORDER BY direction.directionId DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY gtfs_Direction.directionId DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.gtfs.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.gtfs.model.Direction"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.gtfs.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.gtfs.model.Direction"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.gtfs.service.util.PropsUtil.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.gtfs.model.Direction"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long ROUTEID_COLUMN_BITMASK = 4L;

	public static final long STOPID_COLUMN_BITMASK = 8L;

	public static final long TRIPID_COLUMN_BITMASK = 16L;

	public static final long UUID_COLUMN_BITMASK = 32L;

	public static final long DIRECTIONID_COLUMN_BITMASK = 64L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.gtfs.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.gtfs.model.Direction"));

	public DirectionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _directionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDirectionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _directionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Direction.class;
	}

	@Override
	public String getModelClassName() {
		return Direction.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Direction, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Direction, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Direction, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Direction)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Direction, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Direction, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Direction)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Direction, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Direction, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Direction>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Direction.class.getClassLoader(), Direction.class,
			ModelWrapper.class);

		try {
			Constructor<Direction> constructor =
				(Constructor<Direction>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Direction, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Direction, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Direction, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Direction, Object>>();
		Map<String, BiConsumer<Direction, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Direction, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Direction, Object>() {

				@Override
				public Object apply(Direction direction) {
					return direction.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Direction, Object>() {

				@Override
				public void accept(Direction direction, Object uuid) {
					direction.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"directionId",
			new Function<Direction, Object>() {

				@Override
				public Object apply(Direction direction) {
					return direction.getDirectionId();
				}

			});
		attributeSetterBiConsumers.put(
			"directionId",
			new BiConsumer<Direction, Object>() {

				@Override
				public void accept(Direction direction, Object directionId) {
					direction.setDirectionId((Long)directionId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Direction, Object>() {

				@Override
				public Object apply(Direction direction) {
					return direction.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Direction, Object>() {

				@Override
				public void accept(Direction direction, Object groupId) {
					direction.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Direction, Object>() {

				@Override
				public Object apply(Direction direction) {
					return direction.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Direction, Object>() {

				@Override
				public void accept(Direction direction, Object companyId) {
					direction.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"tripId",
			new Function<Direction, Object>() {

				@Override
				public Object apply(Direction direction) {
					return direction.getTripId();
				}

			});
		attributeSetterBiConsumers.put(
			"tripId",
			new BiConsumer<Direction, Object>() {

				@Override
				public void accept(Direction direction, Object tripId) {
					direction.setTripId((String)tripId);
				}

			});
		attributeGetterFunctions.put(
			"stopId",
			new Function<Direction, Object>() {

				@Override
				public Object apply(Direction direction) {
					return direction.getStopId();
				}

			});
		attributeSetterBiConsumers.put(
			"stopId",
			new BiConsumer<Direction, Object>() {

				@Override
				public void accept(Direction direction, Object stopId) {
					direction.setStopId((String)stopId);
				}

			});
		attributeGetterFunctions.put(
			"routeId",
			new Function<Direction, Object>() {

				@Override
				public Object apply(Direction direction) {
					return direction.getRouteId();
				}

			});
		attributeSetterBiConsumers.put(
			"routeId",
			new BiConsumer<Direction, Object>() {

				@Override
				public void accept(Direction direction, Object routeId) {
					direction.setRouteId((String)routeId);
				}

			});
		attributeGetterFunctions.put(
			"destinationName",
			new Function<Direction, Object>() {

				@Override
				public Object apply(Direction direction) {
					return direction.getDestinationName();
				}

			});
		attributeSetterBiConsumers.put(
			"destinationName",
			new BiConsumer<Direction, Object>() {

				@Override
				public void accept(
					Direction direction, Object destinationName) {

					direction.setDestinationName((String)destinationName);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getDirectionId() {
		return _directionId;
	}

	@Override
	public void setDirectionId(long directionId) {
		_columnBitmask = -1L;

		_directionId = directionId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public String getTripId() {
		if (_tripId == null) {
			return "";
		}
		else {
			return _tripId;
		}
	}

	@Override
	public void setTripId(String tripId) {
		_columnBitmask |= TRIPID_COLUMN_BITMASK;

		if (_originalTripId == null) {
			_originalTripId = _tripId;
		}

		_tripId = tripId;
	}

	public String getOriginalTripId() {
		return GetterUtil.getString(_originalTripId);
	}

	@Override
	public String getStopId() {
		if (_stopId == null) {
			return "";
		}
		else {
			return _stopId;
		}
	}

	@Override
	public void setStopId(String stopId) {
		_columnBitmask |= STOPID_COLUMN_BITMASK;

		if (_originalStopId == null) {
			_originalStopId = _stopId;
		}

		_stopId = stopId;
	}

	public String getOriginalStopId() {
		return GetterUtil.getString(_originalStopId);
	}

	@Override
	public String getRouteId() {
		if (_routeId == null) {
			return "";
		}
		else {
			return _routeId;
		}
	}

	@Override
	public void setRouteId(String routeId) {
		_columnBitmask |= ROUTEID_COLUMN_BITMASK;

		if (_originalRouteId == null) {
			_originalRouteId = _routeId;
		}

		_routeId = routeId;
	}

	public String getOriginalRouteId() {
		return GetterUtil.getString(_originalRouteId);
	}

	@Override
	public String getDestinationName() {
		if (_destinationName == null) {
			return "";
		}
		else {
			return _destinationName;
		}
	}

	@Override
	public void setDestinationName(String destinationName) {
		_destinationName = destinationName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Direction.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Direction toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DirectionImpl directionImpl = new DirectionImpl();

		directionImpl.setUuid(getUuid());
		directionImpl.setDirectionId(getDirectionId());
		directionImpl.setGroupId(getGroupId());
		directionImpl.setCompanyId(getCompanyId());
		directionImpl.setTripId(getTripId());
		directionImpl.setStopId(getStopId());
		directionImpl.setRouteId(getRouteId());
		directionImpl.setDestinationName(getDestinationName());

		directionImpl.resetOriginalValues();

		return directionImpl;
	}

	@Override
	public int compareTo(Direction direction) {
		int value = 0;

		if (getDirectionId() < direction.getDirectionId()) {
			value = -1;
		}
		else if (getDirectionId() > direction.getDirectionId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Direction)) {
			return false;
		}

		Direction direction = (Direction)obj;

		long primaryKey = direction.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DirectionModelImpl directionModelImpl = this;

		directionModelImpl._originalUuid = directionModelImpl._uuid;

		directionModelImpl._originalGroupId = directionModelImpl._groupId;

		directionModelImpl._setOriginalGroupId = false;

		directionModelImpl._originalCompanyId = directionModelImpl._companyId;

		directionModelImpl._setOriginalCompanyId = false;

		directionModelImpl._originalTripId = directionModelImpl._tripId;

		directionModelImpl._originalStopId = directionModelImpl._stopId;

		directionModelImpl._originalRouteId = directionModelImpl._routeId;

		directionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Direction> toCacheModel() {
		DirectionCacheModel directionCacheModel = new DirectionCacheModel();

		directionCacheModel.uuid = getUuid();

		String uuid = directionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			directionCacheModel.uuid = null;
		}

		directionCacheModel.directionId = getDirectionId();

		directionCacheModel.groupId = getGroupId();

		directionCacheModel.companyId = getCompanyId();

		directionCacheModel.tripId = getTripId();

		String tripId = directionCacheModel.tripId;

		if ((tripId != null) && (tripId.length() == 0)) {
			directionCacheModel.tripId = null;
		}

		directionCacheModel.stopId = getStopId();

		String stopId = directionCacheModel.stopId;

		if ((stopId != null) && (stopId.length() == 0)) {
			directionCacheModel.stopId = null;
		}

		directionCacheModel.routeId = getRouteId();

		String routeId = directionCacheModel.routeId;

		if ((routeId != null) && (routeId.length() == 0)) {
			directionCacheModel.routeId = null;
		}

		directionCacheModel.destinationName = getDestinationName();

		String destinationName = directionCacheModel.destinationName;

		if ((destinationName != null) && (destinationName.length() == 0)) {
			directionCacheModel.destinationName = null;
		}

		return directionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Direction, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Direction, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Direction, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Direction)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Direction, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Direction, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Direction, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Direction)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Direction>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private String _uuid;
	private String _originalUuid;
	private long _directionId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private String _tripId;
	private String _originalTripId;
	private String _stopId;
	private String _originalStopId;
	private String _routeId;
	private String _originalRouteId;
	private String _destinationName;
	private long _columnBitmask;
	private Direction _escapedModel;

}