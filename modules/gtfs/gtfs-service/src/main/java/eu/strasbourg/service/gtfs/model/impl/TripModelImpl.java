/**
 * SPDX-FileCopyrightText: (c) 2023 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package eu.strasbourg.service.gtfs.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import eu.strasbourg.service.gtfs.model.Trip;
import eu.strasbourg.service.gtfs.model.TripModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Trip service. Represents a row in the &quot;gtfs_Trip&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TripModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TripImpl}.
 * </p>
 *
 * @author Cedric Henry
 * @see TripImpl
 * @generated
 */
public class TripModelImpl extends BaseModelImpl<Trip> implements TripModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a trip model instance should use the <code>Trip</code> interface instead.
	 */
	public static final String TABLE_NAME = "gtfs_Trip";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"route_id", Types.VARCHAR}, {"service_id", Types.VARCHAR},
		{"trip_id", Types.VARCHAR}, {"trip_headsign", Types.VARCHAR},
		{"direction_id", Types.BOOLEAN}, {"block_id", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("route_id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("service_id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trip_id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trip_headsign", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("direction_id", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("block_id", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table gtfs_Trip (uuid_ VARCHAR(75) null,id_ LONG not null primary key,route_id VARCHAR(75) null,service_id VARCHAR(75) null,trip_id VARCHAR(75) null,trip_headsign VARCHAR(75) null,direction_id BOOLEAN,block_id VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table gtfs_Trip";

	public static final String ORDER_BY_JPQL = " ORDER BY trip.trip_id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY gtfs_Trip.trip_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ROUTE_ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SERVICE_ID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TRIP_ID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.gtfs.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.gtfs.model.Trip"));

	public TripModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Trip.class;
	}

	@Override
	public String getModelClassName() {
		return Trip.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Trip, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Trip, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Trip, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Trip)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Trip, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Trip, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Trip)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Trip, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Trip, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Trip, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Trip, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Trip, Object>>();

			attributeGetterFunctions.put("uuid", Trip::getUuid);
			attributeGetterFunctions.put("id", Trip::getId);
			attributeGetterFunctions.put("route_id", Trip::getRoute_id);
			attributeGetterFunctions.put("service_id", Trip::getService_id);
			attributeGetterFunctions.put("trip_id", Trip::getTrip_id);
			attributeGetterFunctions.put(
				"trip_headsign", Trip::getTrip_headsign);
			attributeGetterFunctions.put("direction_id", Trip::getDirection_id);
			attributeGetterFunctions.put("block_id", Trip::getBlock_id);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Trip, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Trip, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Trip, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Trip, String>)Trip::setUuid);
			attributeSetterBiConsumers.put(
				"id", (BiConsumer<Trip, Long>)Trip::setId);
			attributeSetterBiConsumers.put(
				"route_id", (BiConsumer<Trip, String>)Trip::setRoute_id);
			attributeSetterBiConsumers.put(
				"service_id", (BiConsumer<Trip, String>)Trip::setService_id);
			attributeSetterBiConsumers.put(
				"trip_id", (BiConsumer<Trip, String>)Trip::setTrip_id);
			attributeSetterBiConsumers.put(
				"trip_headsign",
				(BiConsumer<Trip, String>)Trip::setTrip_headsign);
			attributeSetterBiConsumers.put(
				"direction_id",
				(BiConsumer<Trip, Boolean>)Trip::setDirection_id);
			attributeSetterBiConsumers.put(
				"block_id", (BiConsumer<Trip, String>)Trip::setBlock_id);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public String getRoute_id() {
		if (_route_id == null) {
			return "";
		}
		else {
			return _route_id;
		}
	}

	@Override
	public void setRoute_id(String route_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_route_id = route_id;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalRoute_id() {
		return getColumnOriginalValue("route_id");
	}

	@Override
	public String getService_id() {
		if (_service_id == null) {
			return "";
		}
		else {
			return _service_id;
		}
	}

	@Override
	public void setService_id(String service_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_service_id = service_id;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalService_id() {
		return getColumnOriginalValue("service_id");
	}

	@Override
	public String getTrip_id() {
		if (_trip_id == null) {
			return "";
		}
		else {
			return _trip_id;
		}
	}

	@Override
	public void setTrip_id(String trip_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trip_id = trip_id;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTrip_id() {
		return getColumnOriginalValue("trip_id");
	}

	@Override
	public String getTrip_headsign() {
		if (_trip_headsign == null) {
			return "";
		}
		else {
			return _trip_headsign;
		}
	}

	@Override
	public void setTrip_headsign(String trip_headsign) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_trip_headsign = trip_headsign;
	}

	@Override
	public boolean getDirection_id() {
		return _direction_id;
	}

	@Override
	public boolean isDirection_id() {
		return _direction_id;
	}

	@Override
	public void setDirection_id(boolean direction_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_direction_id = direction_id;
	}

	@Override
	public String getBlock_id() {
		if (_block_id == null) {
			return "";
		}
		else {
			return _block_id;
		}
	}

	@Override
	public void setBlock_id(String block_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_block_id = block_id;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Trip.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Trip toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Trip>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TripImpl tripImpl = new TripImpl();

		tripImpl.setUuid(getUuid());
		tripImpl.setId(getId());
		tripImpl.setRoute_id(getRoute_id());
		tripImpl.setService_id(getService_id());
		tripImpl.setTrip_id(getTrip_id());
		tripImpl.setTrip_headsign(getTrip_headsign());
		tripImpl.setDirection_id(isDirection_id());
		tripImpl.setBlock_id(getBlock_id());

		tripImpl.resetOriginalValues();

		return tripImpl;
	}

	@Override
	public Trip cloneWithOriginalValues() {
		TripImpl tripImpl = new TripImpl();

		tripImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		tripImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		tripImpl.setRoute_id(this.<String>getColumnOriginalValue("route_id"));
		tripImpl.setService_id(
			this.<String>getColumnOriginalValue("service_id"));
		tripImpl.setTrip_id(this.<String>getColumnOriginalValue("trip_id"));
		tripImpl.setTrip_headsign(
			this.<String>getColumnOriginalValue("trip_headsign"));
		tripImpl.setDirection_id(
			this.<Boolean>getColumnOriginalValue("direction_id"));
		tripImpl.setBlock_id(this.<String>getColumnOriginalValue("block_id"));

		return tripImpl;
	}

	@Override
	public int compareTo(Trip trip) {
		int value = 0;

		value = getTrip_id().compareTo(trip.getTrip_id());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Trip)) {
			return false;
		}

		Trip trip = (Trip)object;

		long primaryKey = trip.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Trip> toCacheModel() {
		TripCacheModel tripCacheModel = new TripCacheModel();

		tripCacheModel.uuid = getUuid();

		String uuid = tripCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			tripCacheModel.uuid = null;
		}

		tripCacheModel.id = getId();

		tripCacheModel.route_id = getRoute_id();

		String route_id = tripCacheModel.route_id;

		if ((route_id != null) && (route_id.length() == 0)) {
			tripCacheModel.route_id = null;
		}

		tripCacheModel.service_id = getService_id();

		String service_id = tripCacheModel.service_id;

		if ((service_id != null) && (service_id.length() == 0)) {
			tripCacheModel.service_id = null;
		}

		tripCacheModel.trip_id = getTrip_id();

		String trip_id = tripCacheModel.trip_id;

		if ((trip_id != null) && (trip_id.length() == 0)) {
			tripCacheModel.trip_id = null;
		}

		tripCacheModel.trip_headsign = getTrip_headsign();

		String trip_headsign = tripCacheModel.trip_headsign;

		if ((trip_headsign != null) && (trip_headsign.length() == 0)) {
			tripCacheModel.trip_headsign = null;
		}

		tripCacheModel.direction_id = isDirection_id();

		tripCacheModel.block_id = getBlock_id();

		String block_id = tripCacheModel.block_id;

		if ((block_id != null) && (block_id.length() == 0)) {
			tripCacheModel.block_id = null;
		}

		return tripCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Trip, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Trip, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Trip, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Trip)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Trip>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Trip.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _id;
	private String _route_id;
	private String _service_id;
	private String _trip_id;
	private String _trip_headsign;
	private boolean _direction_id;
	private String _block_id;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Trip, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Trip)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("route_id", _route_id);
		_columnOriginalValues.put("service_id", _service_id);
		_columnOriginalValues.put("trip_id", _trip_id);
		_columnOriginalValues.put("trip_headsign", _trip_headsign);
		_columnOriginalValues.put("direction_id", _direction_id);
		_columnOriginalValues.put("block_id", _block_id);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("id_", 2L);

		columnBitmasks.put("route_id", 4L);

		columnBitmasks.put("service_id", 8L);

		columnBitmasks.put("trip_id", 16L);

		columnBitmasks.put("trip_headsign", 32L);

		columnBitmasks.put("direction_id", 64L);

		columnBitmasks.put("block_id", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Trip _escapedModel;

}