/**
 * SPDX-FileCopyrightText: (c) 2023 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package eu.strasbourg.service.gtfs.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import eu.strasbourg.service.gtfs.model.Stop;
import eu.strasbourg.service.gtfs.model.StopModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Stop service. Represents a row in the &quot;gtfs_Stop&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StopModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StopImpl}.
 * </p>
 *
 * @author Cedric Henry
 * @see StopImpl
 * @generated
 */
public class StopModelImpl extends BaseModelImpl<Stop> implements StopModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a stop model instance should use the <code>Stop</code> interface instead.
	 */
	public static final String TABLE_NAME = "gtfs_Stop";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"stop_id", Types.VARCHAR}, {"stop_code", Types.VARCHAR},
		{"stop_lat", Types.VARCHAR}, {"stop_lon", Types.VARCHAR},
		{"stop_name", Types.VARCHAR}, {"stop_url", Types.VARCHAR},
		{"stop_desc", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stop_id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stop_code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stop_lat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stop_lon", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stop_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stop_url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stop_desc", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table gtfs_Stop (uuid_ VARCHAR(75) null,id_ LONG not null primary key,stop_id VARCHAR(75) null,stop_code VARCHAR(75) null,stop_lat VARCHAR(75) null,stop_lon VARCHAR(75) null,stop_name VARCHAR(75) null,stop_url VARCHAR(75) null,stop_desc VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table gtfs_Stop";

	public static final String ORDER_BY_JPQL = " ORDER BY stop.stop_id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY gtfs_Stop.stop_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STOP_CODE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STOP_ID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.gtfs.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.gtfs.model.Stop"));

	public StopModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Stop.class;
	}

	@Override
	public String getModelClassName() {
		return Stop.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Stop, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Stop, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Stop, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Stop)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Stop, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Stop, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Stop)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Stop, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Stop, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Stop, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Stop, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Stop, Object>>();

			attributeGetterFunctions.put("uuid", Stop::getUuid);
			attributeGetterFunctions.put("id", Stop::getId);
			attributeGetterFunctions.put("stop_id", Stop::getStop_id);
			attributeGetterFunctions.put("stop_code", Stop::getStop_code);
			attributeGetterFunctions.put("stop_lat", Stop::getStop_lat);
			attributeGetterFunctions.put("stop_lon", Stop::getStop_lon);
			attributeGetterFunctions.put("stop_name", Stop::getStop_name);
			attributeGetterFunctions.put("stop_url", Stop::getStop_url);
			attributeGetterFunctions.put("stop_desc", Stop::getStop_desc);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Stop, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Stop, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Stop, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Stop, String>)Stop::setUuid);
			attributeSetterBiConsumers.put(
				"id", (BiConsumer<Stop, Long>)Stop::setId);
			attributeSetterBiConsumers.put(
				"stop_id", (BiConsumer<Stop, String>)Stop::setStop_id);
			attributeSetterBiConsumers.put(
				"stop_code", (BiConsumer<Stop, String>)Stop::setStop_code);
			attributeSetterBiConsumers.put(
				"stop_lat", (BiConsumer<Stop, String>)Stop::setStop_lat);
			attributeSetterBiConsumers.put(
				"stop_lon", (BiConsumer<Stop, String>)Stop::setStop_lon);
			attributeSetterBiConsumers.put(
				"stop_name", (BiConsumer<Stop, String>)Stop::setStop_name);
			attributeSetterBiConsumers.put(
				"stop_url", (BiConsumer<Stop, String>)Stop::setStop_url);
			attributeSetterBiConsumers.put(
				"stop_desc", (BiConsumer<Stop, String>)Stop::setStop_desc);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public String getStop_id() {
		if (_stop_id == null) {
			return "";
		}
		else {
			return _stop_id;
		}
	}

	@Override
	public void setStop_id(String stop_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stop_id = stop_id;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStop_id() {
		return getColumnOriginalValue("stop_id");
	}

	@Override
	public String getStop_code() {
		if (_stop_code == null) {
			return "";
		}
		else {
			return _stop_code;
		}
	}

	@Override
	public void setStop_code(String stop_code) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stop_code = stop_code;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStop_code() {
		return getColumnOriginalValue("stop_code");
	}

	@Override
	public String getStop_lat() {
		if (_stop_lat == null) {
			return "";
		}
		else {
			return _stop_lat;
		}
	}

	@Override
	public void setStop_lat(String stop_lat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stop_lat = stop_lat;
	}

	@Override
	public String getStop_lon() {
		if (_stop_lon == null) {
			return "";
		}
		else {
			return _stop_lon;
		}
	}

	@Override
	public void setStop_lon(String stop_lon) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stop_lon = stop_lon;
	}

	@Override
	public String getStop_name() {
		if (_stop_name == null) {
			return "";
		}
		else {
			return _stop_name;
		}
	}

	@Override
	public void setStop_name(String stop_name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stop_name = stop_name;
	}

	@Override
	public String getStop_url() {
		if (_stop_url == null) {
			return "";
		}
		else {
			return _stop_url;
		}
	}

	@Override
	public void setStop_url(String stop_url) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stop_url = stop_url;
	}

	@Override
	public String getStop_desc() {
		if (_stop_desc == null) {
			return "";
		}
		else {
			return _stop_desc;
		}
	}

	@Override
	public void setStop_desc(String stop_desc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stop_desc = stop_desc;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Stop.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Stop toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Stop>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StopImpl stopImpl = new StopImpl();

		stopImpl.setUuid(getUuid());
		stopImpl.setId(getId());
		stopImpl.setStop_id(getStop_id());
		stopImpl.setStop_code(getStop_code());
		stopImpl.setStop_lat(getStop_lat());
		stopImpl.setStop_lon(getStop_lon());
		stopImpl.setStop_name(getStop_name());
		stopImpl.setStop_url(getStop_url());
		stopImpl.setStop_desc(getStop_desc());

		stopImpl.resetOriginalValues();

		return stopImpl;
	}

	@Override
	public Stop cloneWithOriginalValues() {
		StopImpl stopImpl = new StopImpl();

		stopImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		stopImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		stopImpl.setStop_id(this.<String>getColumnOriginalValue("stop_id"));
		stopImpl.setStop_code(this.<String>getColumnOriginalValue("stop_code"));
		stopImpl.setStop_lat(this.<String>getColumnOriginalValue("stop_lat"));
		stopImpl.setStop_lon(this.<String>getColumnOriginalValue("stop_lon"));
		stopImpl.setStop_name(this.<String>getColumnOriginalValue("stop_name"));
		stopImpl.setStop_url(this.<String>getColumnOriginalValue("stop_url"));
		stopImpl.setStop_desc(this.<String>getColumnOriginalValue("stop_desc"));

		return stopImpl;
	}

	@Override
	public int compareTo(Stop stop) {
		int value = 0;

		value = getStop_id().compareTo(stop.getStop_id());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Stop)) {
			return false;
		}

		Stop stop = (Stop)object;

		long primaryKey = stop.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Stop> toCacheModel() {
		StopCacheModel stopCacheModel = new StopCacheModel();

		stopCacheModel.uuid = getUuid();

		String uuid = stopCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			stopCacheModel.uuid = null;
		}

		stopCacheModel.id = getId();

		stopCacheModel.stop_id = getStop_id();

		String stop_id = stopCacheModel.stop_id;

		if ((stop_id != null) && (stop_id.length() == 0)) {
			stopCacheModel.stop_id = null;
		}

		stopCacheModel.stop_code = getStop_code();

		String stop_code = stopCacheModel.stop_code;

		if ((stop_code != null) && (stop_code.length() == 0)) {
			stopCacheModel.stop_code = null;
		}

		stopCacheModel.stop_lat = getStop_lat();

		String stop_lat = stopCacheModel.stop_lat;

		if ((stop_lat != null) && (stop_lat.length() == 0)) {
			stopCacheModel.stop_lat = null;
		}

		stopCacheModel.stop_lon = getStop_lon();

		String stop_lon = stopCacheModel.stop_lon;

		if ((stop_lon != null) && (stop_lon.length() == 0)) {
			stopCacheModel.stop_lon = null;
		}

		stopCacheModel.stop_name = getStop_name();

		String stop_name = stopCacheModel.stop_name;

		if ((stop_name != null) && (stop_name.length() == 0)) {
			stopCacheModel.stop_name = null;
		}

		stopCacheModel.stop_url = getStop_url();

		String stop_url = stopCacheModel.stop_url;

		if ((stop_url != null) && (stop_url.length() == 0)) {
			stopCacheModel.stop_url = null;
		}

		stopCacheModel.stop_desc = getStop_desc();

		String stop_desc = stopCacheModel.stop_desc;

		if ((stop_desc != null) && (stop_desc.length() == 0)) {
			stopCacheModel.stop_desc = null;
		}

		return stopCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Stop, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Stop, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Stop, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Stop)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Stop>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Stop.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _id;
	private String _stop_id;
	private String _stop_code;
	private String _stop_lat;
	private String _stop_lon;
	private String _stop_name;
	private String _stop_url;
	private String _stop_desc;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Stop, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Stop)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("stop_id", _stop_id);
		_columnOriginalValues.put("stop_code", _stop_code);
		_columnOriginalValues.put("stop_lat", _stop_lat);
		_columnOriginalValues.put("stop_lon", _stop_lon);
		_columnOriginalValues.put("stop_name", _stop_name);
		_columnOriginalValues.put("stop_url", _stop_url);
		_columnOriginalValues.put("stop_desc", _stop_desc);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("id_", 2L);

		columnBitmasks.put("stop_id", 4L);

		columnBitmasks.put("stop_code", 8L);

		columnBitmasks.put("stop_lat", 16L);

		columnBitmasks.put("stop_lon", 32L);

		columnBitmasks.put("stop_name", 64L);

		columnBitmasks.put("stop_url", 128L);

		columnBitmasks.put("stop_desc", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Stop _escapedModel;

}