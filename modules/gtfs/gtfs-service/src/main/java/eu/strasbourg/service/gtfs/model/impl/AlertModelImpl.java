/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.gtfs.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;

import eu.strasbourg.service.gtfs.model.Alert;
import eu.strasbourg.service.gtfs.model.AlertModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Alert service. Represents a row in the &quot;gtfs_Alert&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>AlertModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AlertImpl}.
 * </p>
 *
 * @author Cedric Henry
 * @see AlertImpl
 * @generated
 */
@ProviderType
public class AlertModelImpl extends BaseModelImpl<Alert> implements AlertModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a alert model instance should use the <code>Alert</code> interface instead.
	 */
	public static final String TABLE_NAME = "gtfs_Alert";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"alertId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"arretId", Types.BIGINT}, {"startDate", Types.TIMESTAMP},
		{"endDate", Types.TIMESTAMP}, {"ligneAndDirection", Types.VARCHAR},
		{"perturbation", Types.CLOB}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("alertId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("arretId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ligneAndDirection", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("perturbation", Types.CLOB);
	}

	public static final String TABLE_SQL_CREATE =
		"create table gtfs_Alert (uuid_ VARCHAR(75) null,alertId LONG not null primary key,groupId LONG,companyId LONG,arretId LONG,startDate DATE null,endDate DATE null,ligneAndDirection STRING null,perturbation TEXT null)";

	public static final String TABLE_SQL_DROP = "drop table gtfs_Alert";

	public static final String ORDER_BY_JPQL = " ORDER BY alert.alertId DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY gtfs_Alert.alertId DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.gtfs.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.gtfs.model.Alert"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.gtfs.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.gtfs.model.Alert"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.gtfs.service.util.PropsUtil.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.gtfs.model.Alert"),
		true);

	public static final long ARRETID_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long ALERTID_COLUMN_BITMASK = 16L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.gtfs.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.gtfs.model.Alert"));

	public AlertModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _alertId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAlertId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _alertId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Alert.class;
	}

	@Override
	public String getModelClassName() {
		return Alert.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Alert, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Alert, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Alert, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Alert)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Alert, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Alert, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Alert)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Alert, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Alert, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Alert>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Alert.class.getClassLoader(), Alert.class, ModelWrapper.class);

		try {
			Constructor<Alert> constructor =
				(Constructor<Alert>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Alert, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Alert, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Alert, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Alert, Object>>();
		Map<String, BiConsumer<Alert, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Alert, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Alert, Object>() {

				@Override
				public Object apply(Alert alert) {
					return alert.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Alert, Object>() {

				@Override
				public void accept(Alert alert, Object uuid) {
					alert.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"alertId",
			new Function<Alert, Object>() {

				@Override
				public Object apply(Alert alert) {
					return alert.getAlertId();
				}

			});
		attributeSetterBiConsumers.put(
			"alertId",
			new BiConsumer<Alert, Object>() {

				@Override
				public void accept(Alert alert, Object alertId) {
					alert.setAlertId((Long)alertId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Alert, Object>() {

				@Override
				public Object apply(Alert alert) {
					return alert.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Alert, Object>() {

				@Override
				public void accept(Alert alert, Object groupId) {
					alert.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Alert, Object>() {

				@Override
				public Object apply(Alert alert) {
					return alert.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Alert, Object>() {

				@Override
				public void accept(Alert alert, Object companyId) {
					alert.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"arretId",
			new Function<Alert, Object>() {

				@Override
				public Object apply(Alert alert) {
					return alert.getArretId();
				}

			});
		attributeSetterBiConsumers.put(
			"arretId",
			new BiConsumer<Alert, Object>() {

				@Override
				public void accept(Alert alert, Object arretId) {
					alert.setArretId((Long)arretId);
				}

			});
		attributeGetterFunctions.put(
			"startDate",
			new Function<Alert, Object>() {

				@Override
				public Object apply(Alert alert) {
					return alert.getStartDate();
				}

			});
		attributeSetterBiConsumers.put(
			"startDate",
			new BiConsumer<Alert, Object>() {

				@Override
				public void accept(Alert alert, Object startDate) {
					alert.setStartDate((Date)startDate);
				}

			});
		attributeGetterFunctions.put(
			"endDate",
			new Function<Alert, Object>() {

				@Override
				public Object apply(Alert alert) {
					return alert.getEndDate();
				}

			});
		attributeSetterBiConsumers.put(
			"endDate",
			new BiConsumer<Alert, Object>() {

				@Override
				public void accept(Alert alert, Object endDate) {
					alert.setEndDate((Date)endDate);
				}

			});
		attributeGetterFunctions.put(
			"ligneAndDirection",
			new Function<Alert, Object>() {

				@Override
				public Object apply(Alert alert) {
					return alert.getLigneAndDirection();
				}

			});
		attributeSetterBiConsumers.put(
			"ligneAndDirection",
			new BiConsumer<Alert, Object>() {

				@Override
				public void accept(Alert alert, Object ligneAndDirection) {
					alert.setLigneAndDirection((String)ligneAndDirection);
				}

			});
		attributeGetterFunctions.put(
			"perturbation",
			new Function<Alert, Object>() {

				@Override
				public Object apply(Alert alert) {
					return alert.getPerturbation();
				}

			});
		attributeSetterBiConsumers.put(
			"perturbation",
			new BiConsumer<Alert, Object>() {

				@Override
				public void accept(Alert alert, Object perturbation) {
					alert.setPerturbation((String)perturbation);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getAlertId() {
		return _alertId;
	}

	@Override
	public void setAlertId(long alertId) {
		_columnBitmask = -1L;

		_alertId = alertId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getArretId() {
		return _arretId;
	}

	@Override
	public void setArretId(long arretId) {
		_columnBitmask |= ARRETID_COLUMN_BITMASK;

		if (!_setOriginalArretId) {
			_setOriginalArretId = true;

			_originalArretId = _arretId;
		}

		_arretId = arretId;
	}

	public long getOriginalArretId() {
		return _originalArretId;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public String getLigneAndDirection() {
		if (_ligneAndDirection == null) {
			return "";
		}
		else {
			return _ligneAndDirection;
		}
	}

	@Override
	public String getLigneAndDirection(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLigneAndDirection(languageId);
	}

	@Override
	public String getLigneAndDirection(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLigneAndDirection(languageId, useDefault);
	}

	@Override
	public String getLigneAndDirection(String languageId) {
		return LocalizationUtil.getLocalization(
			getLigneAndDirection(), languageId);
	}

	@Override
	public String getLigneAndDirection(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getLigneAndDirection(), languageId, useDefault);
	}

	@Override
	public String getLigneAndDirectionCurrentLanguageId() {
		return _ligneAndDirectionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getLigneAndDirectionCurrentValue() {
		Locale locale = getLocale(_ligneAndDirectionCurrentLanguageId);

		return getLigneAndDirection(locale);
	}

	@Override
	public Map<Locale, String> getLigneAndDirectionMap() {
		return LocalizationUtil.getLocalizationMap(getLigneAndDirection());
	}

	@Override
	public void setLigneAndDirection(String ligneAndDirection) {
		_ligneAndDirection = ligneAndDirection;
	}

	@Override
	public void setLigneAndDirection(String ligneAndDirection, Locale locale) {
		setLigneAndDirection(
			ligneAndDirection, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setLigneAndDirection(
		String ligneAndDirection, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(ligneAndDirection)) {
			setLigneAndDirection(
				LocalizationUtil.updateLocalization(
					getLigneAndDirection(), "LigneAndDirection",
					ligneAndDirection, languageId, defaultLanguageId));
		}
		else {
			setLigneAndDirection(
				LocalizationUtil.removeLocalization(
					getLigneAndDirection(), "LigneAndDirection", languageId));
		}
	}

	@Override
	public void setLigneAndDirectionCurrentLanguageId(String languageId) {
		_ligneAndDirectionCurrentLanguageId = languageId;
	}

	@Override
	public void setLigneAndDirectionMap(
		Map<Locale, String> ligneAndDirectionMap) {

		setLigneAndDirectionMap(ligneAndDirectionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setLigneAndDirectionMap(
		Map<Locale, String> ligneAndDirectionMap, Locale defaultLocale) {

		if (ligneAndDirectionMap == null) {
			return;
		}

		setLigneAndDirection(
			LocalizationUtil.updateLocalization(
				ligneAndDirectionMap, getLigneAndDirection(),
				"LigneAndDirection", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getPerturbation() {
		if (_perturbation == null) {
			return "";
		}
		else {
			return _perturbation;
		}
	}

	@Override
	public String getPerturbation(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPerturbation(languageId);
	}

	@Override
	public String getPerturbation(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPerturbation(languageId, useDefault);
	}

	@Override
	public String getPerturbation(String languageId) {
		return LocalizationUtil.getLocalization(getPerturbation(), languageId);
	}

	@Override
	public String getPerturbation(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getPerturbation(), languageId, useDefault);
	}

	@Override
	public String getPerturbationCurrentLanguageId() {
		return _perturbationCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPerturbationCurrentValue() {
		Locale locale = getLocale(_perturbationCurrentLanguageId);

		return getPerturbation(locale);
	}

	@Override
	public Map<Locale, String> getPerturbationMap() {
		return LocalizationUtil.getLocalizationMap(getPerturbation());
	}

	@Override
	public void setPerturbation(String perturbation) {
		_perturbation = perturbation;
	}

	@Override
	public void setPerturbation(String perturbation, Locale locale) {
		setPerturbation(perturbation, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setPerturbation(
		String perturbation, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(perturbation)) {
			setPerturbation(
				LocalizationUtil.updateLocalization(
					getPerturbation(), "Perturbation", perturbation, languageId,
					defaultLanguageId));
		}
		else {
			setPerturbation(
				LocalizationUtil.removeLocalization(
					getPerturbation(), "Perturbation", languageId));
		}
	}

	@Override
	public void setPerturbationCurrentLanguageId(String languageId) {
		_perturbationCurrentLanguageId = languageId;
	}

	@Override
	public void setPerturbationMap(Map<Locale, String> perturbationMap) {
		setPerturbationMap(perturbationMap, LocaleUtil.getDefault());
	}

	@Override
	public void setPerturbationMap(
		Map<Locale, String> perturbationMap, Locale defaultLocale) {

		if (perturbationMap == null) {
			return;
		}

		setPerturbation(
			LocalizationUtil.updateLocalization(
				perturbationMap, getPerturbation(), "Perturbation",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Alert.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> ligneAndDirectionMap = getLigneAndDirectionMap();

		for (Map.Entry<Locale, String> entry :
				ligneAndDirectionMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> perturbationMap = getPerturbationMap();

		for (Map.Entry<Locale, String> entry : perturbationMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getLigneAndDirection();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			Alert.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String ligneAndDirection = getLigneAndDirection(defaultLocale);

		if (Validator.isNull(ligneAndDirection)) {
			setLigneAndDirection(
				getLigneAndDirection(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setLigneAndDirection(
				getLigneAndDirection(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String perturbation = getPerturbation(defaultLocale);

		if (Validator.isNull(perturbation)) {
			setPerturbation(
				getPerturbation(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPerturbation(
				getPerturbation(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Alert toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AlertImpl alertImpl = new AlertImpl();

		alertImpl.setUuid(getUuid());
		alertImpl.setAlertId(getAlertId());
		alertImpl.setGroupId(getGroupId());
		alertImpl.setCompanyId(getCompanyId());
		alertImpl.setArretId(getArretId());
		alertImpl.setStartDate(getStartDate());
		alertImpl.setEndDate(getEndDate());
		alertImpl.setLigneAndDirection(getLigneAndDirection());
		alertImpl.setPerturbation(getPerturbation());

		alertImpl.resetOriginalValues();

		return alertImpl;
	}

	@Override
	public int compareTo(Alert alert) {
		int value = 0;

		if (getAlertId() < alert.getAlertId()) {
			value = -1;
		}
		else if (getAlertId() > alert.getAlertId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Alert)) {
			return false;
		}

		Alert alert = (Alert)obj;

		long primaryKey = alert.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AlertModelImpl alertModelImpl = this;

		alertModelImpl._originalUuid = alertModelImpl._uuid;

		alertModelImpl._originalGroupId = alertModelImpl._groupId;

		alertModelImpl._setOriginalGroupId = false;

		alertModelImpl._originalCompanyId = alertModelImpl._companyId;

		alertModelImpl._setOriginalCompanyId = false;

		alertModelImpl._originalArretId = alertModelImpl._arretId;

		alertModelImpl._setOriginalArretId = false;

		alertModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Alert> toCacheModel() {
		AlertCacheModel alertCacheModel = new AlertCacheModel();

		alertCacheModel.uuid = getUuid();

		String uuid = alertCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			alertCacheModel.uuid = null;
		}

		alertCacheModel.alertId = getAlertId();

		alertCacheModel.groupId = getGroupId();

		alertCacheModel.companyId = getCompanyId();

		alertCacheModel.arretId = getArretId();

		Date startDate = getStartDate();

		if (startDate != null) {
			alertCacheModel.startDate = startDate.getTime();
		}
		else {
			alertCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			alertCacheModel.endDate = endDate.getTime();
		}
		else {
			alertCacheModel.endDate = Long.MIN_VALUE;
		}

		alertCacheModel.ligneAndDirection = getLigneAndDirection();

		String ligneAndDirection = alertCacheModel.ligneAndDirection;

		if ((ligneAndDirection != null) && (ligneAndDirection.length() == 0)) {
			alertCacheModel.ligneAndDirection = null;
		}

		alertCacheModel.perturbation = getPerturbation();

		String perturbation = alertCacheModel.perturbation;

		if ((perturbation != null) && (perturbation.length() == 0)) {
			alertCacheModel.perturbation = null;
		}

		return alertCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Alert, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Alert, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Alert, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Alert)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Alert, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Alert, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Alert, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Alert)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Alert>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private String _uuid;
	private String _originalUuid;
	private long _alertId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _arretId;
	private long _originalArretId;
	private boolean _setOriginalArretId;
	private Date _startDate;
	private Date _endDate;
	private String _ligneAndDirection;
	private String _ligneAndDirectionCurrentLanguageId;
	private String _perturbation;
	private String _perturbationCurrentLanguageId;
	private long _columnBitmask;
	private Alert _escapedModel;

}