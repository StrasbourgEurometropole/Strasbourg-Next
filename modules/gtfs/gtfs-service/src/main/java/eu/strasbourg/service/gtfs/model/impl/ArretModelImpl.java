/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.gtfs.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.gtfs.model.Arret;
import eu.strasbourg.service.gtfs.model.ArretModel;
import eu.strasbourg.service.gtfs.model.ArretSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Arret service. Represents a row in the &quot;gtfs_Arret&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ArretModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ArretImpl}.
 * </p>
 *
 * @author Cedric Henry
 * @see ArretImpl
 * @generated
 */
@JSON(strict = true)
public class ArretModelImpl extends BaseModelImpl<Arret> implements ArretModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a arret model instance should use the <code>Arret</code> interface instead.
	 */
	public static final String TABLE_NAME = "gtfs_Arret";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"arretId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"stopId", Types.VARCHAR}, {"title", Types.VARCHAR},
		{"code_", Types.VARCHAR}, {"latitude", Types.VARCHAR},
		{"longitude", Types.VARCHAR}, {"type_", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("arretId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("stopId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("latitude", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("longitude", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table gtfs_Arret (uuid_ VARCHAR(75) null,arretId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,stopId VARCHAR(75) null,title VARCHAR(75) null,code_ VARCHAR(75) null,latitude VARCHAR(75) null,longitude VARCHAR(75) null,type_ INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table gtfs_Arret";

	public static final String ORDER_BY_JPQL = " ORDER BY arret.arretId DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY gtfs_Arret.arretId DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.gtfs.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.gtfs.model.Arret"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.gtfs.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.gtfs.model.Arret"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.gtfs.service.util.PropsUtil.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.gtfs.model.Arret"),
		true);

	public static final long CODE_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long STATUS_COLUMN_BITMASK = 8L;

	public static final long STOPID_COLUMN_BITMASK = 16L;

	public static final long UUID_COLUMN_BITMASK = 32L;

	public static final long ARRETID_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Arret toModel(ArretSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Arret model = new ArretImpl();

		model.setUuid(soapModel.getUuid());
		model.setArretId(soapModel.getArretId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setStopId(soapModel.getStopId());
		model.setTitle(soapModel.getTitle());
		model.setCode(soapModel.getCode());
		model.setLatitude(soapModel.getLatitude());
		model.setLongitude(soapModel.getLongitude());
		model.setType(soapModel.getType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Arret> toModels(ArretSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Arret> models = new ArrayList<Arret>(soapModels.length);

		for (ArretSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.gtfs.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.gtfs.model.Arret"));

	public ArretModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _arretId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setArretId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _arretId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Arret.class;
	}

	@Override
	public String getModelClassName() {
		return Arret.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Arret, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Arret, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Arret, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Arret)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Arret, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Arret, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Arret)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Arret, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Arret, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Arret>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Arret.class.getClassLoader(), Arret.class, ModelWrapper.class);

		try {
			Constructor<Arret> constructor =
				(Constructor<Arret>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Arret, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Arret, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Arret, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Arret, Object>>();
		Map<String, BiConsumer<Arret, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Arret, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object uuidObject) {
					arret.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"arretId",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getArretId();
				}

			});
		attributeSetterBiConsumers.put(
			"arretId",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object arretIdObject) {
					arret.setArretId((Long)arretIdObject);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object groupIdObject) {
					arret.setGroupId((Long)groupIdObject);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object companyIdObject) {
					arret.setCompanyId((Long)companyIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object userIdObject) {
					arret.setUserId((Long)userIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object userNameObject) {
					arret.setUserName((String)userNameObject);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object createDateObject) {
					arret.setCreateDate((Date)createDateObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object modifiedDateObject) {
					arret.setModifiedDate((Date)modifiedDateObject);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object statusObject) {
					arret.setStatus((Integer)statusObject);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserId",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getStatusByUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserId",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object statusByUserIdObject) {
					arret.setStatusByUserId((Long)statusByUserIdObject);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserName",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getStatusByUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserName",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object statusByUserNameObject) {
					arret.setStatusByUserName((String)statusByUserNameObject);
				}

			});
		attributeGetterFunctions.put(
			"statusDate",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getStatusDate();
				}

			});
		attributeSetterBiConsumers.put(
			"statusDate",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object statusDateObject) {
					arret.setStatusDate((Date)statusDateObject);
				}

			});
		attributeGetterFunctions.put(
			"stopId",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getStopId();
				}

			});
		attributeSetterBiConsumers.put(
			"stopId",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object stopIdObject) {
					arret.setStopId((String)stopIdObject);
				}

			});
		attributeGetterFunctions.put(
			"title",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getTitle();
				}

			});
		attributeSetterBiConsumers.put(
			"title",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object titleObject) {
					arret.setTitle((String)titleObject);
				}

			});
		attributeGetterFunctions.put(
			"code",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getCode();
				}

			});
		attributeSetterBiConsumers.put(
			"code",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object codeObject) {
					arret.setCode((String)codeObject);
				}

			});
		attributeGetterFunctions.put(
			"latitude",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getLatitude();
				}

			});
		attributeSetterBiConsumers.put(
			"latitude",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object latitudeObject) {
					arret.setLatitude((String)latitudeObject);
				}

			});
		attributeGetterFunctions.put(
			"longitude",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getLongitude();
				}

			});
		attributeSetterBiConsumers.put(
			"longitude",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object longitudeObject) {
					arret.setLongitude((String)longitudeObject);
				}

			});
		attributeGetterFunctions.put(
			"type",
			new Function<Arret, Object>() {

				@Override
				public Object apply(Arret arret) {
					return arret.getType();
				}

			});
		attributeSetterBiConsumers.put(
			"type",
			new BiConsumer<Arret, Object>() {

				@Override
				public void accept(Arret arret, Object typeObject) {
					arret.setType((Integer)typeObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getArretId() {
		return _arretId;
	}

	@Override
	public void setArretId(long arretId) {
		_columnBitmask = -1L;

		_arretId = arretId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getStopId() {
		if (_stopId == null) {
			return "";
		}
		else {
			return _stopId;
		}
	}

	@Override
	public void setStopId(String stopId) {
		_columnBitmask |= STOPID_COLUMN_BITMASK;

		if (_originalStopId == null) {
			_originalStopId = _stopId;
		}

		_stopId = stopId;
	}

	public String getOriginalStopId() {
		return GetterUtil.getString(_originalStopId);
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return "";
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@JSON
	@Override
	public String getLatitude() {
		if (_latitude == null) {
			return "";
		}
		else {
			return _latitude;
		}
	}

	@Override
	public void setLatitude(String latitude) {
		_latitude = latitude;
	}

	@JSON
	@Override
	public String getLongitude() {
		if (_longitude == null) {
			return "";
		}
		else {
			return _longitude;
		}
	}

	@Override
	public void setLongitude(String longitude) {
		_longitude = longitude;
	}

	@JSON
	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_type = type;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Arret.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Arret.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Arret toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Arret>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ArretImpl arretImpl = new ArretImpl();

		arretImpl.setUuid(getUuid());
		arretImpl.setArretId(getArretId());
		arretImpl.setGroupId(getGroupId());
		arretImpl.setCompanyId(getCompanyId());
		arretImpl.setUserId(getUserId());
		arretImpl.setUserName(getUserName());
		arretImpl.setCreateDate(getCreateDate());
		arretImpl.setModifiedDate(getModifiedDate());
		arretImpl.setStatus(getStatus());
		arretImpl.setStatusByUserId(getStatusByUserId());
		arretImpl.setStatusByUserName(getStatusByUserName());
		arretImpl.setStatusDate(getStatusDate());
		arretImpl.setStopId(getStopId());
		arretImpl.setTitle(getTitle());
		arretImpl.setCode(getCode());
		arretImpl.setLatitude(getLatitude());
		arretImpl.setLongitude(getLongitude());
		arretImpl.setType(getType());

		arretImpl.resetOriginalValues();

		return arretImpl;
	}

	@Override
	public int compareTo(Arret arret) {
		int value = 0;

		if (getArretId() < arret.getArretId()) {
			value = -1;
		}
		else if (getArretId() > arret.getArretId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Arret)) {
			return false;
		}

		Arret arret = (Arret)object;

		long primaryKey = arret.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ArretModelImpl arretModelImpl = this;

		arretModelImpl._originalUuid = arretModelImpl._uuid;

		arretModelImpl._originalGroupId = arretModelImpl._groupId;

		arretModelImpl._setOriginalGroupId = false;

		arretModelImpl._originalCompanyId = arretModelImpl._companyId;

		arretModelImpl._setOriginalCompanyId = false;

		arretModelImpl._setModifiedDate = false;

		arretModelImpl._originalStatus = arretModelImpl._status;

		arretModelImpl._setOriginalStatus = false;

		arretModelImpl._originalStopId = arretModelImpl._stopId;

		arretModelImpl._originalCode = arretModelImpl._code;

		arretModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Arret> toCacheModel() {
		ArretCacheModel arretCacheModel = new ArretCacheModel();

		arretCacheModel.uuid = getUuid();

		String uuid = arretCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			arretCacheModel.uuid = null;
		}

		arretCacheModel.arretId = getArretId();

		arretCacheModel.groupId = getGroupId();

		arretCacheModel.companyId = getCompanyId();

		arretCacheModel.userId = getUserId();

		arretCacheModel.userName = getUserName();

		String userName = arretCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			arretCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			arretCacheModel.createDate = createDate.getTime();
		}
		else {
			arretCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			arretCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			arretCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		arretCacheModel.status = getStatus();

		arretCacheModel.statusByUserId = getStatusByUserId();

		arretCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = arretCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			arretCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			arretCacheModel.statusDate = statusDate.getTime();
		}
		else {
			arretCacheModel.statusDate = Long.MIN_VALUE;
		}

		arretCacheModel.stopId = getStopId();

		String stopId = arretCacheModel.stopId;

		if ((stopId != null) && (stopId.length() == 0)) {
			arretCacheModel.stopId = null;
		}

		arretCacheModel.title = getTitle();

		String title = arretCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			arretCacheModel.title = null;
		}

		arretCacheModel.code = getCode();

		String code = arretCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			arretCacheModel.code = null;
		}

		arretCacheModel.latitude = getLatitude();

		String latitude = arretCacheModel.latitude;

		if ((latitude != null) && (latitude.length() == 0)) {
			arretCacheModel.latitude = null;
		}

		arretCacheModel.longitude = getLongitude();

		String longitude = arretCacheModel.longitude;

		if ((longitude != null) && (longitude.length() == 0)) {
			arretCacheModel.longitude = null;
		}

		arretCacheModel.type = getType();

		return arretCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Arret, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Arret, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Arret, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Arret)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Arret, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Arret, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Arret, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Arret)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Arret>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _arretId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _stopId;
	private String _originalStopId;
	private String _title;
	private String _code;
	private String _originalCode;
	private String _latitude;
	private String _longitude;
	private int _type;
	private long _columnBitmask;
	private Arret _escapedModel;

}