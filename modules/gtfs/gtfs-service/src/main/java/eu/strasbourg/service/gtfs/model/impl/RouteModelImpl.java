/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.gtfs.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import eu.strasbourg.service.gtfs.model.Route;
import eu.strasbourg.service.gtfs.model.RouteModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Route service. Represents a row in the &quot;gtfs_Route&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RouteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RouteImpl}.
 * </p>
 *
 * @author Cedric Henry
 * @see RouteImpl
 * @see Route
 * @see RouteModel
 * @generated
 */
@ProviderType
public class RouteModelImpl extends BaseModelImpl<Route> implements RouteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a route model instance should use the {@link Route} interface instead.
	 */
	public static final String TABLE_NAME = "gtfs_Route";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "id_", Types.BIGINT },
			{ "route_id", Types.VARCHAR },
			{ "route_short_name", Types.VARCHAR },
			{ "route_long_name", Types.VARCHAR },
			{ "route_desc", Types.VARCHAR },
			{ "route_type", Types.INTEGER },
			{ "route_color", Types.VARCHAR },
			{ "route_text_color", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("route_id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("route_short_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("route_long_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("route_desc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("route_type", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("route_color", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("route_text_color", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table gtfs_Route (uuid_ VARCHAR(75) null,id_ LONG not null primary key,route_id VARCHAR(75) null,route_short_name VARCHAR(75) null,route_long_name VARCHAR(200) null,route_desc VARCHAR(400) null,route_type INTEGER,route_color VARCHAR(75) null,route_text_color VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table gtfs_Route";
	public static final String ORDER_BY_JPQL = " ORDER BY route.route_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gtfs_Route.route_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.project.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.gtfs.model.Route"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.project.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.gtfs.model.Route"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.project.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.gtfs.model.Route"),
			true);
	public static final long UUID_COLUMN_BITMASK = 1L;
	public static final long ROUTE_ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.project.service.util.PropsUtil.get(
				"lock.expiration.time.eu.strasbourg.service.gtfs.model.Route"));

	public RouteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Route.class;
	}

	@Override
	public String getModelClassName() {
		return Route.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("id", getId());
		attributes.put("route_id", getRoute_id());
		attributes.put("route_short_name", getRoute_short_name());
		attributes.put("route_long_name", getRoute_long_name());
		attributes.put("route_desc", getRoute_desc());
		attributes.put("route_type", getRoute_type());
		attributes.put("route_color", getRoute_color());
		attributes.put("route_text_color", getRoute_text_color());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String route_id = (String)attributes.get("route_id");

		if (route_id != null) {
			setRoute_id(route_id);
		}

		String route_short_name = (String)attributes.get("route_short_name");

		if (route_short_name != null) {
			setRoute_short_name(route_short_name);
		}

		String route_long_name = (String)attributes.get("route_long_name");

		if (route_long_name != null) {
			setRoute_long_name(route_long_name);
		}

		String route_desc = (String)attributes.get("route_desc");

		if (route_desc != null) {
			setRoute_desc(route_desc);
		}

		Integer route_type = (Integer)attributes.get("route_type");

		if (route_type != null) {
			setRoute_type(route_type);
		}

		String route_color = (String)attributes.get("route_color");

		if (route_color != null) {
			setRoute_color(route_color);
		}

		String route_text_color = (String)attributes.get("route_text_color");

		if (route_text_color != null) {
			setRoute_text_color(route_text_color);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getRoute_id() {
		if (_route_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _route_id;
		}
	}

	@Override
	public void setRoute_id(String route_id) {
		_columnBitmask = -1L;

		_route_id = route_id;
	}

	@Override
	public String getRoute_short_name() {
		if (_route_short_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _route_short_name;
		}
	}

	@Override
	public void setRoute_short_name(String route_short_name) {
		_route_short_name = route_short_name;
	}

	@Override
	public String getRoute_long_name() {
		if (_route_long_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _route_long_name;
		}
	}

	@Override
	public void setRoute_long_name(String route_long_name) {
		_route_long_name = route_long_name;
	}

	@Override
	public String getRoute_desc() {
		if (_route_desc == null) {
			return StringPool.BLANK;
		}
		else {
			return _route_desc;
		}
	}

	@Override
	public void setRoute_desc(String route_desc) {
		_route_desc = route_desc;
	}

	@Override
	public int getRoute_type() {
		return _route_type;
	}

	@Override
	public void setRoute_type(int route_type) {
		_route_type = route_type;
	}

	@Override
	public String getRoute_color() {
		if (_route_color == null) {
			return StringPool.BLANK;
		}
		else {
			return _route_color;
		}
	}

	@Override
	public void setRoute_color(String route_color) {
		_route_color = route_color;
	}

	@Override
	public String getRoute_text_color() {
		if (_route_text_color == null) {
			return StringPool.BLANK;
		}
		else {
			return _route_text_color;
		}
	}

	@Override
	public void setRoute_text_color(String route_text_color) {
		_route_text_color = route_text_color;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Route.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Route toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Route)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RouteImpl routeImpl = new RouteImpl();

		routeImpl.setUuid(getUuid());
		routeImpl.setId(getId());
		routeImpl.setRoute_id(getRoute_id());
		routeImpl.setRoute_short_name(getRoute_short_name());
		routeImpl.setRoute_long_name(getRoute_long_name());
		routeImpl.setRoute_desc(getRoute_desc());
		routeImpl.setRoute_type(getRoute_type());
		routeImpl.setRoute_color(getRoute_color());
		routeImpl.setRoute_text_color(getRoute_text_color());

		routeImpl.resetOriginalValues();

		return routeImpl;
	}

	@Override
	public int compareTo(Route route) {
		int value = 0;

		value = getRoute_id().compareTo(route.getRoute_id());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Route)) {
			return false;
		}

		Route route = (Route)obj;

		long primaryKey = route.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RouteModelImpl routeModelImpl = this;

		routeModelImpl._originalUuid = routeModelImpl._uuid;

		routeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Route> toCacheModel() {
		RouteCacheModel routeCacheModel = new RouteCacheModel();

		routeCacheModel.uuid = getUuid();

		String uuid = routeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			routeCacheModel.uuid = null;
		}

		routeCacheModel.id = getId();

		routeCacheModel.route_id = getRoute_id();

		String route_id = routeCacheModel.route_id;

		if ((route_id != null) && (route_id.length() == 0)) {
			routeCacheModel.route_id = null;
		}

		routeCacheModel.route_short_name = getRoute_short_name();

		String route_short_name = routeCacheModel.route_short_name;

		if ((route_short_name != null) && (route_short_name.length() == 0)) {
			routeCacheModel.route_short_name = null;
		}

		routeCacheModel.route_long_name = getRoute_long_name();

		String route_long_name = routeCacheModel.route_long_name;

		if ((route_long_name != null) && (route_long_name.length() == 0)) {
			routeCacheModel.route_long_name = null;
		}

		routeCacheModel.route_desc = getRoute_desc();

		String route_desc = routeCacheModel.route_desc;

		if ((route_desc != null) && (route_desc.length() == 0)) {
			routeCacheModel.route_desc = null;
		}

		routeCacheModel.route_type = getRoute_type();

		routeCacheModel.route_color = getRoute_color();

		String route_color = routeCacheModel.route_color;

		if ((route_color != null) && (route_color.length() == 0)) {
			routeCacheModel.route_color = null;
		}

		routeCacheModel.route_text_color = getRoute_text_color();

		String route_text_color = routeCacheModel.route_text_color;

		if ((route_text_color != null) && (route_text_color.length() == 0)) {
			routeCacheModel.route_text_color = null;
		}

		return routeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", id=");
		sb.append(getId());
		sb.append(", route_id=");
		sb.append(getRoute_id());
		sb.append(", route_short_name=");
		sb.append(getRoute_short_name());
		sb.append(", route_long_name=");
		sb.append(getRoute_long_name());
		sb.append(", route_desc=");
		sb.append(getRoute_desc());
		sb.append(", route_type=");
		sb.append(getRoute_type());
		sb.append(", route_color=");
		sb.append(getRoute_color());
		sb.append(", route_text_color=");
		sb.append(getRoute_text_color());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.gtfs.model.Route");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>route_id</column-name><column-value><![CDATA[");
		sb.append(getRoute_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>route_short_name</column-name><column-value><![CDATA[");
		sb.append(getRoute_short_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>route_long_name</column-name><column-value><![CDATA[");
		sb.append(getRoute_long_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>route_desc</column-name><column-value><![CDATA[");
		sb.append(getRoute_desc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>route_type</column-name><column-value><![CDATA[");
		sb.append(getRoute_type());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>route_color</column-name><column-value><![CDATA[");
		sb.append(getRoute_color());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>route_text_color</column-name><column-value><![CDATA[");
		sb.append(getRoute_text_color());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Route.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Route.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _id;
	private String _route_id;
	private String _route_short_name;
	private String _route_long_name;
	private String _route_desc;
	private int _route_type;
	private String _route_color;
	private String _route_text_color;
	private long _columnBitmask;
	private Route _escapedModel;
}