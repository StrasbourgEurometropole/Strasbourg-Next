/**
 * SPDX-FileCopyrightText: (c) 2023 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package eu.strasbourg.service.gtfs.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedAuditedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the ImportHistoric service. Represents a row in the &quot;gtfs_ImportHistoric&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>eu.strasbourg.service.gtfs.model.impl.ImportHistoricModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>eu.strasbourg.service.gtfs.model.impl.ImportHistoricImpl</code>.
 * </p>
 *
 * @author Cedric Henry
 * @see ImportHistoric
 * @generated
 */
@ProviderType
public interface ImportHistoricModel
	extends BaseModel<ImportHistoric>, GroupedModel, LocalizedModel,
			ShardedModel, StagedAuditedModel, WorkflowedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a import historic model instance should use the {@link ImportHistoric} interface instead.
	 */

	/**
	 * Returns the primary key of this import historic.
	 *
	 * @return the primary key of this import historic
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this import historic.
	 *
	 * @param primaryKey the primary key of this import historic
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this import historic.
	 *
	 * @return the uuid of this import historic
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this import historic.
	 *
	 * @param uuid the uuid of this import historic
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the import historic ID of this import historic.
	 *
	 * @return the import historic ID of this import historic
	 */
	public long getImportHistoricId();

	/**
	 * Sets the import historic ID of this import historic.
	 *
	 * @param importHistoricId the import historic ID of this import historic
	 */
	public void setImportHistoricId(long importHistoricId);

	/**
	 * Returns the group ID of this import historic.
	 *
	 * @return the group ID of this import historic
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this import historic.
	 *
	 * @param groupId the group ID of this import historic
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this import historic.
	 *
	 * @return the company ID of this import historic
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this import historic.
	 *
	 * @param companyId the company ID of this import historic
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this import historic.
	 *
	 * @return the user ID of this import historic
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this import historic.
	 *
	 * @param userId the user ID of this import historic
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this import historic.
	 *
	 * @return the user uuid of this import historic
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this import historic.
	 *
	 * @param userUuid the user uuid of this import historic
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this import historic.
	 *
	 * @return the user name of this import historic
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this import historic.
	 *
	 * @param userName the user name of this import historic
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this import historic.
	 *
	 * @return the create date of this import historic
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this import historic.
	 *
	 * @param createDate the create date of this import historic
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this import historic.
	 *
	 * @return the modified date of this import historic
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this import historic.
	 *
	 * @param modifiedDate the modified date of this import historic
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the status of this import historic.
	 *
	 * @return the status of this import historic
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this import historic.
	 *
	 * @param status the status of this import historic
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this import historic.
	 *
	 * @return the status by user ID of this import historic
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this import historic.
	 *
	 * @param statusByUserId the status by user ID of this import historic
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this import historic.
	 *
	 * @return the status by user uuid of this import historic
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this import historic.
	 *
	 * @param statusByUserUuid the status by user uuid of this import historic
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this import historic.
	 *
	 * @return the status by user name of this import historic
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this import historic.
	 *
	 * @param statusByUserName the status by user name of this import historic
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this import historic.
	 *
	 * @return the status date of this import historic
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this import historic.
	 *
	 * @param statusDate the status date of this import historic
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the result of this import historic.
	 *
	 * @return the result of this import historic
	 */
	public int getResult();

	/**
	 * Sets the result of this import historic.
	 *
	 * @param result the result of this import historic
	 */
	public void setResult(int result);

	/**
	 * Returns the operations of this import historic.
	 *
	 * @return the operations of this import historic
	 */
	public String getOperations();

	/**
	 * Returns the localized operations of this import historic in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized operations of this import historic
	 */
	@AutoEscape
	public String getOperations(Locale locale);

	/**
	 * Returns the localized operations of this import historic in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized operations of this import historic. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getOperations(Locale locale, boolean useDefault);

	/**
	 * Returns the localized operations of this import historic in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized operations of this import historic
	 */
	@AutoEscape
	public String getOperations(String languageId);

	/**
	 * Returns the localized operations of this import historic in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized operations of this import historic
	 */
	@AutoEscape
	public String getOperations(String languageId, boolean useDefault);

	@AutoEscape
	public String getOperationsCurrentLanguageId();

	@AutoEscape
	public String getOperationsCurrentValue();

	/**
	 * Returns a map of the locales and localized operationses of this import historic.
	 *
	 * @return the locales and localized operationses of this import historic
	 */
	public Map<Locale, String> getOperationsMap();

	/**
	 * Sets the operations of this import historic.
	 *
	 * @param operations the operations of this import historic
	 */
	public void setOperations(String operations);

	/**
	 * Sets the localized operations of this import historic in the language.
	 *
	 * @param operations the localized operations of this import historic
	 * @param locale the locale of the language
	 */
	public void setOperations(String operations, Locale locale);

	/**
	 * Sets the localized operations of this import historic in the language, and sets the default locale.
	 *
	 * @param operations the localized operations of this import historic
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setOperations(
		String operations, Locale locale, Locale defaultLocale);

	public void setOperationsCurrentLanguageId(String languageId);

	/**
	 * Sets the localized operationses of this import historic from the map of locales and localized operationses.
	 *
	 * @param operationsMap the locales and localized operationses of this import historic
	 */
	public void setOperationsMap(Map<Locale, String> operationsMap);

	/**
	 * Sets the localized operationses of this import historic from the map of locales and localized operationses, and sets the default locale.
	 *
	 * @param operationsMap the locales and localized operationses of this import historic
	 * @param defaultLocale the default locale
	 */
	public void setOperationsMap(
		Map<Locale, String> operationsMap, Locale defaultLocale);

	/**
	 * Returns the error description of this import historic.
	 *
	 * @return the error description of this import historic
	 */
	public String getErrorDescription();

	/**
	 * Returns the localized error description of this import historic in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized error description of this import historic
	 */
	@AutoEscape
	public String getErrorDescription(Locale locale);

	/**
	 * Returns the localized error description of this import historic in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized error description of this import historic. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getErrorDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized error description of this import historic in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized error description of this import historic
	 */
	@AutoEscape
	public String getErrorDescription(String languageId);

	/**
	 * Returns the localized error description of this import historic in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized error description of this import historic
	 */
	@AutoEscape
	public String getErrorDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getErrorDescriptionCurrentLanguageId();

	@AutoEscape
	public String getErrorDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized error descriptions of this import historic.
	 *
	 * @return the locales and localized error descriptions of this import historic
	 */
	public Map<Locale, String> getErrorDescriptionMap();

	/**
	 * Sets the error description of this import historic.
	 *
	 * @param errorDescription the error description of this import historic
	 */
	public void setErrorDescription(String errorDescription);

	/**
	 * Sets the localized error description of this import historic in the language.
	 *
	 * @param errorDescription the localized error description of this import historic
	 * @param locale the locale of the language
	 */
	public void setErrorDescription(String errorDescription, Locale locale);

	/**
	 * Sets the localized error description of this import historic in the language, and sets the default locale.
	 *
	 * @param errorDescription the localized error description of this import historic
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setErrorDescription(
		String errorDescription, Locale locale, Locale defaultLocale);

	public void setErrorDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized error descriptions of this import historic from the map of locales and localized error descriptions.
	 *
	 * @param errorDescriptionMap the locales and localized error descriptions of this import historic
	 */
	public void setErrorDescriptionMap(Map<Locale, String> errorDescriptionMap);

	/**
	 * Sets the localized error descriptions of this import historic from the map of locales and localized error descriptions, and sets the default locale.
	 *
	 * @param errorDescriptionMap the locales and localized error descriptions of this import historic
	 * @param defaultLocale the default locale
	 */
	public void setErrorDescriptionMap(
		Map<Locale, String> errorDescriptionMap, Locale defaultLocale);

	/**
	 * Returns the error stack trace of this import historic.
	 *
	 * @return the error stack trace of this import historic
	 */
	public String getErrorStackTrace();

	/**
	 * Returns the localized error stack trace of this import historic in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized error stack trace of this import historic
	 */
	@AutoEscape
	public String getErrorStackTrace(Locale locale);

	/**
	 * Returns the localized error stack trace of this import historic in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized error stack trace of this import historic. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getErrorStackTrace(Locale locale, boolean useDefault);

	/**
	 * Returns the localized error stack trace of this import historic in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized error stack trace of this import historic
	 */
	@AutoEscape
	public String getErrorStackTrace(String languageId);

	/**
	 * Returns the localized error stack trace of this import historic in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized error stack trace of this import historic
	 */
	@AutoEscape
	public String getErrorStackTrace(String languageId, boolean useDefault);

	@AutoEscape
	public String getErrorStackTraceCurrentLanguageId();

	@AutoEscape
	public String getErrorStackTraceCurrentValue();

	/**
	 * Returns a map of the locales and localized error stack traces of this import historic.
	 *
	 * @return the locales and localized error stack traces of this import historic
	 */
	public Map<Locale, String> getErrorStackTraceMap();

	/**
	 * Sets the error stack trace of this import historic.
	 *
	 * @param errorStackTrace the error stack trace of this import historic
	 */
	public void setErrorStackTrace(String errorStackTrace);

	/**
	 * Sets the localized error stack trace of this import historic in the language.
	 *
	 * @param errorStackTrace the localized error stack trace of this import historic
	 * @param locale the locale of the language
	 */
	public void setErrorStackTrace(String errorStackTrace, Locale locale);

	/**
	 * Sets the localized error stack trace of this import historic in the language, and sets the default locale.
	 *
	 * @param errorStackTrace the localized error stack trace of this import historic
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setErrorStackTrace(
		String errorStackTrace, Locale locale, Locale defaultLocale);

	public void setErrorStackTraceCurrentLanguageId(String languageId);

	/**
	 * Sets the localized error stack traces of this import historic from the map of locales and localized error stack traces.
	 *
	 * @param errorStackTraceMap the locales and localized error stack traces of this import historic
	 */
	public void setErrorStackTraceMap(Map<Locale, String> errorStackTraceMap);

	/**
	 * Sets the localized error stack traces of this import historic from the map of locales and localized error stack traces, and sets the default locale.
	 *
	 * @param errorStackTraceMap the locales and localized error stack traces of this import historic
	 * @param defaultLocale the default locale
	 */
	public void setErrorStackTraceMap(
		Map<Locale, String> errorStackTraceMap, Locale defaultLocale);

	/**
	 * Returns the start date of this import historic.
	 *
	 * @return the start date of this import historic
	 */
	public Date getStartDate();

	/**
	 * Sets the start date of this import historic.
	 *
	 * @param startDate the start date of this import historic
	 */
	public void setStartDate(Date startDate);

	/**
	 * Returns the finish date of this import historic.
	 *
	 * @return the finish date of this import historic
	 */
	public Date getFinishDate();

	/**
	 * Sets the finish date of this import historic.
	 *
	 * @param finishDate the finish date of this import historic
	 */
	public void setFinishDate(Date finishDate);

	/**
	 * Returns the gtfs file hash of this import historic.
	 *
	 * @return the gtfs file hash of this import historic
	 */
	@AutoEscape
	public String getGtfsFileHash();

	/**
	 * Sets the gtfs file hash of this import historic.
	 *
	 * @param gtfsFileHash the gtfs file hash of this import historic
	 */
	public void setGtfsFileHash(String gtfsFileHash);

	/**
	 * Returns <code>true</code> if this import historic is approved.
	 *
	 * @return <code>true</code> if this import historic is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this import historic is denied.
	 *
	 * @return <code>true</code> if this import historic is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this import historic is a draft.
	 *
	 * @return <code>true</code> if this import historic is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this import historic is expired.
	 *
	 * @return <code>true</code> if this import historic is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this import historic is inactive.
	 *
	 * @return <code>true</code> if this import historic is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this import historic is incomplete.
	 *
	 * @return <code>true</code> if this import historic is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this import historic is pending.
	 *
	 * @return <code>true</code> if this import historic is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this import historic is scheduled.
	 *
	 * @return <code>true</code> if this import historic is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public ImportHistoric cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}