/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.tipi.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import eu.strasbourg.service.tipi.model.TipiEntry;
import eu.strasbourg.service.tipi.model.TipiEntryModel;
import eu.strasbourg.service.tipi.model.TipiEntrySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TipiEntry service. Represents a row in the &quot;tipi_TipiEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TipiEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TipiEntryImpl}.
 * </p>
 *
 * @author Angelique Zunino Champougny
 * @see TipiEntryImpl
 * @see TipiEntry
 * @see TipiEntryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TipiEntryModelImpl extends BaseModelImpl<TipiEntry>
	implements TipiEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tipi entry model instance should use the {@link TipiEntry} interface instead.
	 */
	public static final String TABLE_NAME = "tipi_TipiEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "id_", Types.BIGINT },
			{ "date_", Types.TIMESTAMP },
			{ "total", Types.INTEGER },
			{ "paidCount", Types.INTEGER },
			{ "refusedCount", Types.INTEGER },
			{ "canceledCount", Types.INTEGER },
			{ "type_", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("total", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("paidCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("refusedCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("canceledCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table tipi_TipiEntry (uuid_ VARCHAR(75) null,id_ LONG not null primary key,date_ DATE null,total INTEGER,paidCount INTEGER,refusedCount INTEGER,canceledCount INTEGER,type_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table tipi_TipiEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY tipiEntry.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY tipi_TipiEntry.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.tipi.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.tipi.model.TipiEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.tipi.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.tipi.model.TipiEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.tipi.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.tipi.model.TipiEntry"),
			true);
	public static final long DATE_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TipiEntry toModel(TipiEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TipiEntry model = new TipiEntryImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setDate(soapModel.getDate());
		model.setTotal(soapModel.getTotal());
		model.setPaidCount(soapModel.getPaidCount());
		model.setRefusedCount(soapModel.getRefusedCount());
		model.setCanceledCount(soapModel.getCanceledCount());
		model.setType(soapModel.getType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TipiEntry> toModels(TipiEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TipiEntry> models = new ArrayList<TipiEntry>(soapModels.length);

		for (TipiEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.tipi.service.util.PropsUtil.get(
				"lock.expiration.time.eu.strasbourg.service.tipi.model.TipiEntry"));

	public TipiEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TipiEntry.class;
	}

	@Override
	public String getModelClassName() {
		return TipiEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("id", getId());
		attributes.put("date", getDate());
		attributes.put("total", getTotal());
		attributes.put("paidCount", getPaidCount());
		attributes.put("refusedCount", getRefusedCount());
		attributes.put("canceledCount", getCanceledCount());
		attributes.put("type", getType());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Date date = (Date)attributes.get("date");

		if (date != null) {
			setDate(date);
		}

		Integer total = (Integer)attributes.get("total");

		if (total != null) {
			setTotal(total);
		}

		Integer paidCount = (Integer)attributes.get("paidCount");

		if (paidCount != null) {
			setPaidCount(paidCount);
		}

		Integer refusedCount = (Integer)attributes.get("refusedCount");

		if (refusedCount != null) {
			setRefusedCount(refusedCount);
		}

		Integer canceledCount = (Integer)attributes.get("canceledCount");

		if (canceledCount != null) {
			setCanceledCount(canceledCount);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		_columnBitmask |= DATE_COLUMN_BITMASK;

		if (_originalDate == null) {
			_originalDate = _date;
		}

		_date = date;
	}

	public Date getOriginalDate() {
		return _originalDate;
	}

	@JSON
	@Override
	public int getTotal() {
		return _total;
	}

	@Override
	public void setTotal(int total) {
		_total = total;
	}

	@JSON
	@Override
	public int getPaidCount() {
		return _paidCount;
	}

	@Override
	public void setPaidCount(int paidCount) {
		_paidCount = paidCount;
	}

	@JSON
	@Override
	public int getRefusedCount() {
		return _refusedCount;
	}

	@Override
	public void setRefusedCount(int refusedCount) {
		_refusedCount = refusedCount;
	}

	@JSON
	@Override
	public int getCanceledCount() {
		return _canceledCount;
	}

	@Override
	public void setCanceledCount(int canceledCount) {
		_canceledCount = canceledCount;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TipiEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TipiEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TipiEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TipiEntryImpl tipiEntryImpl = new TipiEntryImpl();

		tipiEntryImpl.setUuid(getUuid());
		tipiEntryImpl.setId(getId());
		tipiEntryImpl.setDate(getDate());
		tipiEntryImpl.setTotal(getTotal());
		tipiEntryImpl.setPaidCount(getPaidCount());
		tipiEntryImpl.setRefusedCount(getRefusedCount());
		tipiEntryImpl.setCanceledCount(getCanceledCount());
		tipiEntryImpl.setType(getType());

		tipiEntryImpl.resetOriginalValues();

		return tipiEntryImpl;
	}

	@Override
	public int compareTo(TipiEntry tipiEntry) {
		long primaryKey = tipiEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TipiEntry)) {
			return false;
		}

		TipiEntry tipiEntry = (TipiEntry)obj;

		long primaryKey = tipiEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TipiEntryModelImpl tipiEntryModelImpl = this;

		tipiEntryModelImpl._originalUuid = tipiEntryModelImpl._uuid;

		tipiEntryModelImpl._originalDate = tipiEntryModelImpl._date;

		tipiEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TipiEntry> toCacheModel() {
		TipiEntryCacheModel tipiEntryCacheModel = new TipiEntryCacheModel();

		tipiEntryCacheModel.uuid = getUuid();

		String uuid = tipiEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			tipiEntryCacheModel.uuid = null;
		}

		tipiEntryCacheModel.id = getId();

		Date date = getDate();

		if (date != null) {
			tipiEntryCacheModel.date = date.getTime();
		}
		else {
			tipiEntryCacheModel.date = Long.MIN_VALUE;
		}

		tipiEntryCacheModel.total = getTotal();

		tipiEntryCacheModel.paidCount = getPaidCount();

		tipiEntryCacheModel.refusedCount = getRefusedCount();

		tipiEntryCacheModel.canceledCount = getCanceledCount();

		tipiEntryCacheModel.type = getType();

		String type = tipiEntryCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			tipiEntryCacheModel.type = null;
		}

		return tipiEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", id=");
		sb.append(getId());
		sb.append(", date=");
		sb.append(getDate());
		sb.append(", total=");
		sb.append(getTotal());
		sb.append(", paidCount=");
		sb.append(getPaidCount());
		sb.append(", refusedCount=");
		sb.append(getRefusedCount());
		sb.append(", canceledCount=");
		sb.append(getCanceledCount());
		sb.append(", type=");
		sb.append(getType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.tipi.model.TipiEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date</column-name><column-value><![CDATA[");
		sb.append(getDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>total</column-name><column-value><![CDATA[");
		sb.append(getTotal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paidCount</column-name><column-value><![CDATA[");
		sb.append(getPaidCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>refusedCount</column-name><column-value><![CDATA[");
		sb.append(getRefusedCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>canceledCount</column-name><column-value><![CDATA[");
		sb.append(getCanceledCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TipiEntry.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TipiEntry.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _id;
	private Date _date;
	private Date _originalDate;
	private int _total;
	private int _paidCount;
	private int _refusedCount;
	private int _canceledCount;
	private String _type;
	private long _columnBitmask;
	private TipiEntry _escapedModel;
}