/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.activity.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedAuditedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the ActivityCourse service. Represents a row in the &quot;activity_ActivityCourse&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>eu.strasbourg.service.activity.model.impl.ActivityCourseModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>eu.strasbourg.service.activity.model.impl.ActivityCourseImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ActivityCourse
 * @generated
 */
@ProviderType
public interface ActivityCourseModel
	extends BaseModel<ActivityCourse>, GroupedModel, LocalizedModel,
			ShardedModel, StagedAuditedModel, WorkflowedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a activity course model instance should use the {@link ActivityCourse} interface instead.
	 */

	/**
	 * Returns the primary key of this activity course.
	 *
	 * @return the primary key of this activity course
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this activity course.
	 *
	 * @param primaryKey the primary key of this activity course
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this activity course.
	 *
	 * @return the uuid of this activity course
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this activity course.
	 *
	 * @param uuid the uuid of this activity course
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the activity course ID of this activity course.
	 *
	 * @return the activity course ID of this activity course
	 */
	public long getActivityCourseId();

	/**
	 * Sets the activity course ID of this activity course.
	 *
	 * @param activityCourseId the activity course ID of this activity course
	 */
	public void setActivityCourseId(long activityCourseId);

	/**
	 * Returns the group ID of this activity course.
	 *
	 * @return the group ID of this activity course
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this activity course.
	 *
	 * @param groupId the group ID of this activity course
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this activity course.
	 *
	 * @return the company ID of this activity course
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this activity course.
	 *
	 * @param companyId the company ID of this activity course
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this activity course.
	 *
	 * @return the user ID of this activity course
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this activity course.
	 *
	 * @param userId the user ID of this activity course
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this activity course.
	 *
	 * @return the user uuid of this activity course
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this activity course.
	 *
	 * @param userUuid the user uuid of this activity course
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this activity course.
	 *
	 * @return the user name of this activity course
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this activity course.
	 *
	 * @param userName the user name of this activity course
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this activity course.
	 *
	 * @return the create date of this activity course
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this activity course.
	 *
	 * @param createDate the create date of this activity course
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this activity course.
	 *
	 * @return the modified date of this activity course
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this activity course.
	 *
	 * @param modifiedDate the modified date of this activity course
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the status of this activity course.
	 *
	 * @return the status of this activity course
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this activity course.
	 *
	 * @param status the status of this activity course
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this activity course.
	 *
	 * @return the status by user ID of this activity course
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this activity course.
	 *
	 * @param statusByUserId the status by user ID of this activity course
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this activity course.
	 *
	 * @return the status by user uuid of this activity course
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this activity course.
	 *
	 * @param statusByUserUuid the status by user uuid of this activity course
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this activity course.
	 *
	 * @return the status by user name of this activity course
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this activity course.
	 *
	 * @param statusByUserName the status by user name of this activity course
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this activity course.
	 *
	 * @return the status date of this activity course
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this activity course.
	 *
	 * @param statusDate the status date of this activity course
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the name of this activity course.
	 *
	 * @return the name of this activity course
	 */
	public String getName();

	/**
	 * Returns the localized name of this activity course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized name of this activity course
	 */
	@AutoEscape
	public String getName(Locale locale);

	/**
	 * Returns the localized name of this activity course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized name of this activity course. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized name of this activity course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized name of this activity course
	 */
	@AutoEscape
	public String getName(String languageId);

	/**
	 * Returns the localized name of this activity course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized name of this activity course
	 */
	@AutoEscape
	public String getName(String languageId, boolean useDefault);

	@AutoEscape
	public String getNameCurrentLanguageId();

	@AutoEscape
	public String getNameCurrentValue();

	/**
	 * Returns a map of the locales and localized names of this activity course.
	 *
	 * @return the locales and localized names of this activity course
	 */
	public Map<Locale, String> getNameMap();

	/**
	 * Sets the name of this activity course.
	 *
	 * @param name the name of this activity course
	 */
	public void setName(String name);

	/**
	 * Sets the localized name of this activity course in the language.
	 *
	 * @param name the localized name of this activity course
	 * @param locale the locale of the language
	 */
	public void setName(String name, Locale locale);

	/**
	 * Sets the localized name of this activity course in the language, and sets the default locale.
	 *
	 * @param name the localized name of this activity course
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setName(String name, Locale locale, Locale defaultLocale);

	public void setNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized names of this activity course from the map of locales and localized names.
	 *
	 * @param nameMap the locales and localized names of this activity course
	 */
	public void setNameMap(Map<Locale, String> nameMap);

	/**
	 * Sets the localized names of this activity course from the map of locales and localized names, and sets the default locale.
	 *
	 * @param nameMap the locales and localized names of this activity course
	 * @param defaultLocale the default locale
	 */
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale);

	/**
	 * Returns the presentation of this activity course.
	 *
	 * @return the presentation of this activity course
	 */
	public String getPresentation();

	/**
	 * Returns the localized presentation of this activity course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized presentation of this activity course
	 */
	@AutoEscape
	public String getPresentation(Locale locale);

	/**
	 * Returns the localized presentation of this activity course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized presentation of this activity course. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getPresentation(Locale locale, boolean useDefault);

	/**
	 * Returns the localized presentation of this activity course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized presentation of this activity course
	 */
	@AutoEscape
	public String getPresentation(String languageId);

	/**
	 * Returns the localized presentation of this activity course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized presentation of this activity course
	 */
	@AutoEscape
	public String getPresentation(String languageId, boolean useDefault);

	@AutoEscape
	public String getPresentationCurrentLanguageId();

	@AutoEscape
	public String getPresentationCurrentValue();

	/**
	 * Returns a map of the locales and localized presentations of this activity course.
	 *
	 * @return the locales and localized presentations of this activity course
	 */
	public Map<Locale, String> getPresentationMap();

	/**
	 * Sets the presentation of this activity course.
	 *
	 * @param presentation the presentation of this activity course
	 */
	public void setPresentation(String presentation);

	/**
	 * Sets the localized presentation of this activity course in the language.
	 *
	 * @param presentation the localized presentation of this activity course
	 * @param locale the locale of the language
	 */
	public void setPresentation(String presentation, Locale locale);

	/**
	 * Sets the localized presentation of this activity course in the language, and sets the default locale.
	 *
	 * @param presentation the localized presentation of this activity course
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setPresentation(
		String presentation, Locale locale, Locale defaultLocale);

	public void setPresentationCurrentLanguageId(String languageId);

	/**
	 * Sets the localized presentations of this activity course from the map of locales and localized presentations.
	 *
	 * @param presentationMap the locales and localized presentations of this activity course
	 */
	public void setPresentationMap(Map<Locale, String> presentationMap);

	/**
	 * Sets the localized presentations of this activity course from the map of locales and localized presentations, and sets the default locale.
	 *
	 * @param presentationMap the locales and localized presentations of this activity course
	 * @param defaultLocale the default locale
	 */
	public void setPresentationMap(
		Map<Locale, String> presentationMap, Locale defaultLocale);

	/**
	 * Returns the arrangements of this activity course.
	 *
	 * @return the arrangements of this activity course
	 */
	public String getArrangements();

	/**
	 * Returns the localized arrangements of this activity course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized arrangements of this activity course
	 */
	@AutoEscape
	public String getArrangements(Locale locale);

	/**
	 * Returns the localized arrangements of this activity course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized arrangements of this activity course. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getArrangements(Locale locale, boolean useDefault);

	/**
	 * Returns the localized arrangements of this activity course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized arrangements of this activity course
	 */
	@AutoEscape
	public String getArrangements(String languageId);

	/**
	 * Returns the localized arrangements of this activity course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized arrangements of this activity course
	 */
	@AutoEscape
	public String getArrangements(String languageId, boolean useDefault);

	@AutoEscape
	public String getArrangementsCurrentLanguageId();

	@AutoEscape
	public String getArrangementsCurrentValue();

	/**
	 * Returns a map of the locales and localized arrangementses of this activity course.
	 *
	 * @return the locales and localized arrangementses of this activity course
	 */
	public Map<Locale, String> getArrangementsMap();

	/**
	 * Sets the arrangements of this activity course.
	 *
	 * @param arrangements the arrangements of this activity course
	 */
	public void setArrangements(String arrangements);

	/**
	 * Sets the localized arrangements of this activity course in the language.
	 *
	 * @param arrangements the localized arrangements of this activity course
	 * @param locale the locale of the language
	 */
	public void setArrangements(String arrangements, Locale locale);

	/**
	 * Sets the localized arrangements of this activity course in the language, and sets the default locale.
	 *
	 * @param arrangements the localized arrangements of this activity course
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setArrangements(
		String arrangements, Locale locale, Locale defaultLocale);

	public void setArrangementsCurrentLanguageId(String languageId);

	/**
	 * Sets the localized arrangementses of this activity course from the map of locales and localized arrangementses.
	 *
	 * @param arrangementsMap the locales and localized arrangementses of this activity course
	 */
	public void setArrangementsMap(Map<Locale, String> arrangementsMap);

	/**
	 * Sets the localized arrangementses of this activity course from the map of locales and localized arrangementses, and sets the default locale.
	 *
	 * @param arrangementsMap the locales and localized arrangementses of this activity course
	 * @param defaultLocale the default locale
	 */
	public void setArrangementsMap(
		Map<Locale, String> arrangementsMap, Locale defaultLocale);

	/**
	 * Returns the price of this activity course.
	 *
	 * @return the price of this activity course
	 */
	public String getPrice();

	/**
	 * Returns the localized price of this activity course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized price of this activity course
	 */
	@AutoEscape
	public String getPrice(Locale locale);

	/**
	 * Returns the localized price of this activity course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized price of this activity course. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getPrice(Locale locale, boolean useDefault);

	/**
	 * Returns the localized price of this activity course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized price of this activity course
	 */
	@AutoEscape
	public String getPrice(String languageId);

	/**
	 * Returns the localized price of this activity course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized price of this activity course
	 */
	@AutoEscape
	public String getPrice(String languageId, boolean useDefault);

	@AutoEscape
	public String getPriceCurrentLanguageId();

	@AutoEscape
	public String getPriceCurrentValue();

	/**
	 * Returns a map of the locales and localized prices of this activity course.
	 *
	 * @return the locales and localized prices of this activity course
	 */
	public Map<Locale, String> getPriceMap();

	/**
	 * Sets the price of this activity course.
	 *
	 * @param price the price of this activity course
	 */
	public void setPrice(String price);

	/**
	 * Sets the localized price of this activity course in the language.
	 *
	 * @param price the localized price of this activity course
	 * @param locale the locale of the language
	 */
	public void setPrice(String price, Locale locale);

	/**
	 * Sets the localized price of this activity course in the language, and sets the default locale.
	 *
	 * @param price the localized price of this activity course
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setPrice(String price, Locale locale, Locale defaultLocale);

	public void setPriceCurrentLanguageId(String languageId);

	/**
	 * Sets the localized prices of this activity course from the map of locales and localized prices.
	 *
	 * @param priceMap the locales and localized prices of this activity course
	 */
	public void setPriceMap(Map<Locale, String> priceMap);

	/**
	 * Sets the localized prices of this activity course from the map of locales and localized prices, and sets the default locale.
	 *
	 * @param priceMap the locales and localized prices of this activity course
	 * @param defaultLocale the default locale
	 */
	public void setPriceMap(Map<Locale, String> priceMap, Locale defaultLocale);

	/**
	 * Returns the activity ID of this activity course.
	 *
	 * @return the activity ID of this activity course
	 */
	public long getActivityId();

	/**
	 * Sets the activity ID of this activity course.
	 *
	 * @param activityId the activity ID of this activity course
	 */
	public void setActivityId(long activityId);

	/**
	 * Returns the organizer ID of this activity course.
	 *
	 * @return the organizer ID of this activity course
	 */
	public long getOrganizerId();

	/**
	 * Sets the organizer ID of this activity course.
	 *
	 * @param organizerId the organizer ID of this activity course
	 */
	public void setOrganizerId(long organizerId);

	/**
	 * Returns the image ID of this activity course.
	 *
	 * @return the image ID of this activity course
	 */
	public long getImageId();

	/**
	 * Sets the image ID of this activity course.
	 *
	 * @param imageId the image ID of this activity course
	 */
	public void setImageId(long imageId);

	/**
	 * Returns the image IDs of this activity course.
	 *
	 * @return the image IDs of this activity course
	 */
	@AutoEscape
	public String getImageIds();

	/**
	 * Sets the image IDs of this activity course.
	 *
	 * @param imageIds the image IDs of this activity course
	 */
	public void setImageIds(String imageIds);

	/**
	 * Returns the videos IDs of this activity course.
	 *
	 * @return the videos IDs of this activity course
	 */
	@AutoEscape
	public String getVideosIds();

	/**
	 * Sets the videos IDs of this activity course.
	 *
	 * @param videosIds the videos IDs of this activity course
	 */
	public void setVideosIds(String videosIds);

	/**
	 * Returns the documents IDs of this activity course.
	 *
	 * @return the documents IDs of this activity course
	 */
	@AutoEscape
	public String getDocumentsIds();

	/**
	 * Sets the documents IDs of this activity course.
	 *
	 * @param documentsIds the documents IDs of this activity course
	 */
	public void setDocumentsIds(String documentsIds);

	/**
	 * Returns <code>true</code> if this activity course is approved.
	 *
	 * @return <code>true</code> if this activity course is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this activity course is denied.
	 *
	 * @return <code>true</code> if this activity course is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this activity course is a draft.
	 *
	 * @return <code>true</code> if this activity course is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this activity course is expired.
	 *
	 * @return <code>true</code> if this activity course is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this activity course is inactive.
	 *
	 * @return <code>true</code> if this activity course is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this activity course is incomplete.
	 *
	 * @return <code>true</code> if this activity course is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this activity course is pending.
	 *
	 * @return <code>true</code> if this activity course is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this activity course is scheduled.
	 *
	 * @return <code>true</code> if this activity course is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		eu.strasbourg.service.activity.model.ActivityCourse activityCourse);

	@Override
	public int hashCode();

	@Override
	public CacheModel<eu.strasbourg.service.activity.model.ActivityCourse>
		toCacheModel();

	@Override
	public eu.strasbourg.service.activity.model.ActivityCourse toEscapedModel();

	@Override
	public eu.strasbourg.service.activity.model.ActivityCourse
		toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();

}