/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.activity.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedAuditedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the ActivityOrganizer service. Represents a row in the &quot;activity_ActivityOrganizer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link eu.strasbourg.service.activity.model.impl.ActivityOrganizerModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link eu.strasbourg.service.activity.model.impl.ActivityOrganizerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ActivityOrganizer
 * @see eu.strasbourg.service.activity.model.impl.ActivityOrganizerImpl
 * @see eu.strasbourg.service.activity.model.impl.ActivityOrganizerModelImpl
 * @generated
 */
@ProviderType
public interface ActivityOrganizerModel extends BaseModel<ActivityOrganizer>,
	GroupedModel, LocalizedModel, ShardedModel, StagedAuditedModel,
	WorkflowedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a activity organizer model instance should use the {@link ActivityOrganizer} interface instead.
	 */

	/**
	 * Returns the primary key of this activity organizer.
	 *
	 * @return the primary key of this activity organizer
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this activity organizer.
	 *
	 * @param primaryKey the primary key of this activity organizer
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this activity organizer.
	 *
	 * @return the uuid of this activity organizer
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this activity organizer.
	 *
	 * @param uuid the uuid of this activity organizer
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the activity organizer ID of this activity organizer.
	 *
	 * @return the activity organizer ID of this activity organizer
	 */
	public long getActivityOrganizerId();

	/**
	 * Sets the activity organizer ID of this activity organizer.
	 *
	 * @param activityOrganizerId the activity organizer ID of this activity organizer
	 */
	public void setActivityOrganizerId(long activityOrganizerId);

	/**
	 * Returns the group ID of this activity organizer.
	 *
	 * @return the group ID of this activity organizer
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this activity organizer.
	 *
	 * @param groupId the group ID of this activity organizer
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this activity organizer.
	 *
	 * @return the company ID of this activity organizer
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this activity organizer.
	 *
	 * @param companyId the company ID of this activity organizer
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this activity organizer.
	 *
	 * @return the user ID of this activity organizer
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this activity organizer.
	 *
	 * @param userId the user ID of this activity organizer
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this activity organizer.
	 *
	 * @return the user uuid of this activity organizer
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this activity organizer.
	 *
	 * @param userUuid the user uuid of this activity organizer
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this activity organizer.
	 *
	 * @return the user name of this activity organizer
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this activity organizer.
	 *
	 * @param userName the user name of this activity organizer
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this activity organizer.
	 *
	 * @return the create date of this activity organizer
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this activity organizer.
	 *
	 * @param createDate the create date of this activity organizer
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this activity organizer.
	 *
	 * @return the modified date of this activity organizer
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this activity organizer.
	 *
	 * @param modifiedDate the modified date of this activity organizer
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the status of this activity organizer.
	 *
	 * @return the status of this activity organizer
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this activity organizer.
	 *
	 * @param status the status of this activity organizer
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this activity organizer.
	 *
	 * @return the status by user ID of this activity organizer
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this activity organizer.
	 *
	 * @param statusByUserId the status by user ID of this activity organizer
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this activity organizer.
	 *
	 * @return the status by user uuid of this activity organizer
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this activity organizer.
	 *
	 * @param statusByUserUuid the status by user uuid of this activity organizer
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this activity organizer.
	 *
	 * @return the status by user name of this activity organizer
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this activity organizer.
	 *
	 * @param statusByUserName the status by user name of this activity organizer
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this activity organizer.
	 *
	 * @return the status date of this activity organizer
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this activity organizer.
	 *
	 * @param statusDate the status date of this activity organizer
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the name of this activity organizer.
	 *
	 * @return the name of this activity organizer
	 */
	public String getName();

	/**
	 * Returns the localized name of this activity organizer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized name of this activity organizer
	 */
	@AutoEscape
	public String getName(Locale locale);

	/**
	 * Returns the localized name of this activity organizer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized name of this activity organizer. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized name of this activity organizer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized name of this activity organizer
	 */
	@AutoEscape
	public String getName(String languageId);

	/**
	 * Returns the localized name of this activity organizer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized name of this activity organizer
	 */
	@AutoEscape
	public String getName(String languageId, boolean useDefault);

	@AutoEscape
	public String getNameCurrentLanguageId();

	@AutoEscape
	public String getNameCurrentValue();

	/**
	 * Returns a map of the locales and localized names of this activity organizer.
	 *
	 * @return the locales and localized names of this activity organizer
	 */
	public Map<Locale, String> getNameMap();

	/**
	 * Sets the name of this activity organizer.
	 *
	 * @param name the name of this activity organizer
	 */
	public void setName(String name);

	/**
	 * Sets the localized name of this activity organizer in the language.
	 *
	 * @param name the localized name of this activity organizer
	 * @param locale the locale of the language
	 */
	public void setName(String name, Locale locale);

	/**
	 * Sets the localized name of this activity organizer in the language, and sets the default locale.
	 *
	 * @param name the localized name of this activity organizer
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setName(String name, Locale locale, Locale defaultLocale);

	public void setNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized names of this activity organizer from the map of locales and localized names.
	 *
	 * @param nameMap the locales and localized names of this activity organizer
	 */
	public void setNameMap(Map<Locale, String> nameMap);

	/**
	 * Sets the localized names of this activity organizer from the map of locales and localized names, and sets the default locale.
	 *
	 * @param nameMap the locales and localized names of this activity organizer
	 * @param defaultLocale the default locale
	 */
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale);

	/**
	 * Returns the presentation of this activity organizer.
	 *
	 * @return the presentation of this activity organizer
	 */
	public String getPresentation();

	/**
	 * Returns the localized presentation of this activity organizer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized presentation of this activity organizer
	 */
	@AutoEscape
	public String getPresentation(Locale locale);

	/**
	 * Returns the localized presentation of this activity organizer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized presentation of this activity organizer. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getPresentation(Locale locale, boolean useDefault);

	/**
	 * Returns the localized presentation of this activity organizer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized presentation of this activity organizer
	 */
	@AutoEscape
	public String getPresentation(String languageId);

	/**
	 * Returns the localized presentation of this activity organizer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized presentation of this activity organizer
	 */
	@AutoEscape
	public String getPresentation(String languageId, boolean useDefault);

	@AutoEscape
	public String getPresentationCurrentLanguageId();

	@AutoEscape
	public String getPresentationCurrentValue();

	/**
	 * Returns a map of the locales and localized presentations of this activity organizer.
	 *
	 * @return the locales and localized presentations of this activity organizer
	 */
	public Map<Locale, String> getPresentationMap();

	/**
	 * Sets the presentation of this activity organizer.
	 *
	 * @param presentation the presentation of this activity organizer
	 */
	public void setPresentation(String presentation);

	/**
	 * Sets the localized presentation of this activity organizer in the language.
	 *
	 * @param presentation the localized presentation of this activity organizer
	 * @param locale the locale of the language
	 */
	public void setPresentation(String presentation, Locale locale);

	/**
	 * Sets the localized presentation of this activity organizer in the language, and sets the default locale.
	 *
	 * @param presentation the localized presentation of this activity organizer
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setPresentation(String presentation, Locale locale,
		Locale defaultLocale);

	public void setPresentationCurrentLanguageId(String languageId);

	/**
	 * Sets the localized presentations of this activity organizer from the map of locales and localized presentations.
	 *
	 * @param presentationMap the locales and localized presentations of this activity organizer
	 */
	public void setPresentationMap(Map<Locale, String> presentationMap);

	/**
	 * Sets the localized presentations of this activity organizer from the map of locales and localized presentations, and sets the default locale.
	 *
	 * @param presentationMap the locales and localized presentations of this activity organizer
	 * @param defaultLocale the default locale
	 */
	public void setPresentationMap(Map<Locale, String> presentationMap,
		Locale defaultLocale);

	/**
	 * Returns the address of this activity organizer.
	 *
	 * @return the address of this activity organizer
	 */
	public String getAddress();

	/**
	 * Returns the localized address of this activity organizer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized address of this activity organizer
	 */
	@AutoEscape
	public String getAddress(Locale locale);

	/**
	 * Returns the localized address of this activity organizer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized address of this activity organizer. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getAddress(Locale locale, boolean useDefault);

	/**
	 * Returns the localized address of this activity organizer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized address of this activity organizer
	 */
	@AutoEscape
	public String getAddress(String languageId);

	/**
	 * Returns the localized address of this activity organizer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized address of this activity organizer
	 */
	@AutoEscape
	public String getAddress(String languageId, boolean useDefault);

	@AutoEscape
	public String getAddressCurrentLanguageId();

	@AutoEscape
	public String getAddressCurrentValue();

	/**
	 * Returns a map of the locales and localized addresses of this activity organizer.
	 *
	 * @return the locales and localized addresses of this activity organizer
	 */
	public Map<Locale, String> getAddressMap();

	/**
	 * Sets the address of this activity organizer.
	 *
	 * @param address the address of this activity organizer
	 */
	public void setAddress(String address);

	/**
	 * Sets the localized address of this activity organizer in the language.
	 *
	 * @param address the localized address of this activity organizer
	 * @param locale the locale of the language
	 */
	public void setAddress(String address, Locale locale);

	/**
	 * Sets the localized address of this activity organizer in the language, and sets the default locale.
	 *
	 * @param address the localized address of this activity organizer
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setAddress(String address, Locale locale, Locale defaultLocale);

	public void setAddressCurrentLanguageId(String languageId);

	/**
	 * Sets the localized addresses of this activity organizer from the map of locales and localized addresses.
	 *
	 * @param addressMap the locales and localized addresses of this activity organizer
	 */
	public void setAddressMap(Map<Locale, String> addressMap);

	/**
	 * Sets the localized addresses of this activity organizer from the map of locales and localized addresses, and sets the default locale.
	 *
	 * @param addressMap the locales and localized addresses of this activity organizer
	 * @param defaultLocale the default locale
	 */
	public void setAddressMap(Map<Locale, String> addressMap,
		Locale defaultLocale);

	/**
	 * Returns the phone of this activity organizer.
	 *
	 * @return the phone of this activity organizer
	 */
	@AutoEscape
	public String getPhone();

	/**
	 * Sets the phone of this activity organizer.
	 *
	 * @param phone the phone of this activity organizer
	 */
	public void setPhone(String phone);

	/**
	 * Returns the mail of this activity organizer.
	 *
	 * @return the mail of this activity organizer
	 */
	@AutoEscape
	public String getMail();

	/**
	 * Sets the mail of this activity organizer.
	 *
	 * @param mail the mail of this activity organizer
	 */
	public void setMail(String mail);

	/**
	 * Returns the site url of this activity organizer.
	 *
	 * @return the site url of this activity organizer
	 */
	public String getSiteURL();

	/**
	 * Returns the localized site url of this activity organizer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized site url of this activity organizer
	 */
	@AutoEscape
	public String getSiteURL(Locale locale);

	/**
	 * Returns the localized site url of this activity organizer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized site url of this activity organizer. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getSiteURL(Locale locale, boolean useDefault);

	/**
	 * Returns the localized site url of this activity organizer in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized site url of this activity organizer
	 */
	@AutoEscape
	public String getSiteURL(String languageId);

	/**
	 * Returns the localized site url of this activity organizer in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized site url of this activity organizer
	 */
	@AutoEscape
	public String getSiteURL(String languageId, boolean useDefault);

	@AutoEscape
	public String getSiteURLCurrentLanguageId();

	@AutoEscape
	public String getSiteURLCurrentValue();

	/**
	 * Returns a map of the locales and localized site urls of this activity organizer.
	 *
	 * @return the locales and localized site urls of this activity organizer
	 */
	public Map<Locale, String> getSiteURLMap();

	/**
	 * Sets the site url of this activity organizer.
	 *
	 * @param siteURL the site url of this activity organizer
	 */
	public void setSiteURL(String siteURL);

	/**
	 * Sets the localized site url of this activity organizer in the language.
	 *
	 * @param siteURL the localized site url of this activity organizer
	 * @param locale the locale of the language
	 */
	public void setSiteURL(String siteURL, Locale locale);

	/**
	 * Sets the localized site url of this activity organizer in the language, and sets the default locale.
	 *
	 * @param siteURL the localized site url of this activity organizer
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setSiteURL(String siteURL, Locale locale, Locale defaultLocale);

	public void setSiteURLCurrentLanguageId(String languageId);

	/**
	 * Sets the localized site urls of this activity organizer from the map of locales and localized site urls.
	 *
	 * @param siteURLMap the locales and localized site urls of this activity organizer
	 */
	public void setSiteURLMap(Map<Locale, String> siteURLMap);

	/**
	 * Sets the localized site urls of this activity organizer from the map of locales and localized site urls, and sets the default locale.
	 *
	 * @param siteURLMap the locales and localized site urls of this activity organizer
	 * @param defaultLocale the default locale
	 */
	public void setSiteURLMap(Map<Locale, String> siteURLMap,
		Locale defaultLocale);

	/**
	 * Returns the image ID of this activity organizer.
	 *
	 * @return the image ID of this activity organizer
	 */
	public long getImageId();

	/**
	 * Sets the image ID of this activity organizer.
	 *
	 * @param imageId the image ID of this activity organizer
	 */
	public void setImageId(long imageId);

	/**
	 * Returns <code>true</code> if this activity organizer is approved.
	 *
	 * @return <code>true</code> if this activity organizer is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this activity organizer is denied.
	 *
	 * @return <code>true</code> if this activity organizer is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this activity organizer is a draft.
	 *
	 * @return <code>true</code> if this activity organizer is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this activity organizer is expired.
	 *
	 * @return <code>true</code> if this activity organizer is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this activity organizer is inactive.
	 *
	 * @return <code>true</code> if this activity organizer is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this activity organizer is incomplete.
	 *
	 * @return <code>true</code> if this activity organizer is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this activity organizer is pending.
	 *
	 * @return <code>true</code> if this activity organizer is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this activity organizer is scheduled.
	 *
	 * @return <code>true</code> if this activity organizer is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		eu.strasbourg.service.activity.model.ActivityOrganizer activityOrganizer);

	@Override
	public int hashCode();

	@Override
	public CacheModel<eu.strasbourg.service.activity.model.ActivityOrganizer> toCacheModel();

	@Override
	public eu.strasbourg.service.activity.model.ActivityOrganizer toEscapedModel();

	@Override
	public eu.strasbourg.service.activity.model.ActivityOrganizer toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}