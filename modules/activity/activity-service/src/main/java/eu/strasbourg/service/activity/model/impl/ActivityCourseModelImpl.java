/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.activity.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.activity.model.ActivityCourse;
import eu.strasbourg.service.activity.model.ActivityCourseModel;
import eu.strasbourg.service.activity.model.ActivityCourseSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the ActivityCourse service. Represents a row in the &quot;activity_ActivityCourse&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ActivityCourseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ActivityCourseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ActivityCourseImpl
 * @see ActivityCourse
 * @see ActivityCourseModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ActivityCourseModelImpl extends BaseModelImpl<ActivityCourse>
	implements ActivityCourseModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a activity course model instance should use the {@link ActivityCourse} interface instead.
	 */
	public static final String TABLE_NAME = "activity_ActivityCourse";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "activityCourseId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "arrangements", Types.CLOB },
			{ "price", Types.CLOB },
			{ "activityId", Types.BIGINT },
			{ "serviceId", Types.BIGINT },
			{ "organizerId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("activityCourseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("arrangements", Types.CLOB);
		TABLE_COLUMNS_MAP.put("price", Types.CLOB);
		TABLE_COLUMNS_MAP.put("activityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("serviceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organizerId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table activity_ActivityCourse (uuid_ VARCHAR(75) null,activityCourseId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,name STRING null,arrangements TEXT null,price TEXT null,activityId LONG,serviceId LONG,organizerId LONG)";
	public static final String TABLE_SQL_DROP = "drop table activity_ActivityCourse";
	public static final String ORDER_BY_JPQL = " ORDER BY activityCourse.activityCourseId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY activity_ActivityCourse.activityCourseId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.activity.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.activity.model.ActivityCourse"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.activity.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.activity.model.ActivityCourse"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.activity.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.activity.model.ActivityCourse"),
			true);
	public static final long ACTIVITYID_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long ACTIVITYCOURSEID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ActivityCourse toModel(ActivityCourseSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ActivityCourse model = new ActivityCourseImpl();

		model.setUuid(soapModel.getUuid());
		model.setActivityCourseId(soapModel.getActivityCourseId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setName(soapModel.getName());
		model.setArrangements(soapModel.getArrangements());
		model.setPrice(soapModel.getPrice());
		model.setActivityId(soapModel.getActivityId());
		model.setServiceId(soapModel.getServiceId());
		model.setOrganizerId(soapModel.getOrganizerId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ActivityCourse> toModels(ActivityCourseSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ActivityCourse> models = new ArrayList<ActivityCourse>(soapModels.length);

		for (ActivityCourseSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.activity.service.util.PropsUtil.get(
				"lock.expiration.time.eu.strasbourg.service.activity.model.ActivityCourse"));

	public ActivityCourseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _activityCourseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setActivityCourseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _activityCourseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ActivityCourse.class;
	}

	@Override
	public String getModelClassName() {
		return ActivityCourse.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("activityCourseId", getActivityCourseId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("name", getName());
		attributes.put("arrangements", getArrangements());
		attributes.put("price", getPrice());
		attributes.put("activityId", getActivityId());
		attributes.put("serviceId", getServiceId());
		attributes.put("organizerId", getOrganizerId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long activityCourseId = (Long)attributes.get("activityCourseId");

		if (activityCourseId != null) {
			setActivityCourseId(activityCourseId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String arrangements = (String)attributes.get("arrangements");

		if (arrangements != null) {
			setArrangements(arrangements);
		}

		String price = (String)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		Long activityId = (Long)attributes.get("activityId");

		if (activityId != null) {
			setActivityId(activityId);
		}

		Long serviceId = (Long)attributes.get("serviceId");

		if (serviceId != null) {
			setServiceId(serviceId);
		}

		Long organizerId = (Long)attributes.get("organizerId");

		if (organizerId != null) {
			setOrganizerId(organizerId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getActivityCourseId() {
		return _activityCourseId;
	}

	@Override
	public void setActivityCourseId(long activityCourseId) {
		_activityCourseId = activityCourseId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getName(), languageId,
			useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(LocalizationUtil.updateLocalization(getName(), "Name",
					name, languageId, defaultLanguageId));
		}
		else {
			setName(LocalizationUtil.removeLocalization(getName(), "Name",
					languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(LocalizationUtil.updateLocalization(nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getArrangements() {
		if (_arrangements == null) {
			return StringPool.BLANK;
		}
		else {
			return _arrangements;
		}
	}

	@Override
	public String getArrangements(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getArrangements(languageId);
	}

	@Override
	public String getArrangements(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getArrangements(languageId, useDefault);
	}

	@Override
	public String getArrangements(String languageId) {
		return LocalizationUtil.getLocalization(getArrangements(), languageId);
	}

	@Override
	public String getArrangements(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getArrangements(), languageId,
			useDefault);
	}

	@Override
	public String getArrangementsCurrentLanguageId() {
		return _arrangementsCurrentLanguageId;
	}

	@JSON
	@Override
	public String getArrangementsCurrentValue() {
		Locale locale = getLocale(_arrangementsCurrentLanguageId);

		return getArrangements(locale);
	}

	@Override
	public Map<Locale, String> getArrangementsMap() {
		return LocalizationUtil.getLocalizationMap(getArrangements());
	}

	@Override
	public void setArrangements(String arrangements) {
		_arrangements = arrangements;
	}

	@Override
	public void setArrangements(String arrangements, Locale locale) {
		setArrangements(arrangements, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setArrangements(String arrangements, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(arrangements)) {
			setArrangements(LocalizationUtil.updateLocalization(
					getArrangements(), "Arrangements", arrangements,
					languageId, defaultLanguageId));
		}
		else {
			setArrangements(LocalizationUtil.removeLocalization(
					getArrangements(), "Arrangements", languageId));
		}
	}

	@Override
	public void setArrangementsCurrentLanguageId(String languageId) {
		_arrangementsCurrentLanguageId = languageId;
	}

	@Override
	public void setArrangementsMap(Map<Locale, String> arrangementsMap) {
		setArrangementsMap(arrangementsMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setArrangementsMap(Map<Locale, String> arrangementsMap,
		Locale defaultLocale) {
		if (arrangementsMap == null) {
			return;
		}

		setArrangements(LocalizationUtil.updateLocalization(arrangementsMap,
				getArrangements(), "Arrangements",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPrice() {
		if (_price == null) {
			return StringPool.BLANK;
		}
		else {
			return _price;
		}
	}

	@Override
	public String getPrice(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPrice(languageId);
	}

	@Override
	public String getPrice(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPrice(languageId, useDefault);
	}

	@Override
	public String getPrice(String languageId) {
		return LocalizationUtil.getLocalization(getPrice(), languageId);
	}

	@Override
	public String getPrice(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getPrice(), languageId,
			useDefault);
	}

	@Override
	public String getPriceCurrentLanguageId() {
		return _priceCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPriceCurrentValue() {
		Locale locale = getLocale(_priceCurrentLanguageId);

		return getPrice(locale);
	}

	@Override
	public Map<Locale, String> getPriceMap() {
		return LocalizationUtil.getLocalizationMap(getPrice());
	}

	@Override
	public void setPrice(String price) {
		_price = price;
	}

	@Override
	public void setPrice(String price, Locale locale) {
		setPrice(price, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPrice(String price, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(price)) {
			setPrice(LocalizationUtil.updateLocalization(getPrice(), "Price",
					price, languageId, defaultLanguageId));
		}
		else {
			setPrice(LocalizationUtil.removeLocalization(getPrice(), "Price",
					languageId));
		}
	}

	@Override
	public void setPriceCurrentLanguageId(String languageId) {
		_priceCurrentLanguageId = languageId;
	}

	@Override
	public void setPriceMap(Map<Locale, String> priceMap) {
		setPriceMap(priceMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPriceMap(Map<Locale, String> priceMap, Locale defaultLocale) {
		if (priceMap == null) {
			return;
		}

		setPrice(LocalizationUtil.updateLocalization(priceMap, getPrice(),
				"Price", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getActivityId() {
		return _activityId;
	}

	@Override
	public void setActivityId(long activityId) {
		_columnBitmask |= ACTIVITYID_COLUMN_BITMASK;

		if (!_setOriginalActivityId) {
			_setOriginalActivityId = true;

			_originalActivityId = _activityId;
		}

		_activityId = activityId;
	}

	public long getOriginalActivityId() {
		return _originalActivityId;
	}

	@JSON
	@Override
	public long getServiceId() {
		return _serviceId;
	}

	@Override
	public void setServiceId(long serviceId) {
		_serviceId = serviceId;
	}

	@JSON
	@Override
	public long getOrganizerId() {
		return _organizerId;
	}

	@Override
	public void setOrganizerId(long organizerId) {
		_organizerId = organizerId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				ActivityCourse.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ActivityCourse.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> arrangementsMap = getArrangementsMap();

		for (Map.Entry<Locale, String> entry : arrangementsMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> priceMap = getPriceMap();

		for (Map.Entry<Locale, String> entry : priceMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getName();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(ActivityCourse.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}

		String arrangements = getArrangements(defaultLocale);

		if (Validator.isNull(arrangements)) {
			setArrangements(getArrangements(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setArrangements(getArrangements(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String price = getPrice(defaultLocale);

		if (Validator.isNull(price)) {
			setPrice(getPrice(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPrice(getPrice(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public ActivityCourse toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ActivityCourse)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ActivityCourseImpl activityCourseImpl = new ActivityCourseImpl();

		activityCourseImpl.setUuid(getUuid());
		activityCourseImpl.setActivityCourseId(getActivityCourseId());
		activityCourseImpl.setGroupId(getGroupId());
		activityCourseImpl.setCompanyId(getCompanyId());
		activityCourseImpl.setUserId(getUserId());
		activityCourseImpl.setUserName(getUserName());
		activityCourseImpl.setCreateDate(getCreateDate());
		activityCourseImpl.setModifiedDate(getModifiedDate());
		activityCourseImpl.setStatus(getStatus());
		activityCourseImpl.setStatusByUserId(getStatusByUserId());
		activityCourseImpl.setStatusByUserName(getStatusByUserName());
		activityCourseImpl.setStatusDate(getStatusDate());
		activityCourseImpl.setName(getName());
		activityCourseImpl.setArrangements(getArrangements());
		activityCourseImpl.setPrice(getPrice());
		activityCourseImpl.setActivityId(getActivityId());
		activityCourseImpl.setServiceId(getServiceId());
		activityCourseImpl.setOrganizerId(getOrganizerId());

		activityCourseImpl.resetOriginalValues();

		return activityCourseImpl;
	}

	@Override
	public int compareTo(ActivityCourse activityCourse) {
		long primaryKey = activityCourse.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ActivityCourse)) {
			return false;
		}

		ActivityCourse activityCourse = (ActivityCourse)obj;

		long primaryKey = activityCourse.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ActivityCourseModelImpl activityCourseModelImpl = this;

		activityCourseModelImpl._originalUuid = activityCourseModelImpl._uuid;

		activityCourseModelImpl._originalGroupId = activityCourseModelImpl._groupId;

		activityCourseModelImpl._setOriginalGroupId = false;

		activityCourseModelImpl._originalCompanyId = activityCourseModelImpl._companyId;

		activityCourseModelImpl._setOriginalCompanyId = false;

		activityCourseModelImpl._setModifiedDate = false;

		activityCourseModelImpl._originalActivityId = activityCourseModelImpl._activityId;

		activityCourseModelImpl._setOriginalActivityId = false;

		activityCourseModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ActivityCourse> toCacheModel() {
		ActivityCourseCacheModel activityCourseCacheModel = new ActivityCourseCacheModel();

		activityCourseCacheModel.uuid = getUuid();

		String uuid = activityCourseCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			activityCourseCacheModel.uuid = null;
		}

		activityCourseCacheModel.activityCourseId = getActivityCourseId();

		activityCourseCacheModel.groupId = getGroupId();

		activityCourseCacheModel.companyId = getCompanyId();

		activityCourseCacheModel.userId = getUserId();

		activityCourseCacheModel.userName = getUserName();

		String userName = activityCourseCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			activityCourseCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			activityCourseCacheModel.createDate = createDate.getTime();
		}
		else {
			activityCourseCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			activityCourseCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			activityCourseCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		activityCourseCacheModel.status = getStatus();

		activityCourseCacheModel.statusByUserId = getStatusByUserId();

		activityCourseCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = activityCourseCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			activityCourseCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			activityCourseCacheModel.statusDate = statusDate.getTime();
		}
		else {
			activityCourseCacheModel.statusDate = Long.MIN_VALUE;
		}

		activityCourseCacheModel.name = getName();

		String name = activityCourseCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			activityCourseCacheModel.name = null;
		}

		activityCourseCacheModel.arrangements = getArrangements();

		String arrangements = activityCourseCacheModel.arrangements;

		if ((arrangements != null) && (arrangements.length() == 0)) {
			activityCourseCacheModel.arrangements = null;
		}

		activityCourseCacheModel.price = getPrice();

		String price = activityCourseCacheModel.price;

		if ((price != null) && (price.length() == 0)) {
			activityCourseCacheModel.price = null;
		}

		activityCourseCacheModel.activityId = getActivityId();

		activityCourseCacheModel.serviceId = getServiceId();

		activityCourseCacheModel.organizerId = getOrganizerId();

		return activityCourseCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", activityCourseId=");
		sb.append(getActivityCourseId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", arrangements=");
		sb.append(getArrangements());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", activityId=");
		sb.append(getActivityId());
		sb.append(", serviceId=");
		sb.append(getServiceId());
		sb.append(", organizerId=");
		sb.append(getOrganizerId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.activity.model.ActivityCourse");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityCourseId</column-name><column-value><![CDATA[");
		sb.append(getActivityCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>arrangements</column-name><column-value><![CDATA[");
		sb.append(getArrangements());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityId</column-name><column-value><![CDATA[");
		sb.append(getActivityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceId</column-name><column-value><![CDATA[");
		sb.append(getServiceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizerId</column-name><column-value><![CDATA[");
		sb.append(getOrganizerId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ActivityCourse.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ActivityCourse.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _activityCourseId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _name;
	private String _nameCurrentLanguageId;
	private String _arrangements;
	private String _arrangementsCurrentLanguageId;
	private String _price;
	private String _priceCurrentLanguageId;
	private long _activityId;
	private long _originalActivityId;
	private boolean _setOriginalActivityId;
	private long _serviceId;
	private long _organizerId;
	private long _columnBitmask;
	private ActivityCourse _escapedModel;
}