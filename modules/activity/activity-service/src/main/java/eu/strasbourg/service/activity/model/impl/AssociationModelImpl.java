/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.activity.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.activity.model.Association;
import eu.strasbourg.service.activity.model.AssociationModel;
import eu.strasbourg.service.activity.model.AssociationSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Association service. Represents a row in the &quot;activity_Association&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AssociationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AssociationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AssociationImpl
 * @generated
 */
@JSON(strict = true)
public class AssociationModelImpl
	extends BaseModelImpl<Association> implements AssociationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a association model instance should use the <code>Association</code> interface instead.
	 */
	public static final String TABLE_NAME = "activity_Association";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"associationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"name", Types.VARCHAR}, {"presentation", Types.CLOB},
		{"phone", Types.VARCHAR}, {"siteURL", Types.VARCHAR},
		{"mail", Types.VARCHAR}, {"facebookURL", Types.VARCHAR},
		{"othersInformations", Types.CLOB}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("associationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("presentation", Types.CLOB);
		TABLE_COLUMNS_MAP.put("phone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("siteURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("facebookURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("othersInformations", Types.CLOB);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table activity_Association (uuid_ VARCHAR(75) null,associationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name STRING null,presentation TEXT null,phone VARCHAR(75) null,siteURL STRING null,mail VARCHAR(75) null,facebookURL STRING null,othersInformations TEXT null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table activity_Association";

	public static final String ORDER_BY_JPQL =
		" ORDER BY association.associationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY activity_Association.associationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.activity.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.activity.model.Association"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.activity.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.activity.model.Association"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.activity.service.util.PropsUtil.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.activity.model.Association"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long ASSOCIATIONID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Association toModel(AssociationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Association model = new AssociationImpl();

		model.setUuid(soapModel.getUuid());
		model.setAssociationId(soapModel.getAssociationId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setPresentation(soapModel.getPresentation());
		model.setPhone(soapModel.getPhone());
		model.setSiteURL(soapModel.getSiteURL());
		model.setMail(soapModel.getMail());
		model.setFacebookURL(soapModel.getFacebookURL());
		model.setOthersInformations(soapModel.getOthersInformations());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Association> toModels(AssociationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Association> models = new ArrayList<Association>(
			soapModels.length);

		for (AssociationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.activity.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.activity.model.Association"));

	public AssociationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _associationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAssociationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _associationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Association.class;
	}

	@Override
	public String getModelClassName() {
		return Association.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Association, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Association, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Association, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Association)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Association, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Association, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Association)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Association, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Association, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Association>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Association.class.getClassLoader(), Association.class,
			ModelWrapper.class);

		try {
			Constructor<Association> constructor =
				(Constructor<Association>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Association, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Association, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Association, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Association, Object>>();
		Map<String, BiConsumer<Association, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Association, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(Association association, Object uuidObject) {
					association.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"associationId",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getAssociationId();
				}

			});
		attributeSetterBiConsumers.put(
			"associationId",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(
					Association association, Object associationIdObject) {

					association.setAssociationId((Long)associationIdObject);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(
					Association association, Object groupIdObject) {

					association.setGroupId((Long)groupIdObject);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(
					Association association, Object companyIdObject) {

					association.setCompanyId((Long)companyIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(
					Association association, Object userIdObject) {

					association.setUserId((Long)userIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(
					Association association, Object userNameObject) {

					association.setUserName((String)userNameObject);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(
					Association association, Object createDateObject) {

					association.setCreateDate((Date)createDateObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(
					Association association, Object modifiedDateObject) {

					association.setModifiedDate((Date)modifiedDateObject);
				}

			});
		attributeGetterFunctions.put(
			"name",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getName();
				}

			});
		attributeSetterBiConsumers.put(
			"name",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(Association association, Object nameObject) {
					association.setName((String)nameObject);
				}

			});
		attributeGetterFunctions.put(
			"presentation",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getPresentation();
				}

			});
		attributeSetterBiConsumers.put(
			"presentation",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(
					Association association, Object presentationObject) {

					association.setPresentation((String)presentationObject);
				}

			});
		attributeGetterFunctions.put(
			"phone",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getPhone();
				}

			});
		attributeSetterBiConsumers.put(
			"phone",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(
					Association association, Object phoneObject) {

					association.setPhone((String)phoneObject);
				}

			});
		attributeGetterFunctions.put(
			"siteURL",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getSiteURL();
				}

			});
		attributeSetterBiConsumers.put(
			"siteURL",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(
					Association association, Object siteURLObject) {

					association.setSiteURL((String)siteURLObject);
				}

			});
		attributeGetterFunctions.put(
			"mail",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getMail();
				}

			});
		attributeSetterBiConsumers.put(
			"mail",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(Association association, Object mailObject) {
					association.setMail((String)mailObject);
				}

			});
		attributeGetterFunctions.put(
			"facebookURL",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getFacebookURL();
				}

			});
		attributeSetterBiConsumers.put(
			"facebookURL",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(
					Association association, Object facebookURLObject) {

					association.setFacebookURL((String)facebookURLObject);
				}

			});
		attributeGetterFunctions.put(
			"othersInformations",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getOthersInformations();
				}

			});
		attributeSetterBiConsumers.put(
			"othersInformations",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(
					Association association, Object othersInformationsObject) {

					association.setOthersInformations(
						(String)othersInformationsObject);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(
					Association association, Object statusObject) {

					association.setStatus((Integer)statusObject);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserId",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getStatusByUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserId",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(
					Association association, Object statusByUserIdObject) {

					association.setStatusByUserId((Long)statusByUserIdObject);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserName",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getStatusByUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserName",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(
					Association association, Object statusByUserNameObject) {

					association.setStatusByUserName(
						(String)statusByUserNameObject);
				}

			});
		attributeGetterFunctions.put(
			"statusDate",
			new Function<Association, Object>() {

				@Override
				public Object apply(Association association) {
					return association.getStatusDate();
				}

			});
		attributeSetterBiConsumers.put(
			"statusDate",
			new BiConsumer<Association, Object>() {

				@Override
				public void accept(
					Association association, Object statusDateObject) {

					association.setStatusDate((Date)statusDateObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getAssociationId() {
		return _associationId;
	}

	@Override
	public void setAssociationId(long associationId) {
		_associationId = associationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getName(), languageId, useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(
				LocalizationUtil.updateLocalization(
					getName(), "Name", name, languageId, defaultLanguageId));
		}
		else {
			setName(
				LocalizationUtil.removeLocalization(
					getName(), "Name", languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(
			LocalizationUtil.updateLocalization(
				nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPresentation() {
		if (_presentation == null) {
			return "";
		}
		else {
			return _presentation;
		}
	}

	@Override
	public String getPresentation(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPresentation(languageId);
	}

	@Override
	public String getPresentation(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPresentation(languageId, useDefault);
	}

	@Override
	public String getPresentation(String languageId) {
		return LocalizationUtil.getLocalization(getPresentation(), languageId);
	}

	@Override
	public String getPresentation(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getPresentation(), languageId, useDefault);
	}

	@Override
	public String getPresentationCurrentLanguageId() {
		return _presentationCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPresentationCurrentValue() {
		Locale locale = getLocale(_presentationCurrentLanguageId);

		return getPresentation(locale);
	}

	@Override
	public Map<Locale, String> getPresentationMap() {
		return LocalizationUtil.getLocalizationMap(getPresentation());
	}

	@Override
	public void setPresentation(String presentation) {
		_presentation = presentation;
	}

	@Override
	public void setPresentation(String presentation, Locale locale) {
		setPresentation(presentation, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPresentation(
		String presentation, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(presentation)) {
			setPresentation(
				LocalizationUtil.updateLocalization(
					getPresentation(), "Presentation", presentation, languageId,
					defaultLanguageId));
		}
		else {
			setPresentation(
				LocalizationUtil.removeLocalization(
					getPresentation(), "Presentation", languageId));
		}
	}

	@Override
	public void setPresentationCurrentLanguageId(String languageId) {
		_presentationCurrentLanguageId = languageId;
	}

	@Override
	public void setPresentationMap(Map<Locale, String> presentationMap) {
		setPresentationMap(presentationMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPresentationMap(
		Map<Locale, String> presentationMap, Locale defaultLocale) {

		if (presentationMap == null) {
			return;
		}

		setPresentation(
			LocalizationUtil.updateLocalization(
				presentationMap, getPresentation(), "Presentation",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return "";
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@JSON
	@Override
	public String getSiteURL() {
		if (_siteURL == null) {
			return "";
		}
		else {
			return _siteURL;
		}
	}

	@Override
	public String getSiteURL(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSiteURL(languageId);
	}

	@Override
	public String getSiteURL(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSiteURL(languageId, useDefault);
	}

	@Override
	public String getSiteURL(String languageId) {
		return LocalizationUtil.getLocalization(getSiteURL(), languageId);
	}

	@Override
	public String getSiteURL(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getSiteURL(), languageId, useDefault);
	}

	@Override
	public String getSiteURLCurrentLanguageId() {
		return _siteURLCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSiteURLCurrentValue() {
		Locale locale = getLocale(_siteURLCurrentLanguageId);

		return getSiteURL(locale);
	}

	@Override
	public Map<Locale, String> getSiteURLMap() {
		return LocalizationUtil.getLocalizationMap(getSiteURL());
	}

	@Override
	public void setSiteURL(String siteURL) {
		_siteURL = siteURL;
	}

	@Override
	public void setSiteURL(String siteURL, Locale locale) {
		setSiteURL(siteURL, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSiteURL(
		String siteURL, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(siteURL)) {
			setSiteURL(
				LocalizationUtil.updateLocalization(
					getSiteURL(), "SiteURL", siteURL, languageId,
					defaultLanguageId));
		}
		else {
			setSiteURL(
				LocalizationUtil.removeLocalization(
					getSiteURL(), "SiteURL", languageId));
		}
	}

	@Override
	public void setSiteURLCurrentLanguageId(String languageId) {
		_siteURLCurrentLanguageId = languageId;
	}

	@Override
	public void setSiteURLMap(Map<Locale, String> siteURLMap) {
		setSiteURLMap(siteURLMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSiteURLMap(
		Map<Locale, String> siteURLMap, Locale defaultLocale) {

		if (siteURLMap == null) {
			return;
		}

		setSiteURL(
			LocalizationUtil.updateLocalization(
				siteURLMap, getSiteURL(), "SiteURL",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getMail() {
		if (_mail == null) {
			return "";
		}
		else {
			return _mail;
		}
	}

	@Override
	public void setMail(String mail) {
		_mail = mail;
	}

	@JSON
	@Override
	public String getFacebookURL() {
		if (_facebookURL == null) {
			return "";
		}
		else {
			return _facebookURL;
		}
	}

	@Override
	public String getFacebookURL(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFacebookURL(languageId);
	}

	@Override
	public String getFacebookURL(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFacebookURL(languageId, useDefault);
	}

	@Override
	public String getFacebookURL(String languageId) {
		return LocalizationUtil.getLocalization(getFacebookURL(), languageId);
	}

	@Override
	public String getFacebookURL(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getFacebookURL(), languageId, useDefault);
	}

	@Override
	public String getFacebookURLCurrentLanguageId() {
		return _facebookURLCurrentLanguageId;
	}

	@JSON
	@Override
	public String getFacebookURLCurrentValue() {
		Locale locale = getLocale(_facebookURLCurrentLanguageId);

		return getFacebookURL(locale);
	}

	@Override
	public Map<Locale, String> getFacebookURLMap() {
		return LocalizationUtil.getLocalizationMap(getFacebookURL());
	}

	@Override
	public void setFacebookURL(String facebookURL) {
		_facebookURL = facebookURL;
	}

	@Override
	public void setFacebookURL(String facebookURL, Locale locale) {
		setFacebookURL(facebookURL, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setFacebookURL(
		String facebookURL, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(facebookURL)) {
			setFacebookURL(
				LocalizationUtil.updateLocalization(
					getFacebookURL(), "FacebookURL", facebookURL, languageId,
					defaultLanguageId));
		}
		else {
			setFacebookURL(
				LocalizationUtil.removeLocalization(
					getFacebookURL(), "FacebookURL", languageId));
		}
	}

	@Override
	public void setFacebookURLCurrentLanguageId(String languageId) {
		_facebookURLCurrentLanguageId = languageId;
	}

	@Override
	public void setFacebookURLMap(Map<Locale, String> facebookURLMap) {
		setFacebookURLMap(facebookURLMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setFacebookURLMap(
		Map<Locale, String> facebookURLMap, Locale defaultLocale) {

		if (facebookURLMap == null) {
			return;
		}

		setFacebookURL(
			LocalizationUtil.updateLocalization(
				facebookURLMap, getFacebookURL(), "FacebookURL",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getOthersInformations() {
		if (_othersInformations == null) {
			return "";
		}
		else {
			return _othersInformations;
		}
	}

	@Override
	public String getOthersInformations(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getOthersInformations(languageId);
	}

	@Override
	public String getOthersInformations(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getOthersInformations(languageId, useDefault);
	}

	@Override
	public String getOthersInformations(String languageId) {
		return LocalizationUtil.getLocalization(
			getOthersInformations(), languageId);
	}

	@Override
	public String getOthersInformations(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getOthersInformations(), languageId, useDefault);
	}

	@Override
	public String getOthersInformationsCurrentLanguageId() {
		return _othersInformationsCurrentLanguageId;
	}

	@JSON
	@Override
	public String getOthersInformationsCurrentValue() {
		Locale locale = getLocale(_othersInformationsCurrentLanguageId);

		return getOthersInformations(locale);
	}

	@Override
	public Map<Locale, String> getOthersInformationsMap() {
		return LocalizationUtil.getLocalizationMap(getOthersInformations());
	}

	@Override
	public void setOthersInformations(String othersInformations) {
		_othersInformations = othersInformations;
	}

	@Override
	public void setOthersInformations(
		String othersInformations, Locale locale) {

		setOthersInformations(
			othersInformations, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setOthersInformations(
		String othersInformations, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(othersInformations)) {
			setOthersInformations(
				LocalizationUtil.updateLocalization(
					getOthersInformations(), "OthersInformations",
					othersInformations, languageId, defaultLanguageId));
		}
		else {
			setOthersInformations(
				LocalizationUtil.removeLocalization(
					getOthersInformations(), "OthersInformations", languageId));
		}
	}

	@Override
	public void setOthersInformationsCurrentLanguageId(String languageId) {
		_othersInformationsCurrentLanguageId = languageId;
	}

	@Override
	public void setOthersInformationsMap(
		Map<Locale, String> othersInformationsMap) {

		setOthersInformationsMap(
			othersInformationsMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setOthersInformationsMap(
		Map<Locale, String> othersInformationsMap, Locale defaultLocale) {

		if (othersInformationsMap == null) {
			return;
		}

		setOthersInformations(
			LocalizationUtil.updateLocalization(
				othersInformationsMap, getOthersInformations(),
				"OthersInformations", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Association.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Association.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> presentationMap = getPresentationMap();

		for (Map.Entry<Locale, String> entry : presentationMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> siteURLMap = getSiteURLMap();

		for (Map.Entry<Locale, String> entry : siteURLMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> facebookURLMap = getFacebookURLMap();

		for (Map.Entry<Locale, String> entry : facebookURLMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> othersInformationsMap = getOthersInformationsMap();

		for (Map.Entry<Locale, String> entry :
				othersInformationsMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			Association.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}

		String presentation = getPresentation(defaultLocale);

		if (Validator.isNull(presentation)) {
			setPresentation(
				getPresentation(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPresentation(
				getPresentation(defaultLocale), defaultLocale, defaultLocale);
		}

		String siteURL = getSiteURL(defaultLocale);

		if (Validator.isNull(siteURL)) {
			setSiteURL(getSiteURL(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSiteURL(getSiteURL(defaultLocale), defaultLocale, defaultLocale);
		}

		String facebookURL = getFacebookURL(defaultLocale);

		if (Validator.isNull(facebookURL)) {
			setFacebookURL(
				getFacebookURL(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setFacebookURL(
				getFacebookURL(defaultLocale), defaultLocale, defaultLocale);
		}

		String othersInformations = getOthersInformations(defaultLocale);

		if (Validator.isNull(othersInformations)) {
			setOthersInformations(
				getOthersInformations(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setOthersInformations(
				getOthersInformations(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public Association toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Association>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AssociationImpl associationImpl = new AssociationImpl();

		associationImpl.setUuid(getUuid());
		associationImpl.setAssociationId(getAssociationId());
		associationImpl.setGroupId(getGroupId());
		associationImpl.setCompanyId(getCompanyId());
		associationImpl.setUserId(getUserId());
		associationImpl.setUserName(getUserName());
		associationImpl.setCreateDate(getCreateDate());
		associationImpl.setModifiedDate(getModifiedDate());
		associationImpl.setName(getName());
		associationImpl.setPresentation(getPresentation());
		associationImpl.setPhone(getPhone());
		associationImpl.setSiteURL(getSiteURL());
		associationImpl.setMail(getMail());
		associationImpl.setFacebookURL(getFacebookURL());
		associationImpl.setOthersInformations(getOthersInformations());
		associationImpl.setStatus(getStatus());
		associationImpl.setStatusByUserId(getStatusByUserId());
		associationImpl.setStatusByUserName(getStatusByUserName());
		associationImpl.setStatusDate(getStatusDate());

		associationImpl.resetOriginalValues();

		return associationImpl;
	}

	@Override
	public int compareTo(Association association) {
		long primaryKey = association.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Association)) {
			return false;
		}

		Association association = (Association)object;

		long primaryKey = association.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AssociationModelImpl associationModelImpl = this;

		associationModelImpl._originalUuid = associationModelImpl._uuid;

		associationModelImpl._originalGroupId = associationModelImpl._groupId;

		associationModelImpl._setOriginalGroupId = false;

		associationModelImpl._originalCompanyId =
			associationModelImpl._companyId;

		associationModelImpl._setOriginalCompanyId = false;

		associationModelImpl._setModifiedDate = false;

		associationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Association> toCacheModel() {
		AssociationCacheModel associationCacheModel =
			new AssociationCacheModel();

		associationCacheModel.uuid = getUuid();

		String uuid = associationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			associationCacheModel.uuid = null;
		}

		associationCacheModel.associationId = getAssociationId();

		associationCacheModel.groupId = getGroupId();

		associationCacheModel.companyId = getCompanyId();

		associationCacheModel.userId = getUserId();

		associationCacheModel.userName = getUserName();

		String userName = associationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			associationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			associationCacheModel.createDate = createDate.getTime();
		}
		else {
			associationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			associationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			associationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		associationCacheModel.name = getName();

		String name = associationCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			associationCacheModel.name = null;
		}

		associationCacheModel.presentation = getPresentation();

		String presentation = associationCacheModel.presentation;

		if ((presentation != null) && (presentation.length() == 0)) {
			associationCacheModel.presentation = null;
		}

		associationCacheModel.phone = getPhone();

		String phone = associationCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			associationCacheModel.phone = null;
		}

		associationCacheModel.siteURL = getSiteURL();

		String siteURL = associationCacheModel.siteURL;

		if ((siteURL != null) && (siteURL.length() == 0)) {
			associationCacheModel.siteURL = null;
		}

		associationCacheModel.mail = getMail();

		String mail = associationCacheModel.mail;

		if ((mail != null) && (mail.length() == 0)) {
			associationCacheModel.mail = null;
		}

		associationCacheModel.facebookURL = getFacebookURL();

		String facebookURL = associationCacheModel.facebookURL;

		if ((facebookURL != null) && (facebookURL.length() == 0)) {
			associationCacheModel.facebookURL = null;
		}

		associationCacheModel.othersInformations = getOthersInformations();

		String othersInformations = associationCacheModel.othersInformations;

		if ((othersInformations != null) &&
			(othersInformations.length() == 0)) {

			associationCacheModel.othersInformations = null;
		}

		associationCacheModel.status = getStatus();

		associationCacheModel.statusByUserId = getStatusByUserId();

		associationCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = associationCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			associationCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			associationCacheModel.statusDate = statusDate.getTime();
		}
		else {
			associationCacheModel.statusDate = Long.MIN_VALUE;
		}

		return associationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Association, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Association, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Association, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Association)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Association, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Association, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Association, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Association)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Association>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _associationId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _nameCurrentLanguageId;
	private String _presentation;
	private String _presentationCurrentLanguageId;
	private String _phone;
	private String _siteURL;
	private String _siteURLCurrentLanguageId;
	private String _mail;
	private String _facebookURL;
	private String _facebookURLCurrentLanguageId;
	private String _othersInformations;
	private String _othersInformationsCurrentLanguageId;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private Association _escapedModel;

}