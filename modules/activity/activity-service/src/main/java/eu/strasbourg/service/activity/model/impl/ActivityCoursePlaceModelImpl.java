/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.activity.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;

import eu.strasbourg.service.activity.model.ActivityCoursePlace;
import eu.strasbourg.service.activity.model.ActivityCoursePlaceModel;
import eu.strasbourg.service.activity.model.ActivityCoursePlaceSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ActivityCoursePlace service. Represents a row in the &quot;activity_ActivityCoursePlace&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ActivityCoursePlaceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ActivityCoursePlaceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ActivityCoursePlaceImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ActivityCoursePlaceModelImpl
	extends BaseModelImpl<ActivityCoursePlace>
	implements ActivityCoursePlaceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a activity course place model instance should use the <code>ActivityCoursePlace</code> interface instead.
	 */
	public static final String TABLE_NAME = "activity_ActivityCoursePlace";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"activityCoursePlaceId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"activityCourseId", Types.BIGINT}, {"placeSIGId", Types.VARCHAR},
		{"placeName", Types.VARCHAR}, {"placeStreetNumber", Types.VARCHAR},
		{"placeStreetName", Types.VARCHAR}, {"placeZipCode", Types.VARCHAR},
		{"placeCityId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("activityCoursePlaceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("activityCourseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("placeSIGId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeStreetNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeStreetName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeZipCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeCityId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table activity_ActivityCoursePlace (uuid_ VARCHAR(75) null,activityCoursePlaceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,activityCourseId LONG,placeSIGId VARCHAR(75) null,placeName STRING null,placeStreetNumber VARCHAR(75) null,placeStreetName VARCHAR(75) null,placeZipCode VARCHAR(75) null,placeCityId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table activity_ActivityCoursePlace";

	public static final String ORDER_BY_JPQL =
		" ORDER BY activityCoursePlace.activityCoursePlaceId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY activity_ActivityCoursePlace.activityCoursePlaceId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.activity.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.activity.model.ActivityCoursePlace"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.activity.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.activity.model.ActivityCoursePlace"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.activity.service.util.PropsUtil.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.activity.model.ActivityCoursePlace"),
		true);

	public static final long ACTIVITYCOURSEID_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long PLACESIGID_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long ACTIVITYCOURSEPLACEID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ActivityCoursePlace toModel(
		ActivityCoursePlaceSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		ActivityCoursePlace model = new ActivityCoursePlaceImpl();

		model.setUuid(soapModel.getUuid());
		model.setActivityCoursePlaceId(soapModel.getActivityCoursePlaceId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setActivityCourseId(soapModel.getActivityCourseId());
		model.setPlaceSIGId(soapModel.getPlaceSIGId());
		model.setPlaceName(soapModel.getPlaceName());
		model.setPlaceStreetNumber(soapModel.getPlaceStreetNumber());
		model.setPlaceStreetName(soapModel.getPlaceStreetName());
		model.setPlaceZipCode(soapModel.getPlaceZipCode());
		model.setPlaceCityId(soapModel.getPlaceCityId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ActivityCoursePlace> toModels(
		ActivityCoursePlaceSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ActivityCoursePlace> models = new ArrayList<ActivityCoursePlace>(
			soapModels.length);

		for (ActivityCoursePlaceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.activity.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.activity.model.ActivityCoursePlace"));

	public ActivityCoursePlaceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _activityCoursePlaceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setActivityCoursePlaceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _activityCoursePlaceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ActivityCoursePlace.class;
	}

	@Override
	public String getModelClassName() {
		return ActivityCoursePlace.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ActivityCoursePlace, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ActivityCoursePlace, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ActivityCoursePlace, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ActivityCoursePlace)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ActivityCoursePlace, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ActivityCoursePlace, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ActivityCoursePlace)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ActivityCoursePlace, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ActivityCoursePlace, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ActivityCoursePlace>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ActivityCoursePlace.class.getClassLoader(),
			ActivityCoursePlace.class, ModelWrapper.class);

		try {
			Constructor<ActivityCoursePlace> constructor =
				(Constructor<ActivityCoursePlace>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<ActivityCoursePlace, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ActivityCoursePlace, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ActivityCoursePlace, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ActivityCoursePlace, Object>>();
		Map<String, BiConsumer<ActivityCoursePlace, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<ActivityCoursePlace, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<ActivityCoursePlace, Object>() {

				@Override
				public Object apply(ActivityCoursePlace activityCoursePlace) {
					return activityCoursePlace.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<ActivityCoursePlace, Object>() {

				@Override
				public void accept(
					ActivityCoursePlace activityCoursePlace, Object uuid) {

					activityCoursePlace.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"activityCoursePlaceId",
			new Function<ActivityCoursePlace, Object>() {

				@Override
				public Object apply(ActivityCoursePlace activityCoursePlace) {
					return activityCoursePlace.getActivityCoursePlaceId();
				}

			});
		attributeSetterBiConsumers.put(
			"activityCoursePlaceId",
			new BiConsumer<ActivityCoursePlace, Object>() {

				@Override
				public void accept(
					ActivityCoursePlace activityCoursePlace,
					Object activityCoursePlaceId) {

					activityCoursePlace.setActivityCoursePlaceId(
						(Long)activityCoursePlaceId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<ActivityCoursePlace, Object>() {

				@Override
				public Object apply(ActivityCoursePlace activityCoursePlace) {
					return activityCoursePlace.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<ActivityCoursePlace, Object>() {

				@Override
				public void accept(
					ActivityCoursePlace activityCoursePlace, Object groupId) {

					activityCoursePlace.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<ActivityCoursePlace, Object>() {

				@Override
				public Object apply(ActivityCoursePlace activityCoursePlace) {
					return activityCoursePlace.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<ActivityCoursePlace, Object>() {

				@Override
				public void accept(
					ActivityCoursePlace activityCoursePlace, Object companyId) {

					activityCoursePlace.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<ActivityCoursePlace, Object>() {

				@Override
				public Object apply(ActivityCoursePlace activityCoursePlace) {
					return activityCoursePlace.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<ActivityCoursePlace, Object>() {

				@Override
				public void accept(
					ActivityCoursePlace activityCoursePlace, Object userId) {

					activityCoursePlace.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<ActivityCoursePlace, Object>() {

				@Override
				public Object apply(ActivityCoursePlace activityCoursePlace) {
					return activityCoursePlace.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<ActivityCoursePlace, Object>() {

				@Override
				public void accept(
					ActivityCoursePlace activityCoursePlace, Object userName) {

					activityCoursePlace.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<ActivityCoursePlace, Object>() {

				@Override
				public Object apply(ActivityCoursePlace activityCoursePlace) {
					return activityCoursePlace.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<ActivityCoursePlace, Object>() {

				@Override
				public void accept(
					ActivityCoursePlace activityCoursePlace,
					Object createDate) {

					activityCoursePlace.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<ActivityCoursePlace, Object>() {

				@Override
				public Object apply(ActivityCoursePlace activityCoursePlace) {
					return activityCoursePlace.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<ActivityCoursePlace, Object>() {

				@Override
				public void accept(
					ActivityCoursePlace activityCoursePlace,
					Object modifiedDate) {

					activityCoursePlace.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"activityCourseId",
			new Function<ActivityCoursePlace, Object>() {

				@Override
				public Object apply(ActivityCoursePlace activityCoursePlace) {
					return activityCoursePlace.getActivityCourseId();
				}

			});
		attributeSetterBiConsumers.put(
			"activityCourseId",
			new BiConsumer<ActivityCoursePlace, Object>() {

				@Override
				public void accept(
					ActivityCoursePlace activityCoursePlace,
					Object activityCourseId) {

					activityCoursePlace.setActivityCourseId(
						(Long)activityCourseId);
				}

			});
		attributeGetterFunctions.put(
			"placeSIGId",
			new Function<ActivityCoursePlace, Object>() {

				@Override
				public Object apply(ActivityCoursePlace activityCoursePlace) {
					return activityCoursePlace.getPlaceSIGId();
				}

			});
		attributeSetterBiConsumers.put(
			"placeSIGId",
			new BiConsumer<ActivityCoursePlace, Object>() {

				@Override
				public void accept(
					ActivityCoursePlace activityCoursePlace,
					Object placeSIGId) {

					activityCoursePlace.setPlaceSIGId((String)placeSIGId);
				}

			});
		attributeGetterFunctions.put(
			"placeName",
			new Function<ActivityCoursePlace, Object>() {

				@Override
				public Object apply(ActivityCoursePlace activityCoursePlace) {
					return activityCoursePlace.getPlaceName();
				}

			});
		attributeSetterBiConsumers.put(
			"placeName",
			new BiConsumer<ActivityCoursePlace, Object>() {

				@Override
				public void accept(
					ActivityCoursePlace activityCoursePlace, Object placeName) {

					activityCoursePlace.setPlaceName((String)placeName);
				}

			});
		attributeGetterFunctions.put(
			"placeStreetNumber",
			new Function<ActivityCoursePlace, Object>() {

				@Override
				public Object apply(ActivityCoursePlace activityCoursePlace) {
					return activityCoursePlace.getPlaceStreetNumber();
				}

			});
		attributeSetterBiConsumers.put(
			"placeStreetNumber",
			new BiConsumer<ActivityCoursePlace, Object>() {

				@Override
				public void accept(
					ActivityCoursePlace activityCoursePlace,
					Object placeStreetNumber) {

					activityCoursePlace.setPlaceStreetNumber(
						(String)placeStreetNumber);
				}

			});
		attributeGetterFunctions.put(
			"placeStreetName",
			new Function<ActivityCoursePlace, Object>() {

				@Override
				public Object apply(ActivityCoursePlace activityCoursePlace) {
					return activityCoursePlace.getPlaceStreetName();
				}

			});
		attributeSetterBiConsumers.put(
			"placeStreetName",
			new BiConsumer<ActivityCoursePlace, Object>() {

				@Override
				public void accept(
					ActivityCoursePlace activityCoursePlace,
					Object placeStreetName) {

					activityCoursePlace.setPlaceStreetName(
						(String)placeStreetName);
				}

			});
		attributeGetterFunctions.put(
			"placeZipCode",
			new Function<ActivityCoursePlace, Object>() {

				@Override
				public Object apply(ActivityCoursePlace activityCoursePlace) {
					return activityCoursePlace.getPlaceZipCode();
				}

			});
		attributeSetterBiConsumers.put(
			"placeZipCode",
			new BiConsumer<ActivityCoursePlace, Object>() {

				@Override
				public void accept(
					ActivityCoursePlace activityCoursePlace,
					Object placeZipCode) {

					activityCoursePlace.setPlaceZipCode((String)placeZipCode);
				}

			});
		attributeGetterFunctions.put(
			"placeCityId",
			new Function<ActivityCoursePlace, Object>() {

				@Override
				public Object apply(ActivityCoursePlace activityCoursePlace) {
					return activityCoursePlace.getPlaceCityId();
				}

			});
		attributeSetterBiConsumers.put(
			"placeCityId",
			new BiConsumer<ActivityCoursePlace, Object>() {

				@Override
				public void accept(
					ActivityCoursePlace activityCoursePlace,
					Object placeCityId) {

					activityCoursePlace.setPlaceCityId((Long)placeCityId);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getActivityCoursePlaceId() {
		return _activityCoursePlaceId;
	}

	@Override
	public void setActivityCoursePlaceId(long activityCoursePlaceId) {
		_activityCoursePlaceId = activityCoursePlaceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getActivityCourseId() {
		return _activityCourseId;
	}

	@Override
	public void setActivityCourseId(long activityCourseId) {
		_columnBitmask |= ACTIVITYCOURSEID_COLUMN_BITMASK;

		if (!_setOriginalActivityCourseId) {
			_setOriginalActivityCourseId = true;

			_originalActivityCourseId = _activityCourseId;
		}

		_activityCourseId = activityCourseId;
	}

	public long getOriginalActivityCourseId() {
		return _originalActivityCourseId;
	}

	@JSON
	@Override
	public String getPlaceSIGId() {
		if (_placeSIGId == null) {
			return "";
		}
		else {
			return _placeSIGId;
		}
	}

	@Override
	public void setPlaceSIGId(String placeSIGId) {
		_columnBitmask |= PLACESIGID_COLUMN_BITMASK;

		if (_originalPlaceSIGId == null) {
			_originalPlaceSIGId = _placeSIGId;
		}

		_placeSIGId = placeSIGId;
	}

	public String getOriginalPlaceSIGId() {
		return GetterUtil.getString(_originalPlaceSIGId);
	}

	@JSON
	@Override
	public String getPlaceName() {
		if (_placeName == null) {
			return "";
		}
		else {
			return _placeName;
		}
	}

	@Override
	public String getPlaceName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPlaceName(languageId);
	}

	@Override
	public String getPlaceName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPlaceName(languageId, useDefault);
	}

	@Override
	public String getPlaceName(String languageId) {
		return LocalizationUtil.getLocalization(getPlaceName(), languageId);
	}

	@Override
	public String getPlaceName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getPlaceName(), languageId, useDefault);
	}

	@Override
	public String getPlaceNameCurrentLanguageId() {
		return _placeNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPlaceNameCurrentValue() {
		Locale locale = getLocale(_placeNameCurrentLanguageId);

		return getPlaceName(locale);
	}

	@Override
	public Map<Locale, String> getPlaceNameMap() {
		return LocalizationUtil.getLocalizationMap(getPlaceName());
	}

	@Override
	public void setPlaceName(String placeName) {
		_placeName = placeName;
	}

	@Override
	public void setPlaceName(String placeName, Locale locale) {
		setPlaceName(placeName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPlaceName(
		String placeName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(placeName)) {
			setPlaceName(
				LocalizationUtil.updateLocalization(
					getPlaceName(), "PlaceName", placeName, languageId,
					defaultLanguageId));
		}
		else {
			setPlaceName(
				LocalizationUtil.removeLocalization(
					getPlaceName(), "PlaceName", languageId));
		}
	}

	@Override
	public void setPlaceNameCurrentLanguageId(String languageId) {
		_placeNameCurrentLanguageId = languageId;
	}

	@Override
	public void setPlaceNameMap(Map<Locale, String> placeNameMap) {
		setPlaceNameMap(placeNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPlaceNameMap(
		Map<Locale, String> placeNameMap, Locale defaultLocale) {

		if (placeNameMap == null) {
			return;
		}

		setPlaceName(
			LocalizationUtil.updateLocalization(
				placeNameMap, getPlaceName(), "PlaceName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPlaceStreetNumber() {
		if (_placeStreetNumber == null) {
			return "";
		}
		else {
			return _placeStreetNumber;
		}
	}

	@Override
	public void setPlaceStreetNumber(String placeStreetNumber) {
		_placeStreetNumber = placeStreetNumber;
	}

	@JSON
	@Override
	public String getPlaceStreetName() {
		if (_placeStreetName == null) {
			return "";
		}
		else {
			return _placeStreetName;
		}
	}

	@Override
	public void setPlaceStreetName(String placeStreetName) {
		_placeStreetName = placeStreetName;
	}

	@JSON
	@Override
	public String getPlaceZipCode() {
		if (_placeZipCode == null) {
			return "";
		}
		else {
			return _placeZipCode;
		}
	}

	@Override
	public void setPlaceZipCode(String placeZipCode) {
		_placeZipCode = placeZipCode;
	}

	@JSON
	@Override
	public long getPlaceCityId() {
		return _placeCityId;
	}

	@Override
	public void setPlaceCityId(long placeCityId) {
		_placeCityId = placeCityId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(ActivityCoursePlace.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ActivityCoursePlace.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> placeNameMap = getPlaceNameMap();

		for (Map.Entry<Locale, String> entry : placeNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getPlaceName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			ActivityCoursePlace.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String placeName = getPlaceName(defaultLocale);

		if (Validator.isNull(placeName)) {
			setPlaceName(getPlaceName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPlaceName(
				getPlaceName(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public ActivityCoursePlace toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ActivityCoursePlaceImpl activityCoursePlaceImpl =
			new ActivityCoursePlaceImpl();

		activityCoursePlaceImpl.setUuid(getUuid());
		activityCoursePlaceImpl.setActivityCoursePlaceId(
			getActivityCoursePlaceId());
		activityCoursePlaceImpl.setGroupId(getGroupId());
		activityCoursePlaceImpl.setCompanyId(getCompanyId());
		activityCoursePlaceImpl.setUserId(getUserId());
		activityCoursePlaceImpl.setUserName(getUserName());
		activityCoursePlaceImpl.setCreateDate(getCreateDate());
		activityCoursePlaceImpl.setModifiedDate(getModifiedDate());
		activityCoursePlaceImpl.setActivityCourseId(getActivityCourseId());
		activityCoursePlaceImpl.setPlaceSIGId(getPlaceSIGId());
		activityCoursePlaceImpl.setPlaceName(getPlaceName());
		activityCoursePlaceImpl.setPlaceStreetNumber(getPlaceStreetNumber());
		activityCoursePlaceImpl.setPlaceStreetName(getPlaceStreetName());
		activityCoursePlaceImpl.setPlaceZipCode(getPlaceZipCode());
		activityCoursePlaceImpl.setPlaceCityId(getPlaceCityId());

		activityCoursePlaceImpl.resetOriginalValues();

		return activityCoursePlaceImpl;
	}

	@Override
	public int compareTo(ActivityCoursePlace activityCoursePlace) {
		long primaryKey = activityCoursePlace.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ActivityCoursePlace)) {
			return false;
		}

		ActivityCoursePlace activityCoursePlace = (ActivityCoursePlace)obj;

		long primaryKey = activityCoursePlace.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ActivityCoursePlaceModelImpl activityCoursePlaceModelImpl = this;

		activityCoursePlaceModelImpl._originalUuid =
			activityCoursePlaceModelImpl._uuid;

		activityCoursePlaceModelImpl._originalGroupId =
			activityCoursePlaceModelImpl._groupId;

		activityCoursePlaceModelImpl._setOriginalGroupId = false;

		activityCoursePlaceModelImpl._originalCompanyId =
			activityCoursePlaceModelImpl._companyId;

		activityCoursePlaceModelImpl._setOriginalCompanyId = false;

		activityCoursePlaceModelImpl._setModifiedDate = false;

		activityCoursePlaceModelImpl._originalActivityCourseId =
			activityCoursePlaceModelImpl._activityCourseId;

		activityCoursePlaceModelImpl._setOriginalActivityCourseId = false;

		activityCoursePlaceModelImpl._originalPlaceSIGId =
			activityCoursePlaceModelImpl._placeSIGId;

		activityCoursePlaceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ActivityCoursePlace> toCacheModel() {
		ActivityCoursePlaceCacheModel activityCoursePlaceCacheModel =
			new ActivityCoursePlaceCacheModel();

		activityCoursePlaceCacheModel.uuid = getUuid();

		String uuid = activityCoursePlaceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			activityCoursePlaceCacheModel.uuid = null;
		}

		activityCoursePlaceCacheModel.activityCoursePlaceId =
			getActivityCoursePlaceId();

		activityCoursePlaceCacheModel.groupId = getGroupId();

		activityCoursePlaceCacheModel.companyId = getCompanyId();

		activityCoursePlaceCacheModel.userId = getUserId();

		activityCoursePlaceCacheModel.userName = getUserName();

		String userName = activityCoursePlaceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			activityCoursePlaceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			activityCoursePlaceCacheModel.createDate = createDate.getTime();
		}
		else {
			activityCoursePlaceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			activityCoursePlaceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			activityCoursePlaceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		activityCoursePlaceCacheModel.activityCourseId = getActivityCourseId();

		activityCoursePlaceCacheModel.placeSIGId = getPlaceSIGId();

		String placeSIGId = activityCoursePlaceCacheModel.placeSIGId;

		if ((placeSIGId != null) && (placeSIGId.length() == 0)) {
			activityCoursePlaceCacheModel.placeSIGId = null;
		}

		activityCoursePlaceCacheModel.placeName = getPlaceName();

		String placeName = activityCoursePlaceCacheModel.placeName;

		if ((placeName != null) && (placeName.length() == 0)) {
			activityCoursePlaceCacheModel.placeName = null;
		}

		activityCoursePlaceCacheModel.placeStreetNumber =
			getPlaceStreetNumber();

		String placeStreetNumber =
			activityCoursePlaceCacheModel.placeStreetNumber;

		if ((placeStreetNumber != null) && (placeStreetNumber.length() == 0)) {
			activityCoursePlaceCacheModel.placeStreetNumber = null;
		}

		activityCoursePlaceCacheModel.placeStreetName = getPlaceStreetName();

		String placeStreetName = activityCoursePlaceCacheModel.placeStreetName;

		if ((placeStreetName != null) && (placeStreetName.length() == 0)) {
			activityCoursePlaceCacheModel.placeStreetName = null;
		}

		activityCoursePlaceCacheModel.placeZipCode = getPlaceZipCode();

		String placeZipCode = activityCoursePlaceCacheModel.placeZipCode;

		if ((placeZipCode != null) && (placeZipCode.length() == 0)) {
			activityCoursePlaceCacheModel.placeZipCode = null;
		}

		activityCoursePlaceCacheModel.placeCityId = getPlaceCityId();

		return activityCoursePlaceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ActivityCoursePlace, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ActivityCoursePlace, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ActivityCoursePlace, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ActivityCoursePlace)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ActivityCoursePlace, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ActivityCoursePlace, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ActivityCoursePlace, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ActivityCoursePlace)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, ActivityCoursePlace>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private String _uuid;
	private String _originalUuid;
	private long _activityCoursePlaceId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _activityCourseId;
	private long _originalActivityCourseId;
	private boolean _setOriginalActivityCourseId;
	private String _placeSIGId;
	private String _originalPlaceSIGId;
	private String _placeName;
	private String _placeNameCurrentLanguageId;
	private String _placeStreetNumber;
	private String _placeStreetName;
	private String _placeZipCode;
	private long _placeCityId;
	private long _columnBitmask;
	private ActivityCoursePlace _escapedModel;

}