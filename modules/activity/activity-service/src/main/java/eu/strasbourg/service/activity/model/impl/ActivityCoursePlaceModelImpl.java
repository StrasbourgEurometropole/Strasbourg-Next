/**
 * SPDX-FileCopyrightText: (c) 2023 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package eu.strasbourg.service.activity.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import eu.strasbourg.service.activity.model.ActivityCoursePlace;
import eu.strasbourg.service.activity.model.ActivityCoursePlaceModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ActivityCoursePlace service. Represents a row in the &quot;activity_ActivityCoursePlace&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ActivityCoursePlaceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ActivityCoursePlaceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ActivityCoursePlaceImpl
 * @generated
 */
@JSON(strict = true)
public class ActivityCoursePlaceModelImpl
	extends BaseModelImpl<ActivityCoursePlace>
	implements ActivityCoursePlaceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a activity course place model instance should use the <code>ActivityCoursePlace</code> interface instead.
	 */
	public static final String TABLE_NAME = "activity_ActivityCoursePlace";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"activityCoursePlaceId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"activityCourseId", Types.BIGINT}, {"placeSIGId", Types.VARCHAR},
		{"placeName", Types.VARCHAR}, {"placeStreetNumber", Types.VARCHAR},
		{"placeStreetName", Types.VARCHAR}, {"placeZipCode", Types.VARCHAR},
		{"placeCityId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("activityCoursePlaceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("activityCourseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("placeSIGId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeStreetNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeStreetName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeZipCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeCityId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table activity_ActivityCoursePlace (uuid_ VARCHAR(75) null,activityCoursePlaceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,activityCourseId LONG,placeSIGId VARCHAR(75) null,placeName STRING null,placeStreetNumber VARCHAR(75) null,placeStreetName VARCHAR(75) null,placeZipCode VARCHAR(75) null,placeCityId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table activity_ActivityCoursePlace";

	public static final String ORDER_BY_JPQL =
		" ORDER BY activityCoursePlace.activityCoursePlaceId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY activity_ActivityCoursePlace.activityCoursePlaceId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACTIVITYCOURSEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PLACESIGID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACTIVITYCOURSEPLACEID_COLUMN_BITMASK = 32L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.activity.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.activity.model.ActivityCoursePlace"));

	public ActivityCoursePlaceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _activityCoursePlaceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setActivityCoursePlaceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _activityCoursePlaceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ActivityCoursePlace.class;
	}

	@Override
	public String getModelClassName() {
		return ActivityCoursePlace.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ActivityCoursePlace, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ActivityCoursePlace, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ActivityCoursePlace, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ActivityCoursePlace)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ActivityCoursePlace, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ActivityCoursePlace, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ActivityCoursePlace)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ActivityCoursePlace, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ActivityCoursePlace, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<ActivityCoursePlace, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<ActivityCoursePlace, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<ActivityCoursePlace, Object>>();

			attributeGetterFunctions.put("uuid", ActivityCoursePlace::getUuid);
			attributeGetterFunctions.put(
				"activityCoursePlaceId",
				ActivityCoursePlace::getActivityCoursePlaceId);
			attributeGetterFunctions.put(
				"groupId", ActivityCoursePlace::getGroupId);
			attributeGetterFunctions.put(
				"companyId", ActivityCoursePlace::getCompanyId);
			attributeGetterFunctions.put(
				"userId", ActivityCoursePlace::getUserId);
			attributeGetterFunctions.put(
				"userName", ActivityCoursePlace::getUserName);
			attributeGetterFunctions.put(
				"createDate", ActivityCoursePlace::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", ActivityCoursePlace::getModifiedDate);
			attributeGetterFunctions.put(
				"activityCourseId", ActivityCoursePlace::getActivityCourseId);
			attributeGetterFunctions.put(
				"placeSIGId", ActivityCoursePlace::getPlaceSIGId);
			attributeGetterFunctions.put(
				"placeName", ActivityCoursePlace::getPlaceName);
			attributeGetterFunctions.put(
				"placeStreetNumber", ActivityCoursePlace::getPlaceStreetNumber);
			attributeGetterFunctions.put(
				"placeStreetName", ActivityCoursePlace::getPlaceStreetName);
			attributeGetterFunctions.put(
				"placeZipCode", ActivityCoursePlace::getPlaceZipCode);
			attributeGetterFunctions.put(
				"placeCityId", ActivityCoursePlace::getPlaceCityId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<ActivityCoursePlace, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<ActivityCoursePlace, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<ActivityCoursePlace, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<ActivityCoursePlace, String>)
					ActivityCoursePlace::setUuid);
			attributeSetterBiConsumers.put(
				"activityCoursePlaceId",
				(BiConsumer<ActivityCoursePlace, Long>)
					ActivityCoursePlace::setActivityCoursePlaceId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<ActivityCoursePlace, Long>)
					ActivityCoursePlace::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<ActivityCoursePlace, Long>)
					ActivityCoursePlace::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<ActivityCoursePlace, Long>)
					ActivityCoursePlace::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<ActivityCoursePlace, String>)
					ActivityCoursePlace::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<ActivityCoursePlace, Date>)
					ActivityCoursePlace::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<ActivityCoursePlace, Date>)
					ActivityCoursePlace::setModifiedDate);
			attributeSetterBiConsumers.put(
				"activityCourseId",
				(BiConsumer<ActivityCoursePlace, Long>)
					ActivityCoursePlace::setActivityCourseId);
			attributeSetterBiConsumers.put(
				"placeSIGId",
				(BiConsumer<ActivityCoursePlace, String>)
					ActivityCoursePlace::setPlaceSIGId);
			attributeSetterBiConsumers.put(
				"placeName",
				(BiConsumer<ActivityCoursePlace, String>)
					ActivityCoursePlace::setPlaceName);
			attributeSetterBiConsumers.put(
				"placeStreetNumber",
				(BiConsumer<ActivityCoursePlace, String>)
					ActivityCoursePlace::setPlaceStreetNumber);
			attributeSetterBiConsumers.put(
				"placeStreetName",
				(BiConsumer<ActivityCoursePlace, String>)
					ActivityCoursePlace::setPlaceStreetName);
			attributeSetterBiConsumers.put(
				"placeZipCode",
				(BiConsumer<ActivityCoursePlace, String>)
					ActivityCoursePlace::setPlaceZipCode);
			attributeSetterBiConsumers.put(
				"placeCityId",
				(BiConsumer<ActivityCoursePlace, Long>)
					ActivityCoursePlace::setPlaceCityId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getActivityCoursePlaceId() {
		return _activityCoursePlaceId;
	}

	@Override
	public void setActivityCoursePlaceId(long activityCoursePlaceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_activityCoursePlaceId = activityCoursePlaceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getActivityCourseId() {
		return _activityCourseId;
	}

	@Override
	public void setActivityCourseId(long activityCourseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_activityCourseId = activityCourseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalActivityCourseId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("activityCourseId"));
	}

	@JSON
	@Override
	public String getPlaceSIGId() {
		if (_placeSIGId == null) {
			return "";
		}
		else {
			return _placeSIGId;
		}
	}

	@Override
	public void setPlaceSIGId(String placeSIGId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeSIGId = placeSIGId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPlaceSIGId() {
		return getColumnOriginalValue("placeSIGId");
	}

	@JSON
	@Override
	public String getPlaceName() {
		if (_placeName == null) {
			return "";
		}
		else {
			return _placeName;
		}
	}

	@Override
	public String getPlaceName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPlaceName(languageId);
	}

	@Override
	public String getPlaceName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPlaceName(languageId, useDefault);
	}

	@Override
	public String getPlaceName(String languageId) {
		return LocalizationUtil.getLocalization(getPlaceName(), languageId);
	}

	@Override
	public String getPlaceName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getPlaceName(), languageId, useDefault);
	}

	@Override
	public String getPlaceNameCurrentLanguageId() {
		return _placeNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPlaceNameCurrentValue() {
		Locale locale = getLocale(_placeNameCurrentLanguageId);

		return getPlaceName(locale);
	}

	@Override
	public Map<Locale, String> getPlaceNameMap() {
		return LocalizationUtil.getLocalizationMap(getPlaceName());
	}

	@Override
	public void setPlaceName(String placeName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeName = placeName;
	}

	@Override
	public void setPlaceName(String placeName, Locale locale) {
		setPlaceName(placeName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPlaceName(
		String placeName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(placeName)) {
			setPlaceName(
				LocalizationUtil.updateLocalization(
					getPlaceName(), "PlaceName", placeName, languageId,
					defaultLanguageId));
		}
		else {
			setPlaceName(
				LocalizationUtil.removeLocalization(
					getPlaceName(), "PlaceName", languageId));
		}
	}

	@Override
	public void setPlaceNameCurrentLanguageId(String languageId) {
		_placeNameCurrentLanguageId = languageId;
	}

	@Override
	public void setPlaceNameMap(Map<Locale, String> placeNameMap) {
		setPlaceNameMap(placeNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPlaceNameMap(
		Map<Locale, String> placeNameMap, Locale defaultLocale) {

		if (placeNameMap == null) {
			return;
		}

		setPlaceName(
			LocalizationUtil.updateLocalization(
				placeNameMap, getPlaceName(), "PlaceName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPlaceStreetNumber() {
		if (_placeStreetNumber == null) {
			return "";
		}
		else {
			return _placeStreetNumber;
		}
	}

	@Override
	public void setPlaceStreetNumber(String placeStreetNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeStreetNumber = placeStreetNumber;
	}

	@JSON
	@Override
	public String getPlaceStreetName() {
		if (_placeStreetName == null) {
			return "";
		}
		else {
			return _placeStreetName;
		}
	}

	@Override
	public void setPlaceStreetName(String placeStreetName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeStreetName = placeStreetName;
	}

	@JSON
	@Override
	public String getPlaceZipCode() {
		if (_placeZipCode == null) {
			return "";
		}
		else {
			return _placeZipCode;
		}
	}

	@Override
	public void setPlaceZipCode(String placeZipCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeZipCode = placeZipCode;
	}

	@JSON
	@Override
	public long getPlaceCityId() {
		return _placeCityId;
	}

	@Override
	public void setPlaceCityId(long placeCityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeCityId = placeCityId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(ActivityCoursePlace.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ActivityCoursePlace.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> placeNameMap = getPlaceNameMap();

		for (Map.Entry<Locale, String> entry : placeNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getPlaceName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			ActivityCoursePlace.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String placeName = getPlaceName(defaultLocale);

		if (Validator.isNull(placeName)) {
			setPlaceName(getPlaceName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPlaceName(
				getPlaceName(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public ActivityCoursePlace toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ActivityCoursePlace>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ActivityCoursePlaceImpl activityCoursePlaceImpl =
			new ActivityCoursePlaceImpl();

		activityCoursePlaceImpl.setUuid(getUuid());
		activityCoursePlaceImpl.setActivityCoursePlaceId(
			getActivityCoursePlaceId());
		activityCoursePlaceImpl.setGroupId(getGroupId());
		activityCoursePlaceImpl.setCompanyId(getCompanyId());
		activityCoursePlaceImpl.setUserId(getUserId());
		activityCoursePlaceImpl.setUserName(getUserName());
		activityCoursePlaceImpl.setCreateDate(getCreateDate());
		activityCoursePlaceImpl.setModifiedDate(getModifiedDate());
		activityCoursePlaceImpl.setActivityCourseId(getActivityCourseId());
		activityCoursePlaceImpl.setPlaceSIGId(getPlaceSIGId());
		activityCoursePlaceImpl.setPlaceName(getPlaceName());
		activityCoursePlaceImpl.setPlaceStreetNumber(getPlaceStreetNumber());
		activityCoursePlaceImpl.setPlaceStreetName(getPlaceStreetName());
		activityCoursePlaceImpl.setPlaceZipCode(getPlaceZipCode());
		activityCoursePlaceImpl.setPlaceCityId(getPlaceCityId());

		activityCoursePlaceImpl.resetOriginalValues();

		return activityCoursePlaceImpl;
	}

	@Override
	public ActivityCoursePlace cloneWithOriginalValues() {
		ActivityCoursePlaceImpl activityCoursePlaceImpl =
			new ActivityCoursePlaceImpl();

		activityCoursePlaceImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		activityCoursePlaceImpl.setActivityCoursePlaceId(
			this.<Long>getColumnOriginalValue("activityCoursePlaceId"));
		activityCoursePlaceImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		activityCoursePlaceImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		activityCoursePlaceImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		activityCoursePlaceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		activityCoursePlaceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		activityCoursePlaceImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		activityCoursePlaceImpl.setActivityCourseId(
			this.<Long>getColumnOriginalValue("activityCourseId"));
		activityCoursePlaceImpl.setPlaceSIGId(
			this.<String>getColumnOriginalValue("placeSIGId"));
		activityCoursePlaceImpl.setPlaceName(
			this.<String>getColumnOriginalValue("placeName"));
		activityCoursePlaceImpl.setPlaceStreetNumber(
			this.<String>getColumnOriginalValue("placeStreetNumber"));
		activityCoursePlaceImpl.setPlaceStreetName(
			this.<String>getColumnOriginalValue("placeStreetName"));
		activityCoursePlaceImpl.setPlaceZipCode(
			this.<String>getColumnOriginalValue("placeZipCode"));
		activityCoursePlaceImpl.setPlaceCityId(
			this.<Long>getColumnOriginalValue("placeCityId"));

		return activityCoursePlaceImpl;
	}

	@Override
	public int compareTo(ActivityCoursePlace activityCoursePlace) {
		long primaryKey = activityCoursePlace.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ActivityCoursePlace)) {
			return false;
		}

		ActivityCoursePlace activityCoursePlace = (ActivityCoursePlace)object;

		long primaryKey = activityCoursePlace.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ActivityCoursePlace> toCacheModel() {
		ActivityCoursePlaceCacheModel activityCoursePlaceCacheModel =
			new ActivityCoursePlaceCacheModel();

		activityCoursePlaceCacheModel.uuid = getUuid();

		String uuid = activityCoursePlaceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			activityCoursePlaceCacheModel.uuid = null;
		}

		activityCoursePlaceCacheModel.activityCoursePlaceId =
			getActivityCoursePlaceId();

		activityCoursePlaceCacheModel.groupId = getGroupId();

		activityCoursePlaceCacheModel.companyId = getCompanyId();

		activityCoursePlaceCacheModel.userId = getUserId();

		activityCoursePlaceCacheModel.userName = getUserName();

		String userName = activityCoursePlaceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			activityCoursePlaceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			activityCoursePlaceCacheModel.createDate = createDate.getTime();
		}
		else {
			activityCoursePlaceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			activityCoursePlaceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			activityCoursePlaceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		activityCoursePlaceCacheModel.activityCourseId = getActivityCourseId();

		activityCoursePlaceCacheModel.placeSIGId = getPlaceSIGId();

		String placeSIGId = activityCoursePlaceCacheModel.placeSIGId;

		if ((placeSIGId != null) && (placeSIGId.length() == 0)) {
			activityCoursePlaceCacheModel.placeSIGId = null;
		}

		activityCoursePlaceCacheModel.placeName = getPlaceName();

		String placeName = activityCoursePlaceCacheModel.placeName;

		if ((placeName != null) && (placeName.length() == 0)) {
			activityCoursePlaceCacheModel.placeName = null;
		}

		activityCoursePlaceCacheModel.placeStreetNumber =
			getPlaceStreetNumber();

		String placeStreetNumber =
			activityCoursePlaceCacheModel.placeStreetNumber;

		if ((placeStreetNumber != null) && (placeStreetNumber.length() == 0)) {
			activityCoursePlaceCacheModel.placeStreetNumber = null;
		}

		activityCoursePlaceCacheModel.placeStreetName = getPlaceStreetName();

		String placeStreetName = activityCoursePlaceCacheModel.placeStreetName;

		if ((placeStreetName != null) && (placeStreetName.length() == 0)) {
			activityCoursePlaceCacheModel.placeStreetName = null;
		}

		activityCoursePlaceCacheModel.placeZipCode = getPlaceZipCode();

		String placeZipCode = activityCoursePlaceCacheModel.placeZipCode;

		if ((placeZipCode != null) && (placeZipCode.length() == 0)) {
			activityCoursePlaceCacheModel.placeZipCode = null;
		}

		activityCoursePlaceCacheModel.placeCityId = getPlaceCityId();

		return activityCoursePlaceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ActivityCoursePlace, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ActivityCoursePlace, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ActivityCoursePlace, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ActivityCoursePlace)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ActivityCoursePlace>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ActivityCoursePlace.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _activityCoursePlaceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _activityCourseId;
	private String _placeSIGId;
	private String _placeName;
	private String _placeNameCurrentLanguageId;
	private String _placeStreetNumber;
	private String _placeStreetName;
	private String _placeZipCode;
	private long _placeCityId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ActivityCoursePlace, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ActivityCoursePlace)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"activityCoursePlaceId", _activityCoursePlaceId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("activityCourseId", _activityCourseId);
		_columnOriginalValues.put("placeSIGId", _placeSIGId);
		_columnOriginalValues.put("placeName", _placeName);
		_columnOriginalValues.put("placeStreetNumber", _placeStreetNumber);
		_columnOriginalValues.put("placeStreetName", _placeStreetName);
		_columnOriginalValues.put("placeZipCode", _placeZipCode);
		_columnOriginalValues.put("placeCityId", _placeCityId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("activityCoursePlaceId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("activityCourseId", 256L);

		columnBitmasks.put("placeSIGId", 512L);

		columnBitmasks.put("placeName", 1024L);

		columnBitmasks.put("placeStreetNumber", 2048L);

		columnBitmasks.put("placeStreetName", 4096L);

		columnBitmasks.put("placeZipCode", 8192L);

		columnBitmasks.put("placeCityId", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ActivityCoursePlace _escapedModel;

}