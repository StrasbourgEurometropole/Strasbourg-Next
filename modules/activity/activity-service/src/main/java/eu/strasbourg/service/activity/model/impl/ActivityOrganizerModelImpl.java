/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.activity.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.activity.model.ActivityOrganizer;
import eu.strasbourg.service.activity.model.ActivityOrganizerModel;
import eu.strasbourg.service.activity.model.ActivityOrganizerSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the ActivityOrganizer service. Represents a row in the &quot;activity_ActivityOrganizer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ActivityOrganizerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ActivityOrganizerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ActivityOrganizerImpl
 * @see ActivityOrganizer
 * @see ActivityOrganizerModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ActivityOrganizerModelImpl extends BaseModelImpl<ActivityOrganizer>
	implements ActivityOrganizerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a activity organizer model instance should use the {@link ActivityOrganizer} interface instead.
	 */
	public static final String TABLE_NAME = "activity_ActivityOrganizer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "activityOrganizerId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "contactInformation", Types.CLOB },
			{ "imageId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("activityOrganizerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactInformation", Types.CLOB);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table activity_ActivityOrganizer (uuid_ VARCHAR(75) null,activityOrganizerId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,name STRING null,contactInformation TEXT null,imageId LONG)";
	public static final String TABLE_SQL_DROP = "drop table activity_ActivityOrganizer";
	public static final String ORDER_BY_JPQL = " ORDER BY activityOrganizer.activityOrganizerId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY activity_ActivityOrganizer.activityOrganizerId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.activity.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.activity.model.ActivityOrganizer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.activity.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.activity.model.ActivityOrganizer"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.activity.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.activity.model.ActivityOrganizer"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long ACTIVITYORGANIZERID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ActivityOrganizer toModel(ActivityOrganizerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ActivityOrganizer model = new ActivityOrganizerImpl();

		model.setUuid(soapModel.getUuid());
		model.setActivityOrganizerId(soapModel.getActivityOrganizerId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setName(soapModel.getName());
		model.setContactInformation(soapModel.getContactInformation());
		model.setImageId(soapModel.getImageId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ActivityOrganizer> toModels(
		ActivityOrganizerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ActivityOrganizer> models = new ArrayList<ActivityOrganizer>(soapModels.length);

		for (ActivityOrganizerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.activity.service.util.PropsUtil.get(
				"lock.expiration.time.eu.strasbourg.service.activity.model.ActivityOrganizer"));

	public ActivityOrganizerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _activityOrganizerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setActivityOrganizerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _activityOrganizerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ActivityOrganizer.class;
	}

	@Override
	public String getModelClassName() {
		return ActivityOrganizer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("activityOrganizerId", getActivityOrganizerId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("name", getName());
		attributes.put("contactInformation", getContactInformation());
		attributes.put("imageId", getImageId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long activityOrganizerId = (Long)attributes.get("activityOrganizerId");

		if (activityOrganizerId != null) {
			setActivityOrganizerId(activityOrganizerId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String contactInformation = (String)attributes.get("contactInformation");

		if (contactInformation != null) {
			setContactInformation(contactInformation);
		}

		Long imageId = (Long)attributes.get("imageId");

		if (imageId != null) {
			setImageId(imageId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getActivityOrganizerId() {
		return _activityOrganizerId;
	}

	@Override
	public void setActivityOrganizerId(long activityOrganizerId) {
		_activityOrganizerId = activityOrganizerId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getName(), languageId,
			useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(LocalizationUtil.updateLocalization(getName(), "Name",
					name, languageId, defaultLanguageId));
		}
		else {
			setName(LocalizationUtil.removeLocalization(getName(), "Name",
					languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(LocalizationUtil.updateLocalization(nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getContactInformation() {
		if (_contactInformation == null) {
			return StringPool.BLANK;
		}
		else {
			return _contactInformation;
		}
	}

	@Override
	public String getContactInformation(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContactInformation(languageId);
	}

	@Override
	public String getContactInformation(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContactInformation(languageId, useDefault);
	}

	@Override
	public String getContactInformation(String languageId) {
		return LocalizationUtil.getLocalization(getContactInformation(),
			languageId);
	}

	@Override
	public String getContactInformation(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getContactInformation(),
			languageId, useDefault);
	}

	@Override
	public String getContactInformationCurrentLanguageId() {
		return _contactInformationCurrentLanguageId;
	}

	@JSON
	@Override
	public String getContactInformationCurrentValue() {
		Locale locale = getLocale(_contactInformationCurrentLanguageId);

		return getContactInformation(locale);
	}

	@Override
	public Map<Locale, String> getContactInformationMap() {
		return LocalizationUtil.getLocalizationMap(getContactInformation());
	}

	@Override
	public void setContactInformation(String contactInformation) {
		_contactInformation = contactInformation;
	}

	@Override
	public void setContactInformation(String contactInformation, Locale locale) {
		setContactInformation(contactInformation, locale,
			LocaleUtil.getSiteDefault());
	}

	@Override
	public void setContactInformation(String contactInformation, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(contactInformation)) {
			setContactInformation(LocalizationUtil.updateLocalization(
					getContactInformation(), "ContactInformation",
					contactInformation, languageId, defaultLanguageId));
		}
		else {
			setContactInformation(LocalizationUtil.removeLocalization(
					getContactInformation(), "ContactInformation", languageId));
		}
	}

	@Override
	public void setContactInformationCurrentLanguageId(String languageId) {
		_contactInformationCurrentLanguageId = languageId;
	}

	@Override
	public void setContactInformationMap(
		Map<Locale, String> contactInformationMap) {
		setContactInformationMap(contactInformationMap,
			LocaleUtil.getSiteDefault());
	}

	@Override
	public void setContactInformationMap(
		Map<Locale, String> contactInformationMap, Locale defaultLocale) {
		if (contactInformationMap == null) {
			return;
		}

		setContactInformation(LocalizationUtil.updateLocalization(
				contactInformationMap, getContactInformation(),
				"ContactInformation", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(long imageId) {
		_imageId = imageId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				ActivityOrganizer.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ActivityOrganizer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> contactInformationMap = getContactInformationMap();

		for (Map.Entry<Locale, String> entry : contactInformationMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getName();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(ActivityOrganizer.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}

		String contactInformation = getContactInformation(defaultLocale);

		if (Validator.isNull(contactInformation)) {
			setContactInformation(getContactInformation(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setContactInformation(getContactInformation(defaultLocale),
				defaultLocale, defaultLocale);
		}
	}

	@Override
	public ActivityOrganizer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ActivityOrganizer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ActivityOrganizerImpl activityOrganizerImpl = new ActivityOrganizerImpl();

		activityOrganizerImpl.setUuid(getUuid());
		activityOrganizerImpl.setActivityOrganizerId(getActivityOrganizerId());
		activityOrganizerImpl.setGroupId(getGroupId());
		activityOrganizerImpl.setCompanyId(getCompanyId());
		activityOrganizerImpl.setUserId(getUserId());
		activityOrganizerImpl.setUserName(getUserName());
		activityOrganizerImpl.setCreateDate(getCreateDate());
		activityOrganizerImpl.setModifiedDate(getModifiedDate());
		activityOrganizerImpl.setStatus(getStatus());
		activityOrganizerImpl.setStatusByUserId(getStatusByUserId());
		activityOrganizerImpl.setStatusByUserName(getStatusByUserName());
		activityOrganizerImpl.setStatusDate(getStatusDate());
		activityOrganizerImpl.setName(getName());
		activityOrganizerImpl.setContactInformation(getContactInformation());
		activityOrganizerImpl.setImageId(getImageId());

		activityOrganizerImpl.resetOriginalValues();

		return activityOrganizerImpl;
	}

	@Override
	public int compareTo(ActivityOrganizer activityOrganizer) {
		long primaryKey = activityOrganizer.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ActivityOrganizer)) {
			return false;
		}

		ActivityOrganizer activityOrganizer = (ActivityOrganizer)obj;

		long primaryKey = activityOrganizer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ActivityOrganizerModelImpl activityOrganizerModelImpl = this;

		activityOrganizerModelImpl._originalUuid = activityOrganizerModelImpl._uuid;

		activityOrganizerModelImpl._originalGroupId = activityOrganizerModelImpl._groupId;

		activityOrganizerModelImpl._setOriginalGroupId = false;

		activityOrganizerModelImpl._originalCompanyId = activityOrganizerModelImpl._companyId;

		activityOrganizerModelImpl._setOriginalCompanyId = false;

		activityOrganizerModelImpl._setModifiedDate = false;

		activityOrganizerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ActivityOrganizer> toCacheModel() {
		ActivityOrganizerCacheModel activityOrganizerCacheModel = new ActivityOrganizerCacheModel();

		activityOrganizerCacheModel.uuid = getUuid();

		String uuid = activityOrganizerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			activityOrganizerCacheModel.uuid = null;
		}

		activityOrganizerCacheModel.activityOrganizerId = getActivityOrganizerId();

		activityOrganizerCacheModel.groupId = getGroupId();

		activityOrganizerCacheModel.companyId = getCompanyId();

		activityOrganizerCacheModel.userId = getUserId();

		activityOrganizerCacheModel.userName = getUserName();

		String userName = activityOrganizerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			activityOrganizerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			activityOrganizerCacheModel.createDate = createDate.getTime();
		}
		else {
			activityOrganizerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			activityOrganizerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			activityOrganizerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		activityOrganizerCacheModel.status = getStatus();

		activityOrganizerCacheModel.statusByUserId = getStatusByUserId();

		activityOrganizerCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = activityOrganizerCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			activityOrganizerCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			activityOrganizerCacheModel.statusDate = statusDate.getTime();
		}
		else {
			activityOrganizerCacheModel.statusDate = Long.MIN_VALUE;
		}

		activityOrganizerCacheModel.name = getName();

		String name = activityOrganizerCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			activityOrganizerCacheModel.name = null;
		}

		activityOrganizerCacheModel.contactInformation = getContactInformation();

		String contactInformation = activityOrganizerCacheModel.contactInformation;

		if ((contactInformation != null) && (contactInformation.length() == 0)) {
			activityOrganizerCacheModel.contactInformation = null;
		}

		activityOrganizerCacheModel.imageId = getImageId();

		return activityOrganizerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", activityOrganizerId=");
		sb.append(getActivityOrganizerId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", contactInformation=");
		sb.append(getContactInformation());
		sb.append(", imageId=");
		sb.append(getImageId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.activity.model.ActivityOrganizer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityOrganizerId</column-name><column-value><![CDATA[");
		sb.append(getActivityOrganizerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactInformation</column-name><column-value><![CDATA[");
		sb.append(getContactInformation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageId</column-name><column-value><![CDATA[");
		sb.append(getImageId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ActivityOrganizer.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ActivityOrganizer.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _activityOrganizerId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _name;
	private String _nameCurrentLanguageId;
	private String _contactInformation;
	private String _contactInformationCurrentLanguageId;
	private long _imageId;
	private long _columnBitmask;
	private ActivityOrganizer _escapedModel;
}