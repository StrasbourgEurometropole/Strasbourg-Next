/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.activity.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import eu.strasbourg.service.activity.model.ActivityOrganizer;
import eu.strasbourg.service.activity.model.ActivityOrganizerModel;

import java.io.Serializable;
import java.lang.reflect.InvocationHandler;
import java.sql.Blob;
import java.sql.Types;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ActivityOrganizer service. Represents a row in the &quot;activity_ActivityOrganizer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ActivityOrganizerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ActivityOrganizerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ActivityOrganizerImpl
 * @generated
 */
@JSON(strict = true)
public class ActivityOrganizerModelImpl
	extends BaseModelImpl<ActivityOrganizer> implements ActivityOrganizerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a activity organizer model instance should use the <code>ActivityOrganizer</code> interface instead.
	 */
	public static final String TABLE_NAME = "activity_ActivityOrganizer";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"activityOrganizerId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"name", Types.VARCHAR}, {"presentation", Types.CLOB},
		{"address", Types.CLOB}, {"phone", Types.VARCHAR},
		{"mail", Types.VARCHAR}, {"siteURL", Types.VARCHAR},
		{"imageId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("activityOrganizerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("presentation", Types.CLOB);
		TABLE_COLUMNS_MAP.put("address", Types.CLOB);
		TABLE_COLUMNS_MAP.put("phone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("siteURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table activity_ActivityOrganizer (uuid_ VARCHAR(75) null,activityOrganizerId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,name STRING null,presentation TEXT null,address TEXT null,phone VARCHAR(75) null,mail VARCHAR(75) null,siteURL STRING null,imageId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table activity_ActivityOrganizer";

	public static final String ORDER_BY_JPQL =
		" ORDER BY activityOrganizer.activityOrganizerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY activity_ActivityOrganizer.activityOrganizerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACTIVITYORGANIZERID_COLUMN_BITMASK = 8L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.activity.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.activity.model.ActivityOrganizer"));

	public ActivityOrganizerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _activityOrganizerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setActivityOrganizerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _activityOrganizerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ActivityOrganizer.class;
	}

	@Override
	public String getModelClassName() {
		return ActivityOrganizer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ActivityOrganizer, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ActivityOrganizer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ActivityOrganizer, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ActivityOrganizer)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ActivityOrganizer, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ActivityOrganizer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ActivityOrganizer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ActivityOrganizer, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ActivityOrganizer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ActivityOrganizer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ActivityOrganizer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ActivityOrganizer, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ActivityOrganizer, Object>>();
		Map<String, BiConsumer<ActivityOrganizer, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<ActivityOrganizer, ?>>();

		attributeGetterFunctions.put("uuid", ActivityOrganizer::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<ActivityOrganizer, String>)ActivityOrganizer::setUuid);
		attributeGetterFunctions.put(
			"activityOrganizerId", ActivityOrganizer::getActivityOrganizerId);
		attributeSetterBiConsumers.put(
			"activityOrganizerId",
			(BiConsumer<ActivityOrganizer, Long>)
				ActivityOrganizer::setActivityOrganizerId);
		attributeGetterFunctions.put("groupId", ActivityOrganizer::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<ActivityOrganizer, Long>)ActivityOrganizer::setGroupId);
		attributeGetterFunctions.put(
			"companyId", ActivityOrganizer::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ActivityOrganizer, Long>)
				ActivityOrganizer::setCompanyId);
		attributeGetterFunctions.put("userId", ActivityOrganizer::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<ActivityOrganizer, Long>)ActivityOrganizer::setUserId);
		attributeGetterFunctions.put(
			"userName", ActivityOrganizer::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<ActivityOrganizer, String>)
				ActivityOrganizer::setUserName);
		attributeGetterFunctions.put(
			"createDate", ActivityOrganizer::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ActivityOrganizer, Date>)
				ActivityOrganizer::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ActivityOrganizer::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ActivityOrganizer, Date>)
				ActivityOrganizer::setModifiedDate);
		attributeGetterFunctions.put("status", ActivityOrganizer::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<ActivityOrganizer, Integer>)
				ActivityOrganizer::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", ActivityOrganizer::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<ActivityOrganizer, Long>)
				ActivityOrganizer::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", ActivityOrganizer::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<ActivityOrganizer, String>)
				ActivityOrganizer::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", ActivityOrganizer::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<ActivityOrganizer, Date>)
				ActivityOrganizer::setStatusDate);
		attributeGetterFunctions.put("name", ActivityOrganizer::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<ActivityOrganizer, String>)ActivityOrganizer::setName);
		attributeGetterFunctions.put(
			"presentation", ActivityOrganizer::getPresentation);
		attributeSetterBiConsumers.put(
			"presentation",
			(BiConsumer<ActivityOrganizer, String>)
				ActivityOrganizer::setPresentation);
		attributeGetterFunctions.put("address", ActivityOrganizer::getAddress);
		attributeSetterBiConsumers.put(
			"address",
			(BiConsumer<ActivityOrganizer, String>)
				ActivityOrganizer::setAddress);
		attributeGetterFunctions.put("phone", ActivityOrganizer::getPhone);
		attributeSetterBiConsumers.put(
			"phone",
			(BiConsumer<ActivityOrganizer, String>)ActivityOrganizer::setPhone);
		attributeGetterFunctions.put("mail", ActivityOrganizer::getMail);
		attributeSetterBiConsumers.put(
			"mail",
			(BiConsumer<ActivityOrganizer, String>)ActivityOrganizer::setMail);
		attributeGetterFunctions.put("siteURL", ActivityOrganizer::getSiteURL);
		attributeSetterBiConsumers.put(
			"siteURL",
			(BiConsumer<ActivityOrganizer, String>)
				ActivityOrganizer::setSiteURL);
		attributeGetterFunctions.put("imageId", ActivityOrganizer::getImageId);
		attributeSetterBiConsumers.put(
			"imageId",
			(BiConsumer<ActivityOrganizer, Long>)ActivityOrganizer::setImageId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getActivityOrganizerId() {
		return _activityOrganizerId;
	}

	@Override
	public void setActivityOrganizerId(long activityOrganizerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_activityOrganizerId = activityOrganizerId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getName(), languageId, useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(
				LocalizationUtil.updateLocalization(
					getName(), "Name", name, languageId, defaultLanguageId));
		}
		else {
			setName(
				LocalizationUtil.removeLocalization(
					getName(), "Name", languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(
			LocalizationUtil.updateLocalization(
				nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPresentation() {
		if (_presentation == null) {
			return "";
		}
		else {
			return _presentation;
		}
	}

	@Override
	public String getPresentation(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPresentation(languageId);
	}

	@Override
	public String getPresentation(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPresentation(languageId, useDefault);
	}

	@Override
	public String getPresentation(String languageId) {
		return LocalizationUtil.getLocalization(getPresentation(), languageId);
	}

	@Override
	public String getPresentation(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getPresentation(), languageId, useDefault);
	}

	@Override
	public String getPresentationCurrentLanguageId() {
		return _presentationCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPresentationCurrentValue() {
		Locale locale = getLocale(_presentationCurrentLanguageId);

		return getPresentation(locale);
	}

	@Override
	public Map<Locale, String> getPresentationMap() {
		return LocalizationUtil.getLocalizationMap(getPresentation());
	}

	@Override
	public void setPresentation(String presentation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_presentation = presentation;
	}

	@Override
	public void setPresentation(String presentation, Locale locale) {
		setPresentation(presentation, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPresentation(
		String presentation, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(presentation)) {
			setPresentation(
				LocalizationUtil.updateLocalization(
					getPresentation(), "Presentation", presentation, languageId,
					defaultLanguageId));
		}
		else {
			setPresentation(
				LocalizationUtil.removeLocalization(
					getPresentation(), "Presentation", languageId));
		}
	}

	@Override
	public void setPresentationCurrentLanguageId(String languageId) {
		_presentationCurrentLanguageId = languageId;
	}

	@Override
	public void setPresentationMap(Map<Locale, String> presentationMap) {
		setPresentationMap(presentationMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPresentationMap(
		Map<Locale, String> presentationMap, Locale defaultLocale) {

		if (presentationMap == null) {
			return;
		}

		setPresentation(
			LocalizationUtil.updateLocalization(
				presentationMap, getPresentation(), "Presentation",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public String getAddress(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAddress(languageId);
	}

	@Override
	public String getAddress(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAddress(languageId, useDefault);
	}

	@Override
	public String getAddress(String languageId) {
		return LocalizationUtil.getLocalization(getAddress(), languageId);
	}

	@Override
	public String getAddress(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getAddress(), languageId, useDefault);
	}

	@Override
	public String getAddressCurrentLanguageId() {
		return _addressCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAddressCurrentValue() {
		Locale locale = getLocale(_addressCurrentLanguageId);

		return getAddress(locale);
	}

	@Override
	public Map<Locale, String> getAddressMap() {
		return LocalizationUtil.getLocalizationMap(getAddress());
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@Override
	public void setAddress(String address, Locale locale) {
		setAddress(address, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAddress(
		String address, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(address)) {
			setAddress(
				LocalizationUtil.updateLocalization(
					getAddress(), "Address", address, languageId,
					defaultLanguageId));
		}
		else {
			setAddress(
				LocalizationUtil.removeLocalization(
					getAddress(), "Address", languageId));
		}
	}

	@Override
	public void setAddressCurrentLanguageId(String languageId) {
		_addressCurrentLanguageId = languageId;
	}

	@Override
	public void setAddressMap(Map<Locale, String> addressMap) {
		setAddressMap(addressMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAddressMap(
		Map<Locale, String> addressMap, Locale defaultLocale) {

		if (addressMap == null) {
			return;
		}

		setAddress(
			LocalizationUtil.updateLocalization(
				addressMap, getAddress(), "Address",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return "";
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phone = phone;
	}

	@JSON
	@Override
	public String getMail() {
		if (_mail == null) {
			return "";
		}
		else {
			return _mail;
		}
	}

	@Override
	public void setMail(String mail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mail = mail;
	}

	@JSON
	@Override
	public String getSiteURL() {
		if (_siteURL == null) {
			return "";
		}
		else {
			return _siteURL;
		}
	}

	@Override
	public String getSiteURL(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSiteURL(languageId);
	}

	@Override
	public String getSiteURL(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSiteURL(languageId, useDefault);
	}

	@Override
	public String getSiteURL(String languageId) {
		return LocalizationUtil.getLocalization(getSiteURL(), languageId);
	}

	@Override
	public String getSiteURL(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getSiteURL(), languageId, useDefault);
	}

	@Override
	public String getSiteURLCurrentLanguageId() {
		return _siteURLCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSiteURLCurrentValue() {
		Locale locale = getLocale(_siteURLCurrentLanguageId);

		return getSiteURL(locale);
	}

	@Override
	public Map<Locale, String> getSiteURLMap() {
		return LocalizationUtil.getLocalizationMap(getSiteURL());
	}

	@Override
	public void setSiteURL(String siteURL) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_siteURL = siteURL;
	}

	@Override
	public void setSiteURL(String siteURL, Locale locale) {
		setSiteURL(siteURL, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSiteURL(
		String siteURL, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(siteURL)) {
			setSiteURL(
				LocalizationUtil.updateLocalization(
					getSiteURL(), "SiteURL", siteURL, languageId,
					defaultLanguageId));
		}
		else {
			setSiteURL(
				LocalizationUtil.removeLocalization(
					getSiteURL(), "SiteURL", languageId));
		}
	}

	@Override
	public void setSiteURLCurrentLanguageId(String languageId) {
		_siteURLCurrentLanguageId = languageId;
	}

	@Override
	public void setSiteURLMap(Map<Locale, String> siteURLMap) {
		setSiteURLMap(siteURLMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSiteURLMap(
		Map<Locale, String> siteURLMap, Locale defaultLocale) {

		if (siteURLMap == null) {
			return;
		}

		setSiteURL(
			LocalizationUtil.updateLocalization(
				siteURLMap, getSiteURL(), "SiteURL",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(long imageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_imageId = imageId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(ActivityOrganizer.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ActivityOrganizer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> presentationMap = getPresentationMap();

		for (Map.Entry<Locale, String> entry : presentationMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> addressMap = getAddressMap();

		for (Map.Entry<Locale, String> entry : addressMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> siteURLMap = getSiteURLMap();

		for (Map.Entry<Locale, String> entry : siteURLMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			ActivityOrganizer.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}

		String presentation = getPresentation(defaultLocale);

		if (Validator.isNull(presentation)) {
			setPresentation(
				getPresentation(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPresentation(
				getPresentation(defaultLocale), defaultLocale, defaultLocale);
		}

		String address = getAddress(defaultLocale);

		if (Validator.isNull(address)) {
			setAddress(getAddress(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setAddress(getAddress(defaultLocale), defaultLocale, defaultLocale);
		}

		String siteURL = getSiteURL(defaultLocale);

		if (Validator.isNull(siteURL)) {
			setSiteURL(getSiteURL(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSiteURL(getSiteURL(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public ActivityOrganizer toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ActivityOrganizer>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ActivityOrganizerImpl activityOrganizerImpl =
			new ActivityOrganizerImpl();

		activityOrganizerImpl.setUuid(getUuid());
		activityOrganizerImpl.setActivityOrganizerId(getActivityOrganizerId());
		activityOrganizerImpl.setGroupId(getGroupId());
		activityOrganizerImpl.setCompanyId(getCompanyId());
		activityOrganizerImpl.setUserId(getUserId());
		activityOrganizerImpl.setUserName(getUserName());
		activityOrganizerImpl.setCreateDate(getCreateDate());
		activityOrganizerImpl.setModifiedDate(getModifiedDate());
		activityOrganizerImpl.setStatus(getStatus());
		activityOrganizerImpl.setStatusByUserId(getStatusByUserId());
		activityOrganizerImpl.setStatusByUserName(getStatusByUserName());
		activityOrganizerImpl.setStatusDate(getStatusDate());
		activityOrganizerImpl.setName(getName());
		activityOrganizerImpl.setPresentation(getPresentation());
		activityOrganizerImpl.setAddress(getAddress());
		activityOrganizerImpl.setPhone(getPhone());
		activityOrganizerImpl.setMail(getMail());
		activityOrganizerImpl.setSiteURL(getSiteURL());
		activityOrganizerImpl.setImageId(getImageId());

		activityOrganizerImpl.resetOriginalValues();

		return activityOrganizerImpl;
	}

	@Override
	public ActivityOrganizer cloneWithOriginalValues() {
		ActivityOrganizerImpl activityOrganizerImpl =
			new ActivityOrganizerImpl();

		activityOrganizerImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		activityOrganizerImpl.setActivityOrganizerId(
			this.<Long>getColumnOriginalValue("activityOrganizerId"));
		activityOrganizerImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		activityOrganizerImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		activityOrganizerImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		activityOrganizerImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		activityOrganizerImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		activityOrganizerImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		activityOrganizerImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		activityOrganizerImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		activityOrganizerImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		activityOrganizerImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));
		activityOrganizerImpl.setName(
			this.<String>getColumnOriginalValue("name"));
		activityOrganizerImpl.setPresentation(
			this.<String>getColumnOriginalValue("presentation"));
		activityOrganizerImpl.setAddress(
			this.<String>getColumnOriginalValue("address"));
		activityOrganizerImpl.setPhone(
			this.<String>getColumnOriginalValue("phone"));
		activityOrganizerImpl.setMail(
			this.<String>getColumnOriginalValue("mail"));
		activityOrganizerImpl.setSiteURL(
			this.<String>getColumnOriginalValue("siteURL"));
		activityOrganizerImpl.setImageId(
			this.<Long>getColumnOriginalValue("imageId"));

		return activityOrganizerImpl;
	}

	@Override
	public int compareTo(ActivityOrganizer activityOrganizer) {
		long primaryKey = activityOrganizer.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ActivityOrganizer)) {
			return false;
		}

		ActivityOrganizer activityOrganizer = (ActivityOrganizer)object;

		long primaryKey = activityOrganizer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ActivityOrganizer> toCacheModel() {
		ActivityOrganizerCacheModel activityOrganizerCacheModel =
			new ActivityOrganizerCacheModel();

		activityOrganizerCacheModel.uuid = getUuid();

		String uuid = activityOrganizerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			activityOrganizerCacheModel.uuid = null;
		}

		activityOrganizerCacheModel.activityOrganizerId =
			getActivityOrganizerId();

		activityOrganizerCacheModel.groupId = getGroupId();

		activityOrganizerCacheModel.companyId = getCompanyId();

		activityOrganizerCacheModel.userId = getUserId();

		activityOrganizerCacheModel.userName = getUserName();

		String userName = activityOrganizerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			activityOrganizerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			activityOrganizerCacheModel.createDate = createDate.getTime();
		}
		else {
			activityOrganizerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			activityOrganizerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			activityOrganizerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		activityOrganizerCacheModel.status = getStatus();

		activityOrganizerCacheModel.statusByUserId = getStatusByUserId();

		activityOrganizerCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = activityOrganizerCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			activityOrganizerCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			activityOrganizerCacheModel.statusDate = statusDate.getTime();
		}
		else {
			activityOrganizerCacheModel.statusDate = Long.MIN_VALUE;
		}

		activityOrganizerCacheModel.name = getName();

		String name = activityOrganizerCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			activityOrganizerCacheModel.name = null;
		}

		activityOrganizerCacheModel.presentation = getPresentation();

		String presentation = activityOrganizerCacheModel.presentation;

		if ((presentation != null) && (presentation.length() == 0)) {
			activityOrganizerCacheModel.presentation = null;
		}

		activityOrganizerCacheModel.address = getAddress();

		String address = activityOrganizerCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			activityOrganizerCacheModel.address = null;
		}

		activityOrganizerCacheModel.phone = getPhone();

		String phone = activityOrganizerCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			activityOrganizerCacheModel.phone = null;
		}

		activityOrganizerCacheModel.mail = getMail();

		String mail = activityOrganizerCacheModel.mail;

		if ((mail != null) && (mail.length() == 0)) {
			activityOrganizerCacheModel.mail = null;
		}

		activityOrganizerCacheModel.siteURL = getSiteURL();

		String siteURL = activityOrganizerCacheModel.siteURL;

		if ((siteURL != null) && (siteURL.length() == 0)) {
			activityOrganizerCacheModel.siteURL = null;
		}

		activityOrganizerCacheModel.imageId = getImageId();

		return activityOrganizerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ActivityOrganizer, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ActivityOrganizer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ActivityOrganizer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ActivityOrganizer)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ActivityOrganizer>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ActivityOrganizer.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _activityOrganizerId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _name;
	private String _nameCurrentLanguageId;
	private String _presentation;
	private String _presentationCurrentLanguageId;
	private String _address;
	private String _addressCurrentLanguageId;
	private String _phone;
	private String _mail;
	private String _siteURL;
	private String _siteURLCurrentLanguageId;
	private long _imageId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ActivityOrganizer, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ActivityOrganizer)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("activityOrganizerId", _activityOrganizerId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("presentation", _presentation);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("phone", _phone);
		_columnOriginalValues.put("mail", _mail);
		_columnOriginalValues.put("siteURL", _siteURL);
		_columnOriginalValues.put("imageId", _imageId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("activityOrganizerId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("status", 256L);

		columnBitmasks.put("statusByUserId", 512L);

		columnBitmasks.put("statusByUserName", 1024L);

		columnBitmasks.put("statusDate", 2048L);

		columnBitmasks.put("name", 4096L);

		columnBitmasks.put("presentation", 8192L);

		columnBitmasks.put("address", 16384L);

		columnBitmasks.put("phone", 32768L);

		columnBitmasks.put("mail", 65536L);

		columnBitmasks.put("siteURL", 131072L);

		columnBitmasks.put("imageId", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ActivityOrganizer _escapedModel;

}