/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.oidc.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.oidc.model.AnonymisationHistoric;
import eu.strasbourg.service.oidc.model.AnonymisationHistoricModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AnonymisationHistoric service. Represents a row in the &quot;publik_AnonymisationHistoric&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>AnonymisationHistoricModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AnonymisationHistoricImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AnonymisationHistoricImpl
 * @generated
 */
@ProviderType
public class AnonymisationHistoricModelImpl
	extends BaseModelImpl<AnonymisationHistoric>
	implements AnonymisationHistoricModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a anonymisation historic model instance should use the <code>AnonymisationHistoric</code> interface instead.
	 */
	public static final String TABLE_NAME = "publik_AnonymisationHistoric";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"anonymisationHistoricId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"lastPublishDate", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}, {"result", Types.INTEGER},
		{"operations", Types.CLOB}, {"errorDescription", Types.CLOB},
		{"errorStackTrace", Types.CLOB}, {"startDate", Types.TIMESTAMP},
		{"finishDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("anonymisationHistoricId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("result", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("operations", Types.CLOB);
		TABLE_COLUMNS_MAP.put("errorDescription", Types.CLOB);
		TABLE_COLUMNS_MAP.put("errorStackTrace", Types.CLOB);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("finishDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table publik_AnonymisationHistoric (uuid_ VARCHAR(75) null,anonymisationHistoricId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,lastPublishDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,result INTEGER,operations TEXT null,errorDescription TEXT null,errorStackTrace TEXT null,startDate DATE null,finishDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table publik_AnonymisationHistoric";

	public static final String ORDER_BY_JPQL =
		" ORDER BY anonymisationHistoric.anonymisationHistoricId DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY publik_AnonymisationHistoric.anonymisationHistoricId DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.oidc.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.oidc.model.AnonymisationHistoric"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.oidc.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.oidc.model.AnonymisationHistoric"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.oidc.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.oidc.model.AnonymisationHistoric"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long ANONYMISATIONHISTORICID_COLUMN_BITMASK = 8L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.oidc.service.util.ServiceProps.get(
			"lock.expiration.time.eu.strasbourg.service.oidc.model.AnonymisationHistoric"));

	public AnonymisationHistoricModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _anonymisationHistoricId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAnonymisationHistoricId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _anonymisationHistoricId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AnonymisationHistoric.class;
	}

	@Override
	public String getModelClassName() {
		return AnonymisationHistoric.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AnonymisationHistoric, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AnonymisationHistoric, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AnonymisationHistoric, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AnonymisationHistoric)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AnonymisationHistoric, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AnonymisationHistoric, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AnonymisationHistoric)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AnonymisationHistoric, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AnonymisationHistoric, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AnonymisationHistoric>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AnonymisationHistoric.class.getClassLoader(),
			AnonymisationHistoric.class, ModelWrapper.class);

		try {
			Constructor<AnonymisationHistoric> constructor =
				(Constructor<AnonymisationHistoric>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<AnonymisationHistoric, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AnonymisationHistoric, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AnonymisationHistoric, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<AnonymisationHistoric, Object>>();
		Map<String, BiConsumer<AnonymisationHistoric, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<AnonymisationHistoric, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric, Object uuid) {

					anonymisationHistoric.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"anonymisationHistoricId",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getAnonymisationHistoricId();
				}

			});
		attributeSetterBiConsumers.put(
			"anonymisationHistoricId",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object anonymisationHistoricId) {

					anonymisationHistoric.setAnonymisationHistoricId(
						(Long)anonymisationHistoricId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object groupId) {

					anonymisationHistoric.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object companyId) {

					anonymisationHistoric.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object userId) {

					anonymisationHistoric.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object userName) {

					anonymisationHistoric.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object createDate) {

					anonymisationHistoric.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object modifiedDate) {

					anonymisationHistoric.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"lastPublishDate",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getLastPublishDate();
				}

			});
		attributeSetterBiConsumers.put(
			"lastPublishDate",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object lastPublishDate) {

					anonymisationHistoric.setLastPublishDate(
						(Date)lastPublishDate);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object status) {

					anonymisationHistoric.setStatus((Integer)status);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserId",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getStatusByUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserId",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object statusByUserId) {

					anonymisationHistoric.setStatusByUserId(
						(Long)statusByUserId);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserName",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getStatusByUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserName",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object statusByUserName) {

					anonymisationHistoric.setStatusByUserName(
						(String)statusByUserName);
				}

			});
		attributeGetterFunctions.put(
			"statusDate",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getStatusDate();
				}

			});
		attributeSetterBiConsumers.put(
			"statusDate",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object statusDate) {

					anonymisationHistoric.setStatusDate((Date)statusDate);
				}

			});
		attributeGetterFunctions.put(
			"result",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getResult();
				}

			});
		attributeSetterBiConsumers.put(
			"result",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object result) {

					anonymisationHistoric.setResult((Integer)result);
				}

			});
		attributeGetterFunctions.put(
			"operations",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getOperations();
				}

			});
		attributeSetterBiConsumers.put(
			"operations",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object operations) {

					anonymisationHistoric.setOperations((String)operations);
				}

			});
		attributeGetterFunctions.put(
			"errorDescription",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getErrorDescription();
				}

			});
		attributeSetterBiConsumers.put(
			"errorDescription",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object errorDescription) {

					anonymisationHistoric.setErrorDescription(
						(String)errorDescription);
				}

			});
		attributeGetterFunctions.put(
			"errorStackTrace",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getErrorStackTrace();
				}

			});
		attributeSetterBiConsumers.put(
			"errorStackTrace",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object errorStackTrace) {

					anonymisationHistoric.setErrorStackTrace(
						(String)errorStackTrace);
				}

			});
		attributeGetterFunctions.put(
			"startDate",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getStartDate();
				}

			});
		attributeSetterBiConsumers.put(
			"startDate",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object startDate) {

					anonymisationHistoric.setStartDate((Date)startDate);
				}

			});
		attributeGetterFunctions.put(
			"finishDate",
			new Function<AnonymisationHistoric, Object>() {

				@Override
				public Object apply(
					AnonymisationHistoric anonymisationHistoric) {

					return anonymisationHistoric.getFinishDate();
				}

			});
		attributeSetterBiConsumers.put(
			"finishDate",
			new BiConsumer<AnonymisationHistoric, Object>() {

				@Override
				public void accept(
					AnonymisationHistoric anonymisationHistoric,
					Object finishDate) {

					anonymisationHistoric.setFinishDate((Date)finishDate);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getAnonymisationHistoricId() {
		return _anonymisationHistoricId;
	}

	@Override
	public void setAnonymisationHistoricId(long anonymisationHistoricId) {
		_columnBitmask = -1L;

		_anonymisationHistoricId = anonymisationHistoricId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		_lastPublishDate = lastPublishDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public int getResult() {
		return _result;
	}

	@Override
	public void setResult(int result) {
		_result = result;
	}

	@Override
	public String getOperations() {
		if (_operations == null) {
			return "";
		}
		else {
			return _operations;
		}
	}

	@Override
	public void setOperations(String operations) {
		_operations = operations;
	}

	@Override
	public String getErrorDescription() {
		if (_errorDescription == null) {
			return "";
		}
		else {
			return _errorDescription;
		}
	}

	@Override
	public void setErrorDescription(String errorDescription) {
		_errorDescription = errorDescription;
	}

	@Override
	public String getErrorStackTrace() {
		if (_errorStackTrace == null) {
			return "";
		}
		else {
			return _errorStackTrace;
		}
	}

	@Override
	public void setErrorStackTrace(String errorStackTrace) {
		_errorStackTrace = errorStackTrace;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getFinishDate() {
		return _finishDate;
	}

	@Override
	public void setFinishDate(Date finishDate) {
		_finishDate = finishDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AnonymisationHistoric.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AnonymisationHistoric.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AnonymisationHistoric toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AnonymisationHistoricImpl anonymisationHistoricImpl =
			new AnonymisationHistoricImpl();

		anonymisationHistoricImpl.setUuid(getUuid());
		anonymisationHistoricImpl.setAnonymisationHistoricId(
			getAnonymisationHistoricId());
		anonymisationHistoricImpl.setGroupId(getGroupId());
		anonymisationHistoricImpl.setCompanyId(getCompanyId());
		anonymisationHistoricImpl.setUserId(getUserId());
		anonymisationHistoricImpl.setUserName(getUserName());
		anonymisationHistoricImpl.setCreateDate(getCreateDate());
		anonymisationHistoricImpl.setModifiedDate(getModifiedDate());
		anonymisationHistoricImpl.setLastPublishDate(getLastPublishDate());
		anonymisationHistoricImpl.setStatus(getStatus());
		anonymisationHistoricImpl.setStatusByUserId(getStatusByUserId());
		anonymisationHistoricImpl.setStatusByUserName(getStatusByUserName());
		anonymisationHistoricImpl.setStatusDate(getStatusDate());
		anonymisationHistoricImpl.setResult(getResult());
		anonymisationHistoricImpl.setOperations(getOperations());
		anonymisationHistoricImpl.setErrorDescription(getErrorDescription());
		anonymisationHistoricImpl.setErrorStackTrace(getErrorStackTrace());
		anonymisationHistoricImpl.setStartDate(getStartDate());
		anonymisationHistoricImpl.setFinishDate(getFinishDate());

		anonymisationHistoricImpl.resetOriginalValues();

		return anonymisationHistoricImpl;
	}

	@Override
	public int compareTo(AnonymisationHistoric anonymisationHistoric) {
		int value = 0;

		if (getAnonymisationHistoricId() <
				anonymisationHistoric.getAnonymisationHistoricId()) {

			value = -1;
		}
		else if (getAnonymisationHistoricId() >
					anonymisationHistoric.getAnonymisationHistoricId()) {

			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AnonymisationHistoric)) {
			return false;
		}

		AnonymisationHistoric anonymisationHistoric =
			(AnonymisationHistoric)obj;

		long primaryKey = anonymisationHistoric.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AnonymisationHistoricModelImpl anonymisationHistoricModelImpl = this;

		anonymisationHistoricModelImpl._originalUuid =
			anonymisationHistoricModelImpl._uuid;

		anonymisationHistoricModelImpl._originalGroupId =
			anonymisationHistoricModelImpl._groupId;

		anonymisationHistoricModelImpl._setOriginalGroupId = false;

		anonymisationHistoricModelImpl._originalCompanyId =
			anonymisationHistoricModelImpl._companyId;

		anonymisationHistoricModelImpl._setOriginalCompanyId = false;

		anonymisationHistoricModelImpl._setModifiedDate = false;

		anonymisationHistoricModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AnonymisationHistoric> toCacheModel() {
		AnonymisationHistoricCacheModel anonymisationHistoricCacheModel =
			new AnonymisationHistoricCacheModel();

		anonymisationHistoricCacheModel.uuid = getUuid();

		String uuid = anonymisationHistoricCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			anonymisationHistoricCacheModel.uuid = null;
		}

		anonymisationHistoricCacheModel.anonymisationHistoricId =
			getAnonymisationHistoricId();

		anonymisationHistoricCacheModel.groupId = getGroupId();

		anonymisationHistoricCacheModel.companyId = getCompanyId();

		anonymisationHistoricCacheModel.userId = getUserId();

		anonymisationHistoricCacheModel.userName = getUserName();

		String userName = anonymisationHistoricCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			anonymisationHistoricCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			anonymisationHistoricCacheModel.createDate = createDate.getTime();
		}
		else {
			anonymisationHistoricCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			anonymisationHistoricCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			anonymisationHistoricCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			anonymisationHistoricCacheModel.lastPublishDate =
				lastPublishDate.getTime();
		}
		else {
			anonymisationHistoricCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		anonymisationHistoricCacheModel.status = getStatus();

		anonymisationHistoricCacheModel.statusByUserId = getStatusByUserId();

		anonymisationHistoricCacheModel.statusByUserName =
			getStatusByUserName();

		String statusByUserName =
			anonymisationHistoricCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			anonymisationHistoricCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			anonymisationHistoricCacheModel.statusDate = statusDate.getTime();
		}
		else {
			anonymisationHistoricCacheModel.statusDate = Long.MIN_VALUE;
		}

		anonymisationHistoricCacheModel.result = getResult();

		anonymisationHistoricCacheModel.operations = getOperations();

		String operations = anonymisationHistoricCacheModel.operations;

		if ((operations != null) && (operations.length() == 0)) {
			anonymisationHistoricCacheModel.operations = null;
		}

		anonymisationHistoricCacheModel.errorDescription =
			getErrorDescription();

		String errorDescription =
			anonymisationHistoricCacheModel.errorDescription;

		if ((errorDescription != null) && (errorDescription.length() == 0)) {
			anonymisationHistoricCacheModel.errorDescription = null;
		}

		anonymisationHistoricCacheModel.errorStackTrace = getErrorStackTrace();

		String errorStackTrace =
			anonymisationHistoricCacheModel.errorStackTrace;

		if ((errorStackTrace != null) && (errorStackTrace.length() == 0)) {
			anonymisationHistoricCacheModel.errorStackTrace = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			anonymisationHistoricCacheModel.startDate = startDate.getTime();
		}
		else {
			anonymisationHistoricCacheModel.startDate = Long.MIN_VALUE;
		}

		Date finishDate = getFinishDate();

		if (finishDate != null) {
			anonymisationHistoricCacheModel.finishDate = finishDate.getTime();
		}
		else {
			anonymisationHistoricCacheModel.finishDate = Long.MIN_VALUE;
		}

		return anonymisationHistoricCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AnonymisationHistoric, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AnonymisationHistoric, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AnonymisationHistoric, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((AnonymisationHistoric)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AnonymisationHistoric, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AnonymisationHistoric, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AnonymisationHistoric, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((AnonymisationHistoric)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, AnonymisationHistoric>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private String _uuid;
	private String _originalUuid;
	private long _anonymisationHistoricId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _lastPublishDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private int _result;
	private String _operations;
	private String _errorDescription;
	private String _errorStackTrace;
	private Date _startDate;
	private Date _finishDate;
	private long _columnBitmask;
	private AnonymisationHistoric _escapedModel;

}