/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.like.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import eu.strasbourg.service.like.model.Like;
import eu.strasbourg.service.like.model.LikeModel;
import eu.strasbourg.service.like.model.LikeSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Like service. Represents a row in the &quot;like_Like&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>LikeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LikeImpl}.
 * </p>
 *
 * @author Cedric Henry
 * @see LikeImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LikeModelImpl extends BaseModelImpl<Like> implements LikeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a like model instance should use the <code>Like</code> interface instead.
	 */
	public static final String TABLE_NAME = "like_Like";

	public static final Object[][] TABLE_COLUMNS = {
		{"likeId", Types.BIGINT}, {"publikUserId", Types.VARCHAR},
		{"title", Types.VARCHAR}, {"isDislike", Types.BOOLEAN},
		{"typeId", Types.BIGINT}, {"entityId", Types.BIGINT},
		{"entityGroupId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("likeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("publikUserId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isDislike", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("typeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("entityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("entityGroupId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table like_Like (likeId LONG not null primary key,publikUserId VARCHAR(75) null,title VARCHAR(255) null,isDislike BOOLEAN,typeId LONG,entityId LONG,entityGroupId LONG)";

	public static final String TABLE_SQL_DROP = "drop table like_Like";

	public static final String ORDER_BY_JPQL = " ORDER BY like_.likeId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY like_Like.likeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.like.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.like.model.Like"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.like.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.like.model.Like"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.like.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.like.model.Like"),
		true);

	public static final long ENTITYID_COLUMN_BITMASK = 1L;

	public static final long ISDISLIKE_COLUMN_BITMASK = 2L;

	public static final long PUBLIKUSERID_COLUMN_BITMASK = 4L;

	public static final long TITLE_COLUMN_BITMASK = 8L;

	public static final long TYPEID_COLUMN_BITMASK = 16L;

	public static final long LIKEID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Like toModel(LikeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Like model = new LikeImpl();

		model.setLikeId(soapModel.getLikeId());
		model.setPublikUserId(soapModel.getPublikUserId());
		model.setTitle(soapModel.getTitle());
		model.setIsDislike(soapModel.isIsDislike());
		model.setTypeId(soapModel.getTypeId());
		model.setEntityId(soapModel.getEntityId());
		model.setEntityGroupId(soapModel.getEntityGroupId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Like> toModels(LikeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Like> models = new ArrayList<Like>(soapModels.length);

		for (LikeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.like.service.util.ServiceProps.get(
			"lock.expiration.time.eu.strasbourg.service.like.model.Like"));

	public LikeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _likeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLikeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _likeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Like.class;
	}

	@Override
	public String getModelClassName() {
		return Like.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Like, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Like, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Like, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Like)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Like, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Like, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Like)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Like, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Like, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Like>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Like.class.getClassLoader(), Like.class, ModelWrapper.class);

		try {
			Constructor<Like> constructor =
				(Constructor<Like>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Like, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Like, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Like, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Like, Object>>();
		Map<String, BiConsumer<Like, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Like, ?>>();

		attributeGetterFunctions.put(
			"likeId",
			new Function<Like, Object>() {

				@Override
				public Object apply(Like like) {
					return like.getLikeId();
				}

			});
		attributeSetterBiConsumers.put(
			"likeId",
			new BiConsumer<Like, Object>() {

				@Override
				public void accept(Like like, Object likeId) {
					like.setLikeId((Long)likeId);
				}

			});
		attributeGetterFunctions.put(
			"publikUserId",
			new Function<Like, Object>() {

				@Override
				public Object apply(Like like) {
					return like.getPublikUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"publikUserId",
			new BiConsumer<Like, Object>() {

				@Override
				public void accept(Like like, Object publikUserId) {
					like.setPublikUserId((String)publikUserId);
				}

			});
		attributeGetterFunctions.put(
			"title",
			new Function<Like, Object>() {

				@Override
				public Object apply(Like like) {
					return like.getTitle();
				}

			});
		attributeSetterBiConsumers.put(
			"title",
			new BiConsumer<Like, Object>() {

				@Override
				public void accept(Like like, Object title) {
					like.setTitle((String)title);
				}

			});
		attributeGetterFunctions.put(
			"isDislike",
			new Function<Like, Object>() {

				@Override
				public Object apply(Like like) {
					return like.getIsDislike();
				}

			});
		attributeSetterBiConsumers.put(
			"isDislike",
			new BiConsumer<Like, Object>() {

				@Override
				public void accept(Like like, Object isDislike) {
					like.setIsDislike((Boolean)isDislike);
				}

			});
		attributeGetterFunctions.put(
			"typeId",
			new Function<Like, Object>() {

				@Override
				public Object apply(Like like) {
					return like.getTypeId();
				}

			});
		attributeSetterBiConsumers.put(
			"typeId",
			new BiConsumer<Like, Object>() {

				@Override
				public void accept(Like like, Object typeId) {
					like.setTypeId((Long)typeId);
				}

			});
		attributeGetterFunctions.put(
			"entityId",
			new Function<Like, Object>() {

				@Override
				public Object apply(Like like) {
					return like.getEntityId();
				}

			});
		attributeSetterBiConsumers.put(
			"entityId",
			new BiConsumer<Like, Object>() {

				@Override
				public void accept(Like like, Object entityId) {
					like.setEntityId((Long)entityId);
				}

			});
		attributeGetterFunctions.put(
			"entityGroupId",
			new Function<Like, Object>() {

				@Override
				public Object apply(Like like) {
					return like.getEntityGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"entityGroupId",
			new BiConsumer<Like, Object>() {

				@Override
				public void accept(Like like, Object entityGroupId) {
					like.setEntityGroupId((Long)entityGroupId);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getLikeId() {
		return _likeId;
	}

	@Override
	public void setLikeId(long likeId) {
		_likeId = likeId;
	}

	@JSON
	@Override
	public String getPublikUserId() {
		if (_publikUserId == null) {
			return "";
		}
		else {
			return _publikUserId;
		}
	}

	@Override
	public void setPublikUserId(String publikUserId) {
		_columnBitmask |= PUBLIKUSERID_COLUMN_BITMASK;

		if (_originalPublikUserId == null) {
			_originalPublikUserId = _publikUserId;
		}

		_publikUserId = publikUserId;
	}

	public String getOriginalPublikUserId() {
		return GetterUtil.getString(_originalPublikUserId);
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@JSON
	@Override
	public boolean getIsDislike() {
		return _isDislike;
	}

	@JSON
	@Override
	public boolean isIsDislike() {
		return _isDislike;
	}

	@Override
	public void setIsDislike(boolean isDislike) {
		_columnBitmask |= ISDISLIKE_COLUMN_BITMASK;

		if (!_setOriginalIsDislike) {
			_setOriginalIsDislike = true;

			_originalIsDislike = _isDislike;
		}

		_isDislike = isDislike;
	}

	public boolean getOriginalIsDislike() {
		return _originalIsDislike;
	}

	@JSON
	@Override
	public long getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(long typeId) {
		_columnBitmask |= TYPEID_COLUMN_BITMASK;

		if (!_setOriginalTypeId) {
			_setOriginalTypeId = true;

			_originalTypeId = _typeId;
		}

		_typeId = typeId;
	}

	public long getOriginalTypeId() {
		return _originalTypeId;
	}

	@JSON
	@Override
	public long getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(long entityId) {
		_columnBitmask |= ENTITYID_COLUMN_BITMASK;

		if (!_setOriginalEntityId) {
			_setOriginalEntityId = true;

			_originalEntityId = _entityId;
		}

		_entityId = entityId;
	}

	public long getOriginalEntityId() {
		return _originalEntityId;
	}

	@JSON
	@Override
	public long getEntityGroupId() {
		return _entityGroupId;
	}

	@Override
	public void setEntityGroupId(long entityGroupId) {
		_entityGroupId = entityGroupId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Like.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Like toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LikeImpl likeImpl = new LikeImpl();

		likeImpl.setLikeId(getLikeId());
		likeImpl.setPublikUserId(getPublikUserId());
		likeImpl.setTitle(getTitle());
		likeImpl.setIsDislike(isIsDislike());
		likeImpl.setTypeId(getTypeId());
		likeImpl.setEntityId(getEntityId());
		likeImpl.setEntityGroupId(getEntityGroupId());

		likeImpl.resetOriginalValues();

		return likeImpl;
	}

	@Override
	public int compareTo(Like like) {
		long primaryKey = like.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Like)) {
			return false;
		}

		Like like = (Like)obj;

		long primaryKey = like.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LikeModelImpl likeModelImpl = this;

		likeModelImpl._originalPublikUserId = likeModelImpl._publikUserId;

		likeModelImpl._originalTitle = likeModelImpl._title;

		likeModelImpl._originalIsDislike = likeModelImpl._isDislike;

		likeModelImpl._setOriginalIsDislike = false;

		likeModelImpl._originalTypeId = likeModelImpl._typeId;

		likeModelImpl._setOriginalTypeId = false;

		likeModelImpl._originalEntityId = likeModelImpl._entityId;

		likeModelImpl._setOriginalEntityId = false;

		likeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Like> toCacheModel() {
		LikeCacheModel likeCacheModel = new LikeCacheModel();

		likeCacheModel.likeId = getLikeId();

		likeCacheModel.publikUserId = getPublikUserId();

		String publikUserId = likeCacheModel.publikUserId;

		if ((publikUserId != null) && (publikUserId.length() == 0)) {
			likeCacheModel.publikUserId = null;
		}

		likeCacheModel.title = getTitle();

		String title = likeCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			likeCacheModel.title = null;
		}

		likeCacheModel.isDislike = isIsDislike();

		likeCacheModel.typeId = getTypeId();

		likeCacheModel.entityId = getEntityId();

		likeCacheModel.entityGroupId = getEntityGroupId();

		return likeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Like, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Like, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Like, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Like)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Like, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Like, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Like, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Like)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Like>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _likeId;
	private String _publikUserId;
	private String _originalPublikUserId;
	private String _title;
	private String _originalTitle;
	private boolean _isDislike;
	private boolean _originalIsDislike;
	private boolean _setOriginalIsDislike;
	private long _typeId;
	private long _originalTypeId;
	private boolean _setOriginalTypeId;
	private long _entityId;
	private long _originalEntityId;
	private boolean _setOriginalEntityId;
	private long _entityGroupId;
	private long _columnBitmask;
	private Like _escapedModel;

}