/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.like.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import eu.strasbourg.service.like.model.Like;
import eu.strasbourg.service.like.model.LikeModel;
import eu.strasbourg.service.like.model.LikeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Like service. Represents a row in the &quot;like_Like&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LikeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LikeImpl}.
 * </p>
 *
 * @author Cedric Henry
 * @see LikeImpl
 * @see Like
 * @see LikeModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LikeModelImpl extends BaseModelImpl<Like> implements LikeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a like model instance should use the {@link Like} interface instead.
	 */
	public static final String TABLE_NAME = "like_Like";
	public static final Object[][] TABLE_COLUMNS = {
			{ "likeId", Types.BIGINT },
			{ "publikUserId", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "isDislike", Types.BOOLEAN },
			{ "typeId", Types.BIGINT },
			{ "entityId", Types.BIGINT },
			{ "entityGroupId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("likeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("publikUserId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isDislike", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("typeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("entityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("entityGroupId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table like_Like (likeId LONG not null primary key,publikUserId VARCHAR(75) null,title VARCHAR(255) null,isDislike BOOLEAN,typeId LONG,entityId LONG,entityGroupId LONG)";
	public static final String TABLE_SQL_DROP = "drop table like_Like";
	public static final String ORDER_BY_JPQL = " ORDER BY like_.likeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY like_Like.likeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.like.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.like.model.Like"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.like.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.like.model.Like"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.like.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.like.model.Like"),
			true);
	public static final long ENTITYID_COLUMN_BITMASK = 1L;
	public static final long ISDISLIKE_COLUMN_BITMASK = 2L;
	public static final long PUBLIKUSERID_COLUMN_BITMASK = 4L;
	public static final long TITLE_COLUMN_BITMASK = 8L;
	public static final long TYPEID_COLUMN_BITMASK = 16L;
	public static final long LIKEID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Like toModel(LikeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Like model = new LikeImpl();

		model.setLikeId(soapModel.getLikeId());
		model.setPublikUserId(soapModel.getPublikUserId());
		model.setTitle(soapModel.getTitle());
		model.setIsDislike(soapModel.getIsDislike());
		model.setTypeId(soapModel.getTypeId());
		model.setEntityId(soapModel.getEntityId());
		model.setEntityGroupId(soapModel.getEntityGroupId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Like> toModels(LikeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Like> models = new ArrayList<Like>(soapModels.length);

		for (LikeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.like.service.util.ServiceProps.get(
				"lock.expiration.time.eu.strasbourg.service.like.model.Like"));

	public LikeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _likeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLikeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _likeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Like.class;
	}

	@Override
	public String getModelClassName() {
		return Like.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("likeId", getLikeId());
		attributes.put("publikUserId", getPublikUserId());
		attributes.put("title", getTitle());
		attributes.put("isDislike", getIsDislike());
		attributes.put("typeId", getTypeId());
		attributes.put("entityId", getEntityId());
		attributes.put("entityGroupId", getEntityGroupId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long likeId = (Long)attributes.get("likeId");

		if (likeId != null) {
			setLikeId(likeId);
		}

		String publikUserId = (String)attributes.get("publikUserId");

		if (publikUserId != null) {
			setPublikUserId(publikUserId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		Boolean isDislike = (Boolean)attributes.get("isDislike");

		if (isDislike != null) {
			setIsDislike(isDislike);
		}

		Long typeId = (Long)attributes.get("typeId");

		if (typeId != null) {
			setTypeId(typeId);
		}

		Long entityId = (Long)attributes.get("entityId");

		if (entityId != null) {
			setEntityId(entityId);
		}

		Long entityGroupId = (Long)attributes.get("entityGroupId");

		if (entityGroupId != null) {
			setEntityGroupId(entityGroupId);
		}
	}

	@JSON
	@Override
	public long getLikeId() {
		return _likeId;
	}

	@Override
	public void setLikeId(long likeId) {
		_likeId = likeId;
	}

	@JSON
	@Override
	public String getPublikUserId() {
		if (_publikUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _publikUserId;
		}
	}

	@Override
	public void setPublikUserId(String publikUserId) {
		_columnBitmask |= PUBLIKUSERID_COLUMN_BITMASK;

		if (_originalPublikUserId == null) {
			_originalPublikUserId = _publikUserId;
		}

		_publikUserId = publikUserId;
	}

	public String getOriginalPublikUserId() {
		return GetterUtil.getString(_originalPublikUserId);
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@JSON
	@Override
	public boolean getIsDislike() {
		return _isDislike;
	}

	@JSON
	@Override
	public boolean isIsDislike() {
		return _isDislike;
	}

	@Override
	public void setIsDislike(boolean isDislike) {
		_columnBitmask |= ISDISLIKE_COLUMN_BITMASK;

		if (!_setOriginalIsDislike) {
			_setOriginalIsDislike = true;

			_originalIsDislike = _isDislike;
		}

		_isDislike = isDislike;
	}

	public boolean getOriginalIsDislike() {
		return _originalIsDislike;
	}

	@JSON
	@Override
	public long getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(long typeId) {
		_columnBitmask |= TYPEID_COLUMN_BITMASK;

		if (!_setOriginalTypeId) {
			_setOriginalTypeId = true;

			_originalTypeId = _typeId;
		}

		_typeId = typeId;
	}

	public long getOriginalTypeId() {
		return _originalTypeId;
	}

	@JSON
	@Override
	public long getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(long entityId) {
		_columnBitmask |= ENTITYID_COLUMN_BITMASK;

		if (!_setOriginalEntityId) {
			_setOriginalEntityId = true;

			_originalEntityId = _entityId;
		}

		_entityId = entityId;
	}

	public long getOriginalEntityId() {
		return _originalEntityId;
	}

	@JSON
	@Override
	public long getEntityGroupId() {
		return _entityGroupId;
	}

	@Override
	public void setEntityGroupId(long entityGroupId) {
		_entityGroupId = entityGroupId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Like.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Like toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Like)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LikeImpl likeImpl = new LikeImpl();

		likeImpl.setLikeId(getLikeId());
		likeImpl.setPublikUserId(getPublikUserId());
		likeImpl.setTitle(getTitle());
		likeImpl.setIsDislike(getIsDislike());
		likeImpl.setTypeId(getTypeId());
		likeImpl.setEntityId(getEntityId());
		likeImpl.setEntityGroupId(getEntityGroupId());

		likeImpl.resetOriginalValues();

		return likeImpl;
	}

	@Override
	public int compareTo(Like like) {
		long primaryKey = like.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Like)) {
			return false;
		}

		Like like = (Like)obj;

		long primaryKey = like.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LikeModelImpl likeModelImpl = this;

		likeModelImpl._originalPublikUserId = likeModelImpl._publikUserId;

		likeModelImpl._originalTitle = likeModelImpl._title;

		likeModelImpl._originalIsDislike = likeModelImpl._isDislike;

		likeModelImpl._setOriginalIsDislike = false;

		likeModelImpl._originalTypeId = likeModelImpl._typeId;

		likeModelImpl._setOriginalTypeId = false;

		likeModelImpl._originalEntityId = likeModelImpl._entityId;

		likeModelImpl._setOriginalEntityId = false;

		likeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Like> toCacheModel() {
		LikeCacheModel likeCacheModel = new LikeCacheModel();

		likeCacheModel.likeId = getLikeId();

		likeCacheModel.publikUserId = getPublikUserId();

		String publikUserId = likeCacheModel.publikUserId;

		if ((publikUserId != null) && (publikUserId.length() == 0)) {
			likeCacheModel.publikUserId = null;
		}

		likeCacheModel.title = getTitle();

		String title = likeCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			likeCacheModel.title = null;
		}

		likeCacheModel.isDislike = getIsDislike();

		likeCacheModel.typeId = getTypeId();

		likeCacheModel.entityId = getEntityId();

		likeCacheModel.entityGroupId = getEntityGroupId();

		return likeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{likeId=");
		sb.append(getLikeId());
		sb.append(", publikUserId=");
		sb.append(getPublikUserId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", isDislike=");
		sb.append(getIsDislike());
		sb.append(", typeId=");
		sb.append(getTypeId());
		sb.append(", entityId=");
		sb.append(getEntityId());
		sb.append(", entityGroupId=");
		sb.append(getEntityGroupId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.like.model.Like");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>likeId</column-name><column-value><![CDATA[");
		sb.append(getLikeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publikUserId</column-name><column-value><![CDATA[");
		sb.append(getPublikUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDislike</column-name><column-value><![CDATA[");
		sb.append(getIsDislike());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeId</column-name><column-value><![CDATA[");
		sb.append(getTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityId</column-name><column-value><![CDATA[");
		sb.append(getEntityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityGroupId</column-name><column-value><![CDATA[");
		sb.append(getEntityGroupId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Like.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Like.class
		};
	private long _likeId;
	private String _publikUserId;
	private String _originalPublikUserId;
	private String _title;
	private String _originalTitle;
	private boolean _isDislike;
	private boolean _originalIsDislike;
	private boolean _setOriginalIsDislike;
	private long _typeId;
	private long _originalTypeId;
	private boolean _setOriginalTypeId;
	private long _entityId;
	private long _originalEntityId;
	private boolean _setOriginalEntityId;
	private long _entityGroupId;
	private long _columnBitmask;
	private Like _escapedModel;
}