/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.artwork.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedGroupedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Artwork service. Represents a row in the &quot;artwork_Artwork&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>eu.strasbourg.service.artwork.model.impl.ArtworkModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>eu.strasbourg.service.artwork.model.impl.ArtworkImpl</code>.
 * </p>
 *
 * @author BenjaminBini
 * @see Artwork
 * @generated
 */
@ProviderType
public interface ArtworkModel
	extends BaseModel<Artwork>, LocalizedModel, ShardedModel,
			StagedGroupedModel, WorkflowedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a artwork model instance should use the {@link Artwork} interface instead.
	 */

	/**
	 * Returns the primary key of this artwork.
	 *
	 * @return the primary key of this artwork
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this artwork.
	 *
	 * @param primaryKey the primary key of this artwork
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this artwork.
	 *
	 * @return the uuid of this artwork
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this artwork.
	 *
	 * @param uuid the uuid of this artwork
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the artwork ID of this artwork.
	 *
	 * @return the artwork ID of this artwork
	 */
	public long getArtworkId();

	/**
	 * Sets the artwork ID of this artwork.
	 *
	 * @param artworkId the artwork ID of this artwork
	 */
	public void setArtworkId(long artworkId);

	/**
	 * Returns the group ID of this artwork.
	 *
	 * @return the group ID of this artwork
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this artwork.
	 *
	 * @param groupId the group ID of this artwork
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this artwork.
	 *
	 * @return the company ID of this artwork
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this artwork.
	 *
	 * @param companyId the company ID of this artwork
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this artwork.
	 *
	 * @return the user ID of this artwork
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this artwork.
	 *
	 * @param userId the user ID of this artwork
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this artwork.
	 *
	 * @return the user uuid of this artwork
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this artwork.
	 *
	 * @param userUuid the user uuid of this artwork
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this artwork.
	 *
	 * @return the user name of this artwork
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this artwork.
	 *
	 * @param userName the user name of this artwork
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this artwork.
	 *
	 * @return the create date of this artwork
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this artwork.
	 *
	 * @param createDate the create date of this artwork
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this artwork.
	 *
	 * @return the modified date of this artwork
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this artwork.
	 *
	 * @param modifiedDate the modified date of this artwork
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the last publish date of this artwork.
	 *
	 * @return the last publish date of this artwork
	 */
	@Override
	public Date getLastPublishDate();

	/**
	 * Sets the last publish date of this artwork.
	 *
	 * @param lastPublishDate the last publish date of this artwork
	 */
	@Override
	public void setLastPublishDate(Date lastPublishDate);

	/**
	 * Returns the status of this artwork.
	 *
	 * @return the status of this artwork
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this artwork.
	 *
	 * @param status the status of this artwork
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this artwork.
	 *
	 * @return the status by user ID of this artwork
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this artwork.
	 *
	 * @param statusByUserId the status by user ID of this artwork
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this artwork.
	 *
	 * @return the status by user uuid of this artwork
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this artwork.
	 *
	 * @param statusByUserUuid the status by user uuid of this artwork
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this artwork.
	 *
	 * @return the status by user name of this artwork
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this artwork.
	 *
	 * @param statusByUserName the status by user name of this artwork
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this artwork.
	 *
	 * @return the status date of this artwork
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this artwork.
	 *
	 * @param statusDate the status date of this artwork
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the title of this artwork.
	 *
	 * @return the title of this artwork
	 */
	public String getTitle();

	/**
	 * Returns the localized title of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized title of this artwork
	 */
	@AutoEscape
	public String getTitle(Locale locale);

	/**
	 * Returns the localized title of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this artwork. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized title of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized title of this artwork
	 */
	@AutoEscape
	public String getTitle(String languageId);

	/**
	 * Returns the localized title of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this artwork
	 */
	@AutoEscape
	public String getTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getTitleCurrentLanguageId();

	@AutoEscape
	public String getTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized titles of this artwork.
	 *
	 * @return the locales and localized titles of this artwork
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this artwork.
	 *
	 * @param title the title of this artwork
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this artwork in the language.
	 *
	 * @param title the localized title of this artwork
	 * @param locale the locale of the language
	 */
	public void setTitle(String title, Locale locale);

	/**
	 * Sets the localized title of this artwork in the language, and sets the default locale.
	 *
	 * @param title the localized title of this artwork
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTitle(String title, Locale locale, Locale defaultLocale);

	public void setTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized titles of this artwork from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this artwork
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	/**
	 * Sets the localized titles of this artwork from the map of locales and localized titles, and sets the default locale.
	 *
	 * @param titleMap the locales and localized titles of this artwork
	 * @param defaultLocale the default locale
	 */
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Returns the description of this artwork.
	 *
	 * @return the description of this artwork
	 */
	public String getDescription();

	/**
	 * Returns the localized description of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized description of this artwork
	 */
	@AutoEscape
	public String getDescription(Locale locale);

	/**
	 * Returns the localized description of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this artwork. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized description of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized description of this artwork
	 */
	@AutoEscape
	public String getDescription(String languageId);

	/**
	 * Returns the localized description of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this artwork
	 */
	@AutoEscape
	public String getDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getDescriptionCurrentLanguageId();

	@AutoEscape
	public String getDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized descriptions of this artwork.
	 *
	 * @return the locales and localized descriptions of this artwork
	 */
	public Map<Locale, String> getDescriptionMap();

	/**
	 * Sets the description of this artwork.
	 *
	 * @param description the description of this artwork
	 */
	public void setDescription(String description);

	/**
	 * Sets the localized description of this artwork in the language.
	 *
	 * @param description the localized description of this artwork
	 * @param locale the locale of the language
	 */
	public void setDescription(String description, Locale locale);

	/**
	 * Sets the localized description of this artwork in the language, and sets the default locale.
	 *
	 * @param description the localized description of this artwork
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDescription(
		String description, Locale locale, Locale defaultLocale);

	public void setDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized descriptions of this artwork from the map of locales and localized descriptions.
	 *
	 * @param descriptionMap the locales and localized descriptions of this artwork
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap);

	/**
	 * Sets the localized descriptions of this artwork from the map of locales and localized descriptions, and sets the default locale.
	 *
	 * @param descriptionMap the locales and localized descriptions of this artwork
	 * @param defaultLocale the default locale
	 */
	public void setDescriptionMap(
		Map<Locale, String> descriptionMap, Locale defaultLocale);

	/**
	 * Returns the technical information of this artwork.
	 *
	 * @return the technical information of this artwork
	 */
	public String getTechnicalInformation();

	/**
	 * Returns the localized technical information of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized technical information of this artwork
	 */
	@AutoEscape
	public String getTechnicalInformation(Locale locale);

	/**
	 * Returns the localized technical information of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized technical information of this artwork. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTechnicalInformation(Locale locale, boolean useDefault);

	/**
	 * Returns the localized technical information of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized technical information of this artwork
	 */
	@AutoEscape
	public String getTechnicalInformation(String languageId);

	/**
	 * Returns the localized technical information of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized technical information of this artwork
	 */
	@AutoEscape
	public String getTechnicalInformation(
		String languageId, boolean useDefault);

	@AutoEscape
	public String getTechnicalInformationCurrentLanguageId();

	@AutoEscape
	public String getTechnicalInformationCurrentValue();

	/**
	 * Returns a map of the locales and localized technical informations of this artwork.
	 *
	 * @return the locales and localized technical informations of this artwork
	 */
	public Map<Locale, String> getTechnicalInformationMap();

	/**
	 * Sets the technical information of this artwork.
	 *
	 * @param technicalInformation the technical information of this artwork
	 */
	public void setTechnicalInformation(String technicalInformation);

	/**
	 * Sets the localized technical information of this artwork in the language.
	 *
	 * @param technicalInformation the localized technical information of this artwork
	 * @param locale the locale of the language
	 */
	public void setTechnicalInformation(
		String technicalInformation, Locale locale);

	/**
	 * Sets the localized technical information of this artwork in the language, and sets the default locale.
	 *
	 * @param technicalInformation the localized technical information of this artwork
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTechnicalInformation(
		String technicalInformation, Locale locale, Locale defaultLocale);

	public void setTechnicalInformationCurrentLanguageId(String languageId);

	/**
	 * Sets the localized technical informations of this artwork from the map of locales and localized technical informations.
	 *
	 * @param technicalInformationMap the locales and localized technical informations of this artwork
	 */
	public void setTechnicalInformationMap(
		Map<Locale, String> technicalInformationMap);

	/**
	 * Sets the localized technical informations of this artwork from the map of locales and localized technical informations, and sets the default locale.
	 *
	 * @param technicalInformationMap the locales and localized technical informations of this artwork
	 * @param defaultLocale the default locale
	 */
	public void setTechnicalInformationMap(
		Map<Locale, String> technicalInformationMap, Locale defaultLocale);

	/**
	 * Returns the notice link of this artwork.
	 *
	 * @return the notice link of this artwork
	 */
	public String getNoticeLink();

	/**
	 * Returns the localized notice link of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized notice link of this artwork
	 */
	@AutoEscape
	public String getNoticeLink(Locale locale);

	/**
	 * Returns the localized notice link of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized notice link of this artwork. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getNoticeLink(Locale locale, boolean useDefault);

	/**
	 * Returns the localized notice link of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized notice link of this artwork
	 */
	@AutoEscape
	public String getNoticeLink(String languageId);

	/**
	 * Returns the localized notice link of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized notice link of this artwork
	 */
	@AutoEscape
	public String getNoticeLink(String languageId, boolean useDefault);

	@AutoEscape
	public String getNoticeLinkCurrentLanguageId();

	@AutoEscape
	public String getNoticeLinkCurrentValue();

	/**
	 * Returns a map of the locales and localized notice links of this artwork.
	 *
	 * @return the locales and localized notice links of this artwork
	 */
	public Map<Locale, String> getNoticeLinkMap();

	/**
	 * Sets the notice link of this artwork.
	 *
	 * @param noticeLink the notice link of this artwork
	 */
	public void setNoticeLink(String noticeLink);

	/**
	 * Sets the localized notice link of this artwork in the language.
	 *
	 * @param noticeLink the localized notice link of this artwork
	 * @param locale the locale of the language
	 */
	public void setNoticeLink(String noticeLink, Locale locale);

	/**
	 * Sets the localized notice link of this artwork in the language, and sets the default locale.
	 *
	 * @param noticeLink the localized notice link of this artwork
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setNoticeLink(
		String noticeLink, Locale locale, Locale defaultLocale);

	public void setNoticeLinkCurrentLanguageId(String languageId);

	/**
	 * Sets the localized notice links of this artwork from the map of locales and localized notice links.
	 *
	 * @param noticeLinkMap the locales and localized notice links of this artwork
	 */
	public void setNoticeLinkMap(Map<Locale, String> noticeLinkMap);

	/**
	 * Sets the localized notice links of this artwork from the map of locales and localized notice links, and sets the default locale.
	 *
	 * @param noticeLinkMap the locales and localized notice links of this artwork
	 * @param defaultLocale the default locale
	 */
	public void setNoticeLinkMap(
		Map<Locale, String> noticeLinkMap, Locale defaultLocale);

	/**
	 * Returns the artist name of this artwork.
	 *
	 * @return the artist name of this artwork
	 */
	public String getArtistName();

	/**
	 * Returns the localized artist name of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized artist name of this artwork
	 */
	@AutoEscape
	public String getArtistName(Locale locale);

	/**
	 * Returns the localized artist name of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized artist name of this artwork. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getArtistName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized artist name of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized artist name of this artwork
	 */
	@AutoEscape
	public String getArtistName(String languageId);

	/**
	 * Returns the localized artist name of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized artist name of this artwork
	 */
	@AutoEscape
	public String getArtistName(String languageId, boolean useDefault);

	@AutoEscape
	public String getArtistNameCurrentLanguageId();

	@AutoEscape
	public String getArtistNameCurrentValue();

	/**
	 * Returns a map of the locales and localized artist names of this artwork.
	 *
	 * @return the locales and localized artist names of this artwork
	 */
	public Map<Locale, String> getArtistNameMap();

	/**
	 * Sets the artist name of this artwork.
	 *
	 * @param artistName the artist name of this artwork
	 */
	public void setArtistName(String artistName);

	/**
	 * Sets the localized artist name of this artwork in the language.
	 *
	 * @param artistName the localized artist name of this artwork
	 * @param locale the locale of the language
	 */
	public void setArtistName(String artistName, Locale locale);

	/**
	 * Sets the localized artist name of this artwork in the language, and sets the default locale.
	 *
	 * @param artistName the localized artist name of this artwork
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setArtistName(
		String artistName, Locale locale, Locale defaultLocale);

	public void setArtistNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized artist names of this artwork from the map of locales and localized artist names.
	 *
	 * @param artistNameMap the locales and localized artist names of this artwork
	 */
	public void setArtistNameMap(Map<Locale, String> artistNameMap);

	/**
	 * Sets the localized artist names of this artwork from the map of locales and localized artist names, and sets the default locale.
	 *
	 * @param artistNameMap the locales and localized artist names of this artwork
	 * @param defaultLocale the default locale
	 */
	public void setArtistNameMap(
		Map<Locale, String> artistNameMap, Locale defaultLocale);

	/**
	 * Returns the creation year of this artwork.
	 *
	 * @return the creation year of this artwork
	 */
	public String getCreationYear();

	/**
	 * Returns the localized creation year of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized creation year of this artwork
	 */
	@AutoEscape
	public String getCreationYear(Locale locale);

	/**
	 * Returns the localized creation year of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized creation year of this artwork. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getCreationYear(Locale locale, boolean useDefault);

	/**
	 * Returns the localized creation year of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized creation year of this artwork
	 */
	@AutoEscape
	public String getCreationYear(String languageId);

	/**
	 * Returns the localized creation year of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized creation year of this artwork
	 */
	@AutoEscape
	public String getCreationYear(String languageId, boolean useDefault);

	@AutoEscape
	public String getCreationYearCurrentLanguageId();

	@AutoEscape
	public String getCreationYearCurrentValue();

	/**
	 * Returns a map of the locales and localized creation years of this artwork.
	 *
	 * @return the locales and localized creation years of this artwork
	 */
	public Map<Locale, String> getCreationYearMap();

	/**
	 * Sets the creation year of this artwork.
	 *
	 * @param creationYear the creation year of this artwork
	 */
	public void setCreationYear(String creationYear);

	/**
	 * Sets the localized creation year of this artwork in the language.
	 *
	 * @param creationYear the localized creation year of this artwork
	 * @param locale the locale of the language
	 */
	public void setCreationYear(String creationYear, Locale locale);

	/**
	 * Sets the localized creation year of this artwork in the language, and sets the default locale.
	 *
	 * @param creationYear the localized creation year of this artwork
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setCreationYear(
		String creationYear, Locale locale, Locale defaultLocale);

	public void setCreationYearCurrentLanguageId(String languageId);

	/**
	 * Sets the localized creation years of this artwork from the map of locales and localized creation years.
	 *
	 * @param creationYearMap the locales and localized creation years of this artwork
	 */
	public void setCreationYearMap(Map<Locale, String> creationYearMap);

	/**
	 * Sets the localized creation years of this artwork from the map of locales and localized creation years, and sets the default locale.
	 *
	 * @param creationYearMap the locales and localized creation years of this artwork
	 * @param defaultLocale the default locale
	 */
	public void setCreationYearMap(
		Map<Locale, String> creationYearMap, Locale defaultLocale);

	/**
	 * Returns the origin of this artwork.
	 *
	 * @return the origin of this artwork
	 */
	public String getOrigin();

	/**
	 * Returns the localized origin of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized origin of this artwork
	 */
	@AutoEscape
	public String getOrigin(Locale locale);

	/**
	 * Returns the localized origin of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized origin of this artwork. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getOrigin(Locale locale, boolean useDefault);

	/**
	 * Returns the localized origin of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized origin of this artwork
	 */
	@AutoEscape
	public String getOrigin(String languageId);

	/**
	 * Returns the localized origin of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized origin of this artwork
	 */
	@AutoEscape
	public String getOrigin(String languageId, boolean useDefault);

	@AutoEscape
	public String getOriginCurrentLanguageId();

	@AutoEscape
	public String getOriginCurrentValue();

	/**
	 * Returns a map of the locales and localized origins of this artwork.
	 *
	 * @return the locales and localized origins of this artwork
	 */
	public Map<Locale, String> getOriginMap();

	/**
	 * Sets the origin of this artwork.
	 *
	 * @param origin the origin of this artwork
	 */
	public void setOrigin(String origin);

	/**
	 * Sets the localized origin of this artwork in the language.
	 *
	 * @param origin the localized origin of this artwork
	 * @param locale the locale of the language
	 */
	public void setOrigin(String origin, Locale locale);

	/**
	 * Sets the localized origin of this artwork in the language, and sets the default locale.
	 *
	 * @param origin the localized origin of this artwork
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setOrigin(String origin, Locale locale, Locale defaultLocale);

	public void setOriginCurrentLanguageId(String languageId);

	/**
	 * Sets the localized origins of this artwork from the map of locales and localized origins.
	 *
	 * @param originMap the locales and localized origins of this artwork
	 */
	public void setOriginMap(Map<Locale, String> originMap);

	/**
	 * Sets the localized origins of this artwork from the map of locales and localized origins, and sets the default locale.
	 *
	 * @param originMap the locales and localized origins of this artwork
	 * @param defaultLocale the default locale
	 */
	public void setOriginMap(
		Map<Locale, String> originMap, Locale defaultLocale);

	/**
	 * Returns the exhibition name of this artwork.
	 *
	 * @return the exhibition name of this artwork
	 */
	public String getExhibitionName();

	/**
	 * Returns the localized exhibition name of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized exhibition name of this artwork
	 */
	@AutoEscape
	public String getExhibitionName(Locale locale);

	/**
	 * Returns the localized exhibition name of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized exhibition name of this artwork. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getExhibitionName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized exhibition name of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized exhibition name of this artwork
	 */
	@AutoEscape
	public String getExhibitionName(String languageId);

	/**
	 * Returns the localized exhibition name of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized exhibition name of this artwork
	 */
	@AutoEscape
	public String getExhibitionName(String languageId, boolean useDefault);

	@AutoEscape
	public String getExhibitionNameCurrentLanguageId();

	@AutoEscape
	public String getExhibitionNameCurrentValue();

	/**
	 * Returns a map of the locales and localized exhibition names of this artwork.
	 *
	 * @return the locales and localized exhibition names of this artwork
	 */
	public Map<Locale, String> getExhibitionNameMap();

	/**
	 * Sets the exhibition name of this artwork.
	 *
	 * @param exhibitionName the exhibition name of this artwork
	 */
	public void setExhibitionName(String exhibitionName);

	/**
	 * Sets the localized exhibition name of this artwork in the language.
	 *
	 * @param exhibitionName the localized exhibition name of this artwork
	 * @param locale the locale of the language
	 */
	public void setExhibitionName(String exhibitionName, Locale locale);

	/**
	 * Sets the localized exhibition name of this artwork in the language, and sets the default locale.
	 *
	 * @param exhibitionName the localized exhibition name of this artwork
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setExhibitionName(
		String exhibitionName, Locale locale, Locale defaultLocale);

	public void setExhibitionNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized exhibition names of this artwork from the map of locales and localized exhibition names.
	 *
	 * @param exhibitionNameMap the locales and localized exhibition names of this artwork
	 */
	public void setExhibitionNameMap(Map<Locale, String> exhibitionNameMap);

	/**
	 * Sets the localized exhibition names of this artwork from the map of locales and localized exhibition names, and sets the default locale.
	 *
	 * @param exhibitionNameMap the locales and localized exhibition names of this artwork
	 * @param defaultLocale the default locale
	 */
	public void setExhibitionNameMap(
		Map<Locale, String> exhibitionNameMap, Locale defaultLocale);

	/**
	 * Returns the exhibition place of this artwork.
	 *
	 * @return the exhibition place of this artwork
	 */
	public String getExhibitionPlace();

	/**
	 * Returns the localized exhibition place of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized exhibition place of this artwork
	 */
	@AutoEscape
	public String getExhibitionPlace(Locale locale);

	/**
	 * Returns the localized exhibition place of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized exhibition place of this artwork. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getExhibitionPlace(Locale locale, boolean useDefault);

	/**
	 * Returns the localized exhibition place of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized exhibition place of this artwork
	 */
	@AutoEscape
	public String getExhibitionPlace(String languageId);

	/**
	 * Returns the localized exhibition place of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized exhibition place of this artwork
	 */
	@AutoEscape
	public String getExhibitionPlace(String languageId, boolean useDefault);

	@AutoEscape
	public String getExhibitionPlaceCurrentLanguageId();

	@AutoEscape
	public String getExhibitionPlaceCurrentValue();

	/**
	 * Returns a map of the locales and localized exhibition places of this artwork.
	 *
	 * @return the locales and localized exhibition places of this artwork
	 */
	public Map<Locale, String> getExhibitionPlaceMap();

	/**
	 * Sets the exhibition place of this artwork.
	 *
	 * @param exhibitionPlace the exhibition place of this artwork
	 */
	public void setExhibitionPlace(String exhibitionPlace);

	/**
	 * Sets the localized exhibition place of this artwork in the language.
	 *
	 * @param exhibitionPlace the localized exhibition place of this artwork
	 * @param locale the locale of the language
	 */
	public void setExhibitionPlace(String exhibitionPlace, Locale locale);

	/**
	 * Sets the localized exhibition place of this artwork in the language, and sets the default locale.
	 *
	 * @param exhibitionPlace the localized exhibition place of this artwork
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setExhibitionPlace(
		String exhibitionPlace, Locale locale, Locale defaultLocale);

	public void setExhibitionPlaceCurrentLanguageId(String languageId);

	/**
	 * Sets the localized exhibition places of this artwork from the map of locales and localized exhibition places.
	 *
	 * @param exhibitionPlaceMap the locales and localized exhibition places of this artwork
	 */
	public void setExhibitionPlaceMap(Map<Locale, String> exhibitionPlaceMap);

	/**
	 * Sets the localized exhibition places of this artwork from the map of locales and localized exhibition places, and sets the default locale.
	 *
	 * @param exhibitionPlaceMap the locales and localized exhibition places of this artwork
	 * @param defaultLocale the default locale
	 */
	public void setExhibitionPlaceMap(
		Map<Locale, String> exhibitionPlaceMap, Locale defaultLocale);

	/**
	 * Returns the loan period of this artwork.
	 *
	 * @return the loan period of this artwork
	 */
	public String getLoanPeriod();

	/**
	 * Returns the localized loan period of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized loan period of this artwork
	 */
	@AutoEscape
	public String getLoanPeriod(Locale locale);

	/**
	 * Returns the localized loan period of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized loan period of this artwork. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getLoanPeriod(Locale locale, boolean useDefault);

	/**
	 * Returns the localized loan period of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized loan period of this artwork
	 */
	@AutoEscape
	public String getLoanPeriod(String languageId);

	/**
	 * Returns the localized loan period of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized loan period of this artwork
	 */
	@AutoEscape
	public String getLoanPeriod(String languageId, boolean useDefault);

	@AutoEscape
	public String getLoanPeriodCurrentLanguageId();

	@AutoEscape
	public String getLoanPeriodCurrentValue();

	/**
	 * Returns a map of the locales and localized loan periods of this artwork.
	 *
	 * @return the locales and localized loan periods of this artwork
	 */
	public Map<Locale, String> getLoanPeriodMap();

	/**
	 * Sets the loan period of this artwork.
	 *
	 * @param loanPeriod the loan period of this artwork
	 */
	public void setLoanPeriod(String loanPeriod);

	/**
	 * Sets the localized loan period of this artwork in the language.
	 *
	 * @param loanPeriod the localized loan period of this artwork
	 * @param locale the locale of the language
	 */
	public void setLoanPeriod(String loanPeriod, Locale locale);

	/**
	 * Sets the localized loan period of this artwork in the language, and sets the default locale.
	 *
	 * @param loanPeriod the localized loan period of this artwork
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setLoanPeriod(
		String loanPeriod, Locale locale, Locale defaultLocale);

	public void setLoanPeriodCurrentLanguageId(String languageId);

	/**
	 * Sets the localized loan periods of this artwork from the map of locales and localized loan periods.
	 *
	 * @param loanPeriodMap the locales and localized loan periods of this artwork
	 */
	public void setLoanPeriodMap(Map<Locale, String> loanPeriodMap);

	/**
	 * Sets the localized loan periods of this artwork from the map of locales and localized loan periods, and sets the default locale.
	 *
	 * @param loanPeriodMap the locales and localized loan periods of this artwork
	 * @param defaultLocale the default locale
	 */
	public void setLoanPeriodMap(
		Map<Locale, String> loanPeriodMap, Locale defaultLocale);

	/**
	 * Returns the link name of this artwork.
	 *
	 * @return the link name of this artwork
	 */
	public String getLinkName();

	/**
	 * Returns the localized link name of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized link name of this artwork
	 */
	@AutoEscape
	public String getLinkName(Locale locale);

	/**
	 * Returns the localized link name of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized link name of this artwork. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getLinkName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized link name of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized link name of this artwork
	 */
	@AutoEscape
	public String getLinkName(String languageId);

	/**
	 * Returns the localized link name of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized link name of this artwork
	 */
	@AutoEscape
	public String getLinkName(String languageId, boolean useDefault);

	@AutoEscape
	public String getLinkNameCurrentLanguageId();

	@AutoEscape
	public String getLinkNameCurrentValue();

	/**
	 * Returns a map of the locales and localized link names of this artwork.
	 *
	 * @return the locales and localized link names of this artwork
	 */
	public Map<Locale, String> getLinkNameMap();

	/**
	 * Sets the link name of this artwork.
	 *
	 * @param linkName the link name of this artwork
	 */
	public void setLinkName(String linkName);

	/**
	 * Sets the localized link name of this artwork in the language.
	 *
	 * @param linkName the localized link name of this artwork
	 * @param locale the locale of the language
	 */
	public void setLinkName(String linkName, Locale locale);

	/**
	 * Sets the localized link name of this artwork in the language, and sets the default locale.
	 *
	 * @param linkName the localized link name of this artwork
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setLinkName(
		String linkName, Locale locale, Locale defaultLocale);

	public void setLinkNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized link names of this artwork from the map of locales and localized link names.
	 *
	 * @param linkNameMap the locales and localized link names of this artwork
	 */
	public void setLinkNameMap(Map<Locale, String> linkNameMap);

	/**
	 * Sets the localized link names of this artwork from the map of locales and localized link names, and sets the default locale.
	 *
	 * @param linkNameMap the locales and localized link names of this artwork
	 * @param defaultLocale the default locale
	 */
	public void setLinkNameMap(
		Map<Locale, String> linkNameMap, Locale defaultLocale);

	/**
	 * Returns the link of this artwork.
	 *
	 * @return the link of this artwork
	 */
	public String getLink();

	/**
	 * Returns the localized link of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized link of this artwork
	 */
	@AutoEscape
	public String getLink(Locale locale);

	/**
	 * Returns the localized link of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized link of this artwork. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getLink(Locale locale, boolean useDefault);

	/**
	 * Returns the localized link of this artwork in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized link of this artwork
	 */
	@AutoEscape
	public String getLink(String languageId);

	/**
	 * Returns the localized link of this artwork in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized link of this artwork
	 */
	@AutoEscape
	public String getLink(String languageId, boolean useDefault);

	@AutoEscape
	public String getLinkCurrentLanguageId();

	@AutoEscape
	public String getLinkCurrentValue();

	/**
	 * Returns a map of the locales and localized links of this artwork.
	 *
	 * @return the locales and localized links of this artwork
	 */
	public Map<Locale, String> getLinkMap();

	/**
	 * Sets the link of this artwork.
	 *
	 * @param link the link of this artwork
	 */
	public void setLink(String link);

	/**
	 * Sets the localized link of this artwork in the language.
	 *
	 * @param link the localized link of this artwork
	 * @param locale the locale of the language
	 */
	public void setLink(String link, Locale locale);

	/**
	 * Sets the localized link of this artwork in the language, and sets the default locale.
	 *
	 * @param link the localized link of this artwork
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setLink(String link, Locale locale, Locale defaultLocale);

	public void setLinkCurrentLanguageId(String languageId);

	/**
	 * Sets the localized links of this artwork from the map of locales and localized links.
	 *
	 * @param linkMap the locales and localized links of this artwork
	 */
	public void setLinkMap(Map<Locale, String> linkMap);

	/**
	 * Sets the localized links of this artwork from the map of locales and localized links, and sets the default locale.
	 *
	 * @param linkMap the locales and localized links of this artwork
	 * @param defaultLocale the default locale
	 */
	public void setLinkMap(Map<Locale, String> linkMap, Locale defaultLocale);

	/**
	 * Returns the image ID of this artwork.
	 *
	 * @return the image ID of this artwork
	 */
	public Long getImageId();

	/**
	 * Sets the image ID of this artwork.
	 *
	 * @param imageId the image ID of this artwork
	 */
	public void setImageId(Long imageId);

	/**
	 * Returns the images IDs of this artwork.
	 *
	 * @return the images IDs of this artwork
	 */
	@AutoEscape
	public String getImagesIds();

	/**
	 * Sets the images IDs of this artwork.
	 *
	 * @param imagesIds the images IDs of this artwork
	 */
	public void setImagesIds(String imagesIds);

	/**
	 * Returns <code>true</code> if this artwork is approved.
	 *
	 * @return <code>true</code> if this artwork is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this artwork is denied.
	 *
	 * @return <code>true</code> if this artwork is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this artwork is a draft.
	 *
	 * @return <code>true</code> if this artwork is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this artwork is expired.
	 *
	 * @return <code>true</code> if this artwork is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this artwork is inactive.
	 *
	 * @return <code>true</code> if this artwork is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this artwork is incomplete.
	 *
	 * @return <code>true</code> if this artwork is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this artwork is pending.
	 *
	 * @return <code>true</code> if this artwork is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this artwork is scheduled.
	 *
	 * @return <code>true</code> if this artwork is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(eu.strasbourg.service.artwork.model.Artwork artwork);

	@Override
	public int hashCode();

	@Override
	public CacheModel<eu.strasbourg.service.artwork.model.Artwork>
		toCacheModel();

	@Override
	public eu.strasbourg.service.artwork.model.Artwork toEscapedModel();

	@Override
	public eu.strasbourg.service.artwork.model.Artwork toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();

}