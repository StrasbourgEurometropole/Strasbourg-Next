/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.artwork.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.asset.kernel.service.persistence.AssetEntryPersistence;
import com.liferay.asset.kernel.service.persistence.AssetLinkPersistence;
import com.liferay.asset.kernel.service.persistence.AssetTagPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandler;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerRegistryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Criterion;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Disjunction;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.dao.orm.Property;
import com.liferay.portal.kernel.dao.orm.PropertyFactoryUtil;
import com.liferay.portal.kernel.dao.orm.RestrictionsFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.spring.extender.service.ServiceReference;

import eu.strasbourg.service.artwork.model.Artwork;
import eu.strasbourg.service.artwork.service.ArtworkLocalService;
import eu.strasbourg.service.artwork.service.persistence.ArtworkCollectionPersistence;
import eu.strasbourg.service.artwork.service.persistence.ArtworkPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the artwork local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link eu.strasbourg.service.artwork.service.impl.ArtworkLocalServiceImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see eu.strasbourg.service.artwork.service.impl.ArtworkLocalServiceImpl
 * @see eu.strasbourg.service.artwork.service.ArtworkLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class ArtworkLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements ArtworkLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link eu.strasbourg.service.artwork.service.ArtworkLocalServiceUtil} to access the artwork local service.
	 */

	/**
	 * Adds the artwork to the database. Also notifies the appropriate model listeners.
	 *
	 * @param artwork the artwork
	 * @return the artwork that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Artwork addArtwork(Artwork artwork) {
		artwork.setNew(true);

		return artworkPersistence.update(artwork);
	}

	/**
	 * Creates a new artwork with the primary key. Does not add the artwork to the database.
	 *
	 * @param artworkId the primary key for the new artwork
	 * @return the new artwork
	 */
	@Override
	public Artwork createArtwork(long artworkId) {
		return artworkPersistence.create(artworkId);
	}

	/**
	 * Deletes the artwork with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param artworkId the primary key of the artwork
	 * @return the artwork that was removed
	 * @throws PortalException if a artwork with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Artwork deleteArtwork(long artworkId) throws PortalException {
		return artworkPersistence.remove(artworkId);
	}

	/**
	 * Deletes the artwork from the database. Also notifies the appropriate model listeners.
	 *
	 * @param artwork the artwork
	 * @return the artwork that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Artwork deleteArtwork(Artwork artwork) {
		return artworkPersistence.remove(artwork);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Artwork.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return artworkPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link eu.strasbourg.service.artwork.model.impl.ArtworkModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return artworkPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link eu.strasbourg.service.artwork.model.impl.ArtworkModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return artworkPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return artworkPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return artworkPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Artwork fetchArtwork(long artworkId) {
		return artworkPersistence.fetchByPrimaryKey(artworkId);
	}

	/**
	 * Returns the artwork matching the UUID and group.
	 *
	 * @param uuid the artwork's UUID
	 * @param groupId the primary key of the group
	 * @return the matching artwork, or <code>null</code> if a matching artwork could not be found
	 */
	@Override
	public Artwork fetchArtworkByUuidAndGroupId(String uuid, long groupId) {
		return artworkPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the artwork with the primary key.
	 *
	 * @param artworkId the primary key of the artwork
	 * @return the artwork
	 * @throws PortalException if a artwork with the primary key could not be found
	 */
	@Override
	public Artwork getArtwork(long artworkId) throws PortalException {
		return artworkPersistence.findByPrimaryKey(artworkId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(artworkLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Artwork.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("artworkId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(artworkLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(Artwork.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("artworkId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(artworkLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Artwork.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("artworkId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					Criterion modifiedDateCriterion = portletDataContext.getDateRangeCriteria(
							"modifiedDate");
					Criterion statusDateCriterion = portletDataContext.getDateRangeCriteria(
							"statusDate");

					if ((modifiedDateCriterion != null) &&
							(statusDateCriterion != null)) {
						Disjunction disjunction = RestrictionsFactoryUtil.disjunction();

						disjunction.add(modifiedDateCriterion);
						disjunction.add(statusDateCriterion);

						dynamicQuery.add(disjunction);
					}

					Property workflowStatusProperty = PropertyFactoryUtil.forName(
							"status");

					if (portletDataContext.isInitialPublication()) {
						dynamicQuery.add(workflowStatusProperty.ne(
								WorkflowConstants.STATUS_IN_TRASH));
					}
					else {
						StagedModelDataHandler<?> stagedModelDataHandler = StagedModelDataHandlerRegistryUtil.getStagedModelDataHandler(Artwork.class.getName());

						dynamicQuery.add(workflowStatusProperty.in(
								stagedModelDataHandler.getExportableStatuses()));
					}
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<Artwork>() {
				@Override
				public void performAction(Artwork artwork)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						artwork);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(Artwork.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return artworkLocalService.deleteArtwork((Artwork)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return artworkPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the artworks matching the UUID and company.
	 *
	 * @param uuid the UUID of the artworks
	 * @param companyId the primary key of the company
	 * @return the matching artworks, or an empty list if no matches were found
	 */
	@Override
	public List<Artwork> getArtworksByUuidAndCompanyId(String uuid,
		long companyId) {
		return artworkPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of artworks matching the UUID and company.
	 *
	 * @param uuid the UUID of the artworks
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of artworks
	 * @param end the upper bound of the range of artworks (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching artworks, or an empty list if no matches were found
	 */
	@Override
	public List<Artwork> getArtworksByUuidAndCompanyId(String uuid,
		long companyId, int start, int end,
		OrderByComparator<Artwork> orderByComparator) {
		return artworkPersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the artwork matching the UUID and group.
	 *
	 * @param uuid the artwork's UUID
	 * @param groupId the primary key of the group
	 * @return the matching artwork
	 * @throws PortalException if a matching artwork could not be found
	 */
	@Override
	public Artwork getArtworkByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return artworkPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the artworks.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link eu.strasbourg.service.artwork.model.impl.ArtworkModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of artworks
	 * @param end the upper bound of the range of artworks (not inclusive)
	 * @return the range of artworks
	 */
	@Override
	public List<Artwork> getArtworks(int start, int end) {
		return artworkPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of artworks.
	 *
	 * @return the number of artworks
	 */
	@Override
	public int getArtworksCount() {
		return artworkPersistence.countAll();
	}

	/**
	 * Updates the artwork in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param artwork the artwork
	 * @return the artwork that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Artwork updateArtwork(Artwork artwork) {
		return artworkPersistence.update(artwork);
	}

	/**
	 */
	@Override
	public void addArtworkCollectionArtwork(long collectionId, long artworkId) {
		artworkCollectionPersistence.addArtwork(collectionId, artworkId);
	}

	/**
	 */
	@Override
	public void addArtworkCollectionArtwork(long collectionId, Artwork artwork) {
		artworkCollectionPersistence.addArtwork(collectionId, artwork);
	}

	/**
	 */
	@Override
	public void addArtworkCollectionArtworks(long collectionId,
		long[] artworkIds) {
		artworkCollectionPersistence.addArtworks(collectionId, artworkIds);
	}

	/**
	 */
	@Override
	public void addArtworkCollectionArtworks(long collectionId,
		List<Artwork> artworks) {
		artworkCollectionPersistence.addArtworks(collectionId, artworks);
	}

	/**
	 */
	@Override
	public void clearArtworkCollectionArtworks(long collectionId) {
		artworkCollectionPersistence.clearArtworks(collectionId);
	}

	/**
	 */
	@Override
	public void deleteArtworkCollectionArtwork(long collectionId, long artworkId) {
		artworkCollectionPersistence.removeArtwork(collectionId, artworkId);
	}

	/**
	 */
	@Override
	public void deleteArtworkCollectionArtwork(long collectionId,
		Artwork artwork) {
		artworkCollectionPersistence.removeArtwork(collectionId, artwork);
	}

	/**
	 */
	@Override
	public void deleteArtworkCollectionArtworks(long collectionId,
		long[] artworkIds) {
		artworkCollectionPersistence.removeArtworks(collectionId, artworkIds);
	}

	/**
	 */
	@Override
	public void deleteArtworkCollectionArtworks(long collectionId,
		List<Artwork> artworks) {
		artworkCollectionPersistence.removeArtworks(collectionId, artworks);
	}

	/**
	 * Returns the collectionIds of the artwork collections associated with the artwork.
	 *
	 * @param artworkId the artworkId of the artwork
	 * @return long[] the collectionIds of artwork collections associated with the artwork
	 */
	@Override
	public long[] getArtworkCollectionPrimaryKeys(long artworkId) {
		return artworkPersistence.getArtworkCollectionPrimaryKeys(artworkId);
	}

	/**
	 */
	@Override
	public List<Artwork> getArtworkCollectionArtworks(long collectionId) {
		return artworkCollectionPersistence.getArtworks(collectionId);
	}

	/**
	 */
	@Override
	public List<Artwork> getArtworkCollectionArtworks(long collectionId,
		int start, int end) {
		return artworkCollectionPersistence.getArtworks(collectionId, start, end);
	}

	/**
	 */
	@Override
	public List<Artwork> getArtworkCollectionArtworks(long collectionId,
		int start, int end, OrderByComparator<Artwork> orderByComparator) {
		return artworkCollectionPersistence.getArtworks(collectionId, start,
			end, orderByComparator);
	}

	/**
	 */
	@Override
	public int getArtworkCollectionArtworksCount(long collectionId) {
		return artworkCollectionPersistence.getArtworksSize(collectionId);
	}

	/**
	 */
	@Override
	public boolean hasArtworkCollectionArtwork(long collectionId, long artworkId) {
		return artworkCollectionPersistence.containsArtwork(collectionId,
			artworkId);
	}

	/**
	 */
	@Override
	public boolean hasArtworkCollectionArtworks(long collectionId) {
		return artworkCollectionPersistence.containsArtworks(collectionId);
	}

	/**
	 */
	@Override
	public void setArtworkCollectionArtworks(long collectionId,
		long[] artworkIds) {
		artworkCollectionPersistence.setArtworks(collectionId, artworkIds);
	}

	/**
	 * Returns the artwork local service.
	 *
	 * @return the artwork local service
	 */
	public ArtworkLocalService getArtworkLocalService() {
		return artworkLocalService;
	}

	/**
	 * Sets the artwork local service.
	 *
	 * @param artworkLocalService the artwork local service
	 */
	public void setArtworkLocalService(ArtworkLocalService artworkLocalService) {
		this.artworkLocalService = artworkLocalService;
	}

	/**
	 * Returns the artwork persistence.
	 *
	 * @return the artwork persistence
	 */
	public ArtworkPersistence getArtworkPersistence() {
		return artworkPersistence;
	}

	/**
	 * Sets the artwork persistence.
	 *
	 * @param artworkPersistence the artwork persistence
	 */
	public void setArtworkPersistence(ArtworkPersistence artworkPersistence) {
		this.artworkPersistence = artworkPersistence;
	}

	/**
	 * Returns the artwork collection local service.
	 *
	 * @return the artwork collection local service
	 */
	public eu.strasbourg.service.artwork.service.ArtworkCollectionLocalService getArtworkCollectionLocalService() {
		return artworkCollectionLocalService;
	}

	/**
	 * Sets the artwork collection local service.
	 *
	 * @param artworkCollectionLocalService the artwork collection local service
	 */
	public void setArtworkCollectionLocalService(
		eu.strasbourg.service.artwork.service.ArtworkCollectionLocalService artworkCollectionLocalService) {
		this.artworkCollectionLocalService = artworkCollectionLocalService;
	}

	/**
	 * Returns the artwork collection persistence.
	 *
	 * @return the artwork collection persistence
	 */
	public ArtworkCollectionPersistence getArtworkCollectionPersistence() {
		return artworkCollectionPersistence;
	}

	/**
	 * Sets the artwork collection persistence.
	 *
	 * @param artworkCollectionPersistence the artwork collection persistence
	 */
	public void setArtworkCollectionPersistence(
		ArtworkCollectionPersistence artworkCollectionPersistence) {
		this.artworkCollectionPersistence = artworkCollectionPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Returns the asset entry local service.
	 *
	 * @return the asset entry local service
	 */
	public com.liferay.asset.kernel.service.AssetEntryLocalService getAssetEntryLocalService() {
		return assetEntryLocalService;
	}

	/**
	 * Sets the asset entry local service.
	 *
	 * @param assetEntryLocalService the asset entry local service
	 */
	public void setAssetEntryLocalService(
		com.liferay.asset.kernel.service.AssetEntryLocalService assetEntryLocalService) {
		this.assetEntryLocalService = assetEntryLocalService;
	}

	/**
	 * Returns the asset entry persistence.
	 *
	 * @return the asset entry persistence
	 */
	public AssetEntryPersistence getAssetEntryPersistence() {
		return assetEntryPersistence;
	}

	/**
	 * Sets the asset entry persistence.
	 *
	 * @param assetEntryPersistence the asset entry persistence
	 */
	public void setAssetEntryPersistence(
		AssetEntryPersistence assetEntryPersistence) {
		this.assetEntryPersistence = assetEntryPersistence;
	}

	/**
	 * Returns the asset link local service.
	 *
	 * @return the asset link local service
	 */
	public com.liferay.asset.kernel.service.AssetLinkLocalService getAssetLinkLocalService() {
		return assetLinkLocalService;
	}

	/**
	 * Sets the asset link local service.
	 *
	 * @param assetLinkLocalService the asset link local service
	 */
	public void setAssetLinkLocalService(
		com.liferay.asset.kernel.service.AssetLinkLocalService assetLinkLocalService) {
		this.assetLinkLocalService = assetLinkLocalService;
	}

	/**
	 * Returns the asset link persistence.
	 *
	 * @return the asset link persistence
	 */
	public AssetLinkPersistence getAssetLinkPersistence() {
		return assetLinkPersistence;
	}

	/**
	 * Sets the asset link persistence.
	 *
	 * @param assetLinkPersistence the asset link persistence
	 */
	public void setAssetLinkPersistence(
		AssetLinkPersistence assetLinkPersistence) {
		this.assetLinkPersistence = assetLinkPersistence;
	}

	/**
	 * Returns the asset tag local service.
	 *
	 * @return the asset tag local service
	 */
	public com.liferay.asset.kernel.service.AssetTagLocalService getAssetTagLocalService() {
		return assetTagLocalService;
	}

	/**
	 * Sets the asset tag local service.
	 *
	 * @param assetTagLocalService the asset tag local service
	 */
	public void setAssetTagLocalService(
		com.liferay.asset.kernel.service.AssetTagLocalService assetTagLocalService) {
		this.assetTagLocalService = assetTagLocalService;
	}

	/**
	 * Returns the asset tag persistence.
	 *
	 * @return the asset tag persistence
	 */
	public AssetTagPersistence getAssetTagPersistence() {
		return assetTagPersistence;
	}

	/**
	 * Sets the asset tag persistence.
	 *
	 * @param assetTagPersistence the asset tag persistence
	 */
	public void setAssetTagPersistence(AssetTagPersistence assetTagPersistence) {
		this.assetTagPersistence = assetTagPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("eu.strasbourg.service.artwork.model.Artwork",
			artworkLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"eu.strasbourg.service.artwork.model.Artwork");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ArtworkLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return Artwork.class;
	}

	protected String getModelClassName() {
		return Artwork.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = artworkPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = ArtworkLocalService.class)
	protected ArtworkLocalService artworkLocalService;
	@BeanReference(type = ArtworkPersistence.class)
	protected ArtworkPersistence artworkPersistence;
	@BeanReference(type = eu.strasbourg.service.artwork.service.ArtworkCollectionLocalService.class)
	protected eu.strasbourg.service.artwork.service.ArtworkCollectionLocalService artworkCollectionLocalService;
	@BeanReference(type = ArtworkCollectionPersistence.class)
	protected ArtworkCollectionPersistence artworkCollectionPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = com.liferay.asset.kernel.service.AssetEntryLocalService.class)
	protected com.liferay.asset.kernel.service.AssetEntryLocalService assetEntryLocalService;
	@ServiceReference(type = AssetEntryPersistence.class)
	protected AssetEntryPersistence assetEntryPersistence;
	@ServiceReference(type = com.liferay.asset.kernel.service.AssetLinkLocalService.class)
	protected com.liferay.asset.kernel.service.AssetLinkLocalService assetLinkLocalService;
	@ServiceReference(type = AssetLinkPersistence.class)
	protected AssetLinkPersistence assetLinkPersistence;
	@ServiceReference(type = com.liferay.asset.kernel.service.AssetTagLocalService.class)
	protected com.liferay.asset.kernel.service.AssetTagLocalService assetTagLocalService;
	@ServiceReference(type = AssetTagPersistence.class)
	protected AssetTagPersistence assetTagPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}