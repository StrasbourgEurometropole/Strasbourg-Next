/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.artwork.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.artwork.model.ArtworkCollection;
import eu.strasbourg.service.artwork.model.ArtworkCollectionModel;
import eu.strasbourg.service.artwork.model.ArtworkCollectionSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ArtworkCollection service. Represents a row in the &quot;artwork_ArtworkCollection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ArtworkCollectionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ArtworkCollectionImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see ArtworkCollectionImpl
 * @generated
 */
@JSON(strict = true)
public class ArtworkCollectionModelImpl
	extends BaseModelImpl<ArtworkCollection> implements ArtworkCollectionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a artwork collection model instance should use the <code>ArtworkCollection</code> interface instead.
	 */
	public static final String TABLE_NAME = "artwork_ArtworkCollection";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"collectionId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"lastPublishDate", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}, {"title", Types.VARCHAR},
		{"description", Types.CLOB}, {"contributors", Types.VARCHAR},
		{"imageId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("collectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("contributors", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table artwork_ArtworkCollection (uuid_ VARCHAR(75) null,collectionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,lastPublishDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,title STRING null,description TEXT null,contributors STRING null,imageId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table artwork_ArtworkCollection";

	public static final String ORDER_BY_JPQL =
		" ORDER BY artworkCollection.collectionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY artwork_ArtworkCollection.collectionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.artwork.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.artwork.model.ArtworkCollection"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.artwork.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.artwork.model.ArtworkCollection"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.artwork.service.util.PropsUtil.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.artwork.model.ArtworkCollection"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long COLLECTIONID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ArtworkCollection toModel(ArtworkCollectionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ArtworkCollection model = new ArtworkCollectionImpl();

		model.setUuid(soapModel.getUuid());
		model.setCollectionId(soapModel.getCollectionId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLastPublishDate(soapModel.getLastPublishDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setContributors(soapModel.getContributors());
		model.setImageId(soapModel.getImageId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ArtworkCollection> toModels(
		ArtworkCollectionSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ArtworkCollection> models = new ArrayList<ArtworkCollection>(
			soapModels.length);

		for (ArtworkCollectionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String
		MAPPING_TABLE_ARTWORK_ARTWORKTOARTWORKCOLLECTION_NAME =
			"artwork_ArtworkToArtworkCollection";

	public static final Object[][]
		MAPPING_TABLE_ARTWORK_ARTWORKTOARTWORKCOLLECTION_COLUMNS = {
			{"companyId", Types.BIGINT}, {"artworkId", Types.BIGINT},
			{"collectionId", Types.BIGINT}
		};

	public static final String
		MAPPING_TABLE_ARTWORK_ARTWORKTOARTWORKCOLLECTION_SQL_CREATE =
			"create table artwork_ArtworkToArtworkCollection (companyId LONG not null,artworkId LONG not null,collectionId LONG not null,primary key (artworkId, collectionId))";

	public static final boolean
		FINDER_CACHE_ENABLED_ARTWORK_ARTWORKTOARTWORKCOLLECTION =
			GetterUtil.getBoolean(
				eu.strasbourg.service.artwork.service.util.PropsUtil.get(
					"value.object.finder.cache.enabled.artwork_ArtworkToArtworkCollection"),
				true);

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.artwork.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.artwork.model.ArtworkCollection"));

	public ArtworkCollectionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _collectionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCollectionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _collectionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ArtworkCollection.class;
	}

	@Override
	public String getModelClassName() {
		return ArtworkCollection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ArtworkCollection, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ArtworkCollection, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ArtworkCollection, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ArtworkCollection)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ArtworkCollection, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ArtworkCollection, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ArtworkCollection)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ArtworkCollection, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ArtworkCollection, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ArtworkCollection>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ArtworkCollection.class.getClassLoader(), ArtworkCollection.class,
			ModelWrapper.class);

		try {
			Constructor<ArtworkCollection> constructor =
				(Constructor<ArtworkCollection>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<ArtworkCollection, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ArtworkCollection, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ArtworkCollection, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ArtworkCollection, Object>>();
		Map<String, BiConsumer<ArtworkCollection, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<ArtworkCollection, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection, Object uuidObject) {

					artworkCollection.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"collectionId",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getCollectionId();
				}

			});
		attributeSetterBiConsumers.put(
			"collectionId",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection,
					Object collectionIdObject) {

					artworkCollection.setCollectionId((Long)collectionIdObject);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection, Object groupIdObject) {

					artworkCollection.setGroupId((Long)groupIdObject);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection,
					Object companyIdObject) {

					artworkCollection.setCompanyId((Long)companyIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection, Object userIdObject) {

					artworkCollection.setUserId((Long)userIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection,
					Object userNameObject) {

					artworkCollection.setUserName((String)userNameObject);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection,
					Object createDateObject) {

					artworkCollection.setCreateDate((Date)createDateObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection,
					Object modifiedDateObject) {

					artworkCollection.setModifiedDate((Date)modifiedDateObject);
				}

			});
		attributeGetterFunctions.put(
			"lastPublishDate",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getLastPublishDate();
				}

			});
		attributeSetterBiConsumers.put(
			"lastPublishDate",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection,
					Object lastPublishDateObject) {

					artworkCollection.setLastPublishDate(
						(Date)lastPublishDateObject);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection, Object statusObject) {

					artworkCollection.setStatus((Integer)statusObject);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserId",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getStatusByUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserId",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection,
					Object statusByUserIdObject) {

					artworkCollection.setStatusByUserId(
						(Long)statusByUserIdObject);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserName",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getStatusByUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserName",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection,
					Object statusByUserNameObject) {

					artworkCollection.setStatusByUserName(
						(String)statusByUserNameObject);
				}

			});
		attributeGetterFunctions.put(
			"statusDate",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getStatusDate();
				}

			});
		attributeSetterBiConsumers.put(
			"statusDate",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection,
					Object statusDateObject) {

					artworkCollection.setStatusDate((Date)statusDateObject);
				}

			});
		attributeGetterFunctions.put(
			"title",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getTitle();
				}

			});
		attributeSetterBiConsumers.put(
			"title",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection, Object titleObject) {

					artworkCollection.setTitle((String)titleObject);
				}

			});
		attributeGetterFunctions.put(
			"description",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getDescription();
				}

			});
		attributeSetterBiConsumers.put(
			"description",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection,
					Object descriptionObject) {

					artworkCollection.setDescription((String)descriptionObject);
				}

			});
		attributeGetterFunctions.put(
			"contributors",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getContributors();
				}

			});
		attributeSetterBiConsumers.put(
			"contributors",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection,
					Object contributorsObject) {

					artworkCollection.setContributors(
						(String)contributorsObject);
				}

			});
		attributeGetterFunctions.put(
			"imageId",
			new Function<ArtworkCollection, Object>() {

				@Override
				public Object apply(ArtworkCollection artworkCollection) {
					return artworkCollection.getImageId();
				}

			});
		attributeSetterBiConsumers.put(
			"imageId",
			new BiConsumer<ArtworkCollection, Object>() {

				@Override
				public void accept(
					ArtworkCollection artworkCollection, Object imageIdObject) {

					artworkCollection.setImageId((Long)imageIdObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCollectionId() {
		return _collectionId;
	}

	@Override
	public void setCollectionId(long collectionId) {
		_collectionId = collectionId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		_lastPublishDate = lastPublishDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTitle(), languageId, useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(
				LocalizationUtil.updateLocalization(
					getTitle(), "Title", title, languageId, defaultLanguageId));
		}
		else {
			setTitle(
				LocalizationUtil.removeLocalization(
					getTitle(), "Title", languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(
		Map<Locale, String> titleMap, Locale defaultLocale) {

		if (titleMap == null) {
			return;
		}

		setTitle(
			LocalizationUtil.updateLocalization(
				titleMap, getTitle(), "Title",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDescription(), languageId, useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(
		String description, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(
				LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(
				LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(
		Map<Locale, String> descriptionMap, Locale defaultLocale) {

		if (descriptionMap == null) {
			return;
		}

		setDescription(
			LocalizationUtil.updateLocalization(
				descriptionMap, getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getContributors() {
		if (_contributors == null) {
			return "";
		}
		else {
			return _contributors;
		}
	}

	@Override
	public String getContributors(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContributors(languageId);
	}

	@Override
	public String getContributors(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContributors(languageId, useDefault);
	}

	@Override
	public String getContributors(String languageId) {
		return LocalizationUtil.getLocalization(getContributors(), languageId);
	}

	@Override
	public String getContributors(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getContributors(), languageId, useDefault);
	}

	@Override
	public String getContributorsCurrentLanguageId() {
		return _contributorsCurrentLanguageId;
	}

	@JSON
	@Override
	public String getContributorsCurrentValue() {
		Locale locale = getLocale(_contributorsCurrentLanguageId);

		return getContributors(locale);
	}

	@Override
	public Map<Locale, String> getContributorsMap() {
		return LocalizationUtil.getLocalizationMap(getContributors());
	}

	@Override
	public void setContributors(String contributors) {
		_contributors = contributors;
	}

	@Override
	public void setContributors(String contributors, Locale locale) {
		setContributors(contributors, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setContributors(
		String contributors, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(contributors)) {
			setContributors(
				LocalizationUtil.updateLocalization(
					getContributors(), "Contributors", contributors, languageId,
					defaultLanguageId));
		}
		else {
			setContributors(
				LocalizationUtil.removeLocalization(
					getContributors(), "Contributors", languageId));
		}
	}

	@Override
	public void setContributorsCurrentLanguageId(String languageId) {
		_contributorsCurrentLanguageId = languageId;
	}

	@Override
	public void setContributorsMap(Map<Locale, String> contributorsMap) {
		setContributorsMap(contributorsMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setContributorsMap(
		Map<Locale, String> contributorsMap, Locale defaultLocale) {

		if (contributorsMap == null) {
			return;
		}

		setContributors(
			LocalizationUtil.updateLocalization(
				contributorsMap, getContributors(), "Contributors",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(Long imageId) {
		_imageId = imageId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(ArtworkCollection.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ArtworkCollection.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> contributorsMap = getContributorsMap();

		for (Map.Entry<Locale, String> entry : contributorsMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			ArtworkCollection.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(
				getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(
				getDescription(defaultLocale), defaultLocale, defaultLocale);
		}

		String contributors = getContributors(defaultLocale);

		if (Validator.isNull(contributors)) {
			setContributors(
				getContributors(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setContributors(
				getContributors(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public ArtworkCollection toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ArtworkCollection>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ArtworkCollectionImpl artworkCollectionImpl =
			new ArtworkCollectionImpl();

		artworkCollectionImpl.setUuid(getUuid());
		artworkCollectionImpl.setCollectionId(getCollectionId());
		artworkCollectionImpl.setGroupId(getGroupId());
		artworkCollectionImpl.setCompanyId(getCompanyId());
		artworkCollectionImpl.setUserId(getUserId());
		artworkCollectionImpl.setUserName(getUserName());
		artworkCollectionImpl.setCreateDate(getCreateDate());
		artworkCollectionImpl.setModifiedDate(getModifiedDate());
		artworkCollectionImpl.setLastPublishDate(getLastPublishDate());
		artworkCollectionImpl.setStatus(getStatus());
		artworkCollectionImpl.setStatusByUserId(getStatusByUserId());
		artworkCollectionImpl.setStatusByUserName(getStatusByUserName());
		artworkCollectionImpl.setStatusDate(getStatusDate());
		artworkCollectionImpl.setTitle(getTitle());
		artworkCollectionImpl.setDescription(getDescription());
		artworkCollectionImpl.setContributors(getContributors());
		artworkCollectionImpl.setImageId(getImageId());

		artworkCollectionImpl.resetOriginalValues();

		return artworkCollectionImpl;
	}

	@Override
	public int compareTo(ArtworkCollection artworkCollection) {
		long primaryKey = artworkCollection.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ArtworkCollection)) {
			return false;
		}

		ArtworkCollection artworkCollection = (ArtworkCollection)object;

		long primaryKey = artworkCollection.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ArtworkCollectionModelImpl artworkCollectionModelImpl = this;

		artworkCollectionModelImpl._originalUuid =
			artworkCollectionModelImpl._uuid;

		artworkCollectionModelImpl._originalGroupId =
			artworkCollectionModelImpl._groupId;

		artworkCollectionModelImpl._setOriginalGroupId = false;

		artworkCollectionModelImpl._originalCompanyId =
			artworkCollectionModelImpl._companyId;

		artworkCollectionModelImpl._setOriginalCompanyId = false;

		artworkCollectionModelImpl._setModifiedDate = false;

		artworkCollectionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ArtworkCollection> toCacheModel() {
		ArtworkCollectionCacheModel artworkCollectionCacheModel =
			new ArtworkCollectionCacheModel();

		artworkCollectionCacheModel.uuid = getUuid();

		String uuid = artworkCollectionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			artworkCollectionCacheModel.uuid = null;
		}

		artworkCollectionCacheModel.collectionId = getCollectionId();

		artworkCollectionCacheModel.groupId = getGroupId();

		artworkCollectionCacheModel.companyId = getCompanyId();

		artworkCollectionCacheModel.userId = getUserId();

		artworkCollectionCacheModel.userName = getUserName();

		String userName = artworkCollectionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			artworkCollectionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			artworkCollectionCacheModel.createDate = createDate.getTime();
		}
		else {
			artworkCollectionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			artworkCollectionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			artworkCollectionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			artworkCollectionCacheModel.lastPublishDate =
				lastPublishDate.getTime();
		}
		else {
			artworkCollectionCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		artworkCollectionCacheModel.status = getStatus();

		artworkCollectionCacheModel.statusByUserId = getStatusByUserId();

		artworkCollectionCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = artworkCollectionCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			artworkCollectionCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			artworkCollectionCacheModel.statusDate = statusDate.getTime();
		}
		else {
			artworkCollectionCacheModel.statusDate = Long.MIN_VALUE;
		}

		artworkCollectionCacheModel.title = getTitle();

		String title = artworkCollectionCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			artworkCollectionCacheModel.title = null;
		}

		artworkCollectionCacheModel.description = getDescription();

		String description = artworkCollectionCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			artworkCollectionCacheModel.description = null;
		}

		artworkCollectionCacheModel.contributors = getContributors();

		String contributors = artworkCollectionCacheModel.contributors;

		if ((contributors != null) && (contributors.length() == 0)) {
			artworkCollectionCacheModel.contributors = null;
		}

		Long imageId = getImageId();

		if (imageId != null) {
			artworkCollectionCacheModel.imageId = imageId;
		}

		return artworkCollectionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ArtworkCollection, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ArtworkCollection, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ArtworkCollection, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ArtworkCollection)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ArtworkCollection, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ArtworkCollection, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ArtworkCollection, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ArtworkCollection)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ArtworkCollection>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _collectionId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _lastPublishDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _contributors;
	private String _contributorsCurrentLanguageId;
	private Long _imageId;
	private long _columnBitmask;
	private ArtworkCollection _escapedModel;

}