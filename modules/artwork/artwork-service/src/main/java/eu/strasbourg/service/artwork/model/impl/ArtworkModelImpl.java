/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.artwork.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;

import eu.strasbourg.service.artwork.model.Artwork;
import eu.strasbourg.service.artwork.model.ArtworkModel;
import eu.strasbourg.service.artwork.model.ArtworkSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the Artwork service. Represents a row in the &quot;artwork_Artwork&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ArtworkModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ArtworkImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see ArtworkImpl
 * @see Artwork
 * @see ArtworkModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ArtworkModelImpl extends BaseModelImpl<Artwork>
	implements ArtworkModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a artwork model instance should use the {@link Artwork} interface instead.
	 */
	public static final String TABLE_NAME = "artwork_Artwork";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "artworkId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "technicalInformation", Types.VARCHAR },
			{ "noticeLink", Types.VARCHAR },
			{ "artistName", Types.VARCHAR },
			{ "creationYear", Types.VARCHAR },
			{ "origin", Types.VARCHAR },
			{ "exhibitionName", Types.VARCHAR },
			{ "exhibitionPlace", Types.VARCHAR },
			{ "loanPeriod", Types.VARCHAR },
			{ "linkName", Types.VARCHAR },
			{ "link", Types.VARCHAR },
			{ "status", Types.BOOLEAN },
			{ "imageId", Types.BIGINT },
			{ "imagesIds", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("artworkId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("technicalInformation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noticeLink", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("artistName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("creationYear", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("origin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("exhibitionName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("exhibitionPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("loanPeriod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("linkName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("link", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("imagesIds", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table artwork_Artwork (uuid_ VARCHAR(75) null,artworkId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,title STRING null,description STRING null,technicalInformation STRING null,noticeLink STRING null,artistName STRING null,creationYear STRING null,origin STRING null,exhibitionName STRING null,exhibitionPlace STRING null,loanPeriod STRING null,linkName STRING null,link STRING null,status BOOLEAN,imageId LONG,imagesIds VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table artwork_Artwork";
	public static final String ORDER_BY_JPQL = " ORDER BY artwork.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY artwork_Artwork.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.artwork.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.artwork.model.Artwork"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.artwork.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.artwork.model.Artwork"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.artwork.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.artwork.model.Artwork"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Artwork toModel(ArtworkSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Artwork model = new ArtworkImpl();

		model.setUuid(soapModel.getUuid());
		model.setArtworkId(soapModel.getArtworkId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setTechnicalInformation(soapModel.getTechnicalInformation());
		model.setNoticeLink(soapModel.getNoticeLink());
		model.setArtistName(soapModel.getArtistName());
		model.setCreationYear(soapModel.getCreationYear());
		model.setOrigin(soapModel.getOrigin());
		model.setExhibitionName(soapModel.getExhibitionName());
		model.setExhibitionPlace(soapModel.getExhibitionPlace());
		model.setLoanPeriod(soapModel.getLoanPeriod());
		model.setLinkName(soapModel.getLinkName());
		model.setLink(soapModel.getLink());
		model.setStatus(soapModel.getStatus());
		model.setImageId(soapModel.getImageId());
		model.setImagesIds(soapModel.getImagesIds());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Artwork> toModels(ArtworkSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Artwork> models = new ArrayList<Artwork>(soapModels.length);

		for (ArtworkSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_ARTWORK_ARTWORKTOARTWORKCOLLECTION_NAME =
		"artwork_ArtworkToArtworkCollection";
	public static final Object[][] MAPPING_TABLE_ARTWORK_ARTWORKTOARTWORKCOLLECTION_COLUMNS =
		{
			{ "companyId", Types.BIGINT },
			{ "artworkId", Types.BIGINT },
			{ "collectionId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_ARTWORK_ARTWORKTOARTWORKCOLLECTION_SQL_CREATE =
		"create table artwork_ArtworkToArtworkCollection (companyId LONG not null,artworkId LONG not null,collectionId LONG not null,primary key (artworkId, collectionId))";
	public static final boolean FINDER_CACHE_ENABLED_ARTWORK_ARTWORKTOARTWORKCOLLECTION =
		GetterUtil.getBoolean(eu.strasbourg.service.artwork.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.artwork_ArtworkToArtworkCollection"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.artwork.service.util.PropsUtil.get(
				"lock.expiration.time.eu.strasbourg.service.artwork.model.Artwork"));

	public ArtworkModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _artworkId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setArtworkId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _artworkId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Artwork.class;
	}

	@Override
	public String getModelClassName() {
		return Artwork.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("artworkId", getArtworkId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("technicalInformation", getTechnicalInformation());
		attributes.put("noticeLink", getNoticeLink());
		attributes.put("artistName", getArtistName());
		attributes.put("creationYear", getCreationYear());
		attributes.put("origin", getOrigin());
		attributes.put("exhibitionName", getExhibitionName());
		attributes.put("exhibitionPlace", getExhibitionPlace());
		attributes.put("loanPeriod", getLoanPeriod());
		attributes.put("linkName", getLinkName());
		attributes.put("link", getLink());
		attributes.put("status", getStatus());
		attributes.put("imageId", getImageId());
		attributes.put("imagesIds", getImagesIds());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long artworkId = (Long)attributes.get("artworkId");

		if (artworkId != null) {
			setArtworkId(artworkId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String technicalInformation = (String)attributes.get(
				"technicalInformation");

		if (technicalInformation != null) {
			setTechnicalInformation(technicalInformation);
		}

		String noticeLink = (String)attributes.get("noticeLink");

		if (noticeLink != null) {
			setNoticeLink(noticeLink);
		}

		String artistName = (String)attributes.get("artistName");

		if (artistName != null) {
			setArtistName(artistName);
		}

		String creationYear = (String)attributes.get("creationYear");

		if (creationYear != null) {
			setCreationYear(creationYear);
		}

		String origin = (String)attributes.get("origin");

		if (origin != null) {
			setOrigin(origin);
		}

		String exhibitionName = (String)attributes.get("exhibitionName");

		if (exhibitionName != null) {
			setExhibitionName(exhibitionName);
		}

		String exhibitionPlace = (String)attributes.get("exhibitionPlace");

		if (exhibitionPlace != null) {
			setExhibitionPlace(exhibitionPlace);
		}

		String loanPeriod = (String)attributes.get("loanPeriod");

		if (loanPeriod != null) {
			setLoanPeriod(loanPeriod);
		}

		String linkName = (String)attributes.get("linkName");

		if (linkName != null) {
			setLinkName(linkName);
		}

		String link = (String)attributes.get("link");

		if (link != null) {
			setLink(link);
		}

		Boolean status = (Boolean)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long imageId = (Long)attributes.get("imageId");

		if (imageId != null) {
			setImageId(imageId);
		}

		String imagesIds = (String)attributes.get("imagesIds");

		if (imagesIds != null) {
			setImagesIds(imagesIds);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getArtworkId() {
		return _artworkId;
	}

	@Override
	public void setArtworkId(long artworkId) {
		_artworkId = artworkId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitle(), languageId,
			useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
					title, languageId, defaultLanguageId));
		}
		else {
			setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
					languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
		if (titleMap == null) {
			return;
		}

		setTitle(LocalizationUtil.updateLocalization(titleMap, getTitle(),
				"Title", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap,
				getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getTechnicalInformation() {
		if (_technicalInformation == null) {
			return StringPool.BLANK;
		}
		else {
			return _technicalInformation;
		}
	}

	@Override
	public String getTechnicalInformation(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTechnicalInformation(languageId);
	}

	@Override
	public String getTechnicalInformation(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTechnicalInformation(languageId, useDefault);
	}

	@Override
	public String getTechnicalInformation(String languageId) {
		return LocalizationUtil.getLocalization(getTechnicalInformation(),
			languageId);
	}

	@Override
	public String getTechnicalInformation(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTechnicalInformation(),
			languageId, useDefault);
	}

	@Override
	public String getTechnicalInformationCurrentLanguageId() {
		return _technicalInformationCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTechnicalInformationCurrentValue() {
		Locale locale = getLocale(_technicalInformationCurrentLanguageId);

		return getTechnicalInformation(locale);
	}

	@Override
	public Map<Locale, String> getTechnicalInformationMap() {
		return LocalizationUtil.getLocalizationMap(getTechnicalInformation());
	}

	@Override
	public void setTechnicalInformation(String technicalInformation) {
		_technicalInformation = technicalInformation;
	}

	@Override
	public void setTechnicalInformation(String technicalInformation,
		Locale locale) {
		setTechnicalInformation(technicalInformation, locale,
			LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTechnicalInformation(String technicalInformation,
		Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(technicalInformation)) {
			setTechnicalInformation(LocalizationUtil.updateLocalization(
					getTechnicalInformation(), "TechnicalInformation",
					technicalInformation, languageId, defaultLanguageId));
		}
		else {
			setTechnicalInformation(LocalizationUtil.removeLocalization(
					getTechnicalInformation(), "TechnicalInformation",
					languageId));
		}
	}

	@Override
	public void setTechnicalInformationCurrentLanguageId(String languageId) {
		_technicalInformationCurrentLanguageId = languageId;
	}

	@Override
	public void setTechnicalInformationMap(
		Map<Locale, String> technicalInformationMap) {
		setTechnicalInformationMap(technicalInformationMap,
			LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTechnicalInformationMap(
		Map<Locale, String> technicalInformationMap, Locale defaultLocale) {
		if (technicalInformationMap == null) {
			return;
		}

		setTechnicalInformation(LocalizationUtil.updateLocalization(
				technicalInformationMap, getTechnicalInformation(),
				"TechnicalInformation", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getNoticeLink() {
		if (_noticeLink == null) {
			return StringPool.BLANK;
		}
		else {
			return _noticeLink;
		}
	}

	@Override
	public String getNoticeLink(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getNoticeLink(languageId);
	}

	@Override
	public String getNoticeLink(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getNoticeLink(languageId, useDefault);
	}

	@Override
	public String getNoticeLink(String languageId) {
		return LocalizationUtil.getLocalization(getNoticeLink(), languageId);
	}

	@Override
	public String getNoticeLink(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getNoticeLink(), languageId,
			useDefault);
	}

	@Override
	public String getNoticeLinkCurrentLanguageId() {
		return _noticeLinkCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNoticeLinkCurrentValue() {
		Locale locale = getLocale(_noticeLinkCurrentLanguageId);

		return getNoticeLink(locale);
	}

	@Override
	public Map<Locale, String> getNoticeLinkMap() {
		return LocalizationUtil.getLocalizationMap(getNoticeLink());
	}

	@Override
	public void setNoticeLink(String noticeLink) {
		_noticeLink = noticeLink;
	}

	@Override
	public void setNoticeLink(String noticeLink, Locale locale) {
		setNoticeLink(noticeLink, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setNoticeLink(String noticeLink, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(noticeLink)) {
			setNoticeLink(LocalizationUtil.updateLocalization(getNoticeLink(),
					"NoticeLink", noticeLink, languageId, defaultLanguageId));
		}
		else {
			setNoticeLink(LocalizationUtil.removeLocalization(getNoticeLink(),
					"NoticeLink", languageId));
		}
	}

	@Override
	public void setNoticeLinkCurrentLanguageId(String languageId) {
		_noticeLinkCurrentLanguageId = languageId;
	}

	@Override
	public void setNoticeLinkMap(Map<Locale, String> noticeLinkMap) {
		setNoticeLinkMap(noticeLinkMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setNoticeLinkMap(Map<Locale, String> noticeLinkMap,
		Locale defaultLocale) {
		if (noticeLinkMap == null) {
			return;
		}

		setNoticeLink(LocalizationUtil.updateLocalization(noticeLinkMap,
				getNoticeLink(), "NoticeLink",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getArtistName() {
		if (_artistName == null) {
			return StringPool.BLANK;
		}
		else {
			return _artistName;
		}
	}

	@Override
	public String getArtistName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getArtistName(languageId);
	}

	@Override
	public String getArtistName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getArtistName(languageId, useDefault);
	}

	@Override
	public String getArtistName(String languageId) {
		return LocalizationUtil.getLocalization(getArtistName(), languageId);
	}

	@Override
	public String getArtistName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getArtistName(), languageId,
			useDefault);
	}

	@Override
	public String getArtistNameCurrentLanguageId() {
		return _artistNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getArtistNameCurrentValue() {
		Locale locale = getLocale(_artistNameCurrentLanguageId);

		return getArtistName(locale);
	}

	@Override
	public Map<Locale, String> getArtistNameMap() {
		return LocalizationUtil.getLocalizationMap(getArtistName());
	}

	@Override
	public void setArtistName(String artistName) {
		_artistName = artistName;
	}

	@Override
	public void setArtistName(String artistName, Locale locale) {
		setArtistName(artistName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setArtistName(String artistName, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(artistName)) {
			setArtistName(LocalizationUtil.updateLocalization(getArtistName(),
					"ArtistName", artistName, languageId, defaultLanguageId));
		}
		else {
			setArtistName(LocalizationUtil.removeLocalization(getArtistName(),
					"ArtistName", languageId));
		}
	}

	@Override
	public void setArtistNameCurrentLanguageId(String languageId) {
		_artistNameCurrentLanguageId = languageId;
	}

	@Override
	public void setArtistNameMap(Map<Locale, String> artistNameMap) {
		setArtistNameMap(artistNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setArtistNameMap(Map<Locale, String> artistNameMap,
		Locale defaultLocale) {
		if (artistNameMap == null) {
			return;
		}

		setArtistName(LocalizationUtil.updateLocalization(artistNameMap,
				getArtistName(), "ArtistName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getCreationYear() {
		if (_creationYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _creationYear;
		}
	}

	@Override
	public String getCreationYear(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getCreationYear(languageId);
	}

	@Override
	public String getCreationYear(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getCreationYear(languageId, useDefault);
	}

	@Override
	public String getCreationYear(String languageId) {
		return LocalizationUtil.getLocalization(getCreationYear(), languageId);
	}

	@Override
	public String getCreationYear(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getCreationYear(), languageId,
			useDefault);
	}

	@Override
	public String getCreationYearCurrentLanguageId() {
		return _creationYearCurrentLanguageId;
	}

	@JSON
	@Override
	public String getCreationYearCurrentValue() {
		Locale locale = getLocale(_creationYearCurrentLanguageId);

		return getCreationYear(locale);
	}

	@Override
	public Map<Locale, String> getCreationYearMap() {
		return LocalizationUtil.getLocalizationMap(getCreationYear());
	}

	@Override
	public void setCreationYear(String creationYear) {
		_creationYear = creationYear;
	}

	@Override
	public void setCreationYear(String creationYear, Locale locale) {
		setCreationYear(creationYear, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setCreationYear(String creationYear, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(creationYear)) {
			setCreationYear(LocalizationUtil.updateLocalization(
					getCreationYear(), "CreationYear", creationYear,
					languageId, defaultLanguageId));
		}
		else {
			setCreationYear(LocalizationUtil.removeLocalization(
					getCreationYear(), "CreationYear", languageId));
		}
	}

	@Override
	public void setCreationYearCurrentLanguageId(String languageId) {
		_creationYearCurrentLanguageId = languageId;
	}

	@Override
	public void setCreationYearMap(Map<Locale, String> creationYearMap) {
		setCreationYearMap(creationYearMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setCreationYearMap(Map<Locale, String> creationYearMap,
		Locale defaultLocale) {
		if (creationYearMap == null) {
			return;
		}

		setCreationYear(LocalizationUtil.updateLocalization(creationYearMap,
				getCreationYear(), "CreationYear",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getOrigin() {
		if (_origin == null) {
			return StringPool.BLANK;
		}
		else {
			return _origin;
		}
	}

	@Override
	public String getOrigin(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getOrigin(languageId);
	}

	@Override
	public String getOrigin(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getOrigin(languageId, useDefault);
	}

	@Override
	public String getOrigin(String languageId) {
		return LocalizationUtil.getLocalization(getOrigin(), languageId);
	}

	@Override
	public String getOrigin(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getOrigin(), languageId,
			useDefault);
	}

	@Override
	public String getOriginCurrentLanguageId() {
		return _originCurrentLanguageId;
	}

	@JSON
	@Override
	public String getOriginCurrentValue() {
		Locale locale = getLocale(_originCurrentLanguageId);

		return getOrigin(locale);
	}

	@Override
	public Map<Locale, String> getOriginMap() {
		return LocalizationUtil.getLocalizationMap(getOrigin());
	}

	@Override
	public void setOrigin(String origin) {
		_origin = origin;
	}

	@Override
	public void setOrigin(String origin, Locale locale) {
		setOrigin(origin, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setOrigin(String origin, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(origin)) {
			setOrigin(LocalizationUtil.updateLocalization(getOrigin(),
					"Origin", origin, languageId, defaultLanguageId));
		}
		else {
			setOrigin(LocalizationUtil.removeLocalization(getOrigin(),
					"Origin", languageId));
		}
	}

	@Override
	public void setOriginCurrentLanguageId(String languageId) {
		_originCurrentLanguageId = languageId;
	}

	@Override
	public void setOriginMap(Map<Locale, String> originMap) {
		setOriginMap(originMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setOriginMap(Map<Locale, String> originMap, Locale defaultLocale) {
		if (originMap == null) {
			return;
		}

		setOrigin(LocalizationUtil.updateLocalization(originMap, getOrigin(),
				"Origin", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getExhibitionName() {
		if (_exhibitionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _exhibitionName;
		}
	}

	@Override
	public String getExhibitionName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getExhibitionName(languageId);
	}

	@Override
	public String getExhibitionName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getExhibitionName(languageId, useDefault);
	}

	@Override
	public String getExhibitionName(String languageId) {
		return LocalizationUtil.getLocalization(getExhibitionName(), languageId);
	}

	@Override
	public String getExhibitionName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getExhibitionName(),
			languageId, useDefault);
	}

	@Override
	public String getExhibitionNameCurrentLanguageId() {
		return _exhibitionNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getExhibitionNameCurrentValue() {
		Locale locale = getLocale(_exhibitionNameCurrentLanguageId);

		return getExhibitionName(locale);
	}

	@Override
	public Map<Locale, String> getExhibitionNameMap() {
		return LocalizationUtil.getLocalizationMap(getExhibitionName());
	}

	@Override
	public void setExhibitionName(String exhibitionName) {
		_exhibitionName = exhibitionName;
	}

	@Override
	public void setExhibitionName(String exhibitionName, Locale locale) {
		setExhibitionName(exhibitionName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setExhibitionName(String exhibitionName, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(exhibitionName)) {
			setExhibitionName(LocalizationUtil.updateLocalization(
					getExhibitionName(), "ExhibitionName", exhibitionName,
					languageId, defaultLanguageId));
		}
		else {
			setExhibitionName(LocalizationUtil.removeLocalization(
					getExhibitionName(), "ExhibitionName", languageId));
		}
	}

	@Override
	public void setExhibitionNameCurrentLanguageId(String languageId) {
		_exhibitionNameCurrentLanguageId = languageId;
	}

	@Override
	public void setExhibitionNameMap(Map<Locale, String> exhibitionNameMap) {
		setExhibitionNameMap(exhibitionNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setExhibitionNameMap(Map<Locale, String> exhibitionNameMap,
		Locale defaultLocale) {
		if (exhibitionNameMap == null) {
			return;
		}

		setExhibitionName(LocalizationUtil.updateLocalization(
				exhibitionNameMap, getExhibitionName(), "ExhibitionName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getExhibitionPlace() {
		if (_exhibitionPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _exhibitionPlace;
		}
	}

	@Override
	public String getExhibitionPlace(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getExhibitionPlace(languageId);
	}

	@Override
	public String getExhibitionPlace(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getExhibitionPlace(languageId, useDefault);
	}

	@Override
	public String getExhibitionPlace(String languageId) {
		return LocalizationUtil.getLocalization(getExhibitionPlace(), languageId);
	}

	@Override
	public String getExhibitionPlace(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getExhibitionPlace(),
			languageId, useDefault);
	}

	@Override
	public String getExhibitionPlaceCurrentLanguageId() {
		return _exhibitionPlaceCurrentLanguageId;
	}

	@JSON
	@Override
	public String getExhibitionPlaceCurrentValue() {
		Locale locale = getLocale(_exhibitionPlaceCurrentLanguageId);

		return getExhibitionPlace(locale);
	}

	@Override
	public Map<Locale, String> getExhibitionPlaceMap() {
		return LocalizationUtil.getLocalizationMap(getExhibitionPlace());
	}

	@Override
	public void setExhibitionPlace(String exhibitionPlace) {
		_exhibitionPlace = exhibitionPlace;
	}

	@Override
	public void setExhibitionPlace(String exhibitionPlace, Locale locale) {
		setExhibitionPlace(exhibitionPlace, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setExhibitionPlace(String exhibitionPlace, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(exhibitionPlace)) {
			setExhibitionPlace(LocalizationUtil.updateLocalization(
					getExhibitionPlace(), "ExhibitionPlace", exhibitionPlace,
					languageId, defaultLanguageId));
		}
		else {
			setExhibitionPlace(LocalizationUtil.removeLocalization(
					getExhibitionPlace(), "ExhibitionPlace", languageId));
		}
	}

	@Override
	public void setExhibitionPlaceCurrentLanguageId(String languageId) {
		_exhibitionPlaceCurrentLanguageId = languageId;
	}

	@Override
	public void setExhibitionPlaceMap(Map<Locale, String> exhibitionPlaceMap) {
		setExhibitionPlaceMap(exhibitionPlaceMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setExhibitionPlaceMap(Map<Locale, String> exhibitionPlaceMap,
		Locale defaultLocale) {
		if (exhibitionPlaceMap == null) {
			return;
		}

		setExhibitionPlace(LocalizationUtil.updateLocalization(
				exhibitionPlaceMap, getExhibitionPlace(), "ExhibitionPlace",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getLoanPeriod() {
		if (_loanPeriod == null) {
			return StringPool.BLANK;
		}
		else {
			return _loanPeriod;
		}
	}

	@Override
	public String getLoanPeriod(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLoanPeriod(languageId);
	}

	@Override
	public String getLoanPeriod(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLoanPeriod(languageId, useDefault);
	}

	@Override
	public String getLoanPeriod(String languageId) {
		return LocalizationUtil.getLocalization(getLoanPeriod(), languageId);
	}

	@Override
	public String getLoanPeriod(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getLoanPeriod(), languageId,
			useDefault);
	}

	@Override
	public String getLoanPeriodCurrentLanguageId() {
		return _loanPeriodCurrentLanguageId;
	}

	@JSON
	@Override
	public String getLoanPeriodCurrentValue() {
		Locale locale = getLocale(_loanPeriodCurrentLanguageId);

		return getLoanPeriod(locale);
	}

	@Override
	public Map<Locale, String> getLoanPeriodMap() {
		return LocalizationUtil.getLocalizationMap(getLoanPeriod());
	}

	@Override
	public void setLoanPeriod(String loanPeriod) {
		_loanPeriod = loanPeriod;
	}

	@Override
	public void setLoanPeriod(String loanPeriod, Locale locale) {
		setLoanPeriod(loanPeriod, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setLoanPeriod(String loanPeriod, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(loanPeriod)) {
			setLoanPeriod(LocalizationUtil.updateLocalization(getLoanPeriod(),
					"LoanPeriod", loanPeriod, languageId, defaultLanguageId));
		}
		else {
			setLoanPeriod(LocalizationUtil.removeLocalization(getLoanPeriod(),
					"LoanPeriod", languageId));
		}
	}

	@Override
	public void setLoanPeriodCurrentLanguageId(String languageId) {
		_loanPeriodCurrentLanguageId = languageId;
	}

	@Override
	public void setLoanPeriodMap(Map<Locale, String> loanPeriodMap) {
		setLoanPeriodMap(loanPeriodMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setLoanPeriodMap(Map<Locale, String> loanPeriodMap,
		Locale defaultLocale) {
		if (loanPeriodMap == null) {
			return;
		}

		setLoanPeriod(LocalizationUtil.updateLocalization(loanPeriodMap,
				getLoanPeriod(), "LoanPeriod",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getLinkName() {
		if (_linkName == null) {
			return StringPool.BLANK;
		}
		else {
			return _linkName;
		}
	}

	@Override
	public String getLinkName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLinkName(languageId);
	}

	@Override
	public String getLinkName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLinkName(languageId, useDefault);
	}

	@Override
	public String getLinkName(String languageId) {
		return LocalizationUtil.getLocalization(getLinkName(), languageId);
	}

	@Override
	public String getLinkName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getLinkName(), languageId,
			useDefault);
	}

	@Override
	public String getLinkNameCurrentLanguageId() {
		return _linkNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getLinkNameCurrentValue() {
		Locale locale = getLocale(_linkNameCurrentLanguageId);

		return getLinkName(locale);
	}

	@Override
	public Map<Locale, String> getLinkNameMap() {
		return LocalizationUtil.getLocalizationMap(getLinkName());
	}

	@Override
	public void setLinkName(String linkName) {
		_linkName = linkName;
	}

	@Override
	public void setLinkName(String linkName, Locale locale) {
		setLinkName(linkName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setLinkName(String linkName, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(linkName)) {
			setLinkName(LocalizationUtil.updateLocalization(getLinkName(),
					"LinkName", linkName, languageId, defaultLanguageId));
		}
		else {
			setLinkName(LocalizationUtil.removeLocalization(getLinkName(),
					"LinkName", languageId));
		}
	}

	@Override
	public void setLinkNameCurrentLanguageId(String languageId) {
		_linkNameCurrentLanguageId = languageId;
	}

	@Override
	public void setLinkNameMap(Map<Locale, String> linkNameMap) {
		setLinkNameMap(linkNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setLinkNameMap(Map<Locale, String> linkNameMap,
		Locale defaultLocale) {
		if (linkNameMap == null) {
			return;
		}

		setLinkName(LocalizationUtil.updateLocalization(linkNameMap,
				getLinkName(), "LinkName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getLink() {
		if (_link == null) {
			return StringPool.BLANK;
		}
		else {
			return _link;
		}
	}

	@Override
	public String getLink(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLink(languageId);
	}

	@Override
	public String getLink(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLink(languageId, useDefault);
	}

	@Override
	public String getLink(String languageId) {
		return LocalizationUtil.getLocalization(getLink(), languageId);
	}

	@Override
	public String getLink(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getLink(), languageId,
			useDefault);
	}

	@Override
	public String getLinkCurrentLanguageId() {
		return _linkCurrentLanguageId;
	}

	@JSON
	@Override
	public String getLinkCurrentValue() {
		Locale locale = getLocale(_linkCurrentLanguageId);

		return getLink(locale);
	}

	@Override
	public Map<Locale, String> getLinkMap() {
		return LocalizationUtil.getLocalizationMap(getLink());
	}

	@Override
	public void setLink(String link) {
		_link = link;
	}

	@Override
	public void setLink(String link, Locale locale) {
		setLink(link, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setLink(String link, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(link)) {
			setLink(LocalizationUtil.updateLocalization(getLink(), "Link",
					link, languageId, defaultLanguageId));
		}
		else {
			setLink(LocalizationUtil.removeLocalization(getLink(), "Link",
					languageId));
		}
	}

	@Override
	public void setLinkCurrentLanguageId(String languageId) {
		_linkCurrentLanguageId = languageId;
	}

	@Override
	public void setLinkMap(Map<Locale, String> linkMap) {
		setLinkMap(linkMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setLinkMap(Map<Locale, String> linkMap, Locale defaultLocale) {
		if (linkMap == null) {
			return;
		}

		setLink(LocalizationUtil.updateLocalization(linkMap, getLink(), "Link",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public boolean getStatus() {
		return _status;
	}

	@JSON
	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		_status = status;
	}

	@JSON
	@Override
	public Long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(Long imageId) {
		_imageId = imageId;
	}

	@JSON
	@Override
	public String getImagesIds() {
		if (_imagesIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _imagesIds;
		}
	}

	@Override
	public void setImagesIds(String imagesIds) {
		_imagesIds = imagesIds;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Artwork.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Artwork.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> technicalInformationMap = getTechnicalInformationMap();

		for (Map.Entry<Locale, String> entry : technicalInformationMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> noticeLinkMap = getNoticeLinkMap();

		for (Map.Entry<Locale, String> entry : noticeLinkMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> artistNameMap = getArtistNameMap();

		for (Map.Entry<Locale, String> entry : artistNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> creationYearMap = getCreationYearMap();

		for (Map.Entry<Locale, String> entry : creationYearMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> originMap = getOriginMap();

		for (Map.Entry<Locale, String> entry : originMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> exhibitionNameMap = getExhibitionNameMap();

		for (Map.Entry<Locale, String> entry : exhibitionNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> exhibitionPlaceMap = getExhibitionPlaceMap();

		for (Map.Entry<Locale, String> entry : exhibitionPlaceMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> loanPeriodMap = getLoanPeriodMap();

		for (Map.Entry<Locale, String> entry : loanPeriodMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> linkNameMap = getLinkNameMap();

		for (Map.Entry<Locale, String> entry : linkNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> linkMap = getLinkMap();

		for (Map.Entry<Locale, String> entry : linkMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(Artwork.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(getDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String technicalInformation = getTechnicalInformation(defaultLocale);

		if (Validator.isNull(technicalInformation)) {
			setTechnicalInformation(getTechnicalInformation(
					modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTechnicalInformation(getTechnicalInformation(defaultLocale),
				defaultLocale, defaultLocale);
		}

		String noticeLink = getNoticeLink(defaultLocale);

		if (Validator.isNull(noticeLink)) {
			setNoticeLink(getNoticeLink(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setNoticeLink(getNoticeLink(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String artistName = getArtistName(defaultLocale);

		if (Validator.isNull(artistName)) {
			setArtistName(getArtistName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setArtistName(getArtistName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String creationYear = getCreationYear(defaultLocale);

		if (Validator.isNull(creationYear)) {
			setCreationYear(getCreationYear(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setCreationYear(getCreationYear(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String origin = getOrigin(defaultLocale);

		if (Validator.isNull(origin)) {
			setOrigin(getOrigin(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setOrigin(getOrigin(defaultLocale), defaultLocale, defaultLocale);
		}

		String exhibitionName = getExhibitionName(defaultLocale);

		if (Validator.isNull(exhibitionName)) {
			setExhibitionName(getExhibitionName(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setExhibitionName(getExhibitionName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String exhibitionPlace = getExhibitionPlace(defaultLocale);

		if (Validator.isNull(exhibitionPlace)) {
			setExhibitionPlace(getExhibitionPlace(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setExhibitionPlace(getExhibitionPlace(defaultLocale),
				defaultLocale, defaultLocale);
		}

		String loanPeriod = getLoanPeriod(defaultLocale);

		if (Validator.isNull(loanPeriod)) {
			setLoanPeriod(getLoanPeriod(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setLoanPeriod(getLoanPeriod(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String linkName = getLinkName(defaultLocale);

		if (Validator.isNull(linkName)) {
			setLinkName(getLinkName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setLinkName(getLinkName(defaultLocale), defaultLocale, defaultLocale);
		}

		String link = getLink(defaultLocale);

		if (Validator.isNull(link)) {
			setLink(getLink(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setLink(getLink(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Artwork toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Artwork)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ArtworkImpl artworkImpl = new ArtworkImpl();

		artworkImpl.setUuid(getUuid());
		artworkImpl.setArtworkId(getArtworkId());
		artworkImpl.setGroupId(getGroupId());
		artworkImpl.setCompanyId(getCompanyId());
		artworkImpl.setUserId(getUserId());
		artworkImpl.setUserName(getUserName());
		artworkImpl.setCreateDate(getCreateDate());
		artworkImpl.setModifiedDate(getModifiedDate());
		artworkImpl.setTitle(getTitle());
		artworkImpl.setDescription(getDescription());
		artworkImpl.setTechnicalInformation(getTechnicalInformation());
		artworkImpl.setNoticeLink(getNoticeLink());
		artworkImpl.setArtistName(getArtistName());
		artworkImpl.setCreationYear(getCreationYear());
		artworkImpl.setOrigin(getOrigin());
		artworkImpl.setExhibitionName(getExhibitionName());
		artworkImpl.setExhibitionPlace(getExhibitionPlace());
		artworkImpl.setLoanPeriod(getLoanPeriod());
		artworkImpl.setLinkName(getLinkName());
		artworkImpl.setLink(getLink());
		artworkImpl.setStatus(getStatus());
		artworkImpl.setImageId(getImageId());
		artworkImpl.setImagesIds(getImagesIds());

		artworkImpl.resetOriginalValues();

		return artworkImpl;
	}

	@Override
	public int compareTo(Artwork artwork) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(), artwork.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Artwork)) {
			return false;
		}

		Artwork artwork = (Artwork)obj;

		long primaryKey = artwork.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ArtworkModelImpl artworkModelImpl = this;

		artworkModelImpl._originalUuid = artworkModelImpl._uuid;

		artworkModelImpl._originalGroupId = artworkModelImpl._groupId;

		artworkModelImpl._setOriginalGroupId = false;

		artworkModelImpl._originalCompanyId = artworkModelImpl._companyId;

		artworkModelImpl._setOriginalCompanyId = false;

		artworkModelImpl._setModifiedDate = false;

		artworkModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Artwork> toCacheModel() {
		ArtworkCacheModel artworkCacheModel = new ArtworkCacheModel();

		artworkCacheModel.uuid = getUuid();

		String uuid = artworkCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			artworkCacheModel.uuid = null;
		}

		artworkCacheModel.artworkId = getArtworkId();

		artworkCacheModel.groupId = getGroupId();

		artworkCacheModel.companyId = getCompanyId();

		artworkCacheModel.userId = getUserId();

		artworkCacheModel.userName = getUserName();

		String userName = artworkCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			artworkCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			artworkCacheModel.createDate = createDate.getTime();
		}
		else {
			artworkCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			artworkCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			artworkCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		artworkCacheModel.title = getTitle();

		String title = artworkCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			artworkCacheModel.title = null;
		}

		artworkCacheModel.description = getDescription();

		String description = artworkCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			artworkCacheModel.description = null;
		}

		artworkCacheModel.technicalInformation = getTechnicalInformation();

		String technicalInformation = artworkCacheModel.technicalInformation;

		if ((technicalInformation != null) &&
				(technicalInformation.length() == 0)) {
			artworkCacheModel.technicalInformation = null;
		}

		artworkCacheModel.noticeLink = getNoticeLink();

		String noticeLink = artworkCacheModel.noticeLink;

		if ((noticeLink != null) && (noticeLink.length() == 0)) {
			artworkCacheModel.noticeLink = null;
		}

		artworkCacheModel.artistName = getArtistName();

		String artistName = artworkCacheModel.artistName;

		if ((artistName != null) && (artistName.length() == 0)) {
			artworkCacheModel.artistName = null;
		}

		artworkCacheModel.creationYear = getCreationYear();

		String creationYear = artworkCacheModel.creationYear;

		if ((creationYear != null) && (creationYear.length() == 0)) {
			artworkCacheModel.creationYear = null;
		}

		artworkCacheModel.origin = getOrigin();

		String origin = artworkCacheModel.origin;

		if ((origin != null) && (origin.length() == 0)) {
			artworkCacheModel.origin = null;
		}

		artworkCacheModel.exhibitionName = getExhibitionName();

		String exhibitionName = artworkCacheModel.exhibitionName;

		if ((exhibitionName != null) && (exhibitionName.length() == 0)) {
			artworkCacheModel.exhibitionName = null;
		}

		artworkCacheModel.exhibitionPlace = getExhibitionPlace();

		String exhibitionPlace = artworkCacheModel.exhibitionPlace;

		if ((exhibitionPlace != null) && (exhibitionPlace.length() == 0)) {
			artworkCacheModel.exhibitionPlace = null;
		}

		artworkCacheModel.loanPeriod = getLoanPeriod();

		String loanPeriod = artworkCacheModel.loanPeriod;

		if ((loanPeriod != null) && (loanPeriod.length() == 0)) {
			artworkCacheModel.loanPeriod = null;
		}

		artworkCacheModel.linkName = getLinkName();

		String linkName = artworkCacheModel.linkName;

		if ((linkName != null) && (linkName.length() == 0)) {
			artworkCacheModel.linkName = null;
		}

		artworkCacheModel.link = getLink();

		String link = artworkCacheModel.link;

		if ((link != null) && (link.length() == 0)) {
			artworkCacheModel.link = null;
		}

		artworkCacheModel.status = getStatus();

		artworkCacheModel.imageId = getImageId();

		artworkCacheModel.imagesIds = getImagesIds();

		String imagesIds = artworkCacheModel.imagesIds;

		if ((imagesIds != null) && (imagesIds.length() == 0)) {
			artworkCacheModel.imagesIds = null;
		}

		return artworkCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(47);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", artworkId=");
		sb.append(getArtworkId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", technicalInformation=");
		sb.append(getTechnicalInformation());
		sb.append(", noticeLink=");
		sb.append(getNoticeLink());
		sb.append(", artistName=");
		sb.append(getArtistName());
		sb.append(", creationYear=");
		sb.append(getCreationYear());
		sb.append(", origin=");
		sb.append(getOrigin());
		sb.append(", exhibitionName=");
		sb.append(getExhibitionName());
		sb.append(", exhibitionPlace=");
		sb.append(getExhibitionPlace());
		sb.append(", loanPeriod=");
		sb.append(getLoanPeriod());
		sb.append(", linkName=");
		sb.append(getLinkName());
		sb.append(", link=");
		sb.append(getLink());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", imageId=");
		sb.append(getImageId());
		sb.append(", imagesIds=");
		sb.append(getImagesIds());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(73);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.artwork.model.Artwork");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>artworkId</column-name><column-value><![CDATA[");
		sb.append(getArtworkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>technicalInformation</column-name><column-value><![CDATA[");
		sb.append(getTechnicalInformation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noticeLink</column-name><column-value><![CDATA[");
		sb.append(getNoticeLink());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>artistName</column-name><column-value><![CDATA[");
		sb.append(getArtistName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creationYear</column-name><column-value><![CDATA[");
		sb.append(getCreationYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>origin</column-name><column-value><![CDATA[");
		sb.append(getOrigin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>exhibitionName</column-name><column-value><![CDATA[");
		sb.append(getExhibitionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>exhibitionPlace</column-name><column-value><![CDATA[");
		sb.append(getExhibitionPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loanPeriod</column-name><column-value><![CDATA[");
		sb.append(getLoanPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkName</column-name><column-value><![CDATA[");
		sb.append(getLinkName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>link</column-name><column-value><![CDATA[");
		sb.append(getLink());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageId</column-name><column-value><![CDATA[");
		sb.append(getImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imagesIds</column-name><column-value><![CDATA[");
		sb.append(getImagesIds());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Artwork.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Artwork.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _artworkId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _technicalInformation;
	private String _technicalInformationCurrentLanguageId;
	private String _noticeLink;
	private String _noticeLinkCurrentLanguageId;
	private String _artistName;
	private String _artistNameCurrentLanguageId;
	private String _creationYear;
	private String _creationYearCurrentLanguageId;
	private String _origin;
	private String _originCurrentLanguageId;
	private String _exhibitionName;
	private String _exhibitionNameCurrentLanguageId;
	private String _exhibitionPlace;
	private String _exhibitionPlaceCurrentLanguageId;
	private String _loanPeriod;
	private String _loanPeriodCurrentLanguageId;
	private String _linkName;
	private String _linkNameCurrentLanguageId;
	private String _link;
	private String _linkCurrentLanguageId;
	private boolean _status;
	private Long _imageId;
	private String _imagesIds;
	private long _columnBitmask;
	private Artwork _escapedModel;
}