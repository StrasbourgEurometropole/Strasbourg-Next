/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.help.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.help.model.HelpProposal;
import eu.strasbourg.service.help.model.HelpProposalModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the HelpProposal service. Represents a row in the &quot;help_HelpProposal&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>HelpProposalModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HelpProposalImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HelpProposalImpl
 * @generated
 */
@ProviderType
public class HelpProposalModelImpl
	extends BaseModelImpl<HelpProposal> implements HelpProposalModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a help proposal model instance should use the <code>HelpProposal</code> interface instead.
	 */
	public static final String TABLE_NAME = "help_HelpProposal";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"helpProposalId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"title", Types.VARCHAR}, {"description", Types.CLOB},
		{"inTheNameOf", Types.VARCHAR}, {"address", Types.VARCHAR},
		{"city", Types.VARCHAR}, {"postalCode", Types.BIGINT},
		{"modifiedByUserDate", Types.TIMESTAMP},
		{"spokenLanguages", Types.VARCHAR}, {"imageId", Types.BIGINT},
		{"publikId", Types.VARCHAR}, {"publicationDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("helpProposalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("inTheNameOf", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postalCode", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedByUserDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("spokenLanguages", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("publikId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publicationDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table help_HelpProposal (uuid_ VARCHAR(75) null,helpProposalId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,title VARCHAR(400) null,description TEXT null,inTheNameOf VARCHAR(400) null,address VARCHAR(400) null,city VARCHAR(400) null,postalCode LONG,modifiedByUserDate DATE null,spokenLanguages VARCHAR(75) null,imageId LONG,publikId VARCHAR(75) null,publicationDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table help_HelpProposal";

	public static final String ORDER_BY_JPQL =
		" ORDER BY helpProposal.modifiedByUserDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY help_HelpProposal.modifiedByUserDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long PUBLIKID_COLUMN_BITMASK = 4L;

	public static final long STATUS_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long MODIFIEDBYUSERDATE_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public HelpProposalModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _helpProposalId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHelpProposalId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _helpProposalId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return HelpProposal.class;
	}

	@Override
	public String getModelClassName() {
		return HelpProposal.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<HelpProposal, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<HelpProposal, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HelpProposal, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((HelpProposal)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<HelpProposal, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<HelpProposal, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(HelpProposal)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<HelpProposal, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<HelpProposal, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, HelpProposal>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			HelpProposal.class.getClassLoader(), HelpProposal.class,
			ModelWrapper.class);

		try {
			Constructor<HelpProposal> constructor =
				(Constructor<HelpProposal>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<HelpProposal, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<HelpProposal, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<HelpProposal, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<HelpProposal, Object>>();
		Map<String, BiConsumer<HelpProposal, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<HelpProposal, ?>>();

		attributeGetterFunctions.put("uuid", HelpProposal::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<HelpProposal, String>)HelpProposal::setUuid);
		attributeGetterFunctions.put(
			"helpProposalId", HelpProposal::getHelpProposalId);
		attributeSetterBiConsumers.put(
			"helpProposalId",
			(BiConsumer<HelpProposal, Long>)HelpProposal::setHelpProposalId);
		attributeGetterFunctions.put("groupId", HelpProposal::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<HelpProposal, Long>)HelpProposal::setGroupId);
		attributeGetterFunctions.put("companyId", HelpProposal::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<HelpProposal, Long>)HelpProposal::setCompanyId);
		attributeGetterFunctions.put("userId", HelpProposal::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<HelpProposal, Long>)HelpProposal::setUserId);
		attributeGetterFunctions.put("userName", HelpProposal::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<HelpProposal, String>)HelpProposal::setUserName);
		attributeGetterFunctions.put("createDate", HelpProposal::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<HelpProposal, Date>)HelpProposal::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", HelpProposal::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<HelpProposal, Date>)HelpProposal::setModifiedDate);
		attributeGetterFunctions.put("status", HelpProposal::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<HelpProposal, Integer>)HelpProposal::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", HelpProposal::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<HelpProposal, Long>)HelpProposal::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", HelpProposal::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<HelpProposal, String>)
				HelpProposal::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", HelpProposal::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<HelpProposal, Date>)HelpProposal::setStatusDate);
		attributeGetterFunctions.put("title", HelpProposal::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<HelpProposal, String>)HelpProposal::setTitle);
		attributeGetterFunctions.put(
			"description", HelpProposal::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<HelpProposal, String>)HelpProposal::setDescription);
		attributeGetterFunctions.put(
			"inTheNameOf", HelpProposal::getInTheNameOf);
		attributeSetterBiConsumers.put(
			"inTheNameOf",
			(BiConsumer<HelpProposal, String>)HelpProposal::setInTheNameOf);
		attributeGetterFunctions.put("address", HelpProposal::getAddress);
		attributeSetterBiConsumers.put(
			"address",
			(BiConsumer<HelpProposal, String>)HelpProposal::setAddress);
		attributeGetterFunctions.put("city", HelpProposal::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<HelpProposal, String>)HelpProposal::setCity);
		attributeGetterFunctions.put("postalCode", HelpProposal::getPostalCode);
		attributeSetterBiConsumers.put(
			"postalCode",
			(BiConsumer<HelpProposal, Long>)HelpProposal::setPostalCode);
		attributeGetterFunctions.put(
			"modifiedByUserDate", HelpProposal::getModifiedByUserDate);
		attributeSetterBiConsumers.put(
			"modifiedByUserDate",
			(BiConsumer<HelpProposal, Date>)
				HelpProposal::setModifiedByUserDate);
		attributeGetterFunctions.put(
			"spokenLanguages", HelpProposal::getSpokenLanguages);
		attributeSetterBiConsumers.put(
			"spokenLanguages",
			(BiConsumer<HelpProposal, String>)HelpProposal::setSpokenLanguages);
		attributeGetterFunctions.put("imageId", HelpProposal::getImageId);
		attributeSetterBiConsumers.put(
			"imageId",
			(BiConsumer<HelpProposal, Long>)HelpProposal::setImageId);
		attributeGetterFunctions.put("publikId", HelpProposal::getPublikId);
		attributeSetterBiConsumers.put(
			"publikId",
			(BiConsumer<HelpProposal, String>)HelpProposal::setPublikId);
		attributeGetterFunctions.put(
			"publicationDate", HelpProposal::getPublicationDate);
		attributeSetterBiConsumers.put(
			"publicationDate",
			(BiConsumer<HelpProposal, Date>)HelpProposal::setPublicationDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getHelpProposalId() {
		return _helpProposalId;
	}

	@Override
	public void setHelpProposalId(long helpProposalId) {
		_helpProposalId = helpProposalId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getInTheNameOf() {
		if (_inTheNameOf == null) {
			return "";
		}
		else {
			return _inTheNameOf;
		}
	}

	@Override
	public void setInTheNameOf(String inTheNameOf) {
		_inTheNameOf = inTheNameOf;
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@Override
	public long getPostalCode() {
		return _postalCode;
	}

	@Override
	public void setPostalCode(long postalCode) {
		_postalCode = postalCode;
	}

	@Override
	public Date getModifiedByUserDate() {
		return _modifiedByUserDate;
	}

	@Override
	public void setModifiedByUserDate(Date modifiedByUserDate) {
		_columnBitmask = -1L;

		_modifiedByUserDate = modifiedByUserDate;
	}

	@Override
	public String getSpokenLanguages() {
		if (_spokenLanguages == null) {
			return "";
		}
		else {
			return _spokenLanguages;
		}
	}

	@Override
	public void setSpokenLanguages(String spokenLanguages) {
		_spokenLanguages = spokenLanguages;
	}

	@Override
	public long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(long imageId) {
		_imageId = imageId;
	}

	@Override
	public String getPublikId() {
		if (_publikId == null) {
			return "";
		}
		else {
			return _publikId;
		}
	}

	@Override
	public void setPublikId(String publikId) {
		_columnBitmask |= PUBLIKID_COLUMN_BITMASK;

		if (_originalPublikId == null) {
			_originalPublikId = _publikId;
		}

		_publikId = publikId;
	}

	public String getOriginalPublikId() {
		return GetterUtil.getString(_originalPublikId);
	}

	@Override
	public Date getPublicationDate() {
		return _publicationDate;
	}

	@Override
	public void setPublicationDate(Date publicationDate) {
		_publicationDate = publicationDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(HelpProposal.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), HelpProposal.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public HelpProposal toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HelpProposalImpl helpProposalImpl = new HelpProposalImpl();

		helpProposalImpl.setUuid(getUuid());
		helpProposalImpl.setHelpProposalId(getHelpProposalId());
		helpProposalImpl.setGroupId(getGroupId());
		helpProposalImpl.setCompanyId(getCompanyId());
		helpProposalImpl.setUserId(getUserId());
		helpProposalImpl.setUserName(getUserName());
		helpProposalImpl.setCreateDate(getCreateDate());
		helpProposalImpl.setModifiedDate(getModifiedDate());
		helpProposalImpl.setStatus(getStatus());
		helpProposalImpl.setStatusByUserId(getStatusByUserId());
		helpProposalImpl.setStatusByUserName(getStatusByUserName());
		helpProposalImpl.setStatusDate(getStatusDate());
		helpProposalImpl.setTitle(getTitle());
		helpProposalImpl.setDescription(getDescription());
		helpProposalImpl.setInTheNameOf(getInTheNameOf());
		helpProposalImpl.setAddress(getAddress());
		helpProposalImpl.setCity(getCity());
		helpProposalImpl.setPostalCode(getPostalCode());
		helpProposalImpl.setModifiedByUserDate(getModifiedByUserDate());
		helpProposalImpl.setSpokenLanguages(getSpokenLanguages());
		helpProposalImpl.setImageId(getImageId());
		helpProposalImpl.setPublikId(getPublikId());
		helpProposalImpl.setPublicationDate(getPublicationDate());

		helpProposalImpl.resetOriginalValues();

		return helpProposalImpl;
	}

	@Override
	public int compareTo(HelpProposal helpProposal) {
		int value = 0;

		value = DateUtil.compareTo(
			getModifiedByUserDate(), helpProposal.getModifiedByUserDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof HelpProposal)) {
			return false;
		}

		HelpProposal helpProposal = (HelpProposal)obj;

		long primaryKey = helpProposal.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		HelpProposalModelImpl helpProposalModelImpl = this;

		helpProposalModelImpl._originalUuid = helpProposalModelImpl._uuid;

		helpProposalModelImpl._originalGroupId = helpProposalModelImpl._groupId;

		helpProposalModelImpl._setOriginalGroupId = false;

		helpProposalModelImpl._originalCompanyId =
			helpProposalModelImpl._companyId;

		helpProposalModelImpl._setOriginalCompanyId = false;

		helpProposalModelImpl._setModifiedDate = false;

		helpProposalModelImpl._originalStatus = helpProposalModelImpl._status;

		helpProposalModelImpl._setOriginalStatus = false;

		helpProposalModelImpl._originalPublikId =
			helpProposalModelImpl._publikId;

		helpProposalModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<HelpProposal> toCacheModel() {
		HelpProposalCacheModel helpProposalCacheModel =
			new HelpProposalCacheModel();

		helpProposalCacheModel.uuid = getUuid();

		String uuid = helpProposalCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			helpProposalCacheModel.uuid = null;
		}

		helpProposalCacheModel.helpProposalId = getHelpProposalId();

		helpProposalCacheModel.groupId = getGroupId();

		helpProposalCacheModel.companyId = getCompanyId();

		helpProposalCacheModel.userId = getUserId();

		helpProposalCacheModel.userName = getUserName();

		String userName = helpProposalCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			helpProposalCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			helpProposalCacheModel.createDate = createDate.getTime();
		}
		else {
			helpProposalCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			helpProposalCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			helpProposalCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		helpProposalCacheModel.status = getStatus();

		helpProposalCacheModel.statusByUserId = getStatusByUserId();

		helpProposalCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = helpProposalCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			helpProposalCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			helpProposalCacheModel.statusDate = statusDate.getTime();
		}
		else {
			helpProposalCacheModel.statusDate = Long.MIN_VALUE;
		}

		helpProposalCacheModel.title = getTitle();

		String title = helpProposalCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			helpProposalCacheModel.title = null;
		}

		helpProposalCacheModel.description = getDescription();

		String description = helpProposalCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			helpProposalCacheModel.description = null;
		}

		helpProposalCacheModel.inTheNameOf = getInTheNameOf();

		String inTheNameOf = helpProposalCacheModel.inTheNameOf;

		if ((inTheNameOf != null) && (inTheNameOf.length() == 0)) {
			helpProposalCacheModel.inTheNameOf = null;
		}

		helpProposalCacheModel.address = getAddress();

		String address = helpProposalCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			helpProposalCacheModel.address = null;
		}

		helpProposalCacheModel.city = getCity();

		String city = helpProposalCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			helpProposalCacheModel.city = null;
		}

		helpProposalCacheModel.postalCode = getPostalCode();

		Date modifiedByUserDate = getModifiedByUserDate();

		if (modifiedByUserDate != null) {
			helpProposalCacheModel.modifiedByUserDate =
				modifiedByUserDate.getTime();
		}
		else {
			helpProposalCacheModel.modifiedByUserDate = Long.MIN_VALUE;
		}

		helpProposalCacheModel.spokenLanguages = getSpokenLanguages();

		String spokenLanguages = helpProposalCacheModel.spokenLanguages;

		if ((spokenLanguages != null) && (spokenLanguages.length() == 0)) {
			helpProposalCacheModel.spokenLanguages = null;
		}

		helpProposalCacheModel.imageId = getImageId();

		helpProposalCacheModel.publikId = getPublikId();

		String publikId = helpProposalCacheModel.publikId;

		if ((publikId != null) && (publikId.length() == 0)) {
			helpProposalCacheModel.publikId = null;
		}

		Date publicationDate = getPublicationDate();

		if (publicationDate != null) {
			helpProposalCacheModel.publicationDate = publicationDate.getTime();
		}
		else {
			helpProposalCacheModel.publicationDate = Long.MIN_VALUE;
		}

		return helpProposalCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<HelpProposal, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<HelpProposal, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HelpProposal, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((HelpProposal)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<HelpProposal, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<HelpProposal, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HelpProposal, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((HelpProposal)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, HelpProposal>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _helpProposalId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _title;
	private String _description;
	private String _inTheNameOf;
	private String _address;
	private String _city;
	private long _postalCode;
	private Date _modifiedByUserDate;
	private String _spokenLanguages;
	private long _imageId;
	private String _publikId;
	private String _originalPublikId;
	private Date _publicationDate;
	private long _columnBitmask;
	private HelpProposal _escapedModel;

}