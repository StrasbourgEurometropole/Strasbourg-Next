/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.help.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.help.model.HelpRequest;
import eu.strasbourg.service.help.model.HelpRequestModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the HelpRequest service. Represents a row in the &quot;help_HelpRequest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>HelpRequestModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HelpRequestImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HelpRequestImpl
 * @generated
 */
@ProviderType
public class HelpRequestModelImpl
	extends BaseModelImpl<HelpRequest> implements HelpRequestModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a help request model instance should use the <code>HelpRequest</code> interface instead.
	 */
	public static final String TABLE_NAME = "help_HelpRequest";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"helpRequestId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"publikId", Types.VARCHAR}, {"helpProposalId", Types.BIGINT},
		{"phoneNumber", Types.VARCHAR}, {"message", Types.CLOB},
		{"studentCardImageId", Types.BIGINT},
		{"agreementSigned1", Types.BOOLEAN},
		{"agreementSigned2", Types.BOOLEAN},
		{"agreementSigned3", Types.BOOLEAN}, {"comment_", Types.CLOB}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("helpRequestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("publikId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("helpProposalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("phoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("message", Types.CLOB);
		TABLE_COLUMNS_MAP.put("studentCardImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("agreementSigned1", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("agreementSigned2", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("agreementSigned3", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("comment_", Types.CLOB);
	}

	public static final String TABLE_SQL_CREATE =
		"create table help_HelpRequest (uuid_ VARCHAR(75) null,helpRequestId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,publikId VARCHAR(75) null,helpProposalId LONG,phoneNumber VARCHAR(75) null,message TEXT null,studentCardImageId LONG,agreementSigned1 BOOLEAN,agreementSigned2 BOOLEAN,agreementSigned3 BOOLEAN,comment_ TEXT null)";

	public static final String TABLE_SQL_DROP = "drop table help_HelpRequest";

	public static final String ORDER_BY_JPQL =
		" ORDER BY helpRequest.helpRequestId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY help_HelpRequest.helpRequestId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long HELPPROPOSALID_COLUMN_BITMASK = 4L;

	public static final long PUBLIKID_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long HELPREQUESTID_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public HelpRequestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _helpRequestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHelpRequestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _helpRequestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return HelpRequest.class;
	}

	@Override
	public String getModelClassName() {
		return HelpRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<HelpRequest, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<HelpRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HelpRequest, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((HelpRequest)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<HelpRequest, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<HelpRequest, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(HelpRequest)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<HelpRequest, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<HelpRequest, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, HelpRequest>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			HelpRequest.class.getClassLoader(), HelpRequest.class,
			ModelWrapper.class);

		try {
			Constructor<HelpRequest> constructor =
				(Constructor<HelpRequest>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<HelpRequest, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<HelpRequest, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<HelpRequest, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<HelpRequest, Object>>();
		Map<String, BiConsumer<HelpRequest, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<HelpRequest, ?>>();

		attributeGetterFunctions.put("uuid", HelpRequest::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<HelpRequest, String>)HelpRequest::setUuid);
		attributeGetterFunctions.put(
			"helpRequestId", HelpRequest::getHelpRequestId);
		attributeSetterBiConsumers.put(
			"helpRequestId",
			(BiConsumer<HelpRequest, Long>)HelpRequest::setHelpRequestId);
		attributeGetterFunctions.put("groupId", HelpRequest::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<HelpRequest, Long>)HelpRequest::setGroupId);
		attributeGetterFunctions.put("companyId", HelpRequest::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<HelpRequest, Long>)HelpRequest::setCompanyId);
		attributeGetterFunctions.put("userId", HelpRequest::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<HelpRequest, Long>)HelpRequest::setUserId);
		attributeGetterFunctions.put("userName", HelpRequest::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<HelpRequest, String>)HelpRequest::setUserName);
		attributeGetterFunctions.put("createDate", HelpRequest::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<HelpRequest, Date>)HelpRequest::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", HelpRequest::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<HelpRequest, Date>)HelpRequest::setModifiedDate);
		attributeGetterFunctions.put("status", HelpRequest::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<HelpRequest, Integer>)HelpRequest::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", HelpRequest::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<HelpRequest, Long>)HelpRequest::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", HelpRequest::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<HelpRequest, String>)HelpRequest::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", HelpRequest::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<HelpRequest, Date>)HelpRequest::setStatusDate);
		attributeGetterFunctions.put("publikId", HelpRequest::getPublikId);
		attributeSetterBiConsumers.put(
			"publikId",
			(BiConsumer<HelpRequest, String>)HelpRequest::setPublikId);
		attributeGetterFunctions.put(
			"helpProposalId", HelpRequest::getHelpProposalId);
		attributeSetterBiConsumers.put(
			"helpProposalId",
			(BiConsumer<HelpRequest, Long>)HelpRequest::setHelpProposalId);
		attributeGetterFunctions.put(
			"phoneNumber", HelpRequest::getPhoneNumber);
		attributeSetterBiConsumers.put(
			"phoneNumber",
			(BiConsumer<HelpRequest, String>)HelpRequest::setPhoneNumber);
		attributeGetterFunctions.put("message", HelpRequest::getMessage);
		attributeSetterBiConsumers.put(
			"message",
			(BiConsumer<HelpRequest, String>)HelpRequest::setMessage);
		attributeGetterFunctions.put(
			"studentCardImageId", HelpRequest::getStudentCardImageId);
		attributeSetterBiConsumers.put(
			"studentCardImageId",
			(BiConsumer<HelpRequest, Long>)HelpRequest::setStudentCardImageId);
		attributeGetterFunctions.put(
			"agreementSigned1", HelpRequest::getAgreementSigned1);
		attributeSetterBiConsumers.put(
			"agreementSigned1",
			(BiConsumer<HelpRequest, Boolean>)HelpRequest::setAgreementSigned1);
		attributeGetterFunctions.put(
			"agreementSigned2", HelpRequest::getAgreementSigned2);
		attributeSetterBiConsumers.put(
			"agreementSigned2",
			(BiConsumer<HelpRequest, Boolean>)HelpRequest::setAgreementSigned2);
		attributeGetterFunctions.put(
			"agreementSigned3", HelpRequest::getAgreementSigned3);
		attributeSetterBiConsumers.put(
			"agreementSigned3",
			(BiConsumer<HelpRequest, Boolean>)HelpRequest::setAgreementSigned3);
		attributeGetterFunctions.put("comment", HelpRequest::getComment);
		attributeSetterBiConsumers.put(
			"comment",
			(BiConsumer<HelpRequest, String>)HelpRequest::setComment);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getHelpRequestId() {
		return _helpRequestId;
	}

	@Override
	public void setHelpRequestId(long helpRequestId) {
		_helpRequestId = helpRequestId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public String getPublikId() {
		if (_publikId == null) {
			return "";
		}
		else {
			return _publikId;
		}
	}

	@Override
	public void setPublikId(String publikId) {
		_columnBitmask |= PUBLIKID_COLUMN_BITMASK;

		if (_originalPublikId == null) {
			_originalPublikId = _publikId;
		}

		_publikId = publikId;
	}

	public String getOriginalPublikId() {
		return GetterUtil.getString(_originalPublikId);
	}

	@Override
	public long getHelpProposalId() {
		return _helpProposalId;
	}

	@Override
	public void setHelpProposalId(long helpProposalId) {
		_columnBitmask |= HELPPROPOSALID_COLUMN_BITMASK;

		if (!_setOriginalHelpProposalId) {
			_setOriginalHelpProposalId = true;

			_originalHelpProposalId = _helpProposalId;
		}

		_helpProposalId = helpProposalId;
	}

	public long getOriginalHelpProposalId() {
		return _originalHelpProposalId;
	}

	@Override
	public String getPhoneNumber() {
		if (_phoneNumber == null) {
			return "";
		}
		else {
			return _phoneNumber;
		}
	}

	@Override
	public void setPhoneNumber(String phoneNumber) {
		_phoneNumber = phoneNumber;
	}

	@Override
	public String getMessage() {
		if (_message == null) {
			return "";
		}
		else {
			return _message;
		}
	}

	@Override
	public void setMessage(String message) {
		_message = message;
	}

	@Override
	public long getStudentCardImageId() {
		return _studentCardImageId;
	}

	@Override
	public void setStudentCardImageId(long studentCardImageId) {
		_studentCardImageId = studentCardImageId;
	}

	@Override
	public boolean getAgreementSigned1() {
		return _agreementSigned1;
	}

	@Override
	public boolean isAgreementSigned1() {
		return _agreementSigned1;
	}

	@Override
	public void setAgreementSigned1(boolean agreementSigned1) {
		_agreementSigned1 = agreementSigned1;
	}

	@Override
	public boolean getAgreementSigned2() {
		return _agreementSigned2;
	}

	@Override
	public boolean isAgreementSigned2() {
		return _agreementSigned2;
	}

	@Override
	public void setAgreementSigned2(boolean agreementSigned2) {
		_agreementSigned2 = agreementSigned2;
	}

	@Override
	public boolean getAgreementSigned3() {
		return _agreementSigned3;
	}

	@Override
	public boolean isAgreementSigned3() {
		return _agreementSigned3;
	}

	@Override
	public void setAgreementSigned3(boolean agreementSigned3) {
		_agreementSigned3 = agreementSigned3;
	}

	@Override
	public String getComment() {
		if (_comment == null) {
			return "";
		}
		else {
			return _comment;
		}
	}

	@Override
	public String getComment(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getComment(languageId);
	}

	@Override
	public String getComment(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getComment(languageId, useDefault);
	}

	@Override
	public String getComment(String languageId) {
		return LocalizationUtil.getLocalization(getComment(), languageId);
	}

	@Override
	public String getComment(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getComment(), languageId, useDefault);
	}

	@Override
	public String getCommentCurrentLanguageId() {
		return _commentCurrentLanguageId;
	}

	@JSON
	@Override
	public String getCommentCurrentValue() {
		Locale locale = getLocale(_commentCurrentLanguageId);

		return getComment(locale);
	}

	@Override
	public Map<Locale, String> getCommentMap() {
		return LocalizationUtil.getLocalizationMap(getComment());
	}

	@Override
	public void setComment(String comment) {
		_comment = comment;
	}

	@Override
	public void setComment(String comment, Locale locale) {
		setComment(comment, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setComment(
		String comment, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(comment)) {
			setComment(
				LocalizationUtil.updateLocalization(
					getComment(), "Comment", comment, languageId,
					defaultLanguageId));
		}
		else {
			setComment(
				LocalizationUtil.removeLocalization(
					getComment(), "Comment", languageId));
		}
	}

	@Override
	public void setCommentCurrentLanguageId(String languageId) {
		_commentCurrentLanguageId = languageId;
	}

	@Override
	public void setCommentMap(Map<Locale, String> commentMap) {
		setCommentMap(commentMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setCommentMap(
		Map<Locale, String> commentMap, Locale defaultLocale) {

		if (commentMap == null) {
			return;
		}

		setComment(
			LocalizationUtil.updateLocalization(
				commentMap, getComment(), "Comment",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(HelpRequest.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), HelpRequest.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> commentMap = getCommentMap();

		for (Map.Entry<Locale, String> entry : commentMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getComment();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			HelpRequest.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String comment = getComment(defaultLocale);

		if (Validator.isNull(comment)) {
			setComment(getComment(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setComment(getComment(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public HelpRequest toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HelpRequestImpl helpRequestImpl = new HelpRequestImpl();

		helpRequestImpl.setUuid(getUuid());
		helpRequestImpl.setHelpRequestId(getHelpRequestId());
		helpRequestImpl.setGroupId(getGroupId());
		helpRequestImpl.setCompanyId(getCompanyId());
		helpRequestImpl.setUserId(getUserId());
		helpRequestImpl.setUserName(getUserName());
		helpRequestImpl.setCreateDate(getCreateDate());
		helpRequestImpl.setModifiedDate(getModifiedDate());
		helpRequestImpl.setStatus(getStatus());
		helpRequestImpl.setStatusByUserId(getStatusByUserId());
		helpRequestImpl.setStatusByUserName(getStatusByUserName());
		helpRequestImpl.setStatusDate(getStatusDate());
		helpRequestImpl.setPublikId(getPublikId());
		helpRequestImpl.setHelpProposalId(getHelpProposalId());
		helpRequestImpl.setPhoneNumber(getPhoneNumber());
		helpRequestImpl.setMessage(getMessage());
		helpRequestImpl.setStudentCardImageId(getStudentCardImageId());
		helpRequestImpl.setAgreementSigned1(isAgreementSigned1());
		helpRequestImpl.setAgreementSigned2(isAgreementSigned2());
		helpRequestImpl.setAgreementSigned3(isAgreementSigned3());
		helpRequestImpl.setComment(getComment());

		helpRequestImpl.resetOriginalValues();

		return helpRequestImpl;
	}

	@Override
	public int compareTo(HelpRequest helpRequest) {
		long primaryKey = helpRequest.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof HelpRequest)) {
			return false;
		}

		HelpRequest helpRequest = (HelpRequest)obj;

		long primaryKey = helpRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		HelpRequestModelImpl helpRequestModelImpl = this;

		helpRequestModelImpl._originalUuid = helpRequestModelImpl._uuid;

		helpRequestModelImpl._originalGroupId = helpRequestModelImpl._groupId;

		helpRequestModelImpl._setOriginalGroupId = false;

		helpRequestModelImpl._originalCompanyId =
			helpRequestModelImpl._companyId;

		helpRequestModelImpl._setOriginalCompanyId = false;

		helpRequestModelImpl._setModifiedDate = false;

		helpRequestModelImpl._originalPublikId = helpRequestModelImpl._publikId;

		helpRequestModelImpl._originalHelpProposalId =
			helpRequestModelImpl._helpProposalId;

		helpRequestModelImpl._setOriginalHelpProposalId = false;

		helpRequestModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<HelpRequest> toCacheModel() {
		HelpRequestCacheModel helpRequestCacheModel =
			new HelpRequestCacheModel();

		helpRequestCacheModel.uuid = getUuid();

		String uuid = helpRequestCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			helpRequestCacheModel.uuid = null;
		}

		helpRequestCacheModel.helpRequestId = getHelpRequestId();

		helpRequestCacheModel.groupId = getGroupId();

		helpRequestCacheModel.companyId = getCompanyId();

		helpRequestCacheModel.userId = getUserId();

		helpRequestCacheModel.userName = getUserName();

		String userName = helpRequestCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			helpRequestCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			helpRequestCacheModel.createDate = createDate.getTime();
		}
		else {
			helpRequestCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			helpRequestCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			helpRequestCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		helpRequestCacheModel.status = getStatus();

		helpRequestCacheModel.statusByUserId = getStatusByUserId();

		helpRequestCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = helpRequestCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			helpRequestCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			helpRequestCacheModel.statusDate = statusDate.getTime();
		}
		else {
			helpRequestCacheModel.statusDate = Long.MIN_VALUE;
		}

		helpRequestCacheModel.publikId = getPublikId();

		String publikId = helpRequestCacheModel.publikId;

		if ((publikId != null) && (publikId.length() == 0)) {
			helpRequestCacheModel.publikId = null;
		}

		helpRequestCacheModel.helpProposalId = getHelpProposalId();

		helpRequestCacheModel.phoneNumber = getPhoneNumber();

		String phoneNumber = helpRequestCacheModel.phoneNumber;

		if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
			helpRequestCacheModel.phoneNumber = null;
		}

		helpRequestCacheModel.message = getMessage();

		String message = helpRequestCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			helpRequestCacheModel.message = null;
		}

		helpRequestCacheModel.studentCardImageId = getStudentCardImageId();

		helpRequestCacheModel.agreementSigned1 = isAgreementSigned1();

		helpRequestCacheModel.agreementSigned2 = isAgreementSigned2();

		helpRequestCacheModel.agreementSigned3 = isAgreementSigned3();

		helpRequestCacheModel.comment = getComment();

		String comment = helpRequestCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			helpRequestCacheModel.comment = null;
		}

		return helpRequestCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<HelpRequest, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<HelpRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HelpRequest, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((HelpRequest)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<HelpRequest, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<HelpRequest, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<HelpRequest, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((HelpRequest)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, HelpRequest>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _helpRequestId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _publikId;
	private String _originalPublikId;
	private long _helpProposalId;
	private long _originalHelpProposalId;
	private boolean _setOriginalHelpProposalId;
	private String _phoneNumber;
	private String _message;
	private long _studentCardImageId;
	private boolean _agreementSigned1;
	private boolean _agreementSigned2;
	private boolean _agreementSigned3;
	private String _comment;
	private String _commentCurrentLanguageId;
	private long _columnBitmask;
	private HelpRequest _escapedModel;

}