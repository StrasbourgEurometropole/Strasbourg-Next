/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.edition.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;

import eu.strasbourg.service.edition.model.Edition;
import eu.strasbourg.service.edition.model.EditionModel;
import eu.strasbourg.service.edition.model.EditionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the Edition service. Represents a row in the &quot;edition_Edition&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EditionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EditionImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see EditionImpl
 * @see Edition
 * @see EditionModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EditionModelImpl extends BaseModelImpl<Edition>
	implements EditionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a edition model instance should use the {@link Edition} interface instead.
	 */
	public static final String TABLE_NAME = "edition_Edition";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "editionId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "title", Types.VARCHAR },
			{ "subtitle", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "URL", Types.VARCHAR },
			{ "author", Types.VARCHAR },
			{ "editor", Types.VARCHAR },
			{ "distribution", Types.VARCHAR },
			{ "ISBN", Types.VARCHAR },
			{ "price", Types.VARCHAR },
			{ "availableForExchange", Types.BOOLEAN },
			{ "inStock", Types.BOOLEAN },
			{ "diffusionDate", Types.VARCHAR },
			{ "pageNumber", Types.VARCHAR },
			{ "pictureNumber", Types.VARCHAR },
			{ "publicationDate", Types.TIMESTAMP },
			{ "status", Types.BOOLEAN },
			{ "imageId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("editionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subtitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("URL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("author", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("editor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("distribution", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ISBN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("price", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("availableForExchange", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("inStock", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("diffusionDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pageNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pictureNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publicationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table edition_Edition (uuid_ VARCHAR(75) null,editionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,title STRING null,subtitle STRING null,description TEXT null,URL STRING null,author STRING null,editor STRING null,distribution VARCHAR(75) null,ISBN VARCHAR(75) null,price VARCHAR(75) null,availableForExchange BOOLEAN,inStock BOOLEAN,diffusionDate VARCHAR(75) null,pageNumber VARCHAR(75) null,pictureNumber VARCHAR(75) null,publicationDate DATE null,status BOOLEAN,imageId LONG,fileId STRING null)";
	public static final String TABLE_SQL_DROP = "drop table edition_Edition";
	public static final String ORDER_BY_JPQL = " ORDER BY edition.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY edition_Edition.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.edition.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.edition.model.Edition"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.edition.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.edition.model.Edition"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.edition.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.edition.model.Edition"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long TITLE_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Edition toModel(EditionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Edition model = new EditionImpl();

		model.setUuid(soapModel.getUuid());
		model.setEditionId(soapModel.getEditionId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTitle(soapModel.getTitle());
		model.setSubtitle(soapModel.getSubtitle());
		model.setDescription(soapModel.getDescription());
		model.setURL(soapModel.getURL());
		model.setAuthor(soapModel.getAuthor());
		model.setEditor(soapModel.getEditor());
		model.setDistribution(soapModel.getDistribution());
		model.setISBN(soapModel.getISBN());
		model.setPrice(soapModel.getPrice());
		model.setAvailableForExchange(soapModel.getAvailableForExchange());
		model.setInStock(soapModel.getInStock());
		model.setDiffusionDate(soapModel.getDiffusionDate());
		model.setPageNumber(soapModel.getPageNumber());
		model.setPictureNumber(soapModel.getPictureNumber());
		model.setPublicationDate(soapModel.getPublicationDate());
		model.setStatus(soapModel.getStatus());
		model.setImageId(soapModel.getImageId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Edition> toModels(EditionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Edition> models = new ArrayList<Edition>(soapModels.length);

		for (EditionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_EDITION_EDITIONTOEDITIONGALLERY_NAME =
		"edition_EditionToEditionGallery";
	public static final Object[][] MAPPING_TABLE_EDITION_EDITIONTOEDITIONGALLERY_COLUMNS =
		{
			{ "companyId", Types.BIGINT },
			{ "editionId", Types.BIGINT },
			{ "galleryId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_EDITION_EDITIONTOEDITIONGALLERY_SQL_CREATE =
		"create table edition_EditionToEditionGallery (companyId LONG not null,editionId LONG not null,galleryId LONG not null,primary key (editionId, galleryId))";
	public static final boolean FINDER_CACHE_ENABLED_EDITION_EDITIONTOEDITIONGALLERY =
		GetterUtil.getBoolean(eu.strasbourg.service.edition.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.edition_EditionToEditionGallery"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.edition.service.util.PropsUtil.get(
				"lock.expiration.time.eu.strasbourg.service.edition.model.Edition"));

	public EditionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _editionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEditionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _editionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Edition.class;
	}

	@Override
	public String getModelClassName() {
		return Edition.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("editionId", getEditionId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("title", getTitle());
		attributes.put("subtitle", getSubtitle());
		attributes.put("description", getDescription());
		attributes.put("URL", getURL());
		attributes.put("author", getAuthor());
		attributes.put("editor", getEditor());
		attributes.put("distribution", getDistribution());
		attributes.put("ISBN", getISBN());
		attributes.put("price", getPrice());
		attributes.put("availableForExchange", getAvailableForExchange());
		attributes.put("inStock", getInStock());
		attributes.put("diffusionDate", getDiffusionDate());
		attributes.put("pageNumber", getPageNumber());
		attributes.put("pictureNumber", getPictureNumber());
		attributes.put("publicationDate", getPublicationDate());
		attributes.put("status", getStatus());
		attributes.put("imageId", getImageId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long editionId = (Long)attributes.get("editionId");

		if (editionId != null) {
			setEditionId(editionId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String subtitle = (String)attributes.get("subtitle");

		if (subtitle != null) {
			setSubtitle(subtitle);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String URL = (String)attributes.get("URL");

		if (URL != null) {
			setURL(URL);
		}

		String author = (String)attributes.get("author");

		if (author != null) {
			setAuthor(author);
		}

		String editor = (String)attributes.get("editor");

		if (editor != null) {
			setEditor(editor);
		}

		String distribution = (String)attributes.get("distribution");

		if (distribution != null) {
			setDistribution(distribution);
		}

		String ISBN = (String)attributes.get("ISBN");

		if (ISBN != null) {
			setISBN(ISBN);
		}

		String price = (String)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		Boolean availableForExchange = (Boolean)attributes.get(
				"availableForExchange");

		if (availableForExchange != null) {
			setAvailableForExchange(availableForExchange);
		}

		Boolean inStock = (Boolean)attributes.get("inStock");

		if (inStock != null) {
			setInStock(inStock);
		}

		String diffusionDate = (String)attributes.get("diffusionDate");

		if (diffusionDate != null) {
			setDiffusionDate(diffusionDate);
		}

		String pageNumber = (String)attributes.get("pageNumber");

		if (pageNumber != null) {
			setPageNumber(pageNumber);
		}

		String pictureNumber = (String)attributes.get("pictureNumber");

		if (pictureNumber != null) {
			setPictureNumber(pictureNumber);
		}

		Date publicationDate = (Date)attributes.get("publicationDate");

		if (publicationDate != null) {
			setPublicationDate(publicationDate);
		}

		Boolean status = (Boolean)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long imageId = (Long)attributes.get("imageId");

		if (imageId != null) {
			setImageId(imageId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getEditionId() {
		return _editionId;
	}

	@Override
	public void setEditionId(long editionId) {
		_editionId = editionId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitle(), languageId,
			useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
					title, languageId, defaultLanguageId));
		}
		else {
			setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
					languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
		if (titleMap == null) {
			return;
		}

		setTitle(LocalizationUtil.updateLocalization(titleMap, getTitle(),
				"Title", LocaleUtil.toLanguageId(defaultLocale)));
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@JSON
	@Override
	public String getSubtitle() {
		if (_subtitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _subtitle;
		}
	}

	@Override
	public String getSubtitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSubtitle(languageId);
	}

	@Override
	public String getSubtitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSubtitle(languageId, useDefault);
	}

	@Override
	public String getSubtitle(String languageId) {
		return LocalizationUtil.getLocalization(getSubtitle(), languageId);
	}

	@Override
	public String getSubtitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getSubtitle(), languageId,
			useDefault);
	}

	@Override
	public String getSubtitleCurrentLanguageId() {
		return _subtitleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSubtitleCurrentValue() {
		Locale locale = getLocale(_subtitleCurrentLanguageId);

		return getSubtitle(locale);
	}

	@Override
	public Map<Locale, String> getSubtitleMap() {
		return LocalizationUtil.getLocalizationMap(getSubtitle());
	}

	@Override
	public void setSubtitle(String subtitle) {
		_subtitle = subtitle;
	}

	@Override
	public void setSubtitle(String subtitle, Locale locale) {
		setSubtitle(subtitle, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSubtitle(String subtitle, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(subtitle)) {
			setSubtitle(LocalizationUtil.updateLocalization(getSubtitle(),
					"Subtitle", subtitle, languageId, defaultLanguageId));
		}
		else {
			setSubtitle(LocalizationUtil.removeLocalization(getSubtitle(),
					"Subtitle", languageId));
		}
	}

	@Override
	public void setSubtitleCurrentLanguageId(String languageId) {
		_subtitleCurrentLanguageId = languageId;
	}

	@Override
	public void setSubtitleMap(Map<Locale, String> subtitleMap) {
		setSubtitleMap(subtitleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSubtitleMap(Map<Locale, String> subtitleMap,
		Locale defaultLocale) {
		if (subtitleMap == null) {
			return;
		}

		setSubtitle(LocalizationUtil.updateLocalization(subtitleMap,
				getSubtitle(), "Subtitle",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap,
				getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getURL() {
		if (_URL == null) {
			return StringPool.BLANK;
		}
		else {
			return _URL;
		}
	}

	@Override
	public String getURL(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getURL(languageId);
	}

	@Override
	public String getURL(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getURL(languageId, useDefault);
	}

	@Override
	public String getURL(String languageId) {
		return LocalizationUtil.getLocalization(getURL(), languageId);
	}

	@Override
	public String getURL(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getURL(), languageId, useDefault);
	}

	@Override
	public String getURLCurrentLanguageId() {
		return _URLCurrentLanguageId;
	}

	@JSON
	@Override
	public String getURLCurrentValue() {
		Locale locale = getLocale(_URLCurrentLanguageId);

		return getURL(locale);
	}

	@Override
	public Map<Locale, String> getURLMap() {
		return LocalizationUtil.getLocalizationMap(getURL());
	}

	@Override
	public void setURL(String URL) {
		_URL = URL;
	}

	@Override
	public void setURL(String URL, Locale locale) {
		setURL(URL, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setURL(String URL, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(URL)) {
			setURL(LocalizationUtil.updateLocalization(getURL(), "URL", URL,
					languageId, defaultLanguageId));
		}
		else {
			setURL(LocalizationUtil.removeLocalization(getURL(), "URL",
					languageId));
		}
	}

	@Override
	public void setURLCurrentLanguageId(String languageId) {
		_URLCurrentLanguageId = languageId;
	}

	@Override
	public void setURLMap(Map<Locale, String> URLMap) {
		setURLMap(URLMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setURLMap(Map<Locale, String> URLMap, Locale defaultLocale) {
		if (URLMap == null) {
			return;
		}

		setURL(LocalizationUtil.updateLocalization(URLMap, getURL(), "URL",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getAuthor() {
		if (_author == null) {
			return StringPool.BLANK;
		}
		else {
			return _author;
		}
	}

	@Override
	public String getAuthor(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAuthor(languageId);
	}

	@Override
	public String getAuthor(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAuthor(languageId, useDefault);
	}

	@Override
	public String getAuthor(String languageId) {
		return LocalizationUtil.getLocalization(getAuthor(), languageId);
	}

	@Override
	public String getAuthor(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getAuthor(), languageId,
			useDefault);
	}

	@Override
	public String getAuthorCurrentLanguageId() {
		return _authorCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAuthorCurrentValue() {
		Locale locale = getLocale(_authorCurrentLanguageId);

		return getAuthor(locale);
	}

	@Override
	public Map<Locale, String> getAuthorMap() {
		return LocalizationUtil.getLocalizationMap(getAuthor());
	}

	@Override
	public void setAuthor(String author) {
		_author = author;
	}

	@Override
	public void setAuthor(String author, Locale locale) {
		setAuthor(author, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAuthor(String author, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(author)) {
			setAuthor(LocalizationUtil.updateLocalization(getAuthor(),
					"Author", author, languageId, defaultLanguageId));
		}
		else {
			setAuthor(LocalizationUtil.removeLocalization(getAuthor(),
					"Author", languageId));
		}
	}

	@Override
	public void setAuthorCurrentLanguageId(String languageId) {
		_authorCurrentLanguageId = languageId;
	}

	@Override
	public void setAuthorMap(Map<Locale, String> authorMap) {
		setAuthorMap(authorMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAuthorMap(Map<Locale, String> authorMap, Locale defaultLocale) {
		if (authorMap == null) {
			return;
		}

		setAuthor(LocalizationUtil.updateLocalization(authorMap, getAuthor(),
				"Author", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getEditor() {
		if (_editor == null) {
			return StringPool.BLANK;
		}
		else {
			return _editor;
		}
	}

	@Override
	public String getEditor(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getEditor(languageId);
	}

	@Override
	public String getEditor(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getEditor(languageId, useDefault);
	}

	@Override
	public String getEditor(String languageId) {
		return LocalizationUtil.getLocalization(getEditor(), languageId);
	}

	@Override
	public String getEditor(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getEditor(), languageId,
			useDefault);
	}

	@Override
	public String getEditorCurrentLanguageId() {
		return _editorCurrentLanguageId;
	}

	@JSON
	@Override
	public String getEditorCurrentValue() {
		Locale locale = getLocale(_editorCurrentLanguageId);

		return getEditor(locale);
	}

	@Override
	public Map<Locale, String> getEditorMap() {
		return LocalizationUtil.getLocalizationMap(getEditor());
	}

	@Override
	public void setEditor(String editor) {
		_editor = editor;
	}

	@Override
	public void setEditor(String editor, Locale locale) {
		setEditor(editor, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setEditor(String editor, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(editor)) {
			setEditor(LocalizationUtil.updateLocalization(getEditor(),
					"Editor", editor, languageId, defaultLanguageId));
		}
		else {
			setEditor(LocalizationUtil.removeLocalization(getEditor(),
					"Editor", languageId));
		}
	}

	@Override
	public void setEditorCurrentLanguageId(String languageId) {
		_editorCurrentLanguageId = languageId;
	}

	@Override
	public void setEditorMap(Map<Locale, String> editorMap) {
		setEditorMap(editorMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setEditorMap(Map<Locale, String> editorMap, Locale defaultLocale) {
		if (editorMap == null) {
			return;
		}

		setEditor(LocalizationUtil.updateLocalization(editorMap, getEditor(),
				"Editor", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDistribution() {
		if (_distribution == null) {
			return StringPool.BLANK;
		}
		else {
			return _distribution;
		}
	}

	@Override
	public void setDistribution(String distribution) {
		_distribution = distribution;
	}

	@JSON
	@Override
	public String getISBN() {
		if (_ISBN == null) {
			return StringPool.BLANK;
		}
		else {
			return _ISBN;
		}
	}

	@Override
	public void setISBN(String ISBN) {
		_ISBN = ISBN;
	}

	@JSON
	@Override
	public String getPrice() {
		if (_price == null) {
			return StringPool.BLANK;
		}
		else {
			return _price;
		}
	}

	@Override
	public void setPrice(String price) {
		_price = price;
	}

	@JSON
	@Override
	public boolean getAvailableForExchange() {
		return _availableForExchange;
	}

	@JSON
	@Override
	public boolean isAvailableForExchange() {
		return _availableForExchange;
	}

	@Override
	public void setAvailableForExchange(boolean availableForExchange) {
		_availableForExchange = availableForExchange;
	}

	@JSON
	@Override
	public boolean getInStock() {
		return _inStock;
	}

	@JSON
	@Override
	public boolean isInStock() {
		return _inStock;
	}

	@Override
	public void setInStock(boolean inStock) {
		_inStock = inStock;
	}

	@JSON
	@Override
	public String getDiffusionDate() {
		if (_diffusionDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _diffusionDate;
		}
	}

	@Override
	public void setDiffusionDate(String diffusionDate) {
		_diffusionDate = diffusionDate;
	}

	@JSON
	@Override
	public String getPageNumber() {
		if (_pageNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _pageNumber;
		}
	}

	@Override
	public void setPageNumber(String pageNumber) {
		_pageNumber = pageNumber;
	}

	@JSON
	@Override
	public String getPictureNumber() {
		if (_pictureNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _pictureNumber;
		}
	}

	@Override
	public void setPictureNumber(String pictureNumber) {
		_pictureNumber = pictureNumber;
	}

	@JSON
	@Override
	public Date getPublicationDate() {
		return _publicationDate;
	}

	@Override
	public void setPublicationDate(Date publicationDate) {
		_publicationDate = publicationDate;
	}

	@JSON
	@Override
	public boolean getStatus() {
		return _status;
	}

	@JSON
	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		_status = status;
	}

	@JSON
	@Override
	public Long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(Long imageId) {
		_imageId = imageId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Edition.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Edition.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> subtitleMap = getSubtitleMap();

		for (Map.Entry<Locale, String> entry : subtitleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> URLMap = getURLMap();

		for (Map.Entry<Locale, String> entry : URLMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> authorMap = getAuthorMap();

		for (Map.Entry<Locale, String> entry : authorMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> editorMap = getEditorMap();

		for (Map.Entry<Locale, String> entry : editorMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(Edition.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String subtitle = getSubtitle(defaultLocale);

		if (Validator.isNull(subtitle)) {
			setSubtitle(getSubtitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSubtitle(getSubtitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(getDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String URL = getURL(defaultLocale);

		if (Validator.isNull(URL)) {
			setURL(getURL(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setURL(getURL(defaultLocale), defaultLocale, defaultLocale);
		}

		String author = getAuthor(defaultLocale);

		if (Validator.isNull(author)) {
			setAuthor(getAuthor(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setAuthor(getAuthor(defaultLocale), defaultLocale, defaultLocale);
		}

		String editor = getEditor(defaultLocale);

		if (Validator.isNull(editor)) {
			setEditor(getEditor(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setEditor(getEditor(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Edition toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Edition)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EditionImpl editionImpl = new EditionImpl();

		editionImpl.setUuid(getUuid());
		editionImpl.setEditionId(getEditionId());
		editionImpl.setGroupId(getGroupId());
		editionImpl.setCompanyId(getCompanyId());
		editionImpl.setUserId(getUserId());
		editionImpl.setUserName(getUserName());
		editionImpl.setCreateDate(getCreateDate());
		editionImpl.setModifiedDate(getModifiedDate());
		editionImpl.setTitle(getTitle());
		editionImpl.setSubtitle(getSubtitle());
		editionImpl.setDescription(getDescription());
		editionImpl.setURL(getURL());
		editionImpl.setAuthor(getAuthor());
		editionImpl.setEditor(getEditor());
		editionImpl.setDistribution(getDistribution());
		editionImpl.setISBN(getISBN());
		editionImpl.setPrice(getPrice());
		editionImpl.setAvailableForExchange(getAvailableForExchange());
		editionImpl.setInStock(getInStock());
		editionImpl.setDiffusionDate(getDiffusionDate());
		editionImpl.setPageNumber(getPageNumber());
		editionImpl.setPictureNumber(getPictureNumber());
		editionImpl.setPublicationDate(getPublicationDate());
		editionImpl.setStatus(getStatus());
		editionImpl.setImageId(getImageId());

		editionImpl.resetOriginalValues();

		return editionImpl;
	}

	@Override
	public int compareTo(Edition edition) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(), edition.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Edition)) {
			return false;
		}

		Edition edition = (Edition)obj;

		long primaryKey = edition.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EditionModelImpl editionModelImpl = this;

		editionModelImpl._originalUuid = editionModelImpl._uuid;

		editionModelImpl._originalGroupId = editionModelImpl._groupId;

		editionModelImpl._setOriginalGroupId = false;

		editionModelImpl._originalCompanyId = editionModelImpl._companyId;

		editionModelImpl._setOriginalCompanyId = false;

		editionModelImpl._setModifiedDate = false;

		editionModelImpl._originalTitle = editionModelImpl._title;

		editionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Edition> toCacheModel() {
		EditionCacheModel editionCacheModel = new EditionCacheModel();

		editionCacheModel.uuid = getUuid();

		String uuid = editionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			editionCacheModel.uuid = null;
		}

		editionCacheModel.editionId = getEditionId();

		editionCacheModel.groupId = getGroupId();

		editionCacheModel.companyId = getCompanyId();

		editionCacheModel.userId = getUserId();

		editionCacheModel.userName = getUserName();

		String userName = editionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			editionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			editionCacheModel.createDate = createDate.getTime();
		}
		else {
			editionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			editionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			editionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		editionCacheModel.title = getTitle();

		String title = editionCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			editionCacheModel.title = null;
		}

		editionCacheModel.subtitle = getSubtitle();

		String subtitle = editionCacheModel.subtitle;

		if ((subtitle != null) && (subtitle.length() == 0)) {
			editionCacheModel.subtitle = null;
		}

		editionCacheModel.description = getDescription();

		String description = editionCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			editionCacheModel.description = null;
		}

		editionCacheModel.URL = getURL();

		String URL = editionCacheModel.URL;

		if ((URL != null) && (URL.length() == 0)) {
			editionCacheModel.URL = null;
		}

		editionCacheModel.author = getAuthor();

		String author = editionCacheModel.author;

		if ((author != null) && (author.length() == 0)) {
			editionCacheModel.author = null;
		}

		editionCacheModel.editor = getEditor();

		String editor = editionCacheModel.editor;

		if ((editor != null) && (editor.length() == 0)) {
			editionCacheModel.editor = null;
		}

		editionCacheModel.distribution = getDistribution();

		String distribution = editionCacheModel.distribution;

		if ((distribution != null) && (distribution.length() == 0)) {
			editionCacheModel.distribution = null;
		}

		editionCacheModel.ISBN = getISBN();

		String ISBN = editionCacheModel.ISBN;

		if ((ISBN != null) && (ISBN.length() == 0)) {
			editionCacheModel.ISBN = null;
		}

		editionCacheModel.price = getPrice();

		String price = editionCacheModel.price;

		if ((price != null) && (price.length() == 0)) {
			editionCacheModel.price = null;
		}

		editionCacheModel.availableForExchange = getAvailableForExchange();

		editionCacheModel.inStock = getInStock();

		editionCacheModel.diffusionDate = getDiffusionDate();

		String diffusionDate = editionCacheModel.diffusionDate;

		if ((diffusionDate != null) && (diffusionDate.length() == 0)) {
			editionCacheModel.diffusionDate = null;
		}

		editionCacheModel.pageNumber = getPageNumber();

		String pageNumber = editionCacheModel.pageNumber;

		if ((pageNumber != null) && (pageNumber.length() == 0)) {
			editionCacheModel.pageNumber = null;
		}

		editionCacheModel.pictureNumber = getPictureNumber();

		String pictureNumber = editionCacheModel.pictureNumber;

		if ((pictureNumber != null) && (pictureNumber.length() == 0)) {
			editionCacheModel.pictureNumber = null;
		}

		Date publicationDate = getPublicationDate();

		if (publicationDate != null) {
			editionCacheModel.publicationDate = publicationDate.getTime();
		}
		else {
			editionCacheModel.publicationDate = Long.MIN_VALUE;
		}

		editionCacheModel.status = getStatus();

		editionCacheModel.imageId = getImageId();

		return editionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(51);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", editionId=");
		sb.append(getEditionId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", subtitle=");
		sb.append(getSubtitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", URL=");
		sb.append(getURL());
		sb.append(", author=");
		sb.append(getAuthor());
		sb.append(", editor=");
		sb.append(getEditor());
		sb.append(", distribution=");
		sb.append(getDistribution());
		sb.append(", ISBN=");
		sb.append(getISBN());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", availableForExchange=");
		sb.append(getAvailableForExchange());
		sb.append(", inStock=");
		sb.append(getInStock());
		sb.append(", diffusionDate=");
		sb.append(getDiffusionDate());
		sb.append(", pageNumber=");
		sb.append(getPageNumber());
		sb.append(", pictureNumber=");
		sb.append(getPictureNumber());
		sb.append(", publicationDate=");
		sb.append(getPublicationDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", imageId=");
		sb.append(getImageId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(79);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.edition.model.Edition");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>editionId</column-name><column-value><![CDATA[");
		sb.append(getEditionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subtitle</column-name><column-value><![CDATA[");
		sb.append(getSubtitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>URL</column-name><column-value><![CDATA[");
		sb.append(getURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>author</column-name><column-value><![CDATA[");
		sb.append(getAuthor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>editor</column-name><column-value><![CDATA[");
		sb.append(getEditor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>distribution</column-name><column-value><![CDATA[");
		sb.append(getDistribution());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ISBN</column-name><column-value><![CDATA[");
		sb.append(getISBN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>availableForExchange</column-name><column-value><![CDATA[");
		sb.append(getAvailableForExchange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inStock</column-name><column-value><![CDATA[");
		sb.append(getInStock());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>diffusionDate</column-name><column-value><![CDATA[");
		sb.append(getDiffusionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pageNumber</column-name><column-value><![CDATA[");
		sb.append(getPageNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pictureNumber</column-name><column-value><![CDATA[");
		sb.append(getPictureNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publicationDate</column-name><column-value><![CDATA[");
		sb.append(getPublicationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageId</column-name><column-value><![CDATA[");
		sb.append(getImageId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Edition.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Edition.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _editionId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _originalTitle;
	private String _subtitle;
	private String _subtitleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _URL;
	private String _URLCurrentLanguageId;
	private String _author;
	private String _authorCurrentLanguageId;
	private String _editor;
	private String _editorCurrentLanguageId;
	private String _distribution;
	private String _ISBN;
	private String _price;
	private boolean _availableForExchange;
	private boolean _inStock;
	private String _diffusionDate;
	private String _pageNumber;
	private String _pictureNumber;
	private Date _publicationDate;
	private boolean _status;
	private Long _imageId;
	private long _columnBitmask;
	private Edition _escapedModel;
}