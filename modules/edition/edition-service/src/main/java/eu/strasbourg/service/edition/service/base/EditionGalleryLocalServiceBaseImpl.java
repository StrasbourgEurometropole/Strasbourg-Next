/**
 * SPDX-FileCopyrightText: (c) 2023 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package eu.strasbourg.service.edition.service.base;

import com.liferay.asset.kernel.service.persistence.AssetEntryPersistence;
import com.liferay.asset.link.service.persistence.AssetLinkPersistence;
import com.liferay.asset.kernel.service.persistence.AssetTagPersistence;
import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandler;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerRegistryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.sql.dsl.query.DSLQuery;
import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Conjunction;
import com.liferay.portal.kernel.dao.orm.Criterion;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Disjunction;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.dao.orm.Property;
import com.liferay.portal.kernel.dao.orm.PropertyFactoryUtil;
import com.liferay.portal.kernel.dao.orm.RestrictionsFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.persistence.BasePersistence;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.spring.extender.service.ServiceReference;

import eu.strasbourg.service.edition.model.EditionGallery;
import eu.strasbourg.service.edition.service.EditionGalleryLocalService;
import eu.strasbourg.service.edition.service.EditionGalleryLocalServiceUtil;
import eu.strasbourg.service.edition.service.persistence.EditionFinder;
import eu.strasbourg.service.edition.service.persistence.EditionGalleryPersistence;
import eu.strasbourg.service.edition.service.persistence.EditionPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the edition gallery local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link eu.strasbourg.service.edition.service.impl.EditionGalleryLocalServiceImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see eu.strasbourg.service.edition.service.impl.EditionGalleryLocalServiceImpl
 * @generated
 */
public abstract class EditionGalleryLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements EditionGalleryLocalService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>EditionGalleryLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>EditionGalleryLocalServiceUtil</code>.
	 */

	/**
	 * Adds the edition gallery to the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect EditionGalleryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param editionGallery the edition gallery
	 * @return the edition gallery that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EditionGallery addEditionGallery(EditionGallery editionGallery) {
		editionGallery.setNew(true);

		return editionGalleryPersistence.update(editionGallery);
	}

	/**
	 * Creates a new edition gallery with the primary key. Does not add the edition gallery to the database.
	 *
	 * @param galleryId the primary key for the new edition gallery
	 * @return the new edition gallery
	 */
	@Override
	@Transactional(enabled = false)
	public EditionGallery createEditionGallery(long galleryId) {
		return editionGalleryPersistence.create(galleryId);
	}

	/**
	 * Deletes the edition gallery with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect EditionGalleryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param galleryId the primary key of the edition gallery
	 * @return the edition gallery that was removed
	 * @throws PortalException if a edition gallery with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EditionGallery deleteEditionGallery(long galleryId)
		throws PortalException {

		return editionGalleryPersistence.remove(galleryId);
	}

	/**
	 * Deletes the edition gallery from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect EditionGalleryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param editionGallery the edition gallery
	 * @return the edition gallery that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EditionGallery deleteEditionGallery(EditionGallery editionGallery) {
		return editionGalleryPersistence.remove(editionGallery);
	}

	@Override
	public <T> T dslQuery(DSLQuery dslQuery) {
		return editionGalleryPersistence.dslQuery(dslQuery);
	}

	@Override
	public int dslQueryCount(DSLQuery dslQuery) {
		Long count = dslQuery(dslQuery);

		return count.intValue();
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			EditionGallery.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return editionGalleryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>eu.strasbourg.service.edition.model.impl.EditionGalleryModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return editionGalleryPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>eu.strasbourg.service.edition.model.impl.EditionGalleryModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return editionGalleryPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return editionGalleryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return editionGalleryPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public EditionGallery fetchEditionGallery(long galleryId) {
		return editionGalleryPersistence.fetchByPrimaryKey(galleryId);
	}

	/**
	 * Returns the edition gallery matching the UUID and group.
	 *
	 * @param uuid the edition gallery's UUID
	 * @param groupId the primary key of the group
	 * @return the matching edition gallery, or <code>null</code> if a matching edition gallery could not be found
	 */
	@Override
	public EditionGallery fetchEditionGalleryByUuidAndGroupId(
		String uuid, long groupId) {

		return editionGalleryPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the edition gallery with the primary key.
	 *
	 * @param galleryId the primary key of the edition gallery
	 * @return the edition gallery
	 * @throws PortalException if a edition gallery with the primary key could not be found
	 */
	@Override
	public EditionGallery getEditionGallery(long galleryId)
		throws PortalException {

		return editionGalleryPersistence.findByPrimaryKey(galleryId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(editionGalleryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(EditionGallery.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("galleryId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			editionGalleryLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(EditionGallery.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("galleryId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(editionGalleryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(EditionGallery.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("galleryId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {

		final ExportActionableDynamicQuery exportActionableDynamicQuery =
			new ExportActionableDynamicQuery() {

				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary =
						portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(
						stagedModelType, modelAdditionCount);

					long modelDeletionCount =
						ExportImportHelperUtil.getModelDeletionCount(
							portletDataContext, stagedModelType);

					manifestSummary.addModelDeletionCount(
						stagedModelType, modelDeletionCount);

					return modelAdditionCount;
				}

			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(
			new ActionableDynamicQuery.AddCriteriaMethod() {

				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					Criterion modifiedDateCriterion =
						portletDataContext.getDateRangeCriteria("modifiedDate");

					if (modifiedDateCriterion != null) {
						Conjunction conjunction =
							RestrictionsFactoryUtil.conjunction();

						conjunction.add(modifiedDateCriterion);

						Disjunction disjunction =
							RestrictionsFactoryUtil.disjunction();

						disjunction.add(
							RestrictionsFactoryUtil.gtProperty(
								"modifiedDate", "lastPublishDate"));

						Property lastPublishDateProperty =
							PropertyFactoryUtil.forName("lastPublishDate");

						disjunction.add(lastPublishDateProperty.isNull());

						conjunction.add(disjunction);

						modifiedDateCriterion = conjunction;
					}

					Criterion statusDateCriterion =
						portletDataContext.getDateRangeCriteria("statusDate");

					if ((modifiedDateCriterion != null) &&
						(statusDateCriterion != null)) {

						Disjunction disjunction =
							RestrictionsFactoryUtil.disjunction();

						disjunction.add(modifiedDateCriterion);
						disjunction.add(statusDateCriterion);

						dynamicQuery.add(disjunction);
					}

					Property workflowStatusProperty =
						PropertyFactoryUtil.forName("status");

					if (portletDataContext.isInitialPublication()) {
						dynamicQuery.add(
							workflowStatusProperty.ne(
								WorkflowConstants.STATUS_IN_TRASH));
					}
					else {
						StagedModelDataHandler<?> stagedModelDataHandler =
							StagedModelDataHandlerRegistryUtil.
								getStagedModelDataHandler(
									EditionGallery.class.getName());

						dynamicQuery.add(
							workflowStatusProperty.in(
								stagedModelDataHandler.
									getExportableStatuses()));
					}
				}

			});

		exportActionableDynamicQuery.setCompanyId(
			portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setGroupId(
			portletDataContext.getScopeGroupId());

		exportActionableDynamicQuery.setPerformActionMethod(
			new ActionableDynamicQuery.PerformActionMethod<EditionGallery>() {

				@Override
				public void performAction(EditionGallery editionGallery)
					throws PortalException {

					StagedModelDataHandlerUtil.exportStagedModel(
						portletDataContext, editionGallery);
				}

			});
		exportActionableDynamicQuery.setStagedModelType(
			new StagedModelType(
				PortalUtil.getClassNameId(EditionGallery.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel createPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return editionGalleryPersistence.create(
			((Long)primaryKeyObj).longValue());
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		if (_log.isWarnEnabled()) {
			_log.warn(
				"Implement EditionGalleryLocalServiceImpl#deleteEditionGallery(EditionGallery) to avoid orphaned data");
		}

		return editionGalleryLocalService.deleteEditionGallery(
			(EditionGallery)persistedModel);
	}

	@Override
	public BasePersistence<EditionGallery> getBasePersistence() {
		return editionGalleryPersistence;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return editionGalleryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the edition galleries matching the UUID and company.
	 *
	 * @param uuid the UUID of the edition galleries
	 * @param companyId the primary key of the company
	 * @return the matching edition galleries, or an empty list if no matches were found
	 */
	@Override
	public List<EditionGallery> getEditionGalleriesByUuidAndCompanyId(
		String uuid, long companyId) {

		return editionGalleryPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of edition galleries matching the UUID and company.
	 *
	 * @param uuid the UUID of the edition galleries
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of edition galleries
	 * @param end the upper bound of the range of edition galleries (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching edition galleries, or an empty list if no matches were found
	 */
	@Override
	public List<EditionGallery> getEditionGalleriesByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<EditionGallery> orderByComparator) {

		return editionGalleryPersistence.findByUuid_C(
			uuid, companyId, start, end, orderByComparator);
	}

	/**
	 * Returns the edition gallery matching the UUID and group.
	 *
	 * @param uuid the edition gallery's UUID
	 * @param groupId the primary key of the group
	 * @return the matching edition gallery
	 * @throws PortalException if a matching edition gallery could not be found
	 */
	@Override
	public EditionGallery getEditionGalleryByUuidAndGroupId(
			String uuid, long groupId)
		throws PortalException {

		return editionGalleryPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the edition galleries.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>eu.strasbourg.service.edition.model.impl.EditionGalleryModelImpl</code>.
	 * </p>
	 *
	 * @param start the lower bound of the range of edition galleries
	 * @param end the upper bound of the range of edition galleries (not inclusive)
	 * @return the range of edition galleries
	 */
	@Override
	public List<EditionGallery> getEditionGalleries(int start, int end) {
		return editionGalleryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of edition galleries.
	 *
	 * @return the number of edition galleries
	 */
	@Override
	public int getEditionGalleriesCount() {
		return editionGalleryPersistence.countAll();
	}

	/**
	 * Updates the edition gallery in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect EditionGalleryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param editionGallery the edition gallery
	 * @return the edition gallery that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EditionGallery updateEditionGallery(EditionGallery editionGallery) {
		return editionGalleryPersistence.update(editionGallery);
	}

	/**
	 */
	@Override
	public boolean addEditionEditionGallery(long editionId, long galleryId) {
		return editionPersistence.addEditionGallery(editionId, galleryId);
	}

	/**
	 */
	@Override
	public boolean addEditionEditionGallery(
		long editionId, EditionGallery editionGallery) {

		return editionPersistence.addEditionGallery(editionId, editionGallery);
	}

	/**
	 */
	@Override
	public boolean addEditionEditionGalleries(
		long editionId, long[] galleryIds) {

		return editionPersistence.addEditionGalleries(editionId, galleryIds);
	}

	/**
	 */
	@Override
	public boolean addEditionEditionGalleries(
		long editionId, List<EditionGallery> editionGalleries) {

		return editionPersistence.addEditionGalleries(
			editionId, editionGalleries);
	}

	/**
	 */
	@Override
	public void clearEditionEditionGalleries(long editionId) {
		editionPersistence.clearEditionGalleries(editionId);
	}

	/**
	 */
	@Override
	public void deleteEditionEditionGallery(long editionId, long galleryId) {
		editionPersistence.removeEditionGallery(editionId, galleryId);
	}

	/**
	 */
	@Override
	public void deleteEditionEditionGallery(
		long editionId, EditionGallery editionGallery) {

		editionPersistence.removeEditionGallery(editionId, editionGallery);
	}

	/**
	 */
	@Override
	public void deleteEditionEditionGalleries(
		long editionId, long[] galleryIds) {

		editionPersistence.removeEditionGalleries(editionId, galleryIds);
	}

	/**
	 */
	@Override
	public void deleteEditionEditionGalleries(
		long editionId, List<EditionGallery> editionGalleries) {

		editionPersistence.removeEditionGalleries(editionId, editionGalleries);
	}

	/**
	 * Returns the editionIds of the editions associated with the edition gallery.
	 *
	 * @param galleryId the galleryId of the edition gallery
	 * @return long[] the editionIds of editions associated with the edition gallery
	 */
	@Override
	public long[] getEditionPrimaryKeys(long galleryId) {
		return editionGalleryPersistence.getEditionPrimaryKeys(galleryId);
	}

	/**
	 */
	@Override
	public List<EditionGallery> getEditionEditionGalleries(long editionId) {
		return editionPersistence.getEditionGalleries(editionId);
	}

	/**
	 */
	@Override
	public List<EditionGallery> getEditionEditionGalleries(
		long editionId, int start, int end) {

		return editionPersistence.getEditionGalleries(editionId, start, end);
	}

	/**
	 */
	@Override
	public List<EditionGallery> getEditionEditionGalleries(
		long editionId, int start, int end,
		OrderByComparator<EditionGallery> orderByComparator) {

		return editionPersistence.getEditionGalleries(
			editionId, start, end, orderByComparator);
	}

	/**
	 */
	@Override
	public int getEditionEditionGalleriesCount(long editionId) {
		return editionPersistence.getEditionGalleriesSize(editionId);
	}

	/**
	 */
	@Override
	public boolean hasEditionEditionGallery(long editionId, long galleryId) {
		return editionPersistence.containsEditionGallery(editionId, galleryId);
	}

	/**
	 */
	@Override
	public boolean hasEditionEditionGalleries(long editionId) {
		return editionPersistence.containsEditionGalleries(editionId);
	}

	/**
	 */
	@Override
	public void setEditionEditionGalleries(long editionId, long[] galleryIds) {
		editionPersistence.setEditionGalleries(editionId, galleryIds);
	}

	/**
	 * Returns the edition local service.
	 *
	 * @return the edition local service
	 */
	public eu.strasbourg.service.edition.service.EditionLocalService
		getEditionLocalService() {

		return editionLocalService;
	}

	/**
	 * Sets the edition local service.
	 *
	 * @param editionLocalService the edition local service
	 */
	public void setEditionLocalService(
		eu.strasbourg.service.edition.service.EditionLocalService
			editionLocalService) {

		this.editionLocalService = editionLocalService;
	}

	/**
	 * Returns the edition persistence.
	 *
	 * @return the edition persistence
	 */
	public EditionPersistence getEditionPersistence() {
		return editionPersistence;
	}

	/**
	 * Sets the edition persistence.
	 *
	 * @param editionPersistence the edition persistence
	 */
	public void setEditionPersistence(EditionPersistence editionPersistence) {
		this.editionPersistence = editionPersistence;
	}

	/**
	 * Returns the edition finder.
	 *
	 * @return the edition finder
	 */
	public EditionFinder getEditionFinder() {
		return editionFinder;
	}

	/**
	 * Sets the edition finder.
	 *
	 * @param editionFinder the edition finder
	 */
	public void setEditionFinder(EditionFinder editionFinder) {
		this.editionFinder = editionFinder;
	}

	/**
	 * Returns the edition gallery local service.
	 *
	 * @return the edition gallery local service
	 */
	public EditionGalleryLocalService getEditionGalleryLocalService() {
		return editionGalleryLocalService;
	}

	/**
	 * Sets the edition gallery local service.
	 *
	 * @param editionGalleryLocalService the edition gallery local service
	 */
	public void setEditionGalleryLocalService(
		EditionGalleryLocalService editionGalleryLocalService) {

		this.editionGalleryLocalService = editionGalleryLocalService;
	}

	/**
	 * Returns the edition gallery persistence.
	 *
	 * @return the edition gallery persistence
	 */
	public EditionGalleryPersistence getEditionGalleryPersistence() {
		return editionGalleryPersistence;
	}

	/**
	 * Sets the edition gallery persistence.
	 *
	 * @param editionGalleryPersistence the edition gallery persistence
	 */
	public void setEditionGalleryPersistence(
		EditionGalleryPersistence editionGalleryPersistence) {

		this.editionGalleryPersistence = editionGalleryPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService
		getClassNameLocalService() {

		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService
			classNameLocalService) {

		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {

		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService
		getResourceLocalService() {

		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService
			resourceLocalService) {

		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService
		getUserLocalService() {

		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {

		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Returns the asset entry local service.
	 *
	 * @return the asset entry local service
	 */
	public com.liferay.asset.kernel.service.AssetEntryLocalService
		getAssetEntryLocalService() {

		return assetEntryLocalService;
	}

	/**
	 * Sets the asset entry local service.
	 *
	 * @param assetEntryLocalService the asset entry local service
	 */
	public void setAssetEntryLocalService(
		com.liferay.asset.kernel.service.AssetEntryLocalService
			assetEntryLocalService) {

		this.assetEntryLocalService = assetEntryLocalService;
	}

	/**
	 * Returns the asset entry persistence.
	 *
	 * @return the asset entry persistence
	 */
	public AssetEntryPersistence getAssetEntryPersistence() {
		return assetEntryPersistence;
	}

	/**
	 * Sets the asset entry persistence.
	 *
	 * @param assetEntryPersistence the asset entry persistence
	 */
	public void setAssetEntryPersistence(
		AssetEntryPersistence assetEntryPersistence) {

		this.assetEntryPersistence = assetEntryPersistence;
	}

	/**
	 * Returns the asset link local service.
	 *
	 * @return the asset link local service
	 */
	public com.liferay.asset.kernel.service.AssetLinkLocalService
		getAssetLinkLocalService() {

		return assetLinkLocalService;
	}

	/**
	 * Sets the asset link local service.
	 *
	 * @param assetLinkLocalService the asset link local service
	 */
	public void setAssetLinkLocalService(
		com.liferay.asset.kernel.service.AssetLinkLocalService
			assetLinkLocalService) {

		this.assetLinkLocalService = assetLinkLocalService;
	}

	/**
	 * Returns the asset link persistence.
	 *
	 * @return the asset link persistence
	 */
	public AssetLinkPersistence getAssetLinkPersistence() {
		return assetLinkPersistence;
	}

	/**
	 * Sets the asset link persistence.
	 *
	 * @param assetLinkPersistence the asset link persistence
	 */
	public void setAssetLinkPersistence(
		AssetLinkPersistence assetLinkPersistence) {

		this.assetLinkPersistence = assetLinkPersistence;
	}

	/**
	 * Returns the asset tag local service.
	 *
	 * @return the asset tag local service
	 */
	public com.liferay.asset.kernel.service.AssetTagLocalService
		getAssetTagLocalService() {

		return assetTagLocalService;
	}

	/**
	 * Sets the asset tag local service.
	 *
	 * @param assetTagLocalService the asset tag local service
	 */
	public void setAssetTagLocalService(
		com.liferay.asset.kernel.service.AssetTagLocalService
			assetTagLocalService) {

		this.assetTagLocalService = assetTagLocalService;
	}

	/**
	 * Returns the asset tag persistence.
	 *
	 * @return the asset tag persistence
	 */
	public AssetTagPersistence getAssetTagPersistence() {
		return assetTagPersistence;
	}

	/**
	 * Sets the asset tag persistence.
	 *
	 * @param assetTagPersistence the asset tag persistence
	 */
	public void setAssetTagPersistence(
		AssetTagPersistence assetTagPersistence) {

		this.assetTagPersistence = assetTagPersistence;
	}

	public void afterPropertiesSet() {
		EditionGalleryLocalServiceUtil.setService(editionGalleryLocalService);
	}

	public void destroy() {
		EditionGalleryLocalServiceUtil.setService(null);
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return EditionGalleryLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return EditionGallery.class;
	}

	protected String getModelClassName() {
		return EditionGallery.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = editionGalleryPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception exception) {
			throw new SystemException(exception);
		}
	}

	@BeanReference(
		type = eu.strasbourg.service.edition.service.EditionLocalService.class
	)
	protected eu.strasbourg.service.edition.service.EditionLocalService
		editionLocalService;

	@BeanReference(type = EditionPersistence.class)
	protected EditionPersistence editionPersistence;

	@BeanReference(type = EditionFinder.class)
	protected EditionFinder editionFinder;

	@BeanReference(type = EditionGalleryLocalService.class)
	protected EditionGalleryLocalService editionGalleryLocalService;

	@BeanReference(type = EditionGalleryPersistence.class)
	protected EditionGalleryPersistence editionGalleryPersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameLocalService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ResourceLocalService.class
	)
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserLocalService.class
	)
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;

	@ServiceReference(
		type = com.liferay.asset.kernel.service.AssetEntryLocalService.class
	)
	protected com.liferay.asset.kernel.service.AssetEntryLocalService
		assetEntryLocalService;

	@ServiceReference(type = AssetEntryPersistence.class)
	protected AssetEntryPersistence assetEntryPersistence;

	@ServiceReference(
		type = com.liferay.asset.kernel.service.AssetLinkLocalService.class
	)
	protected com.liferay.asset.kernel.service.AssetLinkLocalService
		assetLinkLocalService;

	@ServiceReference(type = AssetLinkPersistence.class)
	protected AssetLinkPersistence assetLinkPersistence;

	@ServiceReference(
		type = com.liferay.asset.kernel.service.AssetTagLocalService.class
	)
	protected com.liferay.asset.kernel.service.AssetTagLocalService
		assetTagLocalService;

	@ServiceReference(type = AssetTagPersistence.class)
	protected AssetTagPersistence assetTagPersistence;

	private static final Log _log = LogFactoryUtil.getLog(
		EditionGalleryLocalServiceBaseImpl.class);

}