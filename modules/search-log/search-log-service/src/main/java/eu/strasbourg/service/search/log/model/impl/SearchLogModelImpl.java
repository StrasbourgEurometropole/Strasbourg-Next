/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.search.log.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import eu.strasbourg.service.search.log.model.SearchLog;
import eu.strasbourg.service.search.log.model.SearchLogModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SearchLog service. Represents a row in the &quot;search_SearchLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SearchLogModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SearchLogImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see SearchLogImpl
 * @generated
 */
@JSON(strict = true)
public class SearchLogModelImpl
	extends BaseModelImpl<SearchLog> implements SearchLogModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a search log model instance should use the <code>SearchLog</code> interface instead.
	 */
	public static final String TABLE_NAME = "search_SearchLog";

	public static final Object[][] TABLE_COLUMNS = {
		{"searchLogId", Types.BIGINT}, {"keywords", Types.VARCHAR},
		{"searchTime", Types.BIGINT}, {"resultCount", Types.BIGINT},
		{"result1ClassId", Types.BIGINT}, {"result1ClassPK", Types.BIGINT},
		{"result1Title", Types.VARCHAR}, {"result2ClassId", Types.BIGINT},
		{"result2ClassPK", Types.BIGINT}, {"result2Title", Types.VARCHAR},
		{"result3ClassId", Types.BIGINT}, {"result3ClassPK", Types.BIGINT},
		{"result3Title", Types.VARCHAR}, {"userTargetClassId", Types.BIGINT},
		{"userTargetClassPK", Types.BIGINT}, {"userTargetTitle", Types.VARCHAR},
		{"groupId", Types.BIGINT}, {"layoutId", Types.BIGINT},
		{"layoutFriendlyURL", Types.VARCHAR}, {"language", Types.VARCHAR},
		{"date_", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("searchLogId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("keywords", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("searchTime", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("resultCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("result1ClassId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("result1ClassPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("result1Title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("result2ClassId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("result2ClassPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("result2Title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("result3ClassId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("result3ClassPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("result3Title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userTargetClassId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userTargetClassPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userTargetTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("layoutId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("layoutFriendlyURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("language", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table search_SearchLog (searchLogId LONG not null primary key,keywords VARCHAR(400) null,searchTime LONG,resultCount LONG,result1ClassId LONG,result1ClassPK LONG,result1Title VARCHAR(800) null,result2ClassId LONG,result2ClassPK LONG,result2Title VARCHAR(800) null,result3ClassId LONG,result3ClassPK LONG,result3Title VARCHAR(800) null,userTargetClassId LONG,userTargetClassPK LONG,userTargetTitle VARCHAR(800) null,groupId LONG,layoutId LONG,layoutFriendlyURL VARCHAR(75) null,language VARCHAR(75) null,date_ DATE null)";

	public static final String TABLE_SQL_DROP = "drop table search_SearchLog";

	public static final String ORDER_BY_JPQL = " ORDER BY searchLog.date DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY search_SearchLog.date_ DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DATE_COLUMN_BITMASK = 1L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.model.search.log.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.search.log.model.SearchLog"));

	public SearchLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _searchLogId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSearchLogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _searchLogId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SearchLog.class;
	}

	@Override
	public String getModelClassName() {
		return SearchLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SearchLog, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SearchLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SearchLog, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((SearchLog)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SearchLog, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SearchLog, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SearchLog)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SearchLog, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SearchLog, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<SearchLog, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<SearchLog, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<SearchLog, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<SearchLog, Object>>();
		Map<String, BiConsumer<SearchLog, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<SearchLog, ?>>();

		attributeGetterFunctions.put("searchLogId", SearchLog::getSearchLogId);
		attributeSetterBiConsumers.put(
			"searchLogId",
			(BiConsumer<SearchLog, Long>)SearchLog::setSearchLogId);
		attributeGetterFunctions.put("keywords", SearchLog::getKeywords);
		attributeSetterBiConsumers.put(
			"keywords", (BiConsumer<SearchLog, String>)SearchLog::setKeywords);
		attributeGetterFunctions.put("searchTime", SearchLog::getSearchTime);
		attributeSetterBiConsumers.put(
			"searchTime",
			(BiConsumer<SearchLog, Long>)SearchLog::setSearchTime);
		attributeGetterFunctions.put("resultCount", SearchLog::getResultCount);
		attributeSetterBiConsumers.put(
			"resultCount",
			(BiConsumer<SearchLog, Long>)SearchLog::setResultCount);
		attributeGetterFunctions.put(
			"result1ClassId", SearchLog::getResult1ClassId);
		attributeSetterBiConsumers.put(
			"result1ClassId",
			(BiConsumer<SearchLog, Long>)SearchLog::setResult1ClassId);
		attributeGetterFunctions.put(
			"result1ClassPK", SearchLog::getResult1ClassPK);
		attributeSetterBiConsumers.put(
			"result1ClassPK",
			(BiConsumer<SearchLog, Long>)SearchLog::setResult1ClassPK);
		attributeGetterFunctions.put(
			"result1Title", SearchLog::getResult1Title);
		attributeSetterBiConsumers.put(
			"result1Title",
			(BiConsumer<SearchLog, String>)SearchLog::setResult1Title);
		attributeGetterFunctions.put(
			"result2ClassId", SearchLog::getResult2ClassId);
		attributeSetterBiConsumers.put(
			"result2ClassId",
			(BiConsumer<SearchLog, Long>)SearchLog::setResult2ClassId);
		attributeGetterFunctions.put(
			"result2ClassPK", SearchLog::getResult2ClassPK);
		attributeSetterBiConsumers.put(
			"result2ClassPK",
			(BiConsumer<SearchLog, Long>)SearchLog::setResult2ClassPK);
		attributeGetterFunctions.put(
			"result2Title", SearchLog::getResult2Title);
		attributeSetterBiConsumers.put(
			"result2Title",
			(BiConsumer<SearchLog, String>)SearchLog::setResult2Title);
		attributeGetterFunctions.put(
			"result3ClassId", SearchLog::getResult3ClassId);
		attributeSetterBiConsumers.put(
			"result3ClassId",
			(BiConsumer<SearchLog, Long>)SearchLog::setResult3ClassId);
		attributeGetterFunctions.put(
			"result3ClassPK", SearchLog::getResult3ClassPK);
		attributeSetterBiConsumers.put(
			"result3ClassPK",
			(BiConsumer<SearchLog, Long>)SearchLog::setResult3ClassPK);
		attributeGetterFunctions.put(
			"result3Title", SearchLog::getResult3Title);
		attributeSetterBiConsumers.put(
			"result3Title",
			(BiConsumer<SearchLog, String>)SearchLog::setResult3Title);
		attributeGetterFunctions.put(
			"userTargetClassId", SearchLog::getUserTargetClassId);
		attributeSetterBiConsumers.put(
			"userTargetClassId",
			(BiConsumer<SearchLog, Long>)SearchLog::setUserTargetClassId);
		attributeGetterFunctions.put(
			"userTargetClassPK", SearchLog::getUserTargetClassPK);
		attributeSetterBiConsumers.put(
			"userTargetClassPK",
			(BiConsumer<SearchLog, Long>)SearchLog::setUserTargetClassPK);
		attributeGetterFunctions.put(
			"userTargetTitle", SearchLog::getUserTargetTitle);
		attributeSetterBiConsumers.put(
			"userTargetTitle",
			(BiConsumer<SearchLog, String>)SearchLog::setUserTargetTitle);
		attributeGetterFunctions.put("groupId", SearchLog::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<SearchLog, Long>)SearchLog::setGroupId);
		attributeGetterFunctions.put("layoutId", SearchLog::getLayoutId);
		attributeSetterBiConsumers.put(
			"layoutId", (BiConsumer<SearchLog, Long>)SearchLog::setLayoutId);
		attributeGetterFunctions.put(
			"layoutFriendlyURL", SearchLog::getLayoutFriendlyURL);
		attributeSetterBiConsumers.put(
			"layoutFriendlyURL",
			(BiConsumer<SearchLog, String>)SearchLog::setLayoutFriendlyURL);
		attributeGetterFunctions.put("language", SearchLog::getLanguage);
		attributeSetterBiConsumers.put(
			"language", (BiConsumer<SearchLog, String>)SearchLog::setLanguage);
		attributeGetterFunctions.put("date", SearchLog::getDate);
		attributeSetterBiConsumers.put(
			"date", (BiConsumer<SearchLog, Date>)SearchLog::setDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getSearchLogId() {
		return _searchLogId;
	}

	@Override
	public void setSearchLogId(long searchLogId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_searchLogId = searchLogId;
	}

	@JSON
	@Override
	public String getKeywords() {
		if (_keywords == null) {
			return "";
		}
		else {
			return _keywords;
		}
	}

	@Override
	public void setKeywords(String keywords) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_keywords = keywords;
	}

	@JSON
	@Override
	public long getSearchTime() {
		return _searchTime;
	}

	@Override
	public void setSearchTime(long searchTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_searchTime = searchTime;
	}

	@JSON
	@Override
	public long getResultCount() {
		return _resultCount;
	}

	@Override
	public void setResultCount(long resultCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_resultCount = resultCount;
	}

	@JSON
	@Override
	public long getResult1ClassId() {
		return _result1ClassId;
	}

	@Override
	public void setResult1ClassId(long result1ClassId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_result1ClassId = result1ClassId;
	}

	@JSON
	@Override
	public long getResult1ClassPK() {
		return _result1ClassPK;
	}

	@Override
	public void setResult1ClassPK(long result1ClassPK) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_result1ClassPK = result1ClassPK;
	}

	@JSON
	@Override
	public String getResult1Title() {
		if (_result1Title == null) {
			return "";
		}
		else {
			return _result1Title;
		}
	}

	@Override
	public void setResult1Title(String result1Title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_result1Title = result1Title;
	}

	@JSON
	@Override
	public long getResult2ClassId() {
		return _result2ClassId;
	}

	@Override
	public void setResult2ClassId(long result2ClassId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_result2ClassId = result2ClassId;
	}

	@JSON
	@Override
	public long getResult2ClassPK() {
		return _result2ClassPK;
	}

	@Override
	public void setResult2ClassPK(long result2ClassPK) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_result2ClassPK = result2ClassPK;
	}

	@JSON
	@Override
	public String getResult2Title() {
		if (_result2Title == null) {
			return "";
		}
		else {
			return _result2Title;
		}
	}

	@Override
	public void setResult2Title(String result2Title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_result2Title = result2Title;
	}

	@JSON
	@Override
	public long getResult3ClassId() {
		return _result3ClassId;
	}

	@Override
	public void setResult3ClassId(long result3ClassId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_result3ClassId = result3ClassId;
	}

	@JSON
	@Override
	public long getResult3ClassPK() {
		return _result3ClassPK;
	}

	@Override
	public void setResult3ClassPK(long result3ClassPK) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_result3ClassPK = result3ClassPK;
	}

	@JSON
	@Override
	public String getResult3Title() {
		if (_result3Title == null) {
			return "";
		}
		else {
			return _result3Title;
		}
	}

	@Override
	public void setResult3Title(String result3Title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_result3Title = result3Title;
	}

	@JSON
	@Override
	public long getUserTargetClassId() {
		return _userTargetClassId;
	}

	@Override
	public void setUserTargetClassId(long userTargetClassId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userTargetClassId = userTargetClassId;
	}

	@JSON
	@Override
	public long getUserTargetClassPK() {
		return _userTargetClassPK;
	}

	@Override
	public void setUserTargetClassPK(long userTargetClassPK) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userTargetClassPK = userTargetClassPK;
	}

	@JSON
	@Override
	public String getUserTargetTitle() {
		if (_userTargetTitle == null) {
			return "";
		}
		else {
			return _userTargetTitle;
		}
	}

	@Override
	public void setUserTargetTitle(String userTargetTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userTargetTitle = userTargetTitle;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public Long getLayoutId() {
		return _layoutId;
	}

	@Override
	public void setLayoutId(Long layoutId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_layoutId = layoutId;
	}

	@JSON
	@Override
	public String getLayoutFriendlyURL() {
		if (_layoutFriendlyURL == null) {
			return "";
		}
		else {
			return _layoutFriendlyURL;
		}
	}

	@Override
	public void setLayoutFriendlyURL(String layoutFriendlyURL) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_layoutFriendlyURL = layoutFriendlyURL;
	}

	@JSON
	@Override
	public String getLanguage() {
		if (_language == null) {
			return "";
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_language = language;
	}

	@JSON
	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_date = date;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, SearchLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SearchLog toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SearchLog>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SearchLogImpl searchLogImpl = new SearchLogImpl();

		searchLogImpl.setSearchLogId(getSearchLogId());
		searchLogImpl.setKeywords(getKeywords());
		searchLogImpl.setSearchTime(getSearchTime());
		searchLogImpl.setResultCount(getResultCount());
		searchLogImpl.setResult1ClassId(getResult1ClassId());
		searchLogImpl.setResult1ClassPK(getResult1ClassPK());
		searchLogImpl.setResult1Title(getResult1Title());
		searchLogImpl.setResult2ClassId(getResult2ClassId());
		searchLogImpl.setResult2ClassPK(getResult2ClassPK());
		searchLogImpl.setResult2Title(getResult2Title());
		searchLogImpl.setResult3ClassId(getResult3ClassId());
		searchLogImpl.setResult3ClassPK(getResult3ClassPK());
		searchLogImpl.setResult3Title(getResult3Title());
		searchLogImpl.setUserTargetClassId(getUserTargetClassId());
		searchLogImpl.setUserTargetClassPK(getUserTargetClassPK());
		searchLogImpl.setUserTargetTitle(getUserTargetTitle());
		searchLogImpl.setGroupId(getGroupId());
		searchLogImpl.setLayoutId(getLayoutId());
		searchLogImpl.setLayoutFriendlyURL(getLayoutFriendlyURL());
		searchLogImpl.setLanguage(getLanguage());
		searchLogImpl.setDate(getDate());

		searchLogImpl.resetOriginalValues();

		return searchLogImpl;
	}

	@Override
	public SearchLog cloneWithOriginalValues() {
		SearchLogImpl searchLogImpl = new SearchLogImpl();

		searchLogImpl.setSearchLogId(
			this.<Long>getColumnOriginalValue("searchLogId"));
		searchLogImpl.setKeywords(
			this.<String>getColumnOriginalValue("keywords"));
		searchLogImpl.setSearchTime(
			this.<Long>getColumnOriginalValue("searchTime"));
		searchLogImpl.setResultCount(
			this.<Long>getColumnOriginalValue("resultCount"));
		searchLogImpl.setResult1ClassId(
			this.<Long>getColumnOriginalValue("result1ClassId"));
		searchLogImpl.setResult1ClassPK(
			this.<Long>getColumnOriginalValue("result1ClassPK"));
		searchLogImpl.setResult1Title(
			this.<String>getColumnOriginalValue("result1Title"));
		searchLogImpl.setResult2ClassId(
			this.<Long>getColumnOriginalValue("result2ClassId"));
		searchLogImpl.setResult2ClassPK(
			this.<Long>getColumnOriginalValue("result2ClassPK"));
		searchLogImpl.setResult2Title(
			this.<String>getColumnOriginalValue("result2Title"));
		searchLogImpl.setResult3ClassId(
			this.<Long>getColumnOriginalValue("result3ClassId"));
		searchLogImpl.setResult3ClassPK(
			this.<Long>getColumnOriginalValue("result3ClassPK"));
		searchLogImpl.setResult3Title(
			this.<String>getColumnOriginalValue("result3Title"));
		searchLogImpl.setUserTargetClassId(
			this.<Long>getColumnOriginalValue("userTargetClassId"));
		searchLogImpl.setUserTargetClassPK(
			this.<Long>getColumnOriginalValue("userTargetClassPK"));
		searchLogImpl.setUserTargetTitle(
			this.<String>getColumnOriginalValue("userTargetTitle"));
		searchLogImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		searchLogImpl.setLayoutId(
			this.<Long>getColumnOriginalValue("layoutId"));
		searchLogImpl.setLayoutFriendlyURL(
			this.<String>getColumnOriginalValue("layoutFriendlyURL"));
		searchLogImpl.setLanguage(
			this.<String>getColumnOriginalValue("language"));
		searchLogImpl.setDate(this.<Date>getColumnOriginalValue("date_"));

		return searchLogImpl;
	}

	@Override
	public int compareTo(SearchLog searchLog) {
		int value = 0;

		value = DateUtil.compareTo(getDate(), searchLog.getDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SearchLog)) {
			return false;
		}

		SearchLog searchLog = (SearchLog)object;

		long primaryKey = searchLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SearchLog> toCacheModel() {
		SearchLogCacheModel searchLogCacheModel = new SearchLogCacheModel();

		searchLogCacheModel.searchLogId = getSearchLogId();

		searchLogCacheModel.keywords = getKeywords();

		String keywords = searchLogCacheModel.keywords;

		if ((keywords != null) && (keywords.length() == 0)) {
			searchLogCacheModel.keywords = null;
		}

		searchLogCacheModel.searchTime = getSearchTime();

		searchLogCacheModel.resultCount = getResultCount();

		searchLogCacheModel.result1ClassId = getResult1ClassId();

		searchLogCacheModel.result1ClassPK = getResult1ClassPK();

		searchLogCacheModel.result1Title = getResult1Title();

		String result1Title = searchLogCacheModel.result1Title;

		if ((result1Title != null) && (result1Title.length() == 0)) {
			searchLogCacheModel.result1Title = null;
		}

		searchLogCacheModel.result2ClassId = getResult2ClassId();

		searchLogCacheModel.result2ClassPK = getResult2ClassPK();

		searchLogCacheModel.result2Title = getResult2Title();

		String result2Title = searchLogCacheModel.result2Title;

		if ((result2Title != null) && (result2Title.length() == 0)) {
			searchLogCacheModel.result2Title = null;
		}

		searchLogCacheModel.result3ClassId = getResult3ClassId();

		searchLogCacheModel.result3ClassPK = getResult3ClassPK();

		searchLogCacheModel.result3Title = getResult3Title();

		String result3Title = searchLogCacheModel.result3Title;

		if ((result3Title != null) && (result3Title.length() == 0)) {
			searchLogCacheModel.result3Title = null;
		}

		searchLogCacheModel.userTargetClassId = getUserTargetClassId();

		searchLogCacheModel.userTargetClassPK = getUserTargetClassPK();

		searchLogCacheModel.userTargetTitle = getUserTargetTitle();

		String userTargetTitle = searchLogCacheModel.userTargetTitle;

		if ((userTargetTitle != null) && (userTargetTitle.length() == 0)) {
			searchLogCacheModel.userTargetTitle = null;
		}

		searchLogCacheModel.groupId = getGroupId();

		Long layoutId = getLayoutId();

		if (layoutId != null) {
			searchLogCacheModel.layoutId = layoutId;
		}

		searchLogCacheModel.layoutFriendlyURL = getLayoutFriendlyURL();

		String layoutFriendlyURL = searchLogCacheModel.layoutFriendlyURL;

		if ((layoutFriendlyURL != null) && (layoutFriendlyURL.length() == 0)) {
			searchLogCacheModel.layoutFriendlyURL = null;
		}

		searchLogCacheModel.language = getLanguage();

		String language = searchLogCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			searchLogCacheModel.language = null;
		}

		Date date = getDate();

		if (date != null) {
			searchLogCacheModel.date = date.getTime();
		}
		else {
			searchLogCacheModel.date = Long.MIN_VALUE;
		}

		return searchLogCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SearchLog, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SearchLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SearchLog, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((SearchLog)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, SearchLog>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					SearchLog.class, ModelWrapper.class);

	}

	private long _searchLogId;
	private String _keywords;
	private long _searchTime;
	private long _resultCount;
	private long _result1ClassId;
	private long _result1ClassPK;
	private String _result1Title;
	private long _result2ClassId;
	private long _result2ClassPK;
	private String _result2Title;
	private long _result3ClassId;
	private long _result3ClassPK;
	private String _result3Title;
	private long _userTargetClassId;
	private long _userTargetClassPK;
	private String _userTargetTitle;
	private long _groupId;
	private Long _layoutId;
	private String _layoutFriendlyURL;
	private String _language;
	private Date _date;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<SearchLog, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SearchLog)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("searchLogId", _searchLogId);
		_columnOriginalValues.put("keywords", _keywords);
		_columnOriginalValues.put("searchTime", _searchTime);
		_columnOriginalValues.put("resultCount", _resultCount);
		_columnOriginalValues.put("result1ClassId", _result1ClassId);
		_columnOriginalValues.put("result1ClassPK", _result1ClassPK);
		_columnOriginalValues.put("result1Title", _result1Title);
		_columnOriginalValues.put("result2ClassId", _result2ClassId);
		_columnOriginalValues.put("result2ClassPK", _result2ClassPK);
		_columnOriginalValues.put("result2Title", _result2Title);
		_columnOriginalValues.put("result3ClassId", _result3ClassId);
		_columnOriginalValues.put("result3ClassPK", _result3ClassPK);
		_columnOriginalValues.put("result3Title", _result3Title);
		_columnOriginalValues.put("userTargetClassId", _userTargetClassId);
		_columnOriginalValues.put("userTargetClassPK", _userTargetClassPK);
		_columnOriginalValues.put("userTargetTitle", _userTargetTitle);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("layoutId", _layoutId);
		_columnOriginalValues.put("layoutFriendlyURL", _layoutFriendlyURL);
		_columnOriginalValues.put("language", _language);
		_columnOriginalValues.put("date_", _date);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("date_", "date");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("searchLogId", 1L);

		columnBitmasks.put("keywords", 2L);

		columnBitmasks.put("searchTime", 4L);

		columnBitmasks.put("resultCount", 8L);

		columnBitmasks.put("result1ClassId", 16L);

		columnBitmasks.put("result1ClassPK", 32L);

		columnBitmasks.put("result1Title", 64L);

		columnBitmasks.put("result2ClassId", 128L);

		columnBitmasks.put("result2ClassPK", 256L);

		columnBitmasks.put("result2Title", 512L);

		columnBitmasks.put("result3ClassId", 1024L);

		columnBitmasks.put("result3ClassPK", 2048L);

		columnBitmasks.put("result3Title", 4096L);

		columnBitmasks.put("userTargetClassId", 8192L);

		columnBitmasks.put("userTargetClassPK", 16384L);

		columnBitmasks.put("userTargetTitle", 32768L);

		columnBitmasks.put("groupId", 65536L);

		columnBitmasks.put("layoutId", 131072L);

		columnBitmasks.put("layoutFriendlyURL", 262144L);

		columnBitmasks.put("language", 524288L);

		columnBitmasks.put("date_", 1048576L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SearchLog _escapedModel;

}