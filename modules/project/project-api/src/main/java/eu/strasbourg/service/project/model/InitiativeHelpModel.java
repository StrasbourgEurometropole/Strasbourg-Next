/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.project.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.LocalizedModel;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the InitiativeHelp service. Represents a row in the &quot;project_InitiativeHelp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>eu.strasbourg.service.project.model.impl.InitiativeHelpModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>eu.strasbourg.service.project.model.impl.InitiativeHelpImpl</code>.
 * </p>
 *
 * @author Cedric Henry
 * @see InitiativeHelp
 * @generated
 */
@ProviderType
public interface InitiativeHelpModel
	extends BaseModel<InitiativeHelp>, LocalizedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a initiative help model instance should use the {@link InitiativeHelp} interface instead.
	 */

	/**
	 * Returns the primary key of this initiative help.
	 *
	 * @return the primary key of this initiative help
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this initiative help.
	 *
	 * @param primaryKey the primary key of this initiative help
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this initiative help.
	 *
	 * @return the uuid of this initiative help
	 */
	@AutoEscape
	public String getUuid();

	/**
	 * Sets the uuid of this initiative help.
	 *
	 * @param uuid the uuid of this initiative help
	 */
	public void setUuid(String uuid);

	/**
	 * Returns the initiative help ID of this initiative help.
	 *
	 * @return the initiative help ID of this initiative help
	 */
	public long getInitiativeHelpId();

	/**
	 * Sets the initiative help ID of this initiative help.
	 *
	 * @param initiativeHelpId the initiative help ID of this initiative help
	 */
	public void setInitiativeHelpId(long initiativeHelpId);

	/**
	 * Returns the create date of this initiative help.
	 *
	 * @return the create date of this initiative help
	 */
	public Date getCreateDate();

	/**
	 * Sets the create date of this initiative help.
	 *
	 * @param createDate the create date of this initiative help
	 */
	public void setCreateDate(Date createDate);

	/**
	 * Returns the publik user ID of this initiative help.
	 *
	 * @return the publik user ID of this initiative help
	 */
	@AutoEscape
	public String getPublikUserId();

	/**
	 * Sets the publik user ID of this initiative help.
	 *
	 * @param publikUserId the publik user ID of this initiative help
	 */
	public void setPublikUserId(String publikUserId);

	/**
	 * Returns the initiative ID of this initiative help.
	 *
	 * @return the initiative ID of this initiative help
	 */
	public long getInitiativeId();

	/**
	 * Sets the initiative ID of this initiative help.
	 *
	 * @param initiativeId the initiative ID of this initiative help
	 */
	public void setInitiativeId(long initiativeId);

	/**
	 * Returns the help types of this initiative help.
	 *
	 * @return the help types of this initiative help
	 */
	@AutoEscape
	public String getHelpTypes();

	/**
	 * Sets the help types of this initiative help.
	 *
	 * @param helpTypes the help types of this initiative help
	 */
	public void setHelpTypes(String helpTypes);

	/**
	 * Returns the group ID of this initiative help.
	 *
	 * @return the group ID of this initiative help
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this initiative help.
	 *
	 * @param groupId the group ID of this initiative help
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the message of this initiative help.
	 *
	 * @return the message of this initiative help
	 */
	public String getMessage();

	/**
	 * Returns the localized message of this initiative help in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized message of this initiative help
	 */
	@AutoEscape
	public String getMessage(Locale locale);

	/**
	 * Returns the localized message of this initiative help in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized message of this initiative help. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getMessage(Locale locale, boolean useDefault);

	/**
	 * Returns the localized message of this initiative help in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized message of this initiative help
	 */
	@AutoEscape
	public String getMessage(String languageId);

	/**
	 * Returns the localized message of this initiative help in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized message of this initiative help
	 */
	@AutoEscape
	public String getMessage(String languageId, boolean useDefault);

	@AutoEscape
	public String getMessageCurrentLanguageId();

	@AutoEscape
	public String getMessageCurrentValue();

	/**
	 * Returns a map of the locales and localized messages of this initiative help.
	 *
	 * @return the locales and localized messages of this initiative help
	 */
	public Map<Locale, String> getMessageMap();

	/**
	 * Sets the message of this initiative help.
	 *
	 * @param message the message of this initiative help
	 */
	public void setMessage(String message);

	/**
	 * Sets the localized message of this initiative help in the language.
	 *
	 * @param message the localized message of this initiative help
	 * @param locale the locale of the language
	 */
	public void setMessage(String message, Locale locale);

	/**
	 * Sets the localized message of this initiative help in the language, and sets the default locale.
	 *
	 * @param message the localized message of this initiative help
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setMessage(String message, Locale locale, Locale defaultLocale);

	public void setMessageCurrentLanguageId(String languageId);

	/**
	 * Sets the localized messages of this initiative help from the map of locales and localized messages.
	 *
	 * @param messageMap the locales and localized messages of this initiative help
	 */
	public void setMessageMap(Map<Locale, String> messageMap);

	/**
	 * Sets the localized messages of this initiative help from the map of locales and localized messages, and sets the default locale.
	 *
	 * @param messageMap the locales and localized messages of this initiative help
	 * @param defaultLocale the default locale
	 */
	public void setMessageMap(
		Map<Locale, String> messageMap, Locale defaultLocale);

	/**
	 * Returns the help display of this initiative help.
	 *
	 * @return the help display of this initiative help
	 */
	public boolean getHelpDisplay();

	/**
	 * Returns <code>true</code> if this initiative help is help display.
	 *
	 * @return <code>true</code> if this initiative help is help display; <code>false</code> otherwise
	 */
	public boolean isHelpDisplay();

	/**
	 * Sets whether this initiative help is help display.
	 *
	 * @param helpDisplay the help display of this initiative help
	 */
	public void setHelpDisplay(boolean helpDisplay);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public InitiativeHelp cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}