/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.project.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import eu.strasbourg.service.project.model.ProjectFollowed;
import eu.strasbourg.service.project.model.ProjectFollowedModel;
import eu.strasbourg.service.project.model.ProjectFollowedSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProjectFollowed service. Represents a row in the &quot;project_ProjectFollowed&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProjectFollowedModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectFollowedImpl}.
 * </p>
 *
 * @author Cedric Henry
 * @see ProjectFollowedImpl
 * @see ProjectFollowed
 * @see ProjectFollowedModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ProjectFollowedModelImpl extends BaseModelImpl<ProjectFollowed>
	implements ProjectFollowedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project followed model instance should use the {@link ProjectFollowed} interface instead.
	 */
	public static final String TABLE_NAME = "project_ProjectFollowed";
	public static final Object[][] TABLE_COLUMNS = {
			{ "projectFollowedId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "publikUserId", Types.VARCHAR },
			{ "projectId", Types.BIGINT },
			{ "groupId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("projectFollowedId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("publikUserId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table project_ProjectFollowed (projectFollowedId LONG not null primary key,createDate DATE null,publikUserId VARCHAR(75) null,projectId LONG,groupId LONG)";
	public static final String TABLE_SQL_DROP = "drop table project_ProjectFollowed";
	public static final String ORDER_BY_JPQL = " ORDER BY projectFollowed.projectFollowedId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY project_ProjectFollowed.projectFollowedId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.project.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.project.model.ProjectFollowed"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.project.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.project.model.ProjectFollowed"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.project.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.project.model.ProjectFollowed"),
			true);
	public static final long PROJECTID_COLUMN_BITMASK = 1L;
	public static final long PUBLIKUSERID_COLUMN_BITMASK = 2L;
	public static final long PROJECTFOLLOWEDID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProjectFollowed toModel(ProjectFollowedSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProjectFollowed model = new ProjectFollowedImpl();

		model.setProjectFollowedId(soapModel.getProjectFollowedId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setPublikUserId(soapModel.getPublikUserId());
		model.setProjectId(soapModel.getProjectId());
		model.setGroupId(soapModel.getGroupId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProjectFollowed> toModels(
		ProjectFollowedSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProjectFollowed> models = new ArrayList<ProjectFollowed>(soapModels.length);

		for (ProjectFollowedSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.project.service.util.PropsUtil.get(
				"lock.expiration.time.eu.strasbourg.service.project.model.ProjectFollowed"));

	public ProjectFollowedModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _projectFollowedId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProjectFollowedId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectFollowedId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProjectFollowed.class;
	}

	@Override
	public String getModelClassName() {
		return ProjectFollowed.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("projectFollowedId", getProjectFollowedId());
		attributes.put("createDate", getCreateDate());
		attributes.put("publikUserId", getPublikUserId());
		attributes.put("projectId", getProjectId());
		attributes.put("groupId", getGroupId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long projectFollowedId = (Long)attributes.get("projectFollowedId");

		if (projectFollowedId != null) {
			setProjectFollowedId(projectFollowedId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String publikUserId = (String)attributes.get("publikUserId");

		if (publikUserId != null) {
			setPublikUserId(publikUserId);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}
	}

	@JSON
	@Override
	public long getProjectFollowedId() {
		return _projectFollowedId;
	}

	@Override
	public void setProjectFollowedId(long projectFollowedId) {
		_projectFollowedId = projectFollowedId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public String getPublikUserId() {
		if (_publikUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _publikUserId;
		}
	}

	@Override
	public void setPublikUserId(String publikUserId) {
		_columnBitmask |= PUBLIKUSERID_COLUMN_BITMASK;

		if (_originalPublikUserId == null) {
			_originalPublikUserId = _publikUserId;
		}

		_publikUserId = publikUserId;
	}

	public String getOriginalPublikUserId() {
		return GetterUtil.getString(_originalPublikUserId);
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_columnBitmask |= PROJECTID_COLUMN_BITMASK;

		if (!_setOriginalProjectId) {
			_setOriginalProjectId = true;

			_originalProjectId = _projectId;
		}

		_projectId = projectId;
	}

	public long getOriginalProjectId() {
		return _originalProjectId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ProjectFollowed.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProjectFollowed toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProjectFollowed)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectFollowedImpl projectFollowedImpl = new ProjectFollowedImpl();

		projectFollowedImpl.setProjectFollowedId(getProjectFollowedId());
		projectFollowedImpl.setCreateDate(getCreateDate());
		projectFollowedImpl.setPublikUserId(getPublikUserId());
		projectFollowedImpl.setProjectId(getProjectId());
		projectFollowedImpl.setGroupId(getGroupId());

		projectFollowedImpl.resetOriginalValues();

		return projectFollowedImpl;
	}

	@Override
	public int compareTo(ProjectFollowed projectFollowed) {
		long primaryKey = projectFollowed.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProjectFollowed)) {
			return false;
		}

		ProjectFollowed projectFollowed = (ProjectFollowed)obj;

		long primaryKey = projectFollowed.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProjectFollowedModelImpl projectFollowedModelImpl = this;

		projectFollowedModelImpl._originalPublikUserId = projectFollowedModelImpl._publikUserId;

		projectFollowedModelImpl._originalProjectId = projectFollowedModelImpl._projectId;

		projectFollowedModelImpl._setOriginalProjectId = false;

		projectFollowedModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProjectFollowed> toCacheModel() {
		ProjectFollowedCacheModel projectFollowedCacheModel = new ProjectFollowedCacheModel();

		projectFollowedCacheModel.projectFollowedId = getProjectFollowedId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			projectFollowedCacheModel.createDate = createDate.getTime();
		}
		else {
			projectFollowedCacheModel.createDate = Long.MIN_VALUE;
		}

		projectFollowedCacheModel.publikUserId = getPublikUserId();

		String publikUserId = projectFollowedCacheModel.publikUserId;

		if ((publikUserId != null) && (publikUserId.length() == 0)) {
			projectFollowedCacheModel.publikUserId = null;
		}

		projectFollowedCacheModel.projectId = getProjectId();

		projectFollowedCacheModel.groupId = getGroupId();

		return projectFollowedCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{projectFollowedId=");
		sb.append(getProjectFollowedId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", publikUserId=");
		sb.append(getPublikUserId());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.project.model.ProjectFollowed");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>projectFollowedId</column-name><column-value><![CDATA[");
		sb.append(getProjectFollowedId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publikUserId</column-name><column-value><![CDATA[");
		sb.append(getPublikUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProjectFollowed.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProjectFollowed.class
		};
	private long _projectFollowedId;
	private Date _createDate;
	private String _publikUserId;
	private String _originalPublikUserId;
	private long _projectId;
	private long _originalProjectId;
	private boolean _setOriginalProjectId;
	private long _groupId;
	private long _columnBitmask;
	private ProjectFollowed _escapedModel;
}