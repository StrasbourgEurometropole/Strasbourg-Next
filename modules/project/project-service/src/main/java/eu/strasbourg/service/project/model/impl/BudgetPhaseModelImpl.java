/**
 * SPDX-FileCopyrightText: (c) 2023 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package eu.strasbourg.service.project.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.project.model.BudgetPhase;
import eu.strasbourg.service.project.model.BudgetPhaseModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the BudgetPhase service. Represents a row in the &quot;project_BudgetPhase&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BudgetPhaseModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BudgetPhaseImpl}.
 * </p>
 *
 * @author Cedric Henry
 * @see BudgetPhaseImpl
 * @generated
 */
@JSON(strict = true)
public class BudgetPhaseModelImpl
	extends BaseModelImpl<BudgetPhase> implements BudgetPhaseModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a budget phase model instance should use the <code>BudgetPhase</code> interface instead.
	 */
	public static final String TABLE_NAME = "project_BudgetPhase";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"budgetPhaseId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"title", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"numberOfVote", Types.BIGINT}, {"isActive", Types.BOOLEAN},
		{"beginDate", Types.TIMESTAMP}, {"endDate", Types.TIMESTAMP},
		{"depositUrl", Types.VARCHAR}, {"beginVoteDate", Types.TIMESTAMP},
		{"endVoteDate", Types.TIMESTAMP}, {"voteUrl", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("budgetPhaseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numberOfVote", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isActive", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("beginDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("depositUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("beginVoteDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endVoteDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("voteUrl", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table project_BudgetPhase (uuid_ VARCHAR(75) null,budgetPhaseId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,title VARCHAR(75) null,description VARCHAR(75) null,numberOfVote LONG,isActive BOOLEAN,beginDate DATE null,endDate DATE null,depositUrl VARCHAR(200) null,beginVoteDate DATE null,endVoteDate DATE null,voteUrl VARCHAR(200) null)";

	public static final String TABLE_SQL_DROP =
		"drop table project_BudgetPhase";

	public static final String ORDER_BY_JPQL =
		" ORDER BY budgetPhase.beginDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY project_BudgetPhase.beginDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ISACTIVE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BEGINDATE_COLUMN_BITMASK = 16L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.project.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.project.model.BudgetPhase"));

	public BudgetPhaseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _budgetPhaseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBudgetPhaseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _budgetPhaseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BudgetPhase.class;
	}

	@Override
	public String getModelClassName() {
		return BudgetPhase.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BudgetPhase, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BudgetPhase, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BudgetPhase, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((BudgetPhase)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BudgetPhase, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BudgetPhase, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BudgetPhase)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BudgetPhase, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BudgetPhase, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<BudgetPhase, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<BudgetPhase, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<BudgetPhase, Object>>();

			attributeGetterFunctions.put("uuid", BudgetPhase::getUuid);
			attributeGetterFunctions.put(
				"budgetPhaseId", BudgetPhase::getBudgetPhaseId);
			attributeGetterFunctions.put("groupId", BudgetPhase::getGroupId);
			attributeGetterFunctions.put(
				"companyId", BudgetPhase::getCompanyId);
			attributeGetterFunctions.put("userId", BudgetPhase::getUserId);
			attributeGetterFunctions.put("userName", BudgetPhase::getUserName);
			attributeGetterFunctions.put(
				"createDate", BudgetPhase::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", BudgetPhase::getModifiedDate);
			attributeGetterFunctions.put("status", BudgetPhase::getStatus);
			attributeGetterFunctions.put(
				"statusByUserId", BudgetPhase::getStatusByUserId);
			attributeGetterFunctions.put(
				"statusByUserName", BudgetPhase::getStatusByUserName);
			attributeGetterFunctions.put(
				"statusDate", BudgetPhase::getStatusDate);
			attributeGetterFunctions.put("title", BudgetPhase::getTitle);
			attributeGetterFunctions.put(
				"description", BudgetPhase::getDescription);
			attributeGetterFunctions.put(
				"numberOfVote", BudgetPhase::getNumberOfVote);
			attributeGetterFunctions.put("isActive", BudgetPhase::getIsActive);
			attributeGetterFunctions.put(
				"beginDate", BudgetPhase::getBeginDate);
			attributeGetterFunctions.put("endDate", BudgetPhase::getEndDate);
			attributeGetterFunctions.put(
				"depositUrl", BudgetPhase::getDepositUrl);
			attributeGetterFunctions.put(
				"beginVoteDate", BudgetPhase::getBeginVoteDate);
			attributeGetterFunctions.put(
				"endVoteDate", BudgetPhase::getEndVoteDate);
			attributeGetterFunctions.put("voteUrl", BudgetPhase::getVoteUrl);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<BudgetPhase, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<BudgetPhase, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<BudgetPhase, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<BudgetPhase, String>)BudgetPhase::setUuid);
			attributeSetterBiConsumers.put(
				"budgetPhaseId",
				(BiConsumer<BudgetPhase, Long>)BudgetPhase::setBudgetPhaseId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<BudgetPhase, Long>)BudgetPhase::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<BudgetPhase, Long>)BudgetPhase::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<BudgetPhase, Long>)BudgetPhase::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<BudgetPhase, String>)BudgetPhase::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<BudgetPhase, Date>)BudgetPhase::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<BudgetPhase, Date>)BudgetPhase::setModifiedDate);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<BudgetPhase, Integer>)BudgetPhase::setStatus);
			attributeSetterBiConsumers.put(
				"statusByUserId",
				(BiConsumer<BudgetPhase, Long>)BudgetPhase::setStatusByUserId);
			attributeSetterBiConsumers.put(
				"statusByUserName",
				(BiConsumer<BudgetPhase, String>)
					BudgetPhase::setStatusByUserName);
			attributeSetterBiConsumers.put(
				"statusDate",
				(BiConsumer<BudgetPhase, Date>)BudgetPhase::setStatusDate);
			attributeSetterBiConsumers.put(
				"title",
				(BiConsumer<BudgetPhase, String>)BudgetPhase::setTitle);
			attributeSetterBiConsumers.put(
				"description",
				(BiConsumer<BudgetPhase, String>)BudgetPhase::setDescription);
			attributeSetterBiConsumers.put(
				"numberOfVote",
				(BiConsumer<BudgetPhase, Long>)BudgetPhase::setNumberOfVote);
			attributeSetterBiConsumers.put(
				"isActive",
				(BiConsumer<BudgetPhase, Boolean>)BudgetPhase::setIsActive);
			attributeSetterBiConsumers.put(
				"beginDate",
				(BiConsumer<BudgetPhase, Date>)BudgetPhase::setBeginDate);
			attributeSetterBiConsumers.put(
				"endDate",
				(BiConsumer<BudgetPhase, Date>)BudgetPhase::setEndDate);
			attributeSetterBiConsumers.put(
				"depositUrl",
				(BiConsumer<BudgetPhase, String>)BudgetPhase::setDepositUrl);
			attributeSetterBiConsumers.put(
				"beginVoteDate",
				(BiConsumer<BudgetPhase, Date>)BudgetPhase::setBeginVoteDate);
			attributeSetterBiConsumers.put(
				"endVoteDate",
				(BiConsumer<BudgetPhase, Date>)BudgetPhase::setEndVoteDate);
			attributeSetterBiConsumers.put(
				"voteUrl",
				(BiConsumer<BudgetPhase, String>)BudgetPhase::setVoteUrl);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getBudgetPhaseId() {
		return _budgetPhaseId;
	}

	@Override
	public void setBudgetPhaseId(long budgetPhaseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_budgetPhaseId = budgetPhaseId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public long getNumberOfVote() {
		return _numberOfVote;
	}

	@Override
	public void setNumberOfVote(long numberOfVote) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numberOfVote = numberOfVote;
	}

	@JSON
	@Override
	public boolean getIsActive() {
		return _isActive;
	}

	@JSON
	@Override
	public boolean isIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(boolean isActive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isActive = isActive;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalIsActive() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("isActive"));
	}

	@JSON
	@Override
	public Date getBeginDate() {
		return _beginDate;
	}

	@Override
	public void setBeginDate(Date beginDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_beginDate = beginDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	@JSON
	@Override
	public String getDepositUrl() {
		if (_depositUrl == null) {
			return "";
		}
		else {
			return _depositUrl;
		}
	}

	@Override
	public void setDepositUrl(String depositUrl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_depositUrl = depositUrl;
	}

	@JSON
	@Override
	public Date getBeginVoteDate() {
		return _beginVoteDate;
	}

	@Override
	public void setBeginVoteDate(Date beginVoteDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_beginVoteDate = beginVoteDate;
	}

	@JSON
	@Override
	public Date getEndVoteDate() {
		return _endVoteDate;
	}

	@Override
	public void setEndVoteDate(Date endVoteDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endVoteDate = endVoteDate;
	}

	@JSON
	@Override
	public String getVoteUrl() {
		if (_voteUrl == null) {
			return "";
		}
		else {
			return _voteUrl;
		}
	}

	@Override
	public void setVoteUrl(String voteUrl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_voteUrl = voteUrl;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(BudgetPhase.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), BudgetPhase.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BudgetPhase toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, BudgetPhase>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BudgetPhaseImpl budgetPhaseImpl = new BudgetPhaseImpl();

		budgetPhaseImpl.setUuid(getUuid());
		budgetPhaseImpl.setBudgetPhaseId(getBudgetPhaseId());
		budgetPhaseImpl.setGroupId(getGroupId());
		budgetPhaseImpl.setCompanyId(getCompanyId());
		budgetPhaseImpl.setUserId(getUserId());
		budgetPhaseImpl.setUserName(getUserName());
		budgetPhaseImpl.setCreateDate(getCreateDate());
		budgetPhaseImpl.setModifiedDate(getModifiedDate());
		budgetPhaseImpl.setStatus(getStatus());
		budgetPhaseImpl.setStatusByUserId(getStatusByUserId());
		budgetPhaseImpl.setStatusByUserName(getStatusByUserName());
		budgetPhaseImpl.setStatusDate(getStatusDate());
		budgetPhaseImpl.setTitle(getTitle());
		budgetPhaseImpl.setDescription(getDescription());
		budgetPhaseImpl.setNumberOfVote(getNumberOfVote());
		budgetPhaseImpl.setIsActive(isIsActive());
		budgetPhaseImpl.setBeginDate(getBeginDate());
		budgetPhaseImpl.setEndDate(getEndDate());
		budgetPhaseImpl.setDepositUrl(getDepositUrl());
		budgetPhaseImpl.setBeginVoteDate(getBeginVoteDate());
		budgetPhaseImpl.setEndVoteDate(getEndVoteDate());
		budgetPhaseImpl.setVoteUrl(getVoteUrl());

		budgetPhaseImpl.resetOriginalValues();

		return budgetPhaseImpl;
	}

	@Override
	public BudgetPhase cloneWithOriginalValues() {
		BudgetPhaseImpl budgetPhaseImpl = new BudgetPhaseImpl();

		budgetPhaseImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		budgetPhaseImpl.setBudgetPhaseId(
			this.<Long>getColumnOriginalValue("budgetPhaseId"));
		budgetPhaseImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		budgetPhaseImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		budgetPhaseImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		budgetPhaseImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		budgetPhaseImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		budgetPhaseImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		budgetPhaseImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		budgetPhaseImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		budgetPhaseImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		budgetPhaseImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));
		budgetPhaseImpl.setTitle(this.<String>getColumnOriginalValue("title"));
		budgetPhaseImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		budgetPhaseImpl.setNumberOfVote(
			this.<Long>getColumnOriginalValue("numberOfVote"));
		budgetPhaseImpl.setIsActive(
			this.<Boolean>getColumnOriginalValue("isActive"));
		budgetPhaseImpl.setBeginDate(
			this.<Date>getColumnOriginalValue("beginDate"));
		budgetPhaseImpl.setEndDate(
			this.<Date>getColumnOriginalValue("endDate"));
		budgetPhaseImpl.setDepositUrl(
			this.<String>getColumnOriginalValue("depositUrl"));
		budgetPhaseImpl.setBeginVoteDate(
			this.<Date>getColumnOriginalValue("beginVoteDate"));
		budgetPhaseImpl.setEndVoteDate(
			this.<Date>getColumnOriginalValue("endVoteDate"));
		budgetPhaseImpl.setVoteUrl(
			this.<String>getColumnOriginalValue("voteUrl"));

		return budgetPhaseImpl;
	}

	@Override
	public int compareTo(BudgetPhase budgetPhase) {
		int value = 0;

		value = DateUtil.compareTo(getBeginDate(), budgetPhase.getBeginDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof BudgetPhase)) {
			return false;
		}

		BudgetPhase budgetPhase = (BudgetPhase)object;

		long primaryKey = budgetPhase.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<BudgetPhase> toCacheModel() {
		BudgetPhaseCacheModel budgetPhaseCacheModel =
			new BudgetPhaseCacheModel();

		budgetPhaseCacheModel.uuid = getUuid();

		String uuid = budgetPhaseCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			budgetPhaseCacheModel.uuid = null;
		}

		budgetPhaseCacheModel.budgetPhaseId = getBudgetPhaseId();

		budgetPhaseCacheModel.groupId = getGroupId();

		budgetPhaseCacheModel.companyId = getCompanyId();

		budgetPhaseCacheModel.userId = getUserId();

		budgetPhaseCacheModel.userName = getUserName();

		String userName = budgetPhaseCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			budgetPhaseCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			budgetPhaseCacheModel.createDate = createDate.getTime();
		}
		else {
			budgetPhaseCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			budgetPhaseCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			budgetPhaseCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		budgetPhaseCacheModel.status = getStatus();

		budgetPhaseCacheModel.statusByUserId = getStatusByUserId();

		budgetPhaseCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = budgetPhaseCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			budgetPhaseCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			budgetPhaseCacheModel.statusDate = statusDate.getTime();
		}
		else {
			budgetPhaseCacheModel.statusDate = Long.MIN_VALUE;
		}

		budgetPhaseCacheModel.title = getTitle();

		String title = budgetPhaseCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			budgetPhaseCacheModel.title = null;
		}

		budgetPhaseCacheModel.description = getDescription();

		String description = budgetPhaseCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			budgetPhaseCacheModel.description = null;
		}

		budgetPhaseCacheModel.numberOfVote = getNumberOfVote();

		budgetPhaseCacheModel.isActive = isIsActive();

		Date beginDate = getBeginDate();

		if (beginDate != null) {
			budgetPhaseCacheModel.beginDate = beginDate.getTime();
		}
		else {
			budgetPhaseCacheModel.beginDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			budgetPhaseCacheModel.endDate = endDate.getTime();
		}
		else {
			budgetPhaseCacheModel.endDate = Long.MIN_VALUE;
		}

		budgetPhaseCacheModel.depositUrl = getDepositUrl();

		String depositUrl = budgetPhaseCacheModel.depositUrl;

		if ((depositUrl != null) && (depositUrl.length() == 0)) {
			budgetPhaseCacheModel.depositUrl = null;
		}

		Date beginVoteDate = getBeginVoteDate();

		if (beginVoteDate != null) {
			budgetPhaseCacheModel.beginVoteDate = beginVoteDate.getTime();
		}
		else {
			budgetPhaseCacheModel.beginVoteDate = Long.MIN_VALUE;
		}

		Date endVoteDate = getEndVoteDate();

		if (endVoteDate != null) {
			budgetPhaseCacheModel.endVoteDate = endVoteDate.getTime();
		}
		else {
			budgetPhaseCacheModel.endVoteDate = Long.MIN_VALUE;
		}

		budgetPhaseCacheModel.voteUrl = getVoteUrl();

		String voteUrl = budgetPhaseCacheModel.voteUrl;

		if ((voteUrl != null) && (voteUrl.length() == 0)) {
			budgetPhaseCacheModel.voteUrl = null;
		}

		return budgetPhaseCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BudgetPhase, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BudgetPhase, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BudgetPhase, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((BudgetPhase)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, BudgetPhase>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					BudgetPhase.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _budgetPhaseId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _title;
	private String _description;
	private long _numberOfVote;
	private boolean _isActive;
	private Date _beginDate;
	private Date _endDate;
	private String _depositUrl;
	private Date _beginVoteDate;
	private Date _endVoteDate;
	private String _voteUrl;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<BudgetPhase, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((BudgetPhase)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("budgetPhaseId", _budgetPhaseId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("numberOfVote", _numberOfVote);
		_columnOriginalValues.put("isActive", _isActive);
		_columnOriginalValues.put("beginDate", _beginDate);
		_columnOriginalValues.put("endDate", _endDate);
		_columnOriginalValues.put("depositUrl", _depositUrl);
		_columnOriginalValues.put("beginVoteDate", _beginVoteDate);
		_columnOriginalValues.put("endVoteDate", _endVoteDate);
		_columnOriginalValues.put("voteUrl", _voteUrl);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("budgetPhaseId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("status", 256L);

		columnBitmasks.put("statusByUserId", 512L);

		columnBitmasks.put("statusByUserName", 1024L);

		columnBitmasks.put("statusDate", 2048L);

		columnBitmasks.put("title", 4096L);

		columnBitmasks.put("description", 8192L);

		columnBitmasks.put("numberOfVote", 16384L);

		columnBitmasks.put("isActive", 32768L);

		columnBitmasks.put("beginDate", 65536L);

		columnBitmasks.put("endDate", 131072L);

		columnBitmasks.put("depositUrl", 262144L);

		columnBitmasks.put("beginVoteDate", 524288L);

		columnBitmasks.put("endVoteDate", 1048576L);

		columnBitmasks.put("voteUrl", 2097152L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private BudgetPhase _escapedModel;

}