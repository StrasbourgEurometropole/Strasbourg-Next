/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.project.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
import eu.strasbourg.service.project.model.PlacitPlace;
import eu.strasbourg.service.project.model.PlacitPlaceModel;

import java.io.Serializable;
import java.lang.reflect.InvocationHandler;
import java.sql.Blob;
import java.sql.Types;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PlacitPlace service. Represents a row in the &quot;project_PlacitPlace&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PlacitPlaceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlacitPlaceImpl}.
 * </p>
 *
 * @author Cedric Henry
 * @see PlacitPlaceImpl
 * @generated
 */
@JSON(strict = true)
public class PlacitPlaceModelImpl
	extends BaseModelImpl<PlacitPlace> implements PlacitPlaceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a placit place model instance should use the <code>PlacitPlace</code> interface instead.
	 */
	public static final String TABLE_NAME = "project_PlacitPlace";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"placitPlaceId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"placeName", Types.VARCHAR}, {"placeStreetNumber", Types.VARCHAR},
		{"placeStreetName", Types.VARCHAR}, {"placeZipCode", Types.VARCHAR},
		{"placeCityId", Types.BIGINT}, {"imageId", Types.BIGINT},
		{"projectId", Types.BIGINT}, {"participationId", Types.BIGINT},
		{"petitionId", Types.BIGINT}, {"budgetParticipatifId", Types.BIGINT},
		{"initiativeId", Types.BIGINT}, {"placeSIGId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placitPlaceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("placeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeStreetNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeStreetName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeZipCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeCityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("participationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("petitionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("budgetParticipatifId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("initiativeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("placeSIGId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table project_PlacitPlace (uuid_ VARCHAR(75) null,placitPlaceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,placeName STRING null,placeStreetNumber VARCHAR(75) null,placeStreetName VARCHAR(75) null,placeZipCode VARCHAR(75) null,placeCityId LONG,imageId LONG,projectId LONG,participationId LONG,petitionId LONG,budgetParticipatifId LONG,initiativeId LONG,placeSIGId VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table project_PlacitPlace";

	public static final String ORDER_BY_JPQL =
		" ORDER BY placitPlace.placitPlaceId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY project_PlacitPlace.placitPlaceId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BUDGETPARTICIPATIFID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long INITIATIVEID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PARTICIPATIONID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PETITIONID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PLACESIGID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROJECTID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PLACITPLACEID_COLUMN_BITMASK = 512L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.project.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.project.model.PlacitPlace"));

	public PlacitPlaceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _placitPlaceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPlacitPlaceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _placitPlaceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PlacitPlace.class;
	}

	@Override
	public String getModelClassName() {
		return PlacitPlace.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PlacitPlace, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PlacitPlace, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PlacitPlace, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PlacitPlace)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PlacitPlace, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PlacitPlace, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PlacitPlace)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PlacitPlace, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PlacitPlace, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<PlacitPlace, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PlacitPlace, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PlacitPlace, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<PlacitPlace, Object>>();
		Map<String, BiConsumer<PlacitPlace, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<PlacitPlace, ?>>();

		attributeGetterFunctions.put("uuid", PlacitPlace::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<PlacitPlace, String>)PlacitPlace::setUuid);
		attributeGetterFunctions.put(
			"placitPlaceId", PlacitPlace::getPlacitPlaceId);
		attributeSetterBiConsumers.put(
			"placitPlaceId",
			(BiConsumer<PlacitPlace, Long>)PlacitPlace::setPlacitPlaceId);
		attributeGetterFunctions.put("groupId", PlacitPlace::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<PlacitPlace, Long>)PlacitPlace::setGroupId);
		attributeGetterFunctions.put("companyId", PlacitPlace::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<PlacitPlace, Long>)PlacitPlace::setCompanyId);
		attributeGetterFunctions.put("userId", PlacitPlace::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<PlacitPlace, Long>)PlacitPlace::setUserId);
		attributeGetterFunctions.put("userName", PlacitPlace::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<PlacitPlace, String>)PlacitPlace::setUserName);
		attributeGetterFunctions.put("createDate", PlacitPlace::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<PlacitPlace, Date>)PlacitPlace::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", PlacitPlace::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<PlacitPlace, Date>)PlacitPlace::setModifiedDate);
		attributeGetterFunctions.put("placeName", PlacitPlace::getPlaceName);
		attributeSetterBiConsumers.put(
			"placeName",
			(BiConsumer<PlacitPlace, String>)PlacitPlace::setPlaceName);
		attributeGetterFunctions.put(
			"placeStreetNumber", PlacitPlace::getPlaceStreetNumber);
		attributeSetterBiConsumers.put(
			"placeStreetNumber",
			(BiConsumer<PlacitPlace, String>)PlacitPlace::setPlaceStreetNumber);
		attributeGetterFunctions.put(
			"placeStreetName", PlacitPlace::getPlaceStreetName);
		attributeSetterBiConsumers.put(
			"placeStreetName",
			(BiConsumer<PlacitPlace, String>)PlacitPlace::setPlaceStreetName);
		attributeGetterFunctions.put(
			"placeZipCode", PlacitPlace::getPlaceZipCode);
		attributeSetterBiConsumers.put(
			"placeZipCode",
			(BiConsumer<PlacitPlace, String>)PlacitPlace::setPlaceZipCode);
		attributeGetterFunctions.put(
			"placeCityId", PlacitPlace::getPlaceCityId);
		attributeSetterBiConsumers.put(
			"placeCityId",
			(BiConsumer<PlacitPlace, Long>)PlacitPlace::setPlaceCityId);
		attributeGetterFunctions.put("imageId", PlacitPlace::getImageId);
		attributeSetterBiConsumers.put(
			"imageId", (BiConsumer<PlacitPlace, Long>)PlacitPlace::setImageId);
		attributeGetterFunctions.put("projectId", PlacitPlace::getProjectId);
		attributeSetterBiConsumers.put(
			"projectId",
			(BiConsumer<PlacitPlace, Long>)PlacitPlace::setProjectId);
		attributeGetterFunctions.put(
			"participationId", PlacitPlace::getParticipationId);
		attributeSetterBiConsumers.put(
			"participationId",
			(BiConsumer<PlacitPlace, Long>)PlacitPlace::setParticipationId);
		attributeGetterFunctions.put("petitionId", PlacitPlace::getPetitionId);
		attributeSetterBiConsumers.put(
			"petitionId",
			(BiConsumer<PlacitPlace, Long>)PlacitPlace::setPetitionId);
		attributeGetterFunctions.put(
			"budgetParticipatifId", PlacitPlace::getBudgetParticipatifId);
		attributeSetterBiConsumers.put(
			"budgetParticipatifId",
			(BiConsumer<PlacitPlace, Long>)
				PlacitPlace::setBudgetParticipatifId);
		attributeGetterFunctions.put(
			"initiativeId", PlacitPlace::getInitiativeId);
		attributeSetterBiConsumers.put(
			"initiativeId",
			(BiConsumer<PlacitPlace, Long>)PlacitPlace::setInitiativeId);
		attributeGetterFunctions.put("placeSIGId", PlacitPlace::getPlaceSIGId);
		attributeSetterBiConsumers.put(
			"placeSIGId",
			(BiConsumer<PlacitPlace, String>)PlacitPlace::setPlaceSIGId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getPlacitPlaceId() {
		return _placitPlaceId;
	}

	@Override
	public void setPlacitPlaceId(long placitPlaceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placitPlaceId = placitPlaceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getPlaceName() {
		if (_placeName == null) {
			return "";
		}
		else {
			return _placeName;
		}
	}

	@Override
	public String getPlaceName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPlaceName(languageId);
	}

	@Override
	public String getPlaceName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPlaceName(languageId, useDefault);
	}

	@Override
	public String getPlaceName(String languageId) {
		return LocalizationUtil.getLocalization(getPlaceName(), languageId);
	}

	@Override
	public String getPlaceName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getPlaceName(), languageId, useDefault);
	}

	@Override
	public String getPlaceNameCurrentLanguageId() {
		return _placeNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPlaceNameCurrentValue() {
		Locale locale = getLocale(_placeNameCurrentLanguageId);

		return getPlaceName(locale);
	}

	@Override
	public Map<Locale, String> getPlaceNameMap() {
		return LocalizationUtil.getLocalizationMap(getPlaceName());
	}

	@Override
	public void setPlaceName(String placeName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeName = placeName;
	}

	@Override
	public void setPlaceName(String placeName, Locale locale) {
		setPlaceName(placeName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPlaceName(
		String placeName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(placeName)) {
			setPlaceName(
				LocalizationUtil.updateLocalization(
					getPlaceName(), "PlaceName", placeName, languageId,
					defaultLanguageId));
		}
		else {
			setPlaceName(
				LocalizationUtil.removeLocalization(
					getPlaceName(), "PlaceName", languageId));
		}
	}

	@Override
	public void setPlaceNameCurrentLanguageId(String languageId) {
		_placeNameCurrentLanguageId = languageId;
	}

	@Override
	public void setPlaceNameMap(Map<Locale, String> placeNameMap) {
		setPlaceNameMap(placeNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPlaceNameMap(
		Map<Locale, String> placeNameMap, Locale defaultLocale) {

		if (placeNameMap == null) {
			return;
		}

		setPlaceName(
			LocalizationUtil.updateLocalization(
				placeNameMap, getPlaceName(), "PlaceName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPlaceStreetNumber() {
		if (_placeStreetNumber == null) {
			return "";
		}
		else {
			return _placeStreetNumber;
		}
	}

	@Override
	public void setPlaceStreetNumber(String placeStreetNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeStreetNumber = placeStreetNumber;
	}

	@JSON
	@Override
	public String getPlaceStreetName() {
		if (_placeStreetName == null) {
			return "";
		}
		else {
			return _placeStreetName;
		}
	}

	@Override
	public void setPlaceStreetName(String placeStreetName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeStreetName = placeStreetName;
	}

	@JSON
	@Override
	public String getPlaceZipCode() {
		if (_placeZipCode == null) {
			return "";
		}
		else {
			return _placeZipCode;
		}
	}

	@Override
	public void setPlaceZipCode(String placeZipCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeZipCode = placeZipCode;
	}

	@JSON
	@Override
	public long getPlaceCityId() {
		return _placeCityId;
	}

	@Override
	public void setPlaceCityId(long placeCityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeCityId = placeCityId;
	}

	@JSON
	@Override
	public long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(long imageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_imageId = imageId;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_projectId = projectId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProjectId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("projectId"));
	}

	@JSON
	@Override
	public long getParticipationId() {
		return _participationId;
	}

	@Override
	public void setParticipationId(long participationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_participationId = participationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalParticipationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("participationId"));
	}

	@JSON
	@Override
	public long getPetitionId() {
		return _petitionId;
	}

	@Override
	public void setPetitionId(long petitionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_petitionId = petitionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPetitionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("petitionId"));
	}

	@JSON
	@Override
	public long getBudgetParticipatifId() {
		return _budgetParticipatifId;
	}

	@Override
	public void setBudgetParticipatifId(long budgetParticipatifId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_budgetParticipatifId = budgetParticipatifId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalBudgetParticipatifId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("budgetParticipatifId"));
	}

	@JSON
	@Override
	public long getInitiativeId() {
		return _initiativeId;
	}

	@Override
	public void setInitiativeId(long initiativeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_initiativeId = initiativeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalInitiativeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("initiativeId"));
	}

	@JSON
	@Override
	public String getPlaceSIGId() {
		if (_placeSIGId == null) {
			return "";
		}
		else {
			return _placeSIGId;
		}
	}

	@Override
	public void setPlaceSIGId(String placeSIGId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_placeSIGId = placeSIGId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPlaceSIGId() {
		return getColumnOriginalValue("placeSIGId");
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(PlacitPlace.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PlacitPlace.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> placeNameMap = getPlaceNameMap();

		for (Map.Entry<Locale, String> entry : placeNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getPlaceName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			PlacitPlace.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String placeName = getPlaceName(defaultLocale);

		if (Validator.isNull(placeName)) {
			setPlaceName(getPlaceName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPlaceName(
				getPlaceName(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public PlacitPlace toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PlacitPlace>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PlacitPlaceImpl placitPlaceImpl = new PlacitPlaceImpl();

		placitPlaceImpl.setUuid(getUuid());
		placitPlaceImpl.setPlacitPlaceId(getPlacitPlaceId());
		placitPlaceImpl.setGroupId(getGroupId());
		placitPlaceImpl.setCompanyId(getCompanyId());
		placitPlaceImpl.setUserId(getUserId());
		placitPlaceImpl.setUserName(getUserName());
		placitPlaceImpl.setCreateDate(getCreateDate());
		placitPlaceImpl.setModifiedDate(getModifiedDate());
		placitPlaceImpl.setPlaceName(getPlaceName());
		placitPlaceImpl.setPlaceStreetNumber(getPlaceStreetNumber());
		placitPlaceImpl.setPlaceStreetName(getPlaceStreetName());
		placitPlaceImpl.setPlaceZipCode(getPlaceZipCode());
		placitPlaceImpl.setPlaceCityId(getPlaceCityId());
		placitPlaceImpl.setImageId(getImageId());
		placitPlaceImpl.setProjectId(getProjectId());
		placitPlaceImpl.setParticipationId(getParticipationId());
		placitPlaceImpl.setPetitionId(getPetitionId());
		placitPlaceImpl.setBudgetParticipatifId(getBudgetParticipatifId());
		placitPlaceImpl.setInitiativeId(getInitiativeId());
		placitPlaceImpl.setPlaceSIGId(getPlaceSIGId());

		placitPlaceImpl.resetOriginalValues();

		return placitPlaceImpl;
	}

	@Override
	public PlacitPlace cloneWithOriginalValues() {
		PlacitPlaceImpl placitPlaceImpl = new PlacitPlaceImpl();

		placitPlaceImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		placitPlaceImpl.setPlacitPlaceId(
			this.<Long>getColumnOriginalValue("placitPlaceId"));
		placitPlaceImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		placitPlaceImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		placitPlaceImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		placitPlaceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		placitPlaceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		placitPlaceImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		placitPlaceImpl.setPlaceName(
			this.<String>getColumnOriginalValue("placeName"));
		placitPlaceImpl.setPlaceStreetNumber(
			this.<String>getColumnOriginalValue("placeStreetNumber"));
		placitPlaceImpl.setPlaceStreetName(
			this.<String>getColumnOriginalValue("placeStreetName"));
		placitPlaceImpl.setPlaceZipCode(
			this.<String>getColumnOriginalValue("placeZipCode"));
		placitPlaceImpl.setPlaceCityId(
			this.<Long>getColumnOriginalValue("placeCityId"));
		placitPlaceImpl.setImageId(
			this.<Long>getColumnOriginalValue("imageId"));
		placitPlaceImpl.setProjectId(
			this.<Long>getColumnOriginalValue("projectId"));
		placitPlaceImpl.setParticipationId(
			this.<Long>getColumnOriginalValue("participationId"));
		placitPlaceImpl.setPetitionId(
			this.<Long>getColumnOriginalValue("petitionId"));
		placitPlaceImpl.setBudgetParticipatifId(
			this.<Long>getColumnOriginalValue("budgetParticipatifId"));
		placitPlaceImpl.setInitiativeId(
			this.<Long>getColumnOriginalValue("initiativeId"));
		placitPlaceImpl.setPlaceSIGId(
			this.<String>getColumnOriginalValue("placeSIGId"));

		return placitPlaceImpl;
	}

	@Override
	public int compareTo(PlacitPlace placitPlace) {
		long primaryKey = placitPlace.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PlacitPlace)) {
			return false;
		}

		PlacitPlace placitPlace = (PlacitPlace)object;

		long primaryKey = placitPlace.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PlacitPlace> toCacheModel() {
		PlacitPlaceCacheModel placitPlaceCacheModel =
			new PlacitPlaceCacheModel();

		placitPlaceCacheModel.uuid = getUuid();

		String uuid = placitPlaceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			placitPlaceCacheModel.uuid = null;
		}

		placitPlaceCacheModel.placitPlaceId = getPlacitPlaceId();

		placitPlaceCacheModel.groupId = getGroupId();

		placitPlaceCacheModel.companyId = getCompanyId();

		placitPlaceCacheModel.userId = getUserId();

		placitPlaceCacheModel.userName = getUserName();

		String userName = placitPlaceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			placitPlaceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			placitPlaceCacheModel.createDate = createDate.getTime();
		}
		else {
			placitPlaceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			placitPlaceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			placitPlaceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		placitPlaceCacheModel.placeName = getPlaceName();

		String placeName = placitPlaceCacheModel.placeName;

		if ((placeName != null) && (placeName.length() == 0)) {
			placitPlaceCacheModel.placeName = null;
		}

		placitPlaceCacheModel.placeStreetNumber = getPlaceStreetNumber();

		String placeStreetNumber = placitPlaceCacheModel.placeStreetNumber;

		if ((placeStreetNumber != null) && (placeStreetNumber.length() == 0)) {
			placitPlaceCacheModel.placeStreetNumber = null;
		}

		placitPlaceCacheModel.placeStreetName = getPlaceStreetName();

		String placeStreetName = placitPlaceCacheModel.placeStreetName;

		if ((placeStreetName != null) && (placeStreetName.length() == 0)) {
			placitPlaceCacheModel.placeStreetName = null;
		}

		placitPlaceCacheModel.placeZipCode = getPlaceZipCode();

		String placeZipCode = placitPlaceCacheModel.placeZipCode;

		if ((placeZipCode != null) && (placeZipCode.length() == 0)) {
			placitPlaceCacheModel.placeZipCode = null;
		}

		placitPlaceCacheModel.placeCityId = getPlaceCityId();

		placitPlaceCacheModel.imageId = getImageId();

		placitPlaceCacheModel.projectId = getProjectId();

		placitPlaceCacheModel.participationId = getParticipationId();

		placitPlaceCacheModel.petitionId = getPetitionId();

		placitPlaceCacheModel.budgetParticipatifId = getBudgetParticipatifId();

		placitPlaceCacheModel.initiativeId = getInitiativeId();

		placitPlaceCacheModel.placeSIGId = getPlaceSIGId();

		String placeSIGId = placitPlaceCacheModel.placeSIGId;

		if ((placeSIGId != null) && (placeSIGId.length() == 0)) {
			placitPlaceCacheModel.placeSIGId = null;
		}

		return placitPlaceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PlacitPlace, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PlacitPlace, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PlacitPlace, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((PlacitPlace)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PlacitPlace>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					PlacitPlace.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _placitPlaceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _placeName;
	private String _placeNameCurrentLanguageId;
	private String _placeStreetNumber;
	private String _placeStreetName;
	private String _placeZipCode;
	private long _placeCityId;
	private long _imageId;
	private long _projectId;
	private long _participationId;
	private long _petitionId;
	private long _budgetParticipatifId;
	private long _initiativeId;
	private String _placeSIGId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<PlacitPlace, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PlacitPlace)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("placitPlaceId", _placitPlaceId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("placeName", _placeName);
		_columnOriginalValues.put("placeStreetNumber", _placeStreetNumber);
		_columnOriginalValues.put("placeStreetName", _placeStreetName);
		_columnOriginalValues.put("placeZipCode", _placeZipCode);
		_columnOriginalValues.put("placeCityId", _placeCityId);
		_columnOriginalValues.put("imageId", _imageId);
		_columnOriginalValues.put("projectId", _projectId);
		_columnOriginalValues.put("participationId", _participationId);
		_columnOriginalValues.put("petitionId", _petitionId);
		_columnOriginalValues.put(
			"budgetParticipatifId", _budgetParticipatifId);
		_columnOriginalValues.put("initiativeId", _initiativeId);
		_columnOriginalValues.put("placeSIGId", _placeSIGId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("placitPlaceId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("placeName", 256L);

		columnBitmasks.put("placeStreetNumber", 512L);

		columnBitmasks.put("placeStreetName", 1024L);

		columnBitmasks.put("placeZipCode", 2048L);

		columnBitmasks.put("placeCityId", 4096L);

		columnBitmasks.put("imageId", 8192L);

		columnBitmasks.put("projectId", 16384L);

		columnBitmasks.put("participationId", 32768L);

		columnBitmasks.put("petitionId", 65536L);

		columnBitmasks.put("budgetParticipatifId", 131072L);

		columnBitmasks.put("initiativeId", 262144L);

		columnBitmasks.put("placeSIGId", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PlacitPlace _escapedModel;

}