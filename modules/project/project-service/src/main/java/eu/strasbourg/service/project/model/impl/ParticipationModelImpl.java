/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.project.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.project.model.Participation;
import eu.strasbourg.service.project.model.ParticipationModel;
import eu.strasbourg.service.project.model.ParticipationSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Participation service. Represents a row in the &quot;project_Participation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ParticipationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ParticipationImpl}.
 * </p>
 *
 * @author Cedric Henry
 * @see ParticipationImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ParticipationModelImpl
	extends BaseModelImpl<Participation> implements ParticipationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a participation model instance should use the <code>Participation</code> interface instead.
	 */
	public static final String TABLE_NAME = "project_Participation";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"participationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"title", Types.VARCHAR}, {"contactName", Types.VARCHAR},
		{"contactLine1", Types.VARCHAR}, {"contactLine2", Types.VARCHAR},
		{"contactPhoneNumber", Types.VARCHAR}, {"videoUrl", Types.VARCHAR},
		{"externalImageURL", Types.VARCHAR},
		{"externalImageCopyright", Types.VARCHAR},
		{"mediaChoice", Types.BOOLEAN}, {"descriptionChapeau", Types.VARCHAR},
		{"descriptionBody", Types.CLOB}, {"consultationPlacesBody", Types.CLOB},
		{"imageId", Types.BIGINT}, {"filesIds", Types.VARCHAR},
		{"eventsIds", Types.VARCHAR}, {"publicationDate", Types.TIMESTAMP},
		{"expirationDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("participationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactLine1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactLine2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactPhoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("videoUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalImageURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalImageCopyright", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mediaChoice", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("descriptionChapeau", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descriptionBody", Types.CLOB);
		TABLE_COLUMNS_MAP.put("consultationPlacesBody", Types.CLOB);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("filesIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventsIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publicationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expirationDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table project_Participation (uuid_ VARCHAR(75) null,participationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,title VARCHAR(400) null,contactName VARCHAR(75) null,contactLine1 VARCHAR(400) null,contactLine2 VARCHAR(400) null,contactPhoneNumber VARCHAR(75) null,videoUrl VARCHAR(400) null,externalImageURL VARCHAR(400) null,externalImageCopyright VARCHAR(400) null,mediaChoice BOOLEAN,descriptionChapeau VARCHAR(400) null,descriptionBody TEXT null,consultationPlacesBody TEXT null,imageId LONG,filesIds VARCHAR(400) null,eventsIds VARCHAR(75) null,publicationDate DATE null,expirationDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table project_Participation";

	public static final String ORDER_BY_JPQL =
		" ORDER BY participation.title ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY project_Participation.title ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.project.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.project.model.Participation"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.project.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.project.model.Participation"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.project.service.util.PropsUtil.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.project.model.Participation"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long STATUS_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long TITLE_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Participation toModel(ParticipationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Participation model = new ParticipationImpl();

		model.setUuid(soapModel.getUuid());
		model.setParticipationId(soapModel.getParticipationId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setTitle(soapModel.getTitle());
		model.setContactName(soapModel.getContactName());
		model.setContactLine1(soapModel.getContactLine1());
		model.setContactLine2(soapModel.getContactLine2());
		model.setContactPhoneNumber(soapModel.getContactPhoneNumber());
		model.setVideoUrl(soapModel.getVideoUrl());
		model.setExternalImageURL(soapModel.getExternalImageURL());
		model.setExternalImageCopyright(soapModel.getExternalImageCopyright());
		model.setMediaChoice(soapModel.isMediaChoice());
		model.setDescriptionChapeau(soapModel.getDescriptionChapeau());
		model.setDescriptionBody(soapModel.getDescriptionBody());
		model.setConsultationPlacesBody(soapModel.getConsultationPlacesBody());
		model.setImageId(soapModel.getImageId());
		model.setFilesIds(soapModel.getFilesIds());
		model.setEventsIds(soapModel.getEventsIds());
		model.setPublicationDate(soapModel.getPublicationDate());
		model.setExpirationDate(soapModel.getExpirationDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Participation> toModels(ParticipationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Participation> models = new ArrayList<Participation>(
			soapModels.length);

		for (ParticipationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.project.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.project.model.Participation"));

	public ParticipationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _participationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setParticipationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _participationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Participation.class;
	}

	@Override
	public String getModelClassName() {
		return Participation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Participation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Participation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Participation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Participation)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Participation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Participation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Participation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Participation, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Participation, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Participation>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Participation.class.getClassLoader(), Participation.class,
			ModelWrapper.class);

		try {
			Constructor<Participation> constructor =
				(Constructor<Participation>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Participation, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Participation, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Participation, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Participation, Object>>();
		Map<String, BiConsumer<Participation, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Participation, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(Participation participation, Object uuid) {
					participation.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"participationId",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getParticipationId();
				}

			});
		attributeSetterBiConsumers.put(
			"participationId",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object participationId) {

					participation.setParticipationId((Long)participationId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object groupId) {

					participation.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object companyId) {

					participation.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(Participation participation, Object userId) {
					participation.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object userName) {

					participation.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object createDate) {

					participation.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object modifiedDate) {

					participation.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(Participation participation, Object status) {
					participation.setStatus((Integer)status);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserId",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getStatusByUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserId",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object statusByUserId) {

					participation.setStatusByUserId((Long)statusByUserId);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserName",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getStatusByUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserName",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object statusByUserName) {

					participation.setStatusByUserName((String)statusByUserName);
				}

			});
		attributeGetterFunctions.put(
			"statusDate",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getStatusDate();
				}

			});
		attributeSetterBiConsumers.put(
			"statusDate",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object statusDate) {

					participation.setStatusDate((Date)statusDate);
				}

			});
		attributeGetterFunctions.put(
			"title",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getTitle();
				}

			});
		attributeSetterBiConsumers.put(
			"title",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(Participation participation, Object title) {
					participation.setTitle((String)title);
				}

			});
		attributeGetterFunctions.put(
			"contactName",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getContactName();
				}

			});
		attributeSetterBiConsumers.put(
			"contactName",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object contactName) {

					participation.setContactName((String)contactName);
				}

			});
		attributeGetterFunctions.put(
			"contactLine1",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getContactLine1();
				}

			});
		attributeSetterBiConsumers.put(
			"contactLine1",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object contactLine1) {

					participation.setContactLine1((String)contactLine1);
				}

			});
		attributeGetterFunctions.put(
			"contactLine2",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getContactLine2();
				}

			});
		attributeSetterBiConsumers.put(
			"contactLine2",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object contactLine2) {

					participation.setContactLine2((String)contactLine2);
				}

			});
		attributeGetterFunctions.put(
			"contactPhoneNumber",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getContactPhoneNumber();
				}

			});
		attributeSetterBiConsumers.put(
			"contactPhoneNumber",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object contactPhoneNumber) {

					participation.setContactPhoneNumber(
						(String)contactPhoneNumber);
				}

			});
		attributeGetterFunctions.put(
			"videoUrl",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getVideoUrl();
				}

			});
		attributeSetterBiConsumers.put(
			"videoUrl",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object videoUrl) {

					participation.setVideoUrl((String)videoUrl);
				}

			});
		attributeGetterFunctions.put(
			"externalImageURL",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getExternalImageURL();
				}

			});
		attributeSetterBiConsumers.put(
			"externalImageURL",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object externalImageURL) {

					participation.setExternalImageURL((String)externalImageURL);
				}

			});
		attributeGetterFunctions.put(
			"externalImageCopyright",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getExternalImageCopyright();
				}

			});
		attributeSetterBiConsumers.put(
			"externalImageCopyright",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation,
					Object externalImageCopyright) {

					participation.setExternalImageCopyright(
						(String)externalImageCopyright);
				}

			});
		attributeGetterFunctions.put(
			"mediaChoice",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getMediaChoice();
				}

			});
		attributeSetterBiConsumers.put(
			"mediaChoice",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object mediaChoice) {

					participation.setMediaChoice((Boolean)mediaChoice);
				}

			});
		attributeGetterFunctions.put(
			"descriptionChapeau",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getDescriptionChapeau();
				}

			});
		attributeSetterBiConsumers.put(
			"descriptionChapeau",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object descriptionChapeau) {

					participation.setDescriptionChapeau(
						(String)descriptionChapeau);
				}

			});
		attributeGetterFunctions.put(
			"descriptionBody",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getDescriptionBody();
				}

			});
		attributeSetterBiConsumers.put(
			"descriptionBody",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object descriptionBody) {

					participation.setDescriptionBody((String)descriptionBody);
				}

			});
		attributeGetterFunctions.put(
			"consultationPlacesBody",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getConsultationPlacesBody();
				}

			});
		attributeSetterBiConsumers.put(
			"consultationPlacesBody",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation,
					Object consultationPlacesBody) {

					participation.setConsultationPlacesBody(
						(String)consultationPlacesBody);
				}

			});
		attributeGetterFunctions.put(
			"imageId",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getImageId();
				}

			});
		attributeSetterBiConsumers.put(
			"imageId",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object imageId) {

					participation.setImageId((Long)imageId);
				}

			});
		attributeGetterFunctions.put(
			"filesIds",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getFilesIds();
				}

			});
		attributeSetterBiConsumers.put(
			"filesIds",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object filesIds) {

					participation.setFilesIds((String)filesIds);
				}

			});
		attributeGetterFunctions.put(
			"eventsIds",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getEventsIds();
				}

			});
		attributeSetterBiConsumers.put(
			"eventsIds",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object eventsIds) {

					participation.setEventsIds((String)eventsIds);
				}

			});
		attributeGetterFunctions.put(
			"publicationDate",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getPublicationDate();
				}

			});
		attributeSetterBiConsumers.put(
			"publicationDate",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object publicationDate) {

					participation.setPublicationDate((Date)publicationDate);
				}

			});
		attributeGetterFunctions.put(
			"expirationDate",
			new Function<Participation, Object>() {

				@Override
				public Object apply(Participation participation) {
					return participation.getExpirationDate();
				}

			});
		attributeSetterBiConsumers.put(
			"expirationDate",
			new BiConsumer<Participation, Object>() {

				@Override
				public void accept(
					Participation participation, Object expirationDate) {

					participation.setExpirationDate((Date)expirationDate);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getParticipationId() {
		return _participationId;
	}

	@Override
	public void setParticipationId(long participationId) {
		_participationId = participationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask = -1L;

		_title = title;
	}

	@JSON
	@Override
	public String getContactName() {
		if (_contactName == null) {
			return "";
		}
		else {
			return _contactName;
		}
	}

	@Override
	public void setContactName(String contactName) {
		_contactName = contactName;
	}

	@JSON
	@Override
	public String getContactLine1() {
		if (_contactLine1 == null) {
			return "";
		}
		else {
			return _contactLine1;
		}
	}

	@Override
	public void setContactLine1(String contactLine1) {
		_contactLine1 = contactLine1;
	}

	@JSON
	@Override
	public String getContactLine2() {
		if (_contactLine2 == null) {
			return "";
		}
		else {
			return _contactLine2;
		}
	}

	@Override
	public void setContactLine2(String contactLine2) {
		_contactLine2 = contactLine2;
	}

	@JSON
	@Override
	public String getContactPhoneNumber() {
		if (_contactPhoneNumber == null) {
			return "";
		}
		else {
			return _contactPhoneNumber;
		}
	}

	@Override
	public void setContactPhoneNumber(String contactPhoneNumber) {
		_contactPhoneNumber = contactPhoneNumber;
	}

	@JSON
	@Override
	public String getVideoUrl() {
		if (_videoUrl == null) {
			return "";
		}
		else {
			return _videoUrl;
		}
	}

	@Override
	public void setVideoUrl(String videoUrl) {
		_videoUrl = videoUrl;
	}

	@JSON
	@Override
	public String getExternalImageURL() {
		if (_externalImageURL == null) {
			return "";
		}
		else {
			return _externalImageURL;
		}
	}

	@Override
	public void setExternalImageURL(String externalImageURL) {
		_externalImageURL = externalImageURL;
	}

	@JSON
	@Override
	public String getExternalImageCopyright() {
		if (_externalImageCopyright == null) {
			return "";
		}
		else {
			return _externalImageCopyright;
		}
	}

	@Override
	public void setExternalImageCopyright(String externalImageCopyright) {
		_externalImageCopyright = externalImageCopyright;
	}

	@JSON
	@Override
	public boolean getMediaChoice() {
		return _mediaChoice;
	}

	@JSON
	@Override
	public boolean isMediaChoice() {
		return _mediaChoice;
	}

	@Override
	public void setMediaChoice(boolean mediaChoice) {
		_mediaChoice = mediaChoice;
	}

	@JSON
	@Override
	public String getDescriptionChapeau() {
		if (_descriptionChapeau == null) {
			return "";
		}
		else {
			return _descriptionChapeau;
		}
	}

	@Override
	public void setDescriptionChapeau(String descriptionChapeau) {
		_descriptionChapeau = descriptionChapeau;
	}

	@JSON
	@Override
	public String getDescriptionBody() {
		if (_descriptionBody == null) {
			return "";
		}
		else {
			return _descriptionBody;
		}
	}

	@Override
	public void setDescriptionBody(String descriptionBody) {
		_descriptionBody = descriptionBody;
	}

	@JSON
	@Override
	public String getConsultationPlacesBody() {
		if (_consultationPlacesBody == null) {
			return "";
		}
		else {
			return _consultationPlacesBody;
		}
	}

	@Override
	public void setConsultationPlacesBody(String consultationPlacesBody) {
		_consultationPlacesBody = consultationPlacesBody;
	}

	@JSON
	@Override
	public long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(long imageId) {
		_imageId = imageId;
	}

	@JSON
	@Override
	public String getFilesIds() {
		if (_filesIds == null) {
			return "";
		}
		else {
			return _filesIds;
		}
	}

	@Override
	public void setFilesIds(String filesIds) {
		_filesIds = filesIds;
	}

	@JSON
	@Override
	public String getEventsIds() {
		if (_eventsIds == null) {
			return "";
		}
		else {
			return _eventsIds;
		}
	}

	@Override
	public void setEventsIds(String eventsIds) {
		_eventsIds = eventsIds;
	}

	@JSON
	@Override
	public Date getPublicationDate() {
		return _publicationDate;
	}

	@Override
	public void setPublicationDate(Date publicationDate) {
		_publicationDate = publicationDate;
	}

	@JSON
	@Override
	public Date getExpirationDate() {
		return _expirationDate;
	}

	@Override
	public void setExpirationDate(Date expirationDate) {
		_expirationDate = expirationDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Participation.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Participation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Participation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ParticipationImpl participationImpl = new ParticipationImpl();

		participationImpl.setUuid(getUuid());
		participationImpl.setParticipationId(getParticipationId());
		participationImpl.setGroupId(getGroupId());
		participationImpl.setCompanyId(getCompanyId());
		participationImpl.setUserId(getUserId());
		participationImpl.setUserName(getUserName());
		participationImpl.setCreateDate(getCreateDate());
		participationImpl.setModifiedDate(getModifiedDate());
		participationImpl.setStatus(getStatus());
		participationImpl.setStatusByUserId(getStatusByUserId());
		participationImpl.setStatusByUserName(getStatusByUserName());
		participationImpl.setStatusDate(getStatusDate());
		participationImpl.setTitle(getTitle());
		participationImpl.setContactName(getContactName());
		participationImpl.setContactLine1(getContactLine1());
		participationImpl.setContactLine2(getContactLine2());
		participationImpl.setContactPhoneNumber(getContactPhoneNumber());
		participationImpl.setVideoUrl(getVideoUrl());
		participationImpl.setExternalImageURL(getExternalImageURL());
		participationImpl.setExternalImageCopyright(
			getExternalImageCopyright());
		participationImpl.setMediaChoice(isMediaChoice());
		participationImpl.setDescriptionChapeau(getDescriptionChapeau());
		participationImpl.setDescriptionBody(getDescriptionBody());
		participationImpl.setConsultationPlacesBody(
			getConsultationPlacesBody());
		participationImpl.setImageId(getImageId());
		participationImpl.setFilesIds(getFilesIds());
		participationImpl.setEventsIds(getEventsIds());
		participationImpl.setPublicationDate(getPublicationDate());
		participationImpl.setExpirationDate(getExpirationDate());

		participationImpl.resetOriginalValues();

		return participationImpl;
	}

	@Override
	public int compareTo(Participation participation) {
		int value = 0;

		value = getTitle().compareTo(participation.getTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Participation)) {
			return false;
		}

		Participation participation = (Participation)obj;

		long primaryKey = participation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ParticipationModelImpl participationModelImpl = this;

		participationModelImpl._originalUuid = participationModelImpl._uuid;

		participationModelImpl._originalGroupId =
			participationModelImpl._groupId;

		participationModelImpl._setOriginalGroupId = false;

		participationModelImpl._originalCompanyId =
			participationModelImpl._companyId;

		participationModelImpl._setOriginalCompanyId = false;

		participationModelImpl._setModifiedDate = false;

		participationModelImpl._originalStatus = participationModelImpl._status;

		participationModelImpl._setOriginalStatus = false;

		participationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Participation> toCacheModel() {
		ParticipationCacheModel participationCacheModel =
			new ParticipationCacheModel();

		participationCacheModel.uuid = getUuid();

		String uuid = participationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			participationCacheModel.uuid = null;
		}

		participationCacheModel.participationId = getParticipationId();

		participationCacheModel.groupId = getGroupId();

		participationCacheModel.companyId = getCompanyId();

		participationCacheModel.userId = getUserId();

		participationCacheModel.userName = getUserName();

		String userName = participationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			participationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			participationCacheModel.createDate = createDate.getTime();
		}
		else {
			participationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			participationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			participationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		participationCacheModel.status = getStatus();

		participationCacheModel.statusByUserId = getStatusByUserId();

		participationCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = participationCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			participationCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			participationCacheModel.statusDate = statusDate.getTime();
		}
		else {
			participationCacheModel.statusDate = Long.MIN_VALUE;
		}

		participationCacheModel.title = getTitle();

		String title = participationCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			participationCacheModel.title = null;
		}

		participationCacheModel.contactName = getContactName();

		String contactName = participationCacheModel.contactName;

		if ((contactName != null) && (contactName.length() == 0)) {
			participationCacheModel.contactName = null;
		}

		participationCacheModel.contactLine1 = getContactLine1();

		String contactLine1 = participationCacheModel.contactLine1;

		if ((contactLine1 != null) && (contactLine1.length() == 0)) {
			participationCacheModel.contactLine1 = null;
		}

		participationCacheModel.contactLine2 = getContactLine2();

		String contactLine2 = participationCacheModel.contactLine2;

		if ((contactLine2 != null) && (contactLine2.length() == 0)) {
			participationCacheModel.contactLine2 = null;
		}

		participationCacheModel.contactPhoneNumber = getContactPhoneNumber();

		String contactPhoneNumber = participationCacheModel.contactPhoneNumber;

		if ((contactPhoneNumber != null) &&
			(contactPhoneNumber.length() == 0)) {

			participationCacheModel.contactPhoneNumber = null;
		}

		participationCacheModel.videoUrl = getVideoUrl();

		String videoUrl = participationCacheModel.videoUrl;

		if ((videoUrl != null) && (videoUrl.length() == 0)) {
			participationCacheModel.videoUrl = null;
		}

		participationCacheModel.externalImageURL = getExternalImageURL();

		String externalImageURL = participationCacheModel.externalImageURL;

		if ((externalImageURL != null) && (externalImageURL.length() == 0)) {
			participationCacheModel.externalImageURL = null;
		}

		participationCacheModel.externalImageCopyright =
			getExternalImageCopyright();

		String externalImageCopyright =
			participationCacheModel.externalImageCopyright;

		if ((externalImageCopyright != null) &&
			(externalImageCopyright.length() == 0)) {

			participationCacheModel.externalImageCopyright = null;
		}

		participationCacheModel.mediaChoice = isMediaChoice();

		participationCacheModel.descriptionChapeau = getDescriptionChapeau();

		String descriptionChapeau = participationCacheModel.descriptionChapeau;

		if ((descriptionChapeau != null) &&
			(descriptionChapeau.length() == 0)) {

			participationCacheModel.descriptionChapeau = null;
		}

		participationCacheModel.descriptionBody = getDescriptionBody();

		String descriptionBody = participationCacheModel.descriptionBody;

		if ((descriptionBody != null) && (descriptionBody.length() == 0)) {
			participationCacheModel.descriptionBody = null;
		}

		participationCacheModel.consultationPlacesBody =
			getConsultationPlacesBody();

		String consultationPlacesBody =
			participationCacheModel.consultationPlacesBody;

		if ((consultationPlacesBody != null) &&
			(consultationPlacesBody.length() == 0)) {

			participationCacheModel.consultationPlacesBody = null;
		}

		participationCacheModel.imageId = getImageId();

		participationCacheModel.filesIds = getFilesIds();

		String filesIds = participationCacheModel.filesIds;

		if ((filesIds != null) && (filesIds.length() == 0)) {
			participationCacheModel.filesIds = null;
		}

		participationCacheModel.eventsIds = getEventsIds();

		String eventsIds = participationCacheModel.eventsIds;

		if ((eventsIds != null) && (eventsIds.length() == 0)) {
			participationCacheModel.eventsIds = null;
		}

		Date publicationDate = getPublicationDate();

		if (publicationDate != null) {
			participationCacheModel.publicationDate = publicationDate.getTime();
		}
		else {
			participationCacheModel.publicationDate = Long.MIN_VALUE;
		}

		Date expirationDate = getExpirationDate();

		if (expirationDate != null) {
			participationCacheModel.expirationDate = expirationDate.getTime();
		}
		else {
			participationCacheModel.expirationDate = Long.MIN_VALUE;
		}

		return participationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Participation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Participation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Participation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Participation)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Participation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Participation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Participation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Participation)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Participation>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private String _uuid;
	private String _originalUuid;
	private long _participationId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _title;
	private String _contactName;
	private String _contactLine1;
	private String _contactLine2;
	private String _contactPhoneNumber;
	private String _videoUrl;
	private String _externalImageURL;
	private String _externalImageCopyright;
	private boolean _mediaChoice;
	private String _descriptionChapeau;
	private String _descriptionBody;
	private String _consultationPlacesBody;
	private long _imageId;
	private String _filesIds;
	private String _eventsIds;
	private Date _publicationDate;
	private Date _expirationDate;
	private long _columnBitmask;
	private Participation _escapedModel;

}