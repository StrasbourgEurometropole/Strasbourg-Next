/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.project.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import eu.strasbourg.service.project.model.ProjectTimeline;
import eu.strasbourg.service.project.model.ProjectTimelineModel;

import java.io.Serializable;
import java.lang.reflect.InvocationHandler;
import java.sql.Blob;
import java.sql.Types;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ProjectTimeline service. Represents a row in the &quot;project_ProjectTimeline&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProjectTimelineModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectTimelineImpl}.
 * </p>
 *
 * @author Cedric Henry
 * @see ProjectTimelineImpl
 * @generated
 */
@JSON(strict = true)
public class ProjectTimelineModelImpl
	extends BaseModelImpl<ProjectTimeline> implements ProjectTimelineModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project timeline model instance should use the <code>ProjectTimeline</code> interface instead.
	 */
	public static final String TABLE_NAME = "project_ProjectTimeline";

	public static final Object[][] TABLE_COLUMNS = {
		{"projectTimelineId", Types.BIGINT}, {"startDay", Types.INTEGER},
		{"spacing", Types.INTEGER}, {"date_", Types.TIMESTAMP},
		{"dateFormat", Types.VARCHAR}, {"title", Types.VARCHAR},
		{"link", Types.VARCHAR}, {"projectId", Types.BIGINT},
		{"budgetParticipatifId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("projectTimelineId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startDay", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("spacing", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dateFormat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("link", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("budgetParticipatifId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table project_ProjectTimeline (projectTimelineId LONG not null primary key,startDay INTEGER,spacing INTEGER,date_ DATE null,dateFormat VARCHAR(75) null,title VARCHAR(400) null,link VARCHAR(400) null,projectId LONG,budgetParticipatifId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table project_ProjectTimeline";

	public static final String ORDER_BY_JPQL =
		" ORDER BY projectTimeline.date ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY project_ProjectTimeline.date_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BUDGETPARTICIPATIFID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROJECTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DATE_COLUMN_BITMASK = 4L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.project.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.project.model.ProjectTimeline"));

	public ProjectTimelineModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _projectTimelineId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProjectTimelineId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectTimelineId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProjectTimeline.class;
	}

	@Override
	public String getModelClassName() {
		return ProjectTimeline.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ProjectTimeline, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ProjectTimeline, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProjectTimeline, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ProjectTimeline)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ProjectTimeline, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ProjectTimeline, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ProjectTimeline)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ProjectTimeline, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ProjectTimeline, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ProjectTimeline, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ProjectTimeline, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ProjectTimeline, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<ProjectTimeline, Object>>();
		Map<String, BiConsumer<ProjectTimeline, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ProjectTimeline, ?>>();

		attributeGetterFunctions.put(
			"projectTimelineId", ProjectTimeline::getProjectTimelineId);
		attributeSetterBiConsumers.put(
			"projectTimelineId",
			(BiConsumer<ProjectTimeline, Long>)
				ProjectTimeline::setProjectTimelineId);
		attributeGetterFunctions.put("startDay", ProjectTimeline::getStartDay);
		attributeSetterBiConsumers.put(
			"startDay",
			(BiConsumer<ProjectTimeline, Integer>)ProjectTimeline::setStartDay);
		attributeGetterFunctions.put("spacing", ProjectTimeline::getSpacing);
		attributeSetterBiConsumers.put(
			"spacing",
			(BiConsumer<ProjectTimeline, Integer>)ProjectTimeline::setSpacing);
		attributeGetterFunctions.put("date", ProjectTimeline::getDate);
		attributeSetterBiConsumers.put(
			"date",
			(BiConsumer<ProjectTimeline, Date>)ProjectTimeline::setDate);
		attributeGetterFunctions.put(
			"dateFormat", ProjectTimeline::getDateFormat);
		attributeSetterBiConsumers.put(
			"dateFormat",
			(BiConsumer<ProjectTimeline, String>)
				ProjectTimeline::setDateFormat);
		attributeGetterFunctions.put("title", ProjectTimeline::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<ProjectTimeline, String>)ProjectTimeline::setTitle);
		attributeGetterFunctions.put("link", ProjectTimeline::getLink);
		attributeSetterBiConsumers.put(
			"link",
			(BiConsumer<ProjectTimeline, String>)ProjectTimeline::setLink);
		attributeGetterFunctions.put(
			"projectId", ProjectTimeline::getProjectId);
		attributeSetterBiConsumers.put(
			"projectId",
			(BiConsumer<ProjectTimeline, Long>)ProjectTimeline::setProjectId);
		attributeGetterFunctions.put(
			"budgetParticipatifId", ProjectTimeline::getBudgetParticipatifId);
		attributeSetterBiConsumers.put(
			"budgetParticipatifId",
			(BiConsumer<ProjectTimeline, Long>)
				ProjectTimeline::setBudgetParticipatifId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getProjectTimelineId() {
		return _projectTimelineId;
	}

	@Override
	public void setProjectTimelineId(long projectTimelineId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_projectTimelineId = projectTimelineId;
	}

	@JSON
	@Override
	public int getStartDay() {
		return _startDay;
	}

	@Override
	public void setStartDay(int startDay) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDay = startDay;
	}

	@JSON
	@Override
	public int getSpacing() {
		return _spacing;
	}

	@Override
	public void setSpacing(int spacing) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spacing = spacing;
	}

	@JSON
	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_date = date;
	}

	@JSON
	@Override
	public String getDateFormat() {
		if (_dateFormat == null) {
			return "";
		}
		else {
			return _dateFormat;
		}
	}

	@Override
	public void setDateFormat(String dateFormat) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateFormat = dateFormat;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public String getLink() {
		if (_link == null) {
			return "";
		}
		else {
			return _link;
		}
	}

	@Override
	public void setLink(String link) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_link = link;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_projectId = projectId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalProjectId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("projectId"));
	}

	@JSON
	@Override
	public long getBudgetParticipatifId() {
		return _budgetParticipatifId;
	}

	@Override
	public void setBudgetParticipatifId(long budgetParticipatifId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_budgetParticipatifId = budgetParticipatifId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalBudgetParticipatifId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("budgetParticipatifId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ProjectTimeline.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProjectTimeline toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ProjectTimeline>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectTimelineImpl projectTimelineImpl = new ProjectTimelineImpl();

		projectTimelineImpl.setProjectTimelineId(getProjectTimelineId());
		projectTimelineImpl.setStartDay(getStartDay());
		projectTimelineImpl.setSpacing(getSpacing());
		projectTimelineImpl.setDate(getDate());
		projectTimelineImpl.setDateFormat(getDateFormat());
		projectTimelineImpl.setTitle(getTitle());
		projectTimelineImpl.setLink(getLink());
		projectTimelineImpl.setProjectId(getProjectId());
		projectTimelineImpl.setBudgetParticipatifId(getBudgetParticipatifId());

		projectTimelineImpl.resetOriginalValues();

		return projectTimelineImpl;
	}

	@Override
	public ProjectTimeline cloneWithOriginalValues() {
		ProjectTimelineImpl projectTimelineImpl = new ProjectTimelineImpl();

		projectTimelineImpl.setProjectTimelineId(
			this.<Long>getColumnOriginalValue("projectTimelineId"));
		projectTimelineImpl.setStartDay(
			this.<Integer>getColumnOriginalValue("startDay"));
		projectTimelineImpl.setSpacing(
			this.<Integer>getColumnOriginalValue("spacing"));
		projectTimelineImpl.setDate(this.<Date>getColumnOriginalValue("date_"));
		projectTimelineImpl.setDateFormat(
			this.<String>getColumnOriginalValue("dateFormat"));
		projectTimelineImpl.setTitle(
			this.<String>getColumnOriginalValue("title"));
		projectTimelineImpl.setLink(
			this.<String>getColumnOriginalValue("link"));
		projectTimelineImpl.setProjectId(
			this.<Long>getColumnOriginalValue("projectId"));
		projectTimelineImpl.setBudgetParticipatifId(
			this.<Long>getColumnOriginalValue("budgetParticipatifId"));

		return projectTimelineImpl;
	}

	@Override
	public int compareTo(ProjectTimeline projectTimeline) {
		int value = 0;

		value = DateUtil.compareTo(getDate(), projectTimeline.getDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ProjectTimeline)) {
			return false;
		}

		ProjectTimeline projectTimeline = (ProjectTimeline)object;

		long primaryKey = projectTimeline.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ProjectTimeline> toCacheModel() {
		ProjectTimelineCacheModel projectTimelineCacheModel =
			new ProjectTimelineCacheModel();

		projectTimelineCacheModel.projectTimelineId = getProjectTimelineId();

		projectTimelineCacheModel.startDay = getStartDay();

		projectTimelineCacheModel.spacing = getSpacing();

		Date date = getDate();

		if (date != null) {
			projectTimelineCacheModel.date = date.getTime();
		}
		else {
			projectTimelineCacheModel.date = Long.MIN_VALUE;
		}

		projectTimelineCacheModel.dateFormat = getDateFormat();

		String dateFormat = projectTimelineCacheModel.dateFormat;

		if ((dateFormat != null) && (dateFormat.length() == 0)) {
			projectTimelineCacheModel.dateFormat = null;
		}

		projectTimelineCacheModel.title = getTitle();

		String title = projectTimelineCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			projectTimelineCacheModel.title = null;
		}

		projectTimelineCacheModel.link = getLink();

		String link = projectTimelineCacheModel.link;

		if ((link != null) && (link.length() == 0)) {
			projectTimelineCacheModel.link = null;
		}

		projectTimelineCacheModel.projectId = getProjectId();

		projectTimelineCacheModel.budgetParticipatifId =
			getBudgetParticipatifId();

		return projectTimelineCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ProjectTimeline, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ProjectTimeline, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProjectTimeline, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ProjectTimeline)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ProjectTimeline>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ProjectTimeline.class, ModelWrapper.class);

	}

	private long _projectTimelineId;
	private int _startDay;
	private int _spacing;
	private Date _date;
	private String _dateFormat;
	private String _title;
	private String _link;
	private long _projectId;
	private long _budgetParticipatifId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ProjectTimeline, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ProjectTimeline)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("projectTimelineId", _projectTimelineId);
		_columnOriginalValues.put("startDay", _startDay);
		_columnOriginalValues.put("spacing", _spacing);
		_columnOriginalValues.put("date_", _date);
		_columnOriginalValues.put("dateFormat", _dateFormat);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("link", _link);
		_columnOriginalValues.put("projectId", _projectId);
		_columnOriginalValues.put(
			"budgetParticipatifId", _budgetParticipatifId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("date_", "date");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("projectTimelineId", 1L);

		columnBitmasks.put("startDay", 2L);

		columnBitmasks.put("spacing", 4L);

		columnBitmasks.put("date_", 8L);

		columnBitmasks.put("dateFormat", 16L);

		columnBitmasks.put("title", 32L);

		columnBitmasks.put("link", 64L);

		columnBitmasks.put("projectId", 128L);

		columnBitmasks.put("budgetParticipatifId", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ProjectTimeline _escapedModel;

}