/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.notification.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;

import eu.strasbourg.service.notification.model.Notification;
import eu.strasbourg.service.notification.model.NotificationModel;
import eu.strasbourg.service.notification.model.NotificationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the Notification service. Represents a row in the &quot;notification_Notification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link NotificationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotificationImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see NotificationImpl
 * @see Notification
 * @see NotificationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class NotificationModelImpl extends BaseModelImpl<Notification>
	implements NotificationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a notification model instance should use the {@link Notification} interface instead.
	 */
	public static final String TABLE_NAME = "notification_Notification";
	public static final Object[][] TABLE_COLUMNS = {
			{ "notificationId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "description", Types.CLOB },
			{ "url", Types.VARCHAR },
			{ "automatic", Types.BOOLEAN },
			{ "singleUser", Types.BOOLEAN },
			{ "singleUserId", Types.VARCHAR },
			{ "publicationDate", Types.TIMESTAMP },
			{ "expirationDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "typeId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("notificationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("automatic", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("singleUser", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("singleUserId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publicationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expirationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("typeId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table notification_Notification (notificationId LONG not null primary key,title STRING null,description TEXT null,url VARCHAR(75) null,automatic BOOLEAN,singleUser BOOLEAN,singleUserId VARCHAR(75) null,publicationDate DATE null,expirationDate DATE null,status INTEGER,typeId LONG)";
	public static final String TABLE_SQL_DROP = "drop table notification_Notification";
	public static final String ORDER_BY_JPQL = " ORDER BY notification.notificationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY notification_Notification.notificationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.notification.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.notification.model.Notification"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.notification.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.notification.model.Notification"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.notification.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.notification.model.Notification"),
			true);
	public static final long EXPIRATIONDATE_COLUMN_BITMASK = 1L;
	public static final long PUBLICATIONDATE_COLUMN_BITMASK = 2L;
	public static final long STATUS_COLUMN_BITMASK = 4L;
	public static final long NOTIFICATIONID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Notification toModel(NotificationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Notification model = new NotificationImpl();

		model.setNotificationId(soapModel.getNotificationId());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setUrl(soapModel.getUrl());
		model.setAutomatic(soapModel.getAutomatic());
		model.setSingleUser(soapModel.getSingleUser());
		model.setSingleUserId(soapModel.getSingleUserId());
		model.setPublicationDate(soapModel.getPublicationDate());
		model.setExpirationDate(soapModel.getExpirationDate());
		model.setStatus(soapModel.getStatus());
		model.setTypeId(soapModel.getTypeId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Notification> toModels(NotificationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Notification> models = new ArrayList<Notification>(soapModels.length);

		for (NotificationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.notification.service.util.ServiceProps.get(
				"lock.expiration.time.eu.strasbourg.service.notification.model.Notification"));

	public NotificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _notificationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNotificationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _notificationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Notification.class;
	}

	@Override
	public String getModelClassName() {
		return Notification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("notificationId", getNotificationId());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("url", getUrl());
		attributes.put("automatic", getAutomatic());
		attributes.put("singleUser", getSingleUser());
		attributes.put("singleUserId", getSingleUserId());
		attributes.put("publicationDate", getPublicationDate());
		attributes.put("expirationDate", getExpirationDate());
		attributes.put("status", getStatus());
		attributes.put("typeId", getTypeId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long notificationId = (Long)attributes.get("notificationId");

		if (notificationId != null) {
			setNotificationId(notificationId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		Boolean automatic = (Boolean)attributes.get("automatic");

		if (automatic != null) {
			setAutomatic(automatic);
		}

		Boolean singleUser = (Boolean)attributes.get("singleUser");

		if (singleUser != null) {
			setSingleUser(singleUser);
		}

		String singleUserId = (String)attributes.get("singleUserId");

		if (singleUserId != null) {
			setSingleUserId(singleUserId);
		}

		Date publicationDate = (Date)attributes.get("publicationDate");

		if (publicationDate != null) {
			setPublicationDate(publicationDate);
		}

		Date expirationDate = (Date)attributes.get("expirationDate");

		if (expirationDate != null) {
			setExpirationDate(expirationDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long typeId = (Long)attributes.get("typeId");

		if (typeId != null) {
			setTypeId(typeId);
		}
	}

	@JSON
	@Override
	public long getNotificationId() {
		return _notificationId;
	}

	@Override
	public void setNotificationId(long notificationId) {
		_notificationId = notificationId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitle(), languageId,
			useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
					title, languageId, defaultLanguageId));
		}
		else {
			setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
					languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
		if (titleMap == null) {
			return;
		}

		setTitle(LocalizationUtil.updateLocalization(titleMap, getTitle(),
				"Title", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap,
				getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@JSON
	@Override
	public boolean getAutomatic() {
		return _automatic;
	}

	@JSON
	@Override
	public boolean isAutomatic() {
		return _automatic;
	}

	@Override
	public void setAutomatic(boolean automatic) {
		_automatic = automatic;
	}

	@JSON
	@Override
	public boolean getSingleUser() {
		return _singleUser;
	}

	@JSON
	@Override
	public boolean isSingleUser() {
		return _singleUser;
	}

	@Override
	public void setSingleUser(boolean singleUser) {
		_singleUser = singleUser;
	}

	@JSON
	@Override
	public String getSingleUserId() {
		if (_singleUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _singleUserId;
		}
	}

	@Override
	public void setSingleUserId(String singleUserId) {
		_singleUserId = singleUserId;
	}

	@JSON
	@Override
	public Date getPublicationDate() {
		return _publicationDate;
	}

	@Override
	public void setPublicationDate(Date publicationDate) {
		_columnBitmask |= PUBLICATIONDATE_COLUMN_BITMASK;

		if (_originalPublicationDate == null) {
			_originalPublicationDate = _publicationDate;
		}

		_publicationDate = publicationDate;
	}

	public Date getOriginalPublicationDate() {
		return _originalPublicationDate;
	}

	@JSON
	@Override
	public Date getExpirationDate() {
		return _expirationDate;
	}

	@Override
	public void setExpirationDate(Date expirationDate) {
		_columnBitmask |= EXPIRATIONDATE_COLUMN_BITMASK;

		if (_originalExpirationDate == null) {
			_originalExpirationDate = _expirationDate;
		}

		_expirationDate = expirationDate;
	}

	public Date getOriginalExpirationDate() {
		return _originalExpirationDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(long typeId) {
		_typeId = typeId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Notification.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(Notification.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(getDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public Notification toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Notification)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotificationImpl notificationImpl = new NotificationImpl();

		notificationImpl.setNotificationId(getNotificationId());
		notificationImpl.setTitle(getTitle());
		notificationImpl.setDescription(getDescription());
		notificationImpl.setUrl(getUrl());
		notificationImpl.setAutomatic(getAutomatic());
		notificationImpl.setSingleUser(getSingleUser());
		notificationImpl.setSingleUserId(getSingleUserId());
		notificationImpl.setPublicationDate(getPublicationDate());
		notificationImpl.setExpirationDate(getExpirationDate());
		notificationImpl.setStatus(getStatus());
		notificationImpl.setTypeId(getTypeId());

		notificationImpl.resetOriginalValues();

		return notificationImpl;
	}

	@Override
	public int compareTo(Notification notification) {
		long primaryKey = notification.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Notification)) {
			return false;
		}

		Notification notification = (Notification)obj;

		long primaryKey = notification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		NotificationModelImpl notificationModelImpl = this;

		notificationModelImpl._originalPublicationDate = notificationModelImpl._publicationDate;

		notificationModelImpl._originalExpirationDate = notificationModelImpl._expirationDate;

		notificationModelImpl._originalStatus = notificationModelImpl._status;

		notificationModelImpl._setOriginalStatus = false;

		notificationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Notification> toCacheModel() {
		NotificationCacheModel notificationCacheModel = new NotificationCacheModel();

		notificationCacheModel.notificationId = getNotificationId();

		notificationCacheModel.title = getTitle();

		String title = notificationCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			notificationCacheModel.title = null;
		}

		notificationCacheModel.description = getDescription();

		String description = notificationCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			notificationCacheModel.description = null;
		}

		notificationCacheModel.url = getUrl();

		String url = notificationCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			notificationCacheModel.url = null;
		}

		notificationCacheModel.automatic = getAutomatic();

		notificationCacheModel.singleUser = getSingleUser();

		notificationCacheModel.singleUserId = getSingleUserId();

		String singleUserId = notificationCacheModel.singleUserId;

		if ((singleUserId != null) && (singleUserId.length() == 0)) {
			notificationCacheModel.singleUserId = null;
		}

		Date publicationDate = getPublicationDate();

		if (publicationDate != null) {
			notificationCacheModel.publicationDate = publicationDate.getTime();
		}
		else {
			notificationCacheModel.publicationDate = Long.MIN_VALUE;
		}

		Date expirationDate = getExpirationDate();

		if (expirationDate != null) {
			notificationCacheModel.expirationDate = expirationDate.getTime();
		}
		else {
			notificationCacheModel.expirationDate = Long.MIN_VALUE;
		}

		notificationCacheModel.status = getStatus();

		notificationCacheModel.typeId = getTypeId();

		return notificationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{notificationId=");
		sb.append(getNotificationId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", automatic=");
		sb.append(getAutomatic());
		sb.append(", singleUser=");
		sb.append(getSingleUser());
		sb.append(", singleUserId=");
		sb.append(getSingleUserId());
		sb.append(", publicationDate=");
		sb.append(getPublicationDate());
		sb.append(", expirationDate=");
		sb.append(getExpirationDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", typeId=");
		sb.append(getTypeId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.notification.model.Notification");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>notificationId</column-name><column-value><![CDATA[");
		sb.append(getNotificationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>automatic</column-name><column-value><![CDATA[");
		sb.append(getAutomatic());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>singleUser</column-name><column-value><![CDATA[");
		sb.append(getSingleUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>singleUserId</column-name><column-value><![CDATA[");
		sb.append(getSingleUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publicationDate</column-name><column-value><![CDATA[");
		sb.append(getPublicationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expirationDate</column-name><column-value><![CDATA[");
		sb.append(getExpirationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeId</column-name><column-value><![CDATA[");
		sb.append(getTypeId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Notification.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Notification.class
		};
	private long _notificationId;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _url;
	private boolean _automatic;
	private boolean _singleUser;
	private String _singleUserId;
	private Date _publicationDate;
	private Date _originalPublicationDate;
	private Date _expirationDate;
	private Date _originalExpirationDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _typeId;
	private long _columnBitmask;
	private Notification _escapedModel;
}