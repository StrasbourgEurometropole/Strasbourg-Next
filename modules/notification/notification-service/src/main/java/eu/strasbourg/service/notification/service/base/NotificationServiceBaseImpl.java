/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.notification.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.service.BaseServiceImpl;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;
import eu.strasbourg.service.notification.model.Notification;
import eu.strasbourg.service.notification.service.NotificationService;
import eu.strasbourg.service.notification.service.NotificationServiceUtil;
import eu.strasbourg.service.notification.service.persistence.NotificationPersistence;
import eu.strasbourg.service.notification.service.persistence.UserNotificationChannelPersistence;
import eu.strasbourg.service.notification.service.persistence.UserNotificationStatusPersistence;
import eu.strasbourg.service.notification.service.persistence.UserNotificationTypePersistence;

import javax.sql.DataSource;
import java.lang.reflect.Field;

/**
 * Provides the base implementation for the notification remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link eu.strasbourg.service.notification.service.impl.NotificationServiceImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see eu.strasbourg.service.notification.service.impl.NotificationServiceImpl
 * @generated
 */
public abstract class NotificationServiceBaseImpl
	extends BaseServiceImpl
	implements IdentifiableOSGiService, NotificationService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>NotificationService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>NotificationServiceUtil</code>.
	 */

	/**
	 * Returns the notification local service.
	 *
	 * @return the notification local service
	 */
	public eu.strasbourg.service.notification.service.NotificationLocalService
		getNotificationLocalService() {

		return notificationLocalService;
	}

	/**
	 * Sets the notification local service.
	 *
	 * @param notificationLocalService the notification local service
	 */
	public void setNotificationLocalService(
		eu.strasbourg.service.notification.service.NotificationLocalService
			notificationLocalService) {

		this.notificationLocalService = notificationLocalService;
	}

	/**
	 * Returns the notification remote service.
	 *
	 * @return the notification remote service
	 */
	public NotificationService getNotificationService() {
		return notificationService;
	}

	/**
	 * Sets the notification remote service.
	 *
	 * @param notificationService the notification remote service
	 */
	public void setNotificationService(
		NotificationService notificationService) {

		this.notificationService = notificationService;
	}

	/**
	 * Returns the notification persistence.
	 *
	 * @return the notification persistence
	 */
	public NotificationPersistence getNotificationPersistence() {
		return notificationPersistence;
	}

	/**
	 * Sets the notification persistence.
	 *
	 * @param notificationPersistence the notification persistence
	 */
	public void setNotificationPersistence(
		NotificationPersistence notificationPersistence) {

		this.notificationPersistence = notificationPersistence;
	}

	/**
	 * Returns the user notification channel local service.
	 *
	 * @return the user notification channel local service
	 */
	public eu.strasbourg.service.notification.service.
		UserNotificationChannelLocalService
			getUserNotificationChannelLocalService() {

		return userNotificationChannelLocalService;
	}

	/**
	 * Sets the user notification channel local service.
	 *
	 * @param userNotificationChannelLocalService the user notification channel local service
	 */
	public void setUserNotificationChannelLocalService(
		eu.strasbourg.service.notification.service.
			UserNotificationChannelLocalService
				userNotificationChannelLocalService) {

		this.userNotificationChannelLocalService =
			userNotificationChannelLocalService;
	}

	/**
	 * Returns the user notification channel persistence.
	 *
	 * @return the user notification channel persistence
	 */
	public UserNotificationChannelPersistence
		getUserNotificationChannelPersistence() {

		return userNotificationChannelPersistence;
	}

	/**
	 * Sets the user notification channel persistence.
	 *
	 * @param userNotificationChannelPersistence the user notification channel persistence
	 */
	public void setUserNotificationChannelPersistence(
		UserNotificationChannelPersistence userNotificationChannelPersistence) {

		this.userNotificationChannelPersistence =
			userNotificationChannelPersistence;
	}

	/**
	 * Returns the user notification status local service.
	 *
	 * @return the user notification status local service
	 */
	public eu.strasbourg.service.notification.service.
		UserNotificationStatusLocalService
			getUserNotificationStatusLocalService() {

		return userNotificationStatusLocalService;
	}

	/**
	 * Sets the user notification status local service.
	 *
	 * @param userNotificationStatusLocalService the user notification status local service
	 */
	public void setUserNotificationStatusLocalService(
		eu.strasbourg.service.notification.service.
			UserNotificationStatusLocalService
				userNotificationStatusLocalService) {

		this.userNotificationStatusLocalService =
			userNotificationStatusLocalService;
	}

	/**
	 * Returns the user notification status persistence.
	 *
	 * @return the user notification status persistence
	 */
	public UserNotificationStatusPersistence
		getUserNotificationStatusPersistence() {

		return userNotificationStatusPersistence;
	}

	/**
	 * Sets the user notification status persistence.
	 *
	 * @param userNotificationStatusPersistence the user notification status persistence
	 */
	public void setUserNotificationStatusPersistence(
		UserNotificationStatusPersistence userNotificationStatusPersistence) {

		this.userNotificationStatusPersistence =
			userNotificationStatusPersistence;
	}

	/**
	 * Returns the user notification type local service.
	 *
	 * @return the user notification type local service
	 */
	public
		eu.strasbourg.service.notification.service.
			UserNotificationTypeLocalService
				getUserNotificationTypeLocalService() {

		return userNotificationTypeLocalService;
	}

	/**
	 * Sets the user notification type local service.
	 *
	 * @param userNotificationTypeLocalService the user notification type local service
	 */
	public void setUserNotificationTypeLocalService(
		eu.strasbourg.service.notification.service.
			UserNotificationTypeLocalService userNotificationTypeLocalService) {

		this.userNotificationTypeLocalService =
			userNotificationTypeLocalService;
	}

	/**
	 * Returns the user notification type persistence.
	 *
	 * @return the user notification type persistence
	 */
	public UserNotificationTypePersistence
		getUserNotificationTypePersistence() {

		return userNotificationTypePersistence;
	}

	/**
	 * Sets the user notification type persistence.
	 *
	 * @param userNotificationTypePersistence the user notification type persistence
	 */
	public void setUserNotificationTypePersistence(
		UserNotificationTypePersistence userNotificationTypePersistence) {

		this.userNotificationTypePersistence = userNotificationTypePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService
		getClassNameLocalService() {

		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService
			classNameLocalService) {

		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name remote service.
	 *
	 * @return the class name remote service
	 */
	public com.liferay.portal.kernel.service.ClassNameService
		getClassNameService() {

		return classNameService;
	}

	/**
	 * Sets the class name remote service.
	 *
	 * @param classNameService the class name remote service
	 */
	public void setClassNameService(
		com.liferay.portal.kernel.service.ClassNameService classNameService) {

		this.classNameService = classNameService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {

		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService
		getResourceLocalService() {

		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService
			resourceLocalService) {

		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService
		getUserLocalService() {

		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {

		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.kernel.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.kernel.service.UserService userService) {

		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		_setServiceUtilService(notificationService);
	}

	public void destroy() {
		_setServiceUtilService(null);
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return NotificationService.class.getName();
	}

	protected Class<?> getModelClass() {
		return Notification.class;
	}

	protected String getModelClassName() {
		return Notification.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = notificationPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception exception) {
			throw new SystemException(exception);
		}
	}

	private void _setServiceUtilService(
		NotificationService notificationService) {

		try {
			Field field = NotificationServiceUtil.class.getDeclaredField(
				"_service");

			field.setAccessible(true);

			field.set(null, notificationService);
		}
		catch (ReflectiveOperationException reflectiveOperationException) {
			throw new RuntimeException(reflectiveOperationException);
		}
	}

	@BeanReference(
		type = eu.strasbourg.service.notification.service.NotificationLocalService.class
	)
	protected
		eu.strasbourg.service.notification.service.NotificationLocalService
			notificationLocalService;

	@BeanReference(type = NotificationService.class)
	protected NotificationService notificationService;

	@BeanReference(type = NotificationPersistence.class)
	protected NotificationPersistence notificationPersistence;

	@BeanReference(
		type = eu.strasbourg.service.notification.service.UserNotificationChannelLocalService.class
	)
	protected eu.strasbourg.service.notification.service.
		UserNotificationChannelLocalService userNotificationChannelLocalService;

	@BeanReference(type = UserNotificationChannelPersistence.class)
	protected UserNotificationChannelPersistence
		userNotificationChannelPersistence;

	@BeanReference(
		type = eu.strasbourg.service.notification.service.UserNotificationStatusLocalService.class
	)
	protected eu.strasbourg.service.notification.service.
		UserNotificationStatusLocalService userNotificationStatusLocalService;

	@BeanReference(type = UserNotificationStatusPersistence.class)
	protected UserNotificationStatusPersistence
		userNotificationStatusPersistence;

	@BeanReference(
		type = eu.strasbourg.service.notification.service.UserNotificationTypeLocalService.class
	)
	protected
		eu.strasbourg.service.notification.service.
			UserNotificationTypeLocalService userNotificationTypeLocalService;

	@BeanReference(type = UserNotificationTypePersistence.class)
	protected UserNotificationTypePersistence userNotificationTypePersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameLocalService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameService
		classNameService;

	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ResourceLocalService.class
	)
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserLocalService.class
	)
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserService.class
	)
	protected com.liferay.portal.kernel.service.UserService userService;

	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;

	private static final Log _log = LogFactoryUtil.getLog(
		NotificationServiceBaseImpl.class);

}