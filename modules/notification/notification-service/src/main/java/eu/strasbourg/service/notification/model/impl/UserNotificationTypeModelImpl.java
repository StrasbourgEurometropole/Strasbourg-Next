/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.notification.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import eu.strasbourg.service.notification.model.UserNotificationType;
import eu.strasbourg.service.notification.model.UserNotificationTypeModel;
import eu.strasbourg.service.notification.service.persistence.UserNotificationTypePK;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UserNotificationType service. Represents a row in the &quot;notification_UserNotificationType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UserNotificationTypeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserNotificationTypeImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see UserNotificationTypeImpl
 * @generated
 */
public class UserNotificationTypeModelImpl
	extends BaseModelImpl<UserNotificationType>
	implements UserNotificationTypeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user notification type model instance should use the <code>UserNotificationType</code> interface instead.
	 */
	public static final String TABLE_NAME = "notification_UserNotificationType";

	public static final Object[][] TABLE_COLUMNS = {
		{"publikUserId", Types.VARCHAR}, {"typeId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("publikUserId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table notification_UserNotificationType (publikUserId VARCHAR(75) not null,typeId LONG not null,primary key (publikUserId, typeId))";

	public static final String TABLE_SQL_DROP =
		"drop table notification_UserNotificationType";

	public static final String ORDER_BY_JPQL =
		" ORDER BY userNotificationType.id.publikUserId ASC, userNotificationType.id.typeId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY notification_UserNotificationType.publikUserId ASC, notification_UserNotificationType.typeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PUBLIKUSERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TYPEID_COLUMN_BITMASK = 2L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.notification.service.util.ServiceProps.get(
			"lock.expiration.time.eu.strasbourg.service.notification.model.UserNotificationType"));

	public UserNotificationTypeModelImpl() {
	}

	@Override
	public UserNotificationTypePK getPrimaryKey() {
		return new UserNotificationTypePK(_publikUserId, _typeId);
	}

	@Override
	public void setPrimaryKey(UserNotificationTypePK primaryKey) {
		setPublikUserId(primaryKey.publikUserId);
		setTypeId(primaryKey.typeId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new UserNotificationTypePK(_publikUserId, _typeId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((UserNotificationTypePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return UserNotificationType.class;
	}

	@Override
	public String getModelClassName() {
		return UserNotificationType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UserNotificationType, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UserNotificationType, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserNotificationType, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((UserNotificationType)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UserNotificationType, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UserNotificationType, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UserNotificationType)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UserNotificationType, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UserNotificationType, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<UserNotificationType, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<UserNotificationType, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<UserNotificationType, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<UserNotificationType, Object>>();
		Map<String, BiConsumer<UserNotificationType, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<UserNotificationType, ?>>();

		attributeGetterFunctions.put(
			"publikUserId", UserNotificationType::getPublikUserId);
		attributeSetterBiConsumers.put(
			"publikUserId",
			(BiConsumer<UserNotificationType, String>)
				UserNotificationType::setPublikUserId);
		attributeGetterFunctions.put("typeId", UserNotificationType::getTypeId);
		attributeSetterBiConsumers.put(
			"typeId",
			(BiConsumer<UserNotificationType, Long>)
				UserNotificationType::setTypeId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getPublikUserId() {
		if (_publikUserId == null) {
			return "";
		}
		else {
			return _publikUserId;
		}
	}

	@Override
	public void setPublikUserId(String publikUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_publikUserId = publikUserId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPublikUserId() {
		return getColumnOriginalValue("publikUserId");
	}

	@Override
	public long getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(long typeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeId = typeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTypeId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("typeId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public UserNotificationType toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UserNotificationType>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserNotificationTypeImpl userNotificationTypeImpl =
			new UserNotificationTypeImpl();

		userNotificationTypeImpl.setPublikUserId(getPublikUserId());
		userNotificationTypeImpl.setTypeId(getTypeId());

		userNotificationTypeImpl.resetOriginalValues();

		return userNotificationTypeImpl;
	}

	@Override
	public UserNotificationType cloneWithOriginalValues() {
		UserNotificationTypeImpl userNotificationTypeImpl =
			new UserNotificationTypeImpl();

		userNotificationTypeImpl.setPublikUserId(
			this.<String>getColumnOriginalValue("publikUserId"));
		userNotificationTypeImpl.setTypeId(
			this.<Long>getColumnOriginalValue("typeId"));

		return userNotificationTypeImpl;
	}

	@Override
	public int compareTo(UserNotificationType userNotificationType) {
		UserNotificationTypePK primaryKey =
			userNotificationType.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof UserNotificationType)) {
			return false;
		}

		UserNotificationType userNotificationType =
			(UserNotificationType)object;

		UserNotificationTypePK primaryKey =
			userNotificationType.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<UserNotificationType> toCacheModel() {
		UserNotificationTypeCacheModel userNotificationTypeCacheModel =
			new UserNotificationTypeCacheModel();

		userNotificationTypeCacheModel.userNotificationTypePK = getPrimaryKey();

		userNotificationTypeCacheModel.publikUserId = getPublikUserId();

		String publikUserId = userNotificationTypeCacheModel.publikUserId;

		if ((publikUserId != null) && (publikUserId.length() == 0)) {
			userNotificationTypeCacheModel.publikUserId = null;
		}

		userNotificationTypeCacheModel.typeId = getTypeId();

		return userNotificationTypeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UserNotificationType, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UserNotificationType, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserNotificationType, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(UserNotificationType)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UserNotificationType>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					UserNotificationType.class, ModelWrapper.class);

	}

	private String _publikUserId;
	private long _typeId;

	public <T> T getColumnValue(String columnName) {
		Function<UserNotificationType, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((UserNotificationType)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("publikUserId", _publikUserId);
		_columnOriginalValues.put("typeId", _typeId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("publikUserId", 1L);

		columnBitmasks.put("typeId", 2L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private UserNotificationType _escapedModel;

}