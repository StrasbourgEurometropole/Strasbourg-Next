/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.notification.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import eu.strasbourg.service.notification.model.UserNotificationStatus;
import eu.strasbourg.service.notification.model.UserNotificationStatusModel;
import eu.strasbourg.service.notification.service.persistence.UserNotificationStatusPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserNotificationStatus service. Represents a row in the &quot;notification_UserNotificationStatus&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UserNotificationStatusModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserNotificationStatusImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see UserNotificationStatusImpl
 * @see UserNotificationStatus
 * @see UserNotificationStatusModel
 * @generated
 */
@ProviderType
public class UserNotificationStatusModelImpl extends BaseModelImpl<UserNotificationStatus>
	implements UserNotificationStatusModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user notification status model instance should use the {@link UserNotificationStatus} interface instead.
	 */
	public static final String TABLE_NAME = "notification_UserNotificationStatus";
	public static final Object[][] TABLE_COLUMNS = {
			{ "notificationId", Types.BIGINT },
			{ "publikUserId", Types.VARCHAR },
			{ "read_", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("notificationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("publikUserId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("read_", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table notification_UserNotificationStatus (notificationId LONG not null,publikUserId VARCHAR(75) not null,read_ BOOLEAN,primary key (notificationId, publikUserId))";
	public static final String TABLE_SQL_DROP = "drop table notification_UserNotificationStatus";
	public static final String ORDER_BY_JPQL = " ORDER BY userNotificationStatus.id.notificationId ASC, userNotificationStatus.id.publikUserId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY notification_UserNotificationStatus.notificationId ASC, notification_UserNotificationStatus.publikUserId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.notification.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.notification.model.UserNotificationStatus"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.notification.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.notification.model.UserNotificationStatus"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.notification.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.notification.model.UserNotificationStatus"),
			true);
	public static final long NOTIFICATIONID_COLUMN_BITMASK = 1L;
	public static final long PUBLIKUSERID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.notification.service.util.ServiceProps.get(
				"lock.expiration.time.eu.strasbourg.service.notification.model.UserNotificationStatus"));

	public UserNotificationStatusModelImpl() {
	}

	@Override
	public UserNotificationStatusPK getPrimaryKey() {
		return new UserNotificationStatusPK(_notificationId, _publikUserId);
	}

	@Override
	public void setPrimaryKey(UserNotificationStatusPK primaryKey) {
		setNotificationId(primaryKey.notificationId);
		setPublikUserId(primaryKey.publikUserId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new UserNotificationStatusPK(_notificationId, _publikUserId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((UserNotificationStatusPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return UserNotificationStatus.class;
	}

	@Override
	public String getModelClassName() {
		return UserNotificationStatus.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("notificationId", getNotificationId());
		attributes.put("publikUserId", getPublikUserId());
		attributes.put("read", getRead());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long notificationId = (Long)attributes.get("notificationId");

		if (notificationId != null) {
			setNotificationId(notificationId);
		}

		String publikUserId = (String)attributes.get("publikUserId");

		if (publikUserId != null) {
			setPublikUserId(publikUserId);
		}

		Boolean read = (Boolean)attributes.get("read");

		if (read != null) {
			setRead(read);
		}
	}

	@Override
	public long getNotificationId() {
		return _notificationId;
	}

	@Override
	public void setNotificationId(long notificationId) {
		_columnBitmask |= NOTIFICATIONID_COLUMN_BITMASK;

		if (!_setOriginalNotificationId) {
			_setOriginalNotificationId = true;

			_originalNotificationId = _notificationId;
		}

		_notificationId = notificationId;
	}

	public long getOriginalNotificationId() {
		return _originalNotificationId;
	}

	@Override
	public String getPublikUserId() {
		if (_publikUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _publikUserId;
		}
	}

	@Override
	public void setPublikUserId(String publikUserId) {
		_columnBitmask |= PUBLIKUSERID_COLUMN_BITMASK;

		if (_originalPublikUserId == null) {
			_originalPublikUserId = _publikUserId;
		}

		_publikUserId = publikUserId;
	}

	public String getOriginalPublikUserId() {
		return GetterUtil.getString(_originalPublikUserId);
	}

	@Override
	public boolean getRead() {
		return _read;
	}

	@Override
	public boolean isRead() {
		return _read;
	}

	@Override
	public void setRead(boolean read) {
		_read = read;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public UserNotificationStatus toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserNotificationStatus)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserNotificationStatusImpl userNotificationStatusImpl = new UserNotificationStatusImpl();

		userNotificationStatusImpl.setNotificationId(getNotificationId());
		userNotificationStatusImpl.setPublikUserId(getPublikUserId());
		userNotificationStatusImpl.setRead(getRead());

		userNotificationStatusImpl.resetOriginalValues();

		return userNotificationStatusImpl;
	}

	@Override
	public int compareTo(UserNotificationStatus userNotificationStatus) {
		UserNotificationStatusPK primaryKey = userNotificationStatus.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserNotificationStatus)) {
			return false;
		}

		UserNotificationStatus userNotificationStatus = (UserNotificationStatus)obj;

		UserNotificationStatusPK primaryKey = userNotificationStatus.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		UserNotificationStatusModelImpl userNotificationStatusModelImpl = this;

		userNotificationStatusModelImpl._originalNotificationId = userNotificationStatusModelImpl._notificationId;

		userNotificationStatusModelImpl._setOriginalNotificationId = false;

		userNotificationStatusModelImpl._originalPublikUserId = userNotificationStatusModelImpl._publikUserId;

		userNotificationStatusModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserNotificationStatus> toCacheModel() {
		UserNotificationStatusCacheModel userNotificationStatusCacheModel = new UserNotificationStatusCacheModel();

		userNotificationStatusCacheModel.userNotificationStatusPK = getPrimaryKey();

		userNotificationStatusCacheModel.notificationId = getNotificationId();

		userNotificationStatusCacheModel.publikUserId = getPublikUserId();

		String publikUserId = userNotificationStatusCacheModel.publikUserId;

		if ((publikUserId != null) && (publikUserId.length() == 0)) {
			userNotificationStatusCacheModel.publikUserId = null;
		}

		userNotificationStatusCacheModel.read = getRead();

		return userNotificationStatusCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{notificationId=");
		sb.append(getNotificationId());
		sb.append(", publikUserId=");
		sb.append(getPublikUserId());
		sb.append(", read=");
		sb.append(getRead());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append(
			"eu.strasbourg.service.notification.model.UserNotificationStatus");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>notificationId</column-name><column-value><![CDATA[");
		sb.append(getNotificationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publikUserId</column-name><column-value><![CDATA[");
		sb.append(getPublikUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>read</column-name><column-value><![CDATA[");
		sb.append(getRead());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UserNotificationStatus.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UserNotificationStatus.class
		};
	private long _notificationId;
	private long _originalNotificationId;
	private boolean _setOriginalNotificationId;
	private String _publikUserId;
	private String _originalPublikUserId;
	private boolean _read;
	private long _columnBitmask;
	private UserNotificationStatus _escapedModel;
}