/**
 * SPDX-FileCopyrightText: (c) 2023 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package eu.strasbourg.service.notification.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import eu.strasbourg.service.notification.model.UserNotificationStatus;
import eu.strasbourg.service.notification.model.UserNotificationStatusModel;
import eu.strasbourg.service.notification.service.persistence.UserNotificationStatusPK;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UserNotificationStatus service. Represents a row in the &quot;notification_UserNotificationStatus&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UserNotificationStatusModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserNotificationStatusImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see UserNotificationStatusImpl
 * @generated
 */
public class UserNotificationStatusModelImpl
	extends BaseModelImpl<UserNotificationStatus>
	implements UserNotificationStatusModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user notification status model instance should use the <code>UserNotificationStatus</code> interface instead.
	 */
	public static final String TABLE_NAME =
		"notification_UserNotificationStatus";

	public static final Object[][] TABLE_COLUMNS = {
		{"notificationId", Types.BIGINT}, {"publikUserId", Types.VARCHAR},
		{"read_", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("notificationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("publikUserId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("read_", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table notification_UserNotificationStatus (notificationId LONG not null,publikUserId VARCHAR(75) not null,read_ BOOLEAN,primary key (notificationId, publikUserId))";

	public static final String TABLE_SQL_DROP =
		"drop table notification_UserNotificationStatus";

	public static final String ORDER_BY_JPQL =
		" ORDER BY userNotificationStatus.id.notificationId ASC, userNotificationStatus.id.publikUserId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY notification_UserNotificationStatus.notificationId ASC, notification_UserNotificationStatus.publikUserId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NOTIFICATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PUBLIKUSERID_COLUMN_BITMASK = 2L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.notification.service.util.ServiceProps.get(
			"lock.expiration.time.eu.strasbourg.service.notification.model.UserNotificationStatus"));

	public UserNotificationStatusModelImpl() {
	}

	@Override
	public UserNotificationStatusPK getPrimaryKey() {
		return new UserNotificationStatusPK(_notificationId, _publikUserId);
	}

	@Override
	public void setPrimaryKey(UserNotificationStatusPK primaryKey) {
		setNotificationId(primaryKey.notificationId);
		setPublikUserId(primaryKey.publikUserId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new UserNotificationStatusPK(_notificationId, _publikUserId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((UserNotificationStatusPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return UserNotificationStatus.class;
	}

	@Override
	public String getModelClassName() {
		return UserNotificationStatus.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UserNotificationStatus, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UserNotificationStatus, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserNotificationStatus, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((UserNotificationStatus)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UserNotificationStatus, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UserNotificationStatus, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UserNotificationStatus)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UserNotificationStatus, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UserNotificationStatus, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<UserNotificationStatus, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<UserNotificationStatus, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<UserNotificationStatus, Object>>();

			attributeGetterFunctions.put(
				"notificationId", UserNotificationStatus::getNotificationId);
			attributeGetterFunctions.put(
				"publikUserId", UserNotificationStatus::getPublikUserId);
			attributeGetterFunctions.put(
				"read", UserNotificationStatus::getRead);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<UserNotificationStatus, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<UserNotificationStatus, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<UserNotificationStatus, ?>>();

			attributeSetterBiConsumers.put(
				"notificationId",
				(BiConsumer<UserNotificationStatus, Long>)
					UserNotificationStatus::setNotificationId);
			attributeSetterBiConsumers.put(
				"publikUserId",
				(BiConsumer<UserNotificationStatus, String>)
					UserNotificationStatus::setPublikUserId);
			attributeSetterBiConsumers.put(
				"read",
				(BiConsumer<UserNotificationStatus, Boolean>)
					UserNotificationStatus::setRead);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public long getNotificationId() {
		return _notificationId;
	}

	@Override
	public void setNotificationId(long notificationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_notificationId = notificationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalNotificationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("notificationId"));
	}

	@Override
	public String getPublikUserId() {
		if (_publikUserId == null) {
			return "";
		}
		else {
			return _publikUserId;
		}
	}

	@Override
	public void setPublikUserId(String publikUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_publikUserId = publikUserId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalPublikUserId() {
		return getColumnOriginalValue("publikUserId");
	}

	@Override
	public boolean getRead() {
		return _read;
	}

	@Override
	public boolean isRead() {
		return _read;
	}

	@Override
	public void setRead(boolean read) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_read = read;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public UserNotificationStatus toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UserNotificationStatus>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserNotificationStatusImpl userNotificationStatusImpl =
			new UserNotificationStatusImpl();

		userNotificationStatusImpl.setNotificationId(getNotificationId());
		userNotificationStatusImpl.setPublikUserId(getPublikUserId());
		userNotificationStatusImpl.setRead(isRead());

		userNotificationStatusImpl.resetOriginalValues();

		return userNotificationStatusImpl;
	}

	@Override
	public UserNotificationStatus cloneWithOriginalValues() {
		UserNotificationStatusImpl userNotificationStatusImpl =
			new UserNotificationStatusImpl();

		userNotificationStatusImpl.setNotificationId(
			this.<Long>getColumnOriginalValue("notificationId"));
		userNotificationStatusImpl.setPublikUserId(
			this.<String>getColumnOriginalValue("publikUserId"));
		userNotificationStatusImpl.setRead(
			this.<Boolean>getColumnOriginalValue("read_"));

		return userNotificationStatusImpl;
	}

	@Override
	public int compareTo(UserNotificationStatus userNotificationStatus) {
		UserNotificationStatusPK primaryKey =
			userNotificationStatus.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof UserNotificationStatus)) {
			return false;
		}

		UserNotificationStatus userNotificationStatus =
			(UserNotificationStatus)object;

		UserNotificationStatusPK primaryKey =
			userNotificationStatus.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<UserNotificationStatus> toCacheModel() {
		UserNotificationStatusCacheModel userNotificationStatusCacheModel =
			new UserNotificationStatusCacheModel();

		userNotificationStatusCacheModel.userNotificationStatusPK =
			getPrimaryKey();

		userNotificationStatusCacheModel.notificationId = getNotificationId();

		userNotificationStatusCacheModel.publikUserId = getPublikUserId();

		String publikUserId = userNotificationStatusCacheModel.publikUserId;

		if ((publikUserId != null) && (publikUserId.length() == 0)) {
			userNotificationStatusCacheModel.publikUserId = null;
		}

		userNotificationStatusCacheModel.read = isRead();

		return userNotificationStatusCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UserNotificationStatus, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UserNotificationStatus, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserNotificationStatus, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(UserNotificationStatus)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UserNotificationStatus>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					UserNotificationStatus.class, ModelWrapper.class);

	}

	private long _notificationId;
	private String _publikUserId;
	private boolean _read;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<UserNotificationStatus, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((UserNotificationStatus)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("notificationId", _notificationId);
		_columnOriginalValues.put("publikUserId", _publikUserId);
		_columnOriginalValues.put("read_", _read);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("read_", "read");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("notificationId", 1L);

		columnBitmasks.put("publikUserId", 2L);

		columnBitmasks.put("read_", 4L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private UserNotificationStatus _escapedModel;

}