/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.agenda.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;

import eu.strasbourg.service.agenda.model.CampaignEvent;
import eu.strasbourg.service.agenda.model.CampaignEventModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the CampaignEvent service. Represents a row in the &quot;agenda_CampaignEvent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CampaignEventModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CampaignEventImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see CampaignEventImpl
 * @see CampaignEvent
 * @see CampaignEventModel
 * @generated
 */
@ProviderType
public class CampaignEventModelImpl extends BaseModelImpl<CampaignEvent>
	implements CampaignEventModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a campaign event model instance should use the {@link CampaignEvent} interface instead.
	 */
	public static final String TABLE_NAME = "agenda_CampaignEvent";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "campaignEventId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "lastPublishDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "firstName", Types.VARCHAR },
			{ "lastName", Types.VARCHAR },
			{ "phone", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "serviceId", Types.BIGINT },
			{ "service", Types.VARCHAR },
			{ "onSiteFirstName", Types.VARCHAR },
			{ "onSiteLastName", Types.VARCHAR },
			{ "onSitePhone", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "subtitle", Types.VARCHAR },
			{ "description", Types.CLOB },
			{ "imageId", Types.BIGINT },
			{ "webImageId", Types.BIGINT },
			{ "imageOwner", Types.VARCHAR },
			{ "manifestationsIds", Types.VARCHAR },
			{ "placeSIGId", Types.VARCHAR },
			{ "placeName", Types.VARCHAR },
			{ "placeStreetNumber", Types.VARCHAR },
			{ "placeStreetName", Types.VARCHAR },
			{ "placeZipCode", Types.VARCHAR },
			{ "placeCityId", Types.BIGINT },
			{ "placeCountry", Types.VARCHAR },
			{ "promoter", Types.VARCHAR },
			{ "publicPhone", Types.VARCHAR },
			{ "publicEmail", Types.VARCHAR },
			{ "websiteURL", Types.VARCHAR },
			{ "websiteName", Types.VARCHAR },
			{ "free", Types.INTEGER },
			{ "price", Types.CLOB },
			{ "campaignId", Types.BIGINT },
			{ "themesIds", Types.VARCHAR },
			{ "typesIds", Types.VARCHAR },
			{ "publicsIds", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("campaignEventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serviceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("service", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("onSiteFirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("onSiteLastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("onSitePhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subtitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("webImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("imageOwner", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manifestationsIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeSIGId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeStreetNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeStreetName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeZipCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeCityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("placeCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("promoter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publicPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publicEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("websiteURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("websiteName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("free", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("price", Types.CLOB);
		TABLE_COLUMNS_MAP.put("campaignId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("themesIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typesIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publicsIds", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table agenda_CampaignEvent (uuid_ VARCHAR(75) null,campaignEventId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,lastPublishDate DATE null,status INTEGER,firstName VARCHAR(75) null,lastName VARCHAR(75) null,phone VARCHAR(75) null,email VARCHAR(75) null,serviceId LONG,service VARCHAR(75) null,onSiteFirstName VARCHAR(75) null,onSiteLastName VARCHAR(75) null,onSitePhone VARCHAR(75) null,title STRING null,subtitle STRING null,description TEXT null,imageId LONG,webImageId LONG,imageOwner VARCHAR(75) null,manifestationsIds VARCHAR(75) null,placeSIGId VARCHAR(75) null,placeName STRING null,placeStreetNumber VARCHAR(75) null,placeStreetName VARCHAR(75) null,placeZipCode VARCHAR(75) null,placeCityId LONG,placeCountry VARCHAR(75) null,promoter VARCHAR(75) null,publicPhone VARCHAR(75) null,publicEmail VARCHAR(75) null,websiteURL STRING null,websiteName STRING null,free INTEGER,price TEXT null,campaignId LONG,themesIds VARCHAR(75) null,typesIds VARCHAR(75) null,publicsIds VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table agenda_CampaignEvent";
	public static final String ORDER_BY_JPQL = " ORDER BY campaignEvent.campaignEventId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY agenda_CampaignEvent.campaignEventId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.agenda.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.agenda.model.CampaignEvent"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.agenda.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.agenda.model.CampaignEvent"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.agenda.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.agenda.model.CampaignEvent"),
			true);
	public static final long CAMPAIGNID_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long CAMPAIGNEVENTID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.agenda.service.util.PropsUtil.get(
				"lock.expiration.time.eu.strasbourg.service.agenda.model.CampaignEvent"));

	public CampaignEventModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _campaignEventId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCampaignEventId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _campaignEventId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CampaignEvent.class;
	}

	@Override
	public String getModelClassName() {
		return CampaignEvent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("campaignEventId", getCampaignEventId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("lastPublishDate", getLastPublishDate());
		attributes.put("status", getStatus());
		attributes.put("firstName", getFirstName());
		attributes.put("lastName", getLastName());
		attributes.put("phone", getPhone());
		attributes.put("email", getEmail());
		attributes.put("serviceId", getServiceId());
		attributes.put("service", getService());
		attributes.put("onSiteFirstName", getOnSiteFirstName());
		attributes.put("onSiteLastName", getOnSiteLastName());
		attributes.put("onSitePhone", getOnSitePhone());
		attributes.put("title", getTitle());
		attributes.put("subtitle", getSubtitle());
		attributes.put("description", getDescription());
		attributes.put("imageId", getImageId());
		attributes.put("webImageId", getWebImageId());
		attributes.put("imageOwner", getImageOwner());
		attributes.put("manifestationsIds", getManifestationsIds());
		attributes.put("placeSIGId", getPlaceSIGId());
		attributes.put("placeName", getPlaceName());
		attributes.put("placeStreetNumber", getPlaceStreetNumber());
		attributes.put("placeStreetName", getPlaceStreetName());
		attributes.put("placeZipCode", getPlaceZipCode());
		attributes.put("placeCityId", getPlaceCityId());
		attributes.put("placeCountry", getPlaceCountry());
		attributes.put("promoter", getPromoter());
		attributes.put("publicPhone", getPublicPhone());
		attributes.put("publicEmail", getPublicEmail());
		attributes.put("websiteURL", getWebsiteURL());
		attributes.put("websiteName", getWebsiteName());
		attributes.put("free", getFree());
		attributes.put("price", getPrice());
		attributes.put("campaignId", getCampaignId());
		attributes.put("themesIds", getThemesIds());
		attributes.put("typesIds", getTypesIds());
		attributes.put("publicsIds", getPublicsIds());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long campaignEventId = (Long)attributes.get("campaignEventId");

		if (campaignEventId != null) {
			setCampaignEventId(campaignEventId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date lastPublishDate = (Date)attributes.get("lastPublishDate");

		if (lastPublishDate != null) {
			setLastPublishDate(lastPublishDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String lastName = (String)attributes.get("lastName");

		if (lastName != null) {
			setLastName(lastName);
		}

		String phone = (String)attributes.get("phone");

		if (phone != null) {
			setPhone(phone);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		Long serviceId = (Long)attributes.get("serviceId");

		if (serviceId != null) {
			setServiceId(serviceId);
		}

		String service = (String)attributes.get("service");

		if (service != null) {
			setService(service);
		}

		String onSiteFirstName = (String)attributes.get("onSiteFirstName");

		if (onSiteFirstName != null) {
			setOnSiteFirstName(onSiteFirstName);
		}

		String onSiteLastName = (String)attributes.get("onSiteLastName");

		if (onSiteLastName != null) {
			setOnSiteLastName(onSiteLastName);
		}

		String onSitePhone = (String)attributes.get("onSitePhone");

		if (onSitePhone != null) {
			setOnSitePhone(onSitePhone);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String subtitle = (String)attributes.get("subtitle");

		if (subtitle != null) {
			setSubtitle(subtitle);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long imageId = (Long)attributes.get("imageId");

		if (imageId != null) {
			setImageId(imageId);
		}

		Long webImageId = (Long)attributes.get("webImageId");

		if (webImageId != null) {
			setWebImageId(webImageId);
		}

		String imageOwner = (String)attributes.get("imageOwner");

		if (imageOwner != null) {
			setImageOwner(imageOwner);
		}

		String manifestationsIds = (String)attributes.get("manifestationsIds");

		if (manifestationsIds != null) {
			setManifestationsIds(manifestationsIds);
		}

		String placeSIGId = (String)attributes.get("placeSIGId");

		if (placeSIGId != null) {
			setPlaceSIGId(placeSIGId);
		}

		String placeName = (String)attributes.get("placeName");

		if (placeName != null) {
			setPlaceName(placeName);
		}

		String placeStreetNumber = (String)attributes.get("placeStreetNumber");

		if (placeStreetNumber != null) {
			setPlaceStreetNumber(placeStreetNumber);
		}

		String placeStreetName = (String)attributes.get("placeStreetName");

		if (placeStreetName != null) {
			setPlaceStreetName(placeStreetName);
		}

		String placeZipCode = (String)attributes.get("placeZipCode");

		if (placeZipCode != null) {
			setPlaceZipCode(placeZipCode);
		}

		Long placeCityId = (Long)attributes.get("placeCityId");

		if (placeCityId != null) {
			setPlaceCityId(placeCityId);
		}

		String placeCountry = (String)attributes.get("placeCountry");

		if (placeCountry != null) {
			setPlaceCountry(placeCountry);
		}

		String promoter = (String)attributes.get("promoter");

		if (promoter != null) {
			setPromoter(promoter);
		}

		String publicPhone = (String)attributes.get("publicPhone");

		if (publicPhone != null) {
			setPublicPhone(publicPhone);
		}

		String publicEmail = (String)attributes.get("publicEmail");

		if (publicEmail != null) {
			setPublicEmail(publicEmail);
		}

		String websiteURL = (String)attributes.get("websiteURL");

		if (websiteURL != null) {
			setWebsiteURL(websiteURL);
		}

		String websiteName = (String)attributes.get("websiteName");

		if (websiteName != null) {
			setWebsiteName(websiteName);
		}

		Integer free = (Integer)attributes.get("free");

		if (free != null) {
			setFree(free);
		}

		String price = (String)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		Long campaignId = (Long)attributes.get("campaignId");

		if (campaignId != null) {
			setCampaignId(campaignId);
		}

		String themesIds = (String)attributes.get("themesIds");

		if (themesIds != null) {
			setThemesIds(themesIds);
		}

		String typesIds = (String)attributes.get("typesIds");

		if (typesIds != null) {
			setTypesIds(typesIds);
		}

		String publicsIds = (String)attributes.get("publicsIds");

		if (publicsIds != null) {
			setPublicsIds(publicsIds);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getCampaignEventId() {
		return _campaignEventId;
	}

	@Override
	public void setCampaignEventId(long campaignEventId) {
		_campaignEventId = campaignEventId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		_lastPublishDate = lastPublishDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@Override
	public String getLastName() {
		if (_lastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@Override
	public String getPhone() {
		if (_phone == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public Long getServiceId() {
		return _serviceId;
	}

	@Override
	public void setServiceId(Long serviceId) {
		_serviceId = serviceId;
	}

	@Override
	public String getService() {
		if (_service == null) {
			return StringPool.BLANK;
		}
		else {
			return _service;
		}
	}

	@Override
	public void setService(String service) {
		_service = service;
	}

	@Override
	public String getOnSiteFirstName() {
		if (_onSiteFirstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _onSiteFirstName;
		}
	}

	@Override
	public void setOnSiteFirstName(String onSiteFirstName) {
		_onSiteFirstName = onSiteFirstName;
	}

	@Override
	public String getOnSiteLastName() {
		if (_onSiteLastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _onSiteLastName;
		}
	}

	@Override
	public void setOnSiteLastName(String onSiteLastName) {
		_onSiteLastName = onSiteLastName;
	}

	@Override
	public String getOnSitePhone() {
		if (_onSitePhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _onSitePhone;
		}
	}

	@Override
	public void setOnSitePhone(String onSitePhone) {
		_onSitePhone = onSitePhone;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitle(), languageId,
			useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
					title, languageId, defaultLanguageId));
		}
		else {
			setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
					languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
		if (titleMap == null) {
			return;
		}

		setTitle(LocalizationUtil.updateLocalization(titleMap, getTitle(),
				"Title", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getSubtitle() {
		if (_subtitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _subtitle;
		}
	}

	@Override
	public String getSubtitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSubtitle(languageId);
	}

	@Override
	public String getSubtitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSubtitle(languageId, useDefault);
	}

	@Override
	public String getSubtitle(String languageId) {
		return LocalizationUtil.getLocalization(getSubtitle(), languageId);
	}

	@Override
	public String getSubtitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getSubtitle(), languageId,
			useDefault);
	}

	@Override
	public String getSubtitleCurrentLanguageId() {
		return _subtitleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSubtitleCurrentValue() {
		Locale locale = getLocale(_subtitleCurrentLanguageId);

		return getSubtitle(locale);
	}

	@Override
	public Map<Locale, String> getSubtitleMap() {
		return LocalizationUtil.getLocalizationMap(getSubtitle());
	}

	@Override
	public void setSubtitle(String subtitle) {
		_subtitle = subtitle;
	}

	@Override
	public void setSubtitle(String subtitle, Locale locale) {
		setSubtitle(subtitle, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSubtitle(String subtitle, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(subtitle)) {
			setSubtitle(LocalizationUtil.updateLocalization(getSubtitle(),
					"Subtitle", subtitle, languageId, defaultLanguageId));
		}
		else {
			setSubtitle(LocalizationUtil.removeLocalization(getSubtitle(),
					"Subtitle", languageId));
		}
	}

	@Override
	public void setSubtitleCurrentLanguageId(String languageId) {
		_subtitleCurrentLanguageId = languageId;
	}

	@Override
	public void setSubtitleMap(Map<Locale, String> subtitleMap) {
		setSubtitleMap(subtitleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSubtitleMap(Map<Locale, String> subtitleMap,
		Locale defaultLocale) {
		if (subtitleMap == null) {
			return;
		}

		setSubtitle(LocalizationUtil.updateLocalization(subtitleMap,
				getSubtitle(), "Subtitle",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap,
				getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public Long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(Long imageId) {
		_imageId = imageId;
	}

	@Override
	public Long getWebImageId() {
		return _webImageId;
	}

	@Override
	public void setWebImageId(Long webImageId) {
		_webImageId = webImageId;
	}

	@Override
	public String getImageOwner() {
		if (_imageOwner == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageOwner;
		}
	}

	@Override
	public void setImageOwner(String imageOwner) {
		_imageOwner = imageOwner;
	}

	@Override
	public String getManifestationsIds() {
		if (_manifestationsIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _manifestationsIds;
		}
	}

	@Override
	public void setManifestationsIds(String manifestationsIds) {
		_manifestationsIds = manifestationsIds;
	}

	@Override
	public String getPlaceSIGId() {
		if (_placeSIGId == null) {
			return StringPool.BLANK;
		}
		else {
			return _placeSIGId;
		}
	}

	@Override
	public void setPlaceSIGId(String placeSIGId) {
		_placeSIGId = placeSIGId;
	}

	@Override
	public String getPlaceName() {
		if (_placeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _placeName;
		}
	}

	@Override
	public String getPlaceName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPlaceName(languageId);
	}

	@Override
	public String getPlaceName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPlaceName(languageId, useDefault);
	}

	@Override
	public String getPlaceName(String languageId) {
		return LocalizationUtil.getLocalization(getPlaceName(), languageId);
	}

	@Override
	public String getPlaceName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getPlaceName(), languageId,
			useDefault);
	}

	@Override
	public String getPlaceNameCurrentLanguageId() {
		return _placeNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPlaceNameCurrentValue() {
		Locale locale = getLocale(_placeNameCurrentLanguageId);

		return getPlaceName(locale);
	}

	@Override
	public Map<Locale, String> getPlaceNameMap() {
		return LocalizationUtil.getLocalizationMap(getPlaceName());
	}

	@Override
	public void setPlaceName(String placeName) {
		_placeName = placeName;
	}

	@Override
	public void setPlaceName(String placeName, Locale locale) {
		setPlaceName(placeName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPlaceName(String placeName, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(placeName)) {
			setPlaceName(LocalizationUtil.updateLocalization(getPlaceName(),
					"PlaceName", placeName, languageId, defaultLanguageId));
		}
		else {
			setPlaceName(LocalizationUtil.removeLocalization(getPlaceName(),
					"PlaceName", languageId));
		}
	}

	@Override
	public void setPlaceNameCurrentLanguageId(String languageId) {
		_placeNameCurrentLanguageId = languageId;
	}

	@Override
	public void setPlaceNameMap(Map<Locale, String> placeNameMap) {
		setPlaceNameMap(placeNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPlaceNameMap(Map<Locale, String> placeNameMap,
		Locale defaultLocale) {
		if (placeNameMap == null) {
			return;
		}

		setPlaceName(LocalizationUtil.updateLocalization(placeNameMap,
				getPlaceName(), "PlaceName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getPlaceStreetNumber() {
		if (_placeStreetNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _placeStreetNumber;
		}
	}

	@Override
	public void setPlaceStreetNumber(String placeStreetNumber) {
		_placeStreetNumber = placeStreetNumber;
	}

	@Override
	public String getPlaceStreetName() {
		if (_placeStreetName == null) {
			return StringPool.BLANK;
		}
		else {
			return _placeStreetName;
		}
	}

	@Override
	public void setPlaceStreetName(String placeStreetName) {
		_placeStreetName = placeStreetName;
	}

	@Override
	public String getPlaceZipCode() {
		if (_placeZipCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _placeZipCode;
		}
	}

	@Override
	public void setPlaceZipCode(String placeZipCode) {
		_placeZipCode = placeZipCode;
	}

	@Override
	public Long getPlaceCityId() {
		return _placeCityId;
	}

	@Override
	public void setPlaceCityId(Long placeCityId) {
		_placeCityId = placeCityId;
	}

	@Override
	public String getPlaceCountry() {
		if (_placeCountry == null) {
			return StringPool.BLANK;
		}
		else {
			return _placeCountry;
		}
	}

	@Override
	public void setPlaceCountry(String placeCountry) {
		_placeCountry = placeCountry;
	}

	@Override
	public String getPromoter() {
		if (_promoter == null) {
			return StringPool.BLANK;
		}
		else {
			return _promoter;
		}
	}

	@Override
	public void setPromoter(String promoter) {
		_promoter = promoter;
	}

	@Override
	public String getPublicPhone() {
		if (_publicPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _publicPhone;
		}
	}

	@Override
	public void setPublicPhone(String publicPhone) {
		_publicPhone = publicPhone;
	}

	@Override
	public String getPublicEmail() {
		if (_publicEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _publicEmail;
		}
	}

	@Override
	public void setPublicEmail(String publicEmail) {
		_publicEmail = publicEmail;
	}

	@Override
	public String getWebsiteURL() {
		if (_websiteURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _websiteURL;
		}
	}

	@Override
	public String getWebsiteURL(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getWebsiteURL(languageId);
	}

	@Override
	public String getWebsiteURL(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getWebsiteURL(languageId, useDefault);
	}

	@Override
	public String getWebsiteURL(String languageId) {
		return LocalizationUtil.getLocalization(getWebsiteURL(), languageId);
	}

	@Override
	public String getWebsiteURL(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getWebsiteURL(), languageId,
			useDefault);
	}

	@Override
	public String getWebsiteURLCurrentLanguageId() {
		return _websiteURLCurrentLanguageId;
	}

	@JSON
	@Override
	public String getWebsiteURLCurrentValue() {
		Locale locale = getLocale(_websiteURLCurrentLanguageId);

		return getWebsiteURL(locale);
	}

	@Override
	public Map<Locale, String> getWebsiteURLMap() {
		return LocalizationUtil.getLocalizationMap(getWebsiteURL());
	}

	@Override
	public void setWebsiteURL(String websiteURL) {
		_websiteURL = websiteURL;
	}

	@Override
	public void setWebsiteURL(String websiteURL, Locale locale) {
		setWebsiteURL(websiteURL, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setWebsiteURL(String websiteURL, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(websiteURL)) {
			setWebsiteURL(LocalizationUtil.updateLocalization(getWebsiteURL(),
					"WebsiteURL", websiteURL, languageId, defaultLanguageId));
		}
		else {
			setWebsiteURL(LocalizationUtil.removeLocalization(getWebsiteURL(),
					"WebsiteURL", languageId));
		}
	}

	@Override
	public void setWebsiteURLCurrentLanguageId(String languageId) {
		_websiteURLCurrentLanguageId = languageId;
	}

	@Override
	public void setWebsiteURLMap(Map<Locale, String> websiteURLMap) {
		setWebsiteURLMap(websiteURLMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setWebsiteURLMap(Map<Locale, String> websiteURLMap,
		Locale defaultLocale) {
		if (websiteURLMap == null) {
			return;
		}

		setWebsiteURL(LocalizationUtil.updateLocalization(websiteURLMap,
				getWebsiteURL(), "WebsiteURL",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getWebsiteName() {
		if (_websiteName == null) {
			return StringPool.BLANK;
		}
		else {
			return _websiteName;
		}
	}

	@Override
	public String getWebsiteName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getWebsiteName(languageId);
	}

	@Override
	public String getWebsiteName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getWebsiteName(languageId, useDefault);
	}

	@Override
	public String getWebsiteName(String languageId) {
		return LocalizationUtil.getLocalization(getWebsiteName(), languageId);
	}

	@Override
	public String getWebsiteName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getWebsiteName(), languageId,
			useDefault);
	}

	@Override
	public String getWebsiteNameCurrentLanguageId() {
		return _websiteNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getWebsiteNameCurrentValue() {
		Locale locale = getLocale(_websiteNameCurrentLanguageId);

		return getWebsiteName(locale);
	}

	@Override
	public Map<Locale, String> getWebsiteNameMap() {
		return LocalizationUtil.getLocalizationMap(getWebsiteName());
	}

	@Override
	public void setWebsiteName(String websiteName) {
		_websiteName = websiteName;
	}

	@Override
	public void setWebsiteName(String websiteName, Locale locale) {
		setWebsiteName(websiteName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setWebsiteName(String websiteName, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(websiteName)) {
			setWebsiteName(LocalizationUtil.updateLocalization(
					getWebsiteName(), "WebsiteName", websiteName, languageId,
					defaultLanguageId));
		}
		else {
			setWebsiteName(LocalizationUtil.removeLocalization(
					getWebsiteName(), "WebsiteName", languageId));
		}
	}

	@Override
	public void setWebsiteNameCurrentLanguageId(String languageId) {
		_websiteNameCurrentLanguageId = languageId;
	}

	@Override
	public void setWebsiteNameMap(Map<Locale, String> websiteNameMap) {
		setWebsiteNameMap(websiteNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setWebsiteNameMap(Map<Locale, String> websiteNameMap,
		Locale defaultLocale) {
		if (websiteNameMap == null) {
			return;
		}

		setWebsiteName(LocalizationUtil.updateLocalization(websiteNameMap,
				getWebsiteName(), "WebsiteName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public Integer getFree() {
		return _free;
	}

	@Override
	public void setFree(Integer free) {
		_free = free;
	}

	@Override
	public String getPrice() {
		if (_price == null) {
			return StringPool.BLANK;
		}
		else {
			return _price;
		}
	}

	@Override
	public String getPrice(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPrice(languageId);
	}

	@Override
	public String getPrice(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPrice(languageId, useDefault);
	}

	@Override
	public String getPrice(String languageId) {
		return LocalizationUtil.getLocalization(getPrice(), languageId);
	}

	@Override
	public String getPrice(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getPrice(), languageId,
			useDefault);
	}

	@Override
	public String getPriceCurrentLanguageId() {
		return _priceCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPriceCurrentValue() {
		Locale locale = getLocale(_priceCurrentLanguageId);

		return getPrice(locale);
	}

	@Override
	public Map<Locale, String> getPriceMap() {
		return LocalizationUtil.getLocalizationMap(getPrice());
	}

	@Override
	public void setPrice(String price) {
		_price = price;
	}

	@Override
	public void setPrice(String price, Locale locale) {
		setPrice(price, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPrice(String price, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(price)) {
			setPrice(LocalizationUtil.updateLocalization(getPrice(), "Price",
					price, languageId, defaultLanguageId));
		}
		else {
			setPrice(LocalizationUtil.removeLocalization(getPrice(), "Price",
					languageId));
		}
	}

	@Override
	public void setPriceCurrentLanguageId(String languageId) {
		_priceCurrentLanguageId = languageId;
	}

	@Override
	public void setPriceMap(Map<Locale, String> priceMap) {
		setPriceMap(priceMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPriceMap(Map<Locale, String> priceMap, Locale defaultLocale) {
		if (priceMap == null) {
			return;
		}

		setPrice(LocalizationUtil.updateLocalization(priceMap, getPrice(),
				"Price", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public Long getCampaignId() {
		return _campaignId;
	}

	@Override
	public void setCampaignId(Long campaignId) {
		_columnBitmask |= CAMPAIGNID_COLUMN_BITMASK;

		if (!_setOriginalCampaignId) {
			_setOriginalCampaignId = true;

			_originalCampaignId = _campaignId;
		}

		_campaignId = campaignId;
	}

	public Long getOriginalCampaignId() {
		return _originalCampaignId;
	}

	@Override
	public String getThemesIds() {
		if (_themesIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _themesIds;
		}
	}

	@Override
	public void setThemesIds(String themesIds) {
		_themesIds = themesIds;
	}

	@Override
	public String getTypesIds() {
		if (_typesIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _typesIds;
		}
	}

	@Override
	public void setTypesIds(String typesIds) {
		_typesIds = typesIds;
	}

	@Override
	public String getPublicsIds() {
		if (_publicsIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _publicsIds;
		}
	}

	@Override
	public void setPublicsIds(String publicsIds) {
		_publicsIds = publicsIds;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				CampaignEvent.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CampaignEvent.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> subtitleMap = getSubtitleMap();

		for (Map.Entry<Locale, String> entry : subtitleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> placeNameMap = getPlaceNameMap();

		for (Map.Entry<Locale, String> entry : placeNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> websiteURLMap = getWebsiteURLMap();

		for (Map.Entry<Locale, String> entry : websiteURLMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> websiteNameMap = getWebsiteNameMap();

		for (Map.Entry<Locale, String> entry : websiteNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> priceMap = getPriceMap();

		for (Map.Entry<Locale, String> entry : priceMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(CampaignEvent.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String subtitle = getSubtitle(defaultLocale);

		if (Validator.isNull(subtitle)) {
			setSubtitle(getSubtitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSubtitle(getSubtitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(getDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String placeName = getPlaceName(defaultLocale);

		if (Validator.isNull(placeName)) {
			setPlaceName(getPlaceName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPlaceName(getPlaceName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String websiteURL = getWebsiteURL(defaultLocale);

		if (Validator.isNull(websiteURL)) {
			setWebsiteURL(getWebsiteURL(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setWebsiteURL(getWebsiteURL(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String websiteName = getWebsiteName(defaultLocale);

		if (Validator.isNull(websiteName)) {
			setWebsiteName(getWebsiteName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setWebsiteName(getWebsiteName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String price = getPrice(defaultLocale);

		if (Validator.isNull(price)) {
			setPrice(getPrice(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPrice(getPrice(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public CampaignEvent toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CampaignEvent)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CampaignEventImpl campaignEventImpl = new CampaignEventImpl();

		campaignEventImpl.setUuid(getUuid());
		campaignEventImpl.setCampaignEventId(getCampaignEventId());
		campaignEventImpl.setGroupId(getGroupId());
		campaignEventImpl.setCompanyId(getCompanyId());
		campaignEventImpl.setUserId(getUserId());
		campaignEventImpl.setUserName(getUserName());
		campaignEventImpl.setCreateDate(getCreateDate());
		campaignEventImpl.setModifiedDate(getModifiedDate());
		campaignEventImpl.setLastPublishDate(getLastPublishDate());
		campaignEventImpl.setStatus(getStatus());
		campaignEventImpl.setFirstName(getFirstName());
		campaignEventImpl.setLastName(getLastName());
		campaignEventImpl.setPhone(getPhone());
		campaignEventImpl.setEmail(getEmail());
		campaignEventImpl.setServiceId(getServiceId());
		campaignEventImpl.setService(getService());
		campaignEventImpl.setOnSiteFirstName(getOnSiteFirstName());
		campaignEventImpl.setOnSiteLastName(getOnSiteLastName());
		campaignEventImpl.setOnSitePhone(getOnSitePhone());
		campaignEventImpl.setTitle(getTitle());
		campaignEventImpl.setSubtitle(getSubtitle());
		campaignEventImpl.setDescription(getDescription());
		campaignEventImpl.setImageId(getImageId());
		campaignEventImpl.setWebImageId(getWebImageId());
		campaignEventImpl.setImageOwner(getImageOwner());
		campaignEventImpl.setManifestationsIds(getManifestationsIds());
		campaignEventImpl.setPlaceSIGId(getPlaceSIGId());
		campaignEventImpl.setPlaceName(getPlaceName());
		campaignEventImpl.setPlaceStreetNumber(getPlaceStreetNumber());
		campaignEventImpl.setPlaceStreetName(getPlaceStreetName());
		campaignEventImpl.setPlaceZipCode(getPlaceZipCode());
		campaignEventImpl.setPlaceCityId(getPlaceCityId());
		campaignEventImpl.setPlaceCountry(getPlaceCountry());
		campaignEventImpl.setPromoter(getPromoter());
		campaignEventImpl.setPublicPhone(getPublicPhone());
		campaignEventImpl.setPublicEmail(getPublicEmail());
		campaignEventImpl.setWebsiteURL(getWebsiteURL());
		campaignEventImpl.setWebsiteName(getWebsiteName());
		campaignEventImpl.setFree(getFree());
		campaignEventImpl.setPrice(getPrice());
		campaignEventImpl.setCampaignId(getCampaignId());
		campaignEventImpl.setThemesIds(getThemesIds());
		campaignEventImpl.setTypesIds(getTypesIds());
		campaignEventImpl.setPublicsIds(getPublicsIds());

		campaignEventImpl.resetOriginalValues();

		return campaignEventImpl;
	}

	@Override
	public int compareTo(CampaignEvent campaignEvent) {
		long primaryKey = campaignEvent.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CampaignEvent)) {
			return false;
		}

		CampaignEvent campaignEvent = (CampaignEvent)obj;

		long primaryKey = campaignEvent.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CampaignEventModelImpl campaignEventModelImpl = this;

		campaignEventModelImpl._originalUuid = campaignEventModelImpl._uuid;

		campaignEventModelImpl._originalGroupId = campaignEventModelImpl._groupId;

		campaignEventModelImpl._setOriginalGroupId = false;

		campaignEventModelImpl._originalCompanyId = campaignEventModelImpl._companyId;

		campaignEventModelImpl._setOriginalCompanyId = false;

		campaignEventModelImpl._setModifiedDate = false;

		campaignEventModelImpl._originalCampaignId = campaignEventModelImpl._campaignId;

		campaignEventModelImpl._setOriginalCampaignId = false;

		campaignEventModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CampaignEvent> toCacheModel() {
		CampaignEventCacheModel campaignEventCacheModel = new CampaignEventCacheModel();

		campaignEventCacheModel.uuid = getUuid();

		String uuid = campaignEventCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			campaignEventCacheModel.uuid = null;
		}

		campaignEventCacheModel.campaignEventId = getCampaignEventId();

		campaignEventCacheModel.groupId = getGroupId();

		campaignEventCacheModel.companyId = getCompanyId();

		campaignEventCacheModel.userId = getUserId();

		campaignEventCacheModel.userName = getUserName();

		String userName = campaignEventCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			campaignEventCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			campaignEventCacheModel.createDate = createDate.getTime();
		}
		else {
			campaignEventCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			campaignEventCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			campaignEventCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			campaignEventCacheModel.lastPublishDate = lastPublishDate.getTime();
		}
		else {
			campaignEventCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		campaignEventCacheModel.status = getStatus();

		campaignEventCacheModel.firstName = getFirstName();

		String firstName = campaignEventCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			campaignEventCacheModel.firstName = null;
		}

		campaignEventCacheModel.lastName = getLastName();

		String lastName = campaignEventCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			campaignEventCacheModel.lastName = null;
		}

		campaignEventCacheModel.phone = getPhone();

		String phone = campaignEventCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			campaignEventCacheModel.phone = null;
		}

		campaignEventCacheModel.email = getEmail();

		String email = campaignEventCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			campaignEventCacheModel.email = null;
		}

		campaignEventCacheModel.serviceId = getServiceId();

		campaignEventCacheModel.service = getService();

		String service = campaignEventCacheModel.service;

		if ((service != null) && (service.length() == 0)) {
			campaignEventCacheModel.service = null;
		}

		campaignEventCacheModel.onSiteFirstName = getOnSiteFirstName();

		String onSiteFirstName = campaignEventCacheModel.onSiteFirstName;

		if ((onSiteFirstName != null) && (onSiteFirstName.length() == 0)) {
			campaignEventCacheModel.onSiteFirstName = null;
		}

		campaignEventCacheModel.onSiteLastName = getOnSiteLastName();

		String onSiteLastName = campaignEventCacheModel.onSiteLastName;

		if ((onSiteLastName != null) && (onSiteLastName.length() == 0)) {
			campaignEventCacheModel.onSiteLastName = null;
		}

		campaignEventCacheModel.onSitePhone = getOnSitePhone();

		String onSitePhone = campaignEventCacheModel.onSitePhone;

		if ((onSitePhone != null) && (onSitePhone.length() == 0)) {
			campaignEventCacheModel.onSitePhone = null;
		}

		campaignEventCacheModel.title = getTitle();

		String title = campaignEventCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			campaignEventCacheModel.title = null;
		}

		campaignEventCacheModel.subtitle = getSubtitle();

		String subtitle = campaignEventCacheModel.subtitle;

		if ((subtitle != null) && (subtitle.length() == 0)) {
			campaignEventCacheModel.subtitle = null;
		}

		campaignEventCacheModel.description = getDescription();

		String description = campaignEventCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			campaignEventCacheModel.description = null;
		}

		campaignEventCacheModel.imageId = getImageId();

		campaignEventCacheModel.webImageId = getWebImageId();

		campaignEventCacheModel.imageOwner = getImageOwner();

		String imageOwner = campaignEventCacheModel.imageOwner;

		if ((imageOwner != null) && (imageOwner.length() == 0)) {
			campaignEventCacheModel.imageOwner = null;
		}

		campaignEventCacheModel.manifestationsIds = getManifestationsIds();

		String manifestationsIds = campaignEventCacheModel.manifestationsIds;

		if ((manifestationsIds != null) && (manifestationsIds.length() == 0)) {
			campaignEventCacheModel.manifestationsIds = null;
		}

		campaignEventCacheModel.placeSIGId = getPlaceSIGId();

		String placeSIGId = campaignEventCacheModel.placeSIGId;

		if ((placeSIGId != null) && (placeSIGId.length() == 0)) {
			campaignEventCacheModel.placeSIGId = null;
		}

		campaignEventCacheModel.placeName = getPlaceName();

		String placeName = campaignEventCacheModel.placeName;

		if ((placeName != null) && (placeName.length() == 0)) {
			campaignEventCacheModel.placeName = null;
		}

		campaignEventCacheModel.placeStreetNumber = getPlaceStreetNumber();

		String placeStreetNumber = campaignEventCacheModel.placeStreetNumber;

		if ((placeStreetNumber != null) && (placeStreetNumber.length() == 0)) {
			campaignEventCacheModel.placeStreetNumber = null;
		}

		campaignEventCacheModel.placeStreetName = getPlaceStreetName();

		String placeStreetName = campaignEventCacheModel.placeStreetName;

		if ((placeStreetName != null) && (placeStreetName.length() == 0)) {
			campaignEventCacheModel.placeStreetName = null;
		}

		campaignEventCacheModel.placeZipCode = getPlaceZipCode();

		String placeZipCode = campaignEventCacheModel.placeZipCode;

		if ((placeZipCode != null) && (placeZipCode.length() == 0)) {
			campaignEventCacheModel.placeZipCode = null;
		}

		campaignEventCacheModel.placeCityId = getPlaceCityId();

		campaignEventCacheModel.placeCountry = getPlaceCountry();

		String placeCountry = campaignEventCacheModel.placeCountry;

		if ((placeCountry != null) && (placeCountry.length() == 0)) {
			campaignEventCacheModel.placeCountry = null;
		}

		campaignEventCacheModel.promoter = getPromoter();

		String promoter = campaignEventCacheModel.promoter;

		if ((promoter != null) && (promoter.length() == 0)) {
			campaignEventCacheModel.promoter = null;
		}

		campaignEventCacheModel.publicPhone = getPublicPhone();

		String publicPhone = campaignEventCacheModel.publicPhone;

		if ((publicPhone != null) && (publicPhone.length() == 0)) {
			campaignEventCacheModel.publicPhone = null;
		}

		campaignEventCacheModel.publicEmail = getPublicEmail();

		String publicEmail = campaignEventCacheModel.publicEmail;

		if ((publicEmail != null) && (publicEmail.length() == 0)) {
			campaignEventCacheModel.publicEmail = null;
		}

		campaignEventCacheModel.websiteURL = getWebsiteURL();

		String websiteURL = campaignEventCacheModel.websiteURL;

		if ((websiteURL != null) && (websiteURL.length() == 0)) {
			campaignEventCacheModel.websiteURL = null;
		}

		campaignEventCacheModel.websiteName = getWebsiteName();

		String websiteName = campaignEventCacheModel.websiteName;

		if ((websiteName != null) && (websiteName.length() == 0)) {
			campaignEventCacheModel.websiteName = null;
		}

		campaignEventCacheModel.free = getFree();

		campaignEventCacheModel.price = getPrice();

		String price = campaignEventCacheModel.price;

		if ((price != null) && (price.length() == 0)) {
			campaignEventCacheModel.price = null;
		}

		campaignEventCacheModel.campaignId = getCampaignId();

		campaignEventCacheModel.themesIds = getThemesIds();

		String themesIds = campaignEventCacheModel.themesIds;

		if ((themesIds != null) && (themesIds.length() == 0)) {
			campaignEventCacheModel.themesIds = null;
		}

		campaignEventCacheModel.typesIds = getTypesIds();

		String typesIds = campaignEventCacheModel.typesIds;

		if ((typesIds != null) && (typesIds.length() == 0)) {
			campaignEventCacheModel.typesIds = null;
		}

		campaignEventCacheModel.publicsIds = getPublicsIds();

		String publicsIds = campaignEventCacheModel.publicsIds;

		if ((publicsIds != null) && (publicsIds.length() == 0)) {
			campaignEventCacheModel.publicsIds = null;
		}

		return campaignEventCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(89);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", campaignEventId=");
		sb.append(getCampaignEventId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", lastPublishDate=");
		sb.append(getLastPublishDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", serviceId=");
		sb.append(getServiceId());
		sb.append(", service=");
		sb.append(getService());
		sb.append(", onSiteFirstName=");
		sb.append(getOnSiteFirstName());
		sb.append(", onSiteLastName=");
		sb.append(getOnSiteLastName());
		sb.append(", onSitePhone=");
		sb.append(getOnSitePhone());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", subtitle=");
		sb.append(getSubtitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", imageId=");
		sb.append(getImageId());
		sb.append(", webImageId=");
		sb.append(getWebImageId());
		sb.append(", imageOwner=");
		sb.append(getImageOwner());
		sb.append(", manifestationsIds=");
		sb.append(getManifestationsIds());
		sb.append(", placeSIGId=");
		sb.append(getPlaceSIGId());
		sb.append(", placeName=");
		sb.append(getPlaceName());
		sb.append(", placeStreetNumber=");
		sb.append(getPlaceStreetNumber());
		sb.append(", placeStreetName=");
		sb.append(getPlaceStreetName());
		sb.append(", placeZipCode=");
		sb.append(getPlaceZipCode());
		sb.append(", placeCityId=");
		sb.append(getPlaceCityId());
		sb.append(", placeCountry=");
		sb.append(getPlaceCountry());
		sb.append(", promoter=");
		sb.append(getPromoter());
		sb.append(", publicPhone=");
		sb.append(getPublicPhone());
		sb.append(", publicEmail=");
		sb.append(getPublicEmail());
		sb.append(", websiteURL=");
		sb.append(getWebsiteURL());
		sb.append(", websiteName=");
		sb.append(getWebsiteName());
		sb.append(", free=");
		sb.append(getFree());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", campaignId=");
		sb.append(getCampaignId());
		sb.append(", themesIds=");
		sb.append(getThemesIds());
		sb.append(", typesIds=");
		sb.append(getTypesIds());
		sb.append(", publicsIds=");
		sb.append(getPublicsIds());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(136);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.agenda.model.CampaignEvent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>campaignEventId</column-name><column-value><![CDATA[");
		sb.append(getCampaignEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastPublishDate</column-name><column-value><![CDATA[");
		sb.append(getLastPublishDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceId</column-name><column-value><![CDATA[");
		sb.append(getServiceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>service</column-name><column-value><![CDATA[");
		sb.append(getService());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>onSiteFirstName</column-name><column-value><![CDATA[");
		sb.append(getOnSiteFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>onSiteLastName</column-name><column-value><![CDATA[");
		sb.append(getOnSiteLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>onSitePhone</column-name><column-value><![CDATA[");
		sb.append(getOnSitePhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subtitle</column-name><column-value><![CDATA[");
		sb.append(getSubtitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageId</column-name><column-value><![CDATA[");
		sb.append(getImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>webImageId</column-name><column-value><![CDATA[");
		sb.append(getWebImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageOwner</column-name><column-value><![CDATA[");
		sb.append(getImageOwner());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manifestationsIds</column-name><column-value><![CDATA[");
		sb.append(getManifestationsIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>placeSIGId</column-name><column-value><![CDATA[");
		sb.append(getPlaceSIGId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>placeName</column-name><column-value><![CDATA[");
		sb.append(getPlaceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>placeStreetNumber</column-name><column-value><![CDATA[");
		sb.append(getPlaceStreetNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>placeStreetName</column-name><column-value><![CDATA[");
		sb.append(getPlaceStreetName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>placeZipCode</column-name><column-value><![CDATA[");
		sb.append(getPlaceZipCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>placeCityId</column-name><column-value><![CDATA[");
		sb.append(getPlaceCityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>placeCountry</column-name><column-value><![CDATA[");
		sb.append(getPlaceCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>promoter</column-name><column-value><![CDATA[");
		sb.append(getPromoter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publicPhone</column-name><column-value><![CDATA[");
		sb.append(getPublicPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publicEmail</column-name><column-value><![CDATA[");
		sb.append(getPublicEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>websiteURL</column-name><column-value><![CDATA[");
		sb.append(getWebsiteURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>websiteName</column-name><column-value><![CDATA[");
		sb.append(getWebsiteName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>free</column-name><column-value><![CDATA[");
		sb.append(getFree());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>campaignId</column-name><column-value><![CDATA[");
		sb.append(getCampaignId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>themesIds</column-name><column-value><![CDATA[");
		sb.append(getThemesIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typesIds</column-name><column-value><![CDATA[");
		sb.append(getTypesIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publicsIds</column-name><column-value><![CDATA[");
		sb.append(getPublicsIds());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CampaignEvent.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CampaignEvent.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _campaignEventId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _lastPublishDate;
	private int _status;
	private String _firstName;
	private String _lastName;
	private String _phone;
	private String _email;
	private Long _serviceId;
	private String _service;
	private String _onSiteFirstName;
	private String _onSiteLastName;
	private String _onSitePhone;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _subtitle;
	private String _subtitleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private Long _imageId;
	private Long _webImageId;
	private String _imageOwner;
	private String _manifestationsIds;
	private String _placeSIGId;
	private String _placeName;
	private String _placeNameCurrentLanguageId;
	private String _placeStreetNumber;
	private String _placeStreetName;
	private String _placeZipCode;
	private Long _placeCityId;
	private String _placeCountry;
	private String _promoter;
	private String _publicPhone;
	private String _publicEmail;
	private String _websiteURL;
	private String _websiteURLCurrentLanguageId;
	private String _websiteName;
	private String _websiteNameCurrentLanguageId;
	private Integer _free;
	private String _price;
	private String _priceCurrentLanguageId;
	private Long _campaignId;
	private Long _originalCampaignId;
	private boolean _setOriginalCampaignId;
	private String _themesIds;
	private String _typesIds;
	private String _publicsIds;
	private long _columnBitmask;
	private CampaignEvent _escapedModel;
}