/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.agenda.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import eu.strasbourg.service.agenda.model.Historic;
import eu.strasbourg.service.agenda.model.HistoricModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Historic service. Represents a row in the &quot;agenda_Historic&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>HistoricModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HistoricImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see HistoricImpl
 * @generated
 */
@ProviderType
public class HistoricModelImpl
	extends BaseModelImpl<Historic> implements HistoricModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a historic model instance should use the <code>Historic</code> interface instead.
	 */
	public static final String TABLE_NAME = "agenda_Historic";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"eventId", Types.BIGINT},
		{"title", Types.VARCHAR}, {"suppressionDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("suppressionDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table agenda_Historic (uuid_ VARCHAR(75) null,eventId LONG not null primary key,title VARCHAR(75) null,suppressionDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table agenda_Historic";

	public static final String ORDER_BY_JPQL = " ORDER BY historic.eventId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY agenda_Historic.eventId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.agenda.model.Historic"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.agenda.model.Historic"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.agenda.model.Historic"),
		true);

	public static final long SUPPRESSIONDATE_COLUMN_BITMASK = 1L;

	public static final long UUID_COLUMN_BITMASK = 2L;

	public static final long EVENTID_COLUMN_BITMASK = 4L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.agenda.model.Historic"));

	public HistoricModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Historic.class;
	}

	@Override
	public String getModelClassName() {
		return Historic.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Historic, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Historic, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Historic, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Historic)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Historic, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Historic, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Historic)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Historic, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Historic, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Historic>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Historic.class.getClassLoader(), Historic.class,
			ModelWrapper.class);

		try {
			Constructor<Historic> constructor =
				(Constructor<Historic>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Historic, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Historic, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Historic, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Historic, Object>>();
		Map<String, BiConsumer<Historic, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Historic, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Historic, Object>() {

				@Override
				public Object apply(Historic historic) {
					return historic.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Historic, Object>() {

				@Override
				public void accept(Historic historic, Object uuid) {
					historic.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"eventId",
			new Function<Historic, Object>() {

				@Override
				public Object apply(Historic historic) {
					return historic.getEventId();
				}

			});
		attributeSetterBiConsumers.put(
			"eventId",
			new BiConsumer<Historic, Object>() {

				@Override
				public void accept(Historic historic, Object eventId) {
					historic.setEventId((Long)eventId);
				}

			});
		attributeGetterFunctions.put(
			"title",
			new Function<Historic, Object>() {

				@Override
				public Object apply(Historic historic) {
					return historic.getTitle();
				}

			});
		attributeSetterBiConsumers.put(
			"title",
			new BiConsumer<Historic, Object>() {

				@Override
				public void accept(Historic historic, Object title) {
					historic.setTitle((String)title);
				}

			});
		attributeGetterFunctions.put(
			"suppressionDate",
			new Function<Historic, Object>() {

				@Override
				public Object apply(Historic historic) {
					return historic.getSuppressionDate();
				}

			});
		attributeSetterBiConsumers.put(
			"suppressionDate",
			new BiConsumer<Historic, Object>() {

				@Override
				public void accept(Historic historic, Object suppressionDate) {
					historic.setSuppressionDate((Date)suppressionDate);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_eventId = eventId;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public Date getSuppressionDate() {
		return _suppressionDate;
	}

	@Override
	public void setSuppressionDate(Date suppressionDate) {
		_columnBitmask |= SUPPRESSIONDATE_COLUMN_BITMASK;

		if (_originalSuppressionDate == null) {
			_originalSuppressionDate = _suppressionDate;
		}

		_suppressionDate = suppressionDate;
	}

	public Date getOriginalSuppressionDate() {
		return _originalSuppressionDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Historic.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Historic toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HistoricImpl historicImpl = new HistoricImpl();

		historicImpl.setUuid(getUuid());
		historicImpl.setEventId(getEventId());
		historicImpl.setTitle(getTitle());
		historicImpl.setSuppressionDate(getSuppressionDate());

		historicImpl.resetOriginalValues();

		return historicImpl;
	}

	@Override
	public int compareTo(Historic historic) {
		long primaryKey = historic.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Historic)) {
			return false;
		}

		Historic historic = (Historic)obj;

		long primaryKey = historic.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		HistoricModelImpl historicModelImpl = this;

		historicModelImpl._originalUuid = historicModelImpl._uuid;

		historicModelImpl._originalSuppressionDate =
			historicModelImpl._suppressionDate;

		historicModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Historic> toCacheModel() {
		HistoricCacheModel historicCacheModel = new HistoricCacheModel();

		historicCacheModel.uuid = getUuid();

		String uuid = historicCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			historicCacheModel.uuid = null;
		}

		historicCacheModel.eventId = getEventId();

		historicCacheModel.title = getTitle();

		String title = historicCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			historicCacheModel.title = null;
		}

		Date suppressionDate = getSuppressionDate();

		if (suppressionDate != null) {
			historicCacheModel.suppressionDate = suppressionDate.getTime();
		}
		else {
			historicCacheModel.suppressionDate = Long.MIN_VALUE;
		}

		return historicCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Historic, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Historic, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Historic, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Historic)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Historic, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Historic, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Historic, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Historic)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Historic>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private String _uuid;
	private String _originalUuid;
	private long _eventId;
	private String _title;
	private Date _suppressionDate;
	private Date _originalSuppressionDate;
	private long _columnBitmask;
	private Historic _escapedModel;

}