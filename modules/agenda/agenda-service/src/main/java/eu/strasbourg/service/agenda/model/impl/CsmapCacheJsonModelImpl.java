/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.agenda.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import eu.strasbourg.service.agenda.model.CsmapCacheJson;
import eu.strasbourg.service.agenda.model.CsmapCacheJsonModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CsmapCacheJson service. Represents a row in the &quot;agenda_CsmapCacheJson&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CsmapCacheJsonModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CsmapCacheJsonImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see CsmapCacheJsonImpl
 * @generated
 */
public class CsmapCacheJsonModelImpl
	extends BaseModelImpl<CsmapCacheJson> implements CsmapCacheJsonModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a csmap cache json model instance should use the <code>CsmapCacheJson</code> interface instead.
	 */
	public static final String TABLE_NAME = "agenda_CsmapCacheJson";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"eventId", Types.BIGINT},
		{"jsonEvent", Types.CLOB}, {"createEvent", Types.TIMESTAMP},
		{"modifiedEvent", Types.TIMESTAMP}, {"isActive", Types.BOOLEAN},
		{"regeneratedDate", Types.TIMESTAMP}, {"hasSchedules", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("jsonEvent", Types.CLOB);
		TABLE_COLUMNS_MAP.put("createEvent", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedEvent", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("isActive", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("regeneratedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("hasSchedules", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table agenda_CsmapCacheJson (uuid_ VARCHAR(75) null,eventId LONG not null primary key,jsonEvent TEXT null,createEvent DATE null,modifiedEvent DATE null,isActive BOOLEAN,regeneratedDate DATE null,hasSchedules BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table agenda_CsmapCacheJson";

	public static final String ORDER_BY_JPQL =
		" ORDER BY csmapCacheJson.eventId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY agenda_CsmapCacheJson.eventId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.agenda.model.CsmapCacheJson"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.agenda.model.CsmapCacheJson"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.agenda.model.CsmapCacheJson"),
		true);

	public static final long CREATEEVENT_COLUMN_BITMASK = 1L;

	public static final long EVENTID_COLUMN_BITMASK = 2L;

	public static final long HASSCHEDULES_COLUMN_BITMASK = 4L;

	public static final long ISACTIVE_COLUMN_BITMASK = 8L;

	public static final long MODIFIEDEVENT_COLUMN_BITMASK = 16L;

	public static final long REGENERATEDDATE_COLUMN_BITMASK = 32L;

	public static final long UUID_COLUMN_BITMASK = 64L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.agenda.model.CsmapCacheJson"));

	public CsmapCacheJsonModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CsmapCacheJson.class;
	}

	@Override
	public String getModelClassName() {
		return CsmapCacheJson.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CsmapCacheJson, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CsmapCacheJson, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CsmapCacheJson, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CsmapCacheJson)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CsmapCacheJson, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CsmapCacheJson, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CsmapCacheJson)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CsmapCacheJson, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CsmapCacheJson, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CsmapCacheJson>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CsmapCacheJson.class.getClassLoader(), CsmapCacheJson.class,
			ModelWrapper.class);

		try {
			Constructor<CsmapCacheJson> constructor =
				(Constructor<CsmapCacheJson>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<CsmapCacheJson, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CsmapCacheJson, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CsmapCacheJson, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CsmapCacheJson, Object>>();
		Map<String, BiConsumer<CsmapCacheJson, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CsmapCacheJson, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<CsmapCacheJson, Object>() {

				@Override
				public Object apply(CsmapCacheJson csmapCacheJson) {
					return csmapCacheJson.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<CsmapCacheJson, Object>() {

				@Override
				public void accept(
					CsmapCacheJson csmapCacheJson, Object uuidObject) {

					csmapCacheJson.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"eventId",
			new Function<CsmapCacheJson, Object>() {

				@Override
				public Object apply(CsmapCacheJson csmapCacheJson) {
					return csmapCacheJson.getEventId();
				}

			});
		attributeSetterBiConsumers.put(
			"eventId",
			new BiConsumer<CsmapCacheJson, Object>() {

				@Override
				public void accept(
					CsmapCacheJson csmapCacheJson, Object eventIdObject) {

					csmapCacheJson.setEventId((Long)eventIdObject);
				}

			});
		attributeGetterFunctions.put(
			"jsonEvent",
			new Function<CsmapCacheJson, Object>() {

				@Override
				public Object apply(CsmapCacheJson csmapCacheJson) {
					return csmapCacheJson.getJsonEvent();
				}

			});
		attributeSetterBiConsumers.put(
			"jsonEvent",
			new BiConsumer<CsmapCacheJson, Object>() {

				@Override
				public void accept(
					CsmapCacheJson csmapCacheJson, Object jsonEventObject) {

					csmapCacheJson.setJsonEvent((String)jsonEventObject);
				}

			});
		attributeGetterFunctions.put(
			"createEvent",
			new Function<CsmapCacheJson, Object>() {

				@Override
				public Object apply(CsmapCacheJson csmapCacheJson) {
					return csmapCacheJson.getCreateEvent();
				}

			});
		attributeSetterBiConsumers.put(
			"createEvent",
			new BiConsumer<CsmapCacheJson, Object>() {

				@Override
				public void accept(
					CsmapCacheJson csmapCacheJson, Object createEventObject) {

					csmapCacheJson.setCreateEvent((Date)createEventObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedEvent",
			new Function<CsmapCacheJson, Object>() {

				@Override
				public Object apply(CsmapCacheJson csmapCacheJson) {
					return csmapCacheJson.getModifiedEvent();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedEvent",
			new BiConsumer<CsmapCacheJson, Object>() {

				@Override
				public void accept(
					CsmapCacheJson csmapCacheJson, Object modifiedEventObject) {

					csmapCacheJson.setModifiedEvent((Date)modifiedEventObject);
				}

			});
		attributeGetterFunctions.put(
			"isActive",
			new Function<CsmapCacheJson, Object>() {

				@Override
				public Object apply(CsmapCacheJson csmapCacheJson) {
					return csmapCacheJson.getIsActive();
				}

			});
		attributeSetterBiConsumers.put(
			"isActive",
			new BiConsumer<CsmapCacheJson, Object>() {

				@Override
				public void accept(
					CsmapCacheJson csmapCacheJson, Object isActiveObject) {

					csmapCacheJson.setIsActive((Boolean)isActiveObject);
				}

			});
		attributeGetterFunctions.put(
			"regeneratedDate",
			new Function<CsmapCacheJson, Object>() {

				@Override
				public Object apply(CsmapCacheJson csmapCacheJson) {
					return csmapCacheJson.getRegeneratedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"regeneratedDate",
			new BiConsumer<CsmapCacheJson, Object>() {

				@Override
				public void accept(
					CsmapCacheJson csmapCacheJson,
					Object regeneratedDateObject) {

					csmapCacheJson.setRegeneratedDate(
						(Date)regeneratedDateObject);
				}

			});
		attributeGetterFunctions.put(
			"hasSchedules",
			new Function<CsmapCacheJson, Object>() {

				@Override
				public Object apply(CsmapCacheJson csmapCacheJson) {
					return csmapCacheJson.getHasSchedules();
				}

			});
		attributeSetterBiConsumers.put(
			"hasSchedules",
			new BiConsumer<CsmapCacheJson, Object>() {

				@Override
				public void accept(
					CsmapCacheJson csmapCacheJson, Object hasSchedulesObject) {

					csmapCacheJson.setHasSchedules((Boolean)hasSchedulesObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_columnBitmask |= EVENTID_COLUMN_BITMASK;

		if (!_setOriginalEventId) {
			_setOriginalEventId = true;

			_originalEventId = _eventId;
		}

		_eventId = eventId;
	}

	public long getOriginalEventId() {
		return _originalEventId;
	}

	@Override
	public String getJsonEvent() {
		if (_jsonEvent == null) {
			return "";
		}
		else {
			return _jsonEvent;
		}
	}

	@Override
	public void setJsonEvent(String jsonEvent) {
		_jsonEvent = jsonEvent;
	}

	@Override
	public Date getCreateEvent() {
		return _createEvent;
	}

	@Override
	public void setCreateEvent(Date createEvent) {
		_columnBitmask |= CREATEEVENT_COLUMN_BITMASK;

		if (_originalCreateEvent == null) {
			_originalCreateEvent = _createEvent;
		}

		_createEvent = createEvent;
	}

	public Date getOriginalCreateEvent() {
		return _originalCreateEvent;
	}

	@Override
	public Date getModifiedEvent() {
		return _modifiedEvent;
	}

	@Override
	public void setModifiedEvent(Date modifiedEvent) {
		_columnBitmask |= MODIFIEDEVENT_COLUMN_BITMASK;

		if (_originalModifiedEvent == null) {
			_originalModifiedEvent = _modifiedEvent;
		}

		_modifiedEvent = modifiedEvent;
	}

	public Date getOriginalModifiedEvent() {
		return _originalModifiedEvent;
	}

	@Override
	public boolean getIsActive() {
		return _isActive;
	}

	@Override
	public boolean isIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(boolean isActive) {
		_columnBitmask |= ISACTIVE_COLUMN_BITMASK;

		if (!_setOriginalIsActive) {
			_setOriginalIsActive = true;

			_originalIsActive = _isActive;
		}

		_isActive = isActive;
	}

	public boolean getOriginalIsActive() {
		return _originalIsActive;
	}

	@Override
	public Date getRegeneratedDate() {
		return _regeneratedDate;
	}

	@Override
	public void setRegeneratedDate(Date regeneratedDate) {
		_columnBitmask |= REGENERATEDDATE_COLUMN_BITMASK;

		if (_originalRegeneratedDate == null) {
			_originalRegeneratedDate = _regeneratedDate;
		}

		_regeneratedDate = regeneratedDate;
	}

	public Date getOriginalRegeneratedDate() {
		return _originalRegeneratedDate;
	}

	@Override
	public boolean getHasSchedules() {
		return _hasSchedules;
	}

	@Override
	public boolean isHasSchedules() {
		return _hasSchedules;
	}

	@Override
	public void setHasSchedules(boolean hasSchedules) {
		_columnBitmask |= HASSCHEDULES_COLUMN_BITMASK;

		if (!_setOriginalHasSchedules) {
			_setOriginalHasSchedules = true;

			_originalHasSchedules = _hasSchedules;
		}

		_hasSchedules = hasSchedules;
	}

	public boolean getOriginalHasSchedules() {
		return _originalHasSchedules;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, CsmapCacheJson.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CsmapCacheJson toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CsmapCacheJson>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CsmapCacheJsonImpl csmapCacheJsonImpl = new CsmapCacheJsonImpl();

		csmapCacheJsonImpl.setUuid(getUuid());
		csmapCacheJsonImpl.setEventId(getEventId());
		csmapCacheJsonImpl.setJsonEvent(getJsonEvent());
		csmapCacheJsonImpl.setCreateEvent(getCreateEvent());
		csmapCacheJsonImpl.setModifiedEvent(getModifiedEvent());
		csmapCacheJsonImpl.setIsActive(isIsActive());
		csmapCacheJsonImpl.setRegeneratedDate(getRegeneratedDate());
		csmapCacheJsonImpl.setHasSchedules(isHasSchedules());

		csmapCacheJsonImpl.resetOriginalValues();

		return csmapCacheJsonImpl;
	}

	@Override
	public int compareTo(CsmapCacheJson csmapCacheJson) {
		long primaryKey = csmapCacheJson.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CsmapCacheJson)) {
			return false;
		}

		CsmapCacheJson csmapCacheJson = (CsmapCacheJson)object;

		long primaryKey = csmapCacheJson.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CsmapCacheJsonModelImpl csmapCacheJsonModelImpl = this;

		csmapCacheJsonModelImpl._originalUuid = csmapCacheJsonModelImpl._uuid;

		csmapCacheJsonModelImpl._originalEventId =
			csmapCacheJsonModelImpl._eventId;

		csmapCacheJsonModelImpl._setOriginalEventId = false;

		csmapCacheJsonModelImpl._originalCreateEvent =
			csmapCacheJsonModelImpl._createEvent;

		csmapCacheJsonModelImpl._originalModifiedEvent =
			csmapCacheJsonModelImpl._modifiedEvent;

		csmapCacheJsonModelImpl._originalIsActive =
			csmapCacheJsonModelImpl._isActive;

		csmapCacheJsonModelImpl._setOriginalIsActive = false;

		csmapCacheJsonModelImpl._originalRegeneratedDate =
			csmapCacheJsonModelImpl._regeneratedDate;

		csmapCacheJsonModelImpl._originalHasSchedules =
			csmapCacheJsonModelImpl._hasSchedules;

		csmapCacheJsonModelImpl._setOriginalHasSchedules = false;

		csmapCacheJsonModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CsmapCacheJson> toCacheModel() {
		CsmapCacheJsonCacheModel csmapCacheJsonCacheModel =
			new CsmapCacheJsonCacheModel();

		csmapCacheJsonCacheModel.uuid = getUuid();

		String uuid = csmapCacheJsonCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			csmapCacheJsonCacheModel.uuid = null;
		}

		csmapCacheJsonCacheModel.eventId = getEventId();

		csmapCacheJsonCacheModel.jsonEvent = getJsonEvent();

		String jsonEvent = csmapCacheJsonCacheModel.jsonEvent;

		if ((jsonEvent != null) && (jsonEvent.length() == 0)) {
			csmapCacheJsonCacheModel.jsonEvent = null;
		}

		Date createEvent = getCreateEvent();

		if (createEvent != null) {
			csmapCacheJsonCacheModel.createEvent = createEvent.getTime();
		}
		else {
			csmapCacheJsonCacheModel.createEvent = Long.MIN_VALUE;
		}

		Date modifiedEvent = getModifiedEvent();

		if (modifiedEvent != null) {
			csmapCacheJsonCacheModel.modifiedEvent = modifiedEvent.getTime();
		}
		else {
			csmapCacheJsonCacheModel.modifiedEvent = Long.MIN_VALUE;
		}

		csmapCacheJsonCacheModel.isActive = isIsActive();

		Date regeneratedDate = getRegeneratedDate();

		if (regeneratedDate != null) {
			csmapCacheJsonCacheModel.regeneratedDate =
				regeneratedDate.getTime();
		}
		else {
			csmapCacheJsonCacheModel.regeneratedDate = Long.MIN_VALUE;
		}

		csmapCacheJsonCacheModel.hasSchedules = isHasSchedules();

		return csmapCacheJsonCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CsmapCacheJson, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CsmapCacheJson, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CsmapCacheJson, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CsmapCacheJson)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CsmapCacheJson, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CsmapCacheJson, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CsmapCacheJson, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CsmapCacheJson)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CsmapCacheJson>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _eventId;
	private long _originalEventId;
	private boolean _setOriginalEventId;
	private String _jsonEvent;
	private Date _createEvent;
	private Date _originalCreateEvent;
	private Date _modifiedEvent;
	private Date _originalModifiedEvent;
	private boolean _isActive;
	private boolean _originalIsActive;
	private boolean _setOriginalIsActive;
	private Date _regeneratedDate;
	private Date _originalRegeneratedDate;
	private boolean _hasSchedules;
	private boolean _originalHasSchedules;
	private boolean _setOriginalHasSchedules;
	private long _columnBitmask;
	private CsmapCacheJson _escapedModel;

}