/**
 * SPDX-FileCopyrightText: (c) 2023 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package eu.strasbourg.service.agenda.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import eu.strasbourg.service.agenda.model.EventPeriod;
import eu.strasbourg.service.agenda.model.EventPeriodModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EventPeriod service. Represents a row in the &quot;agenda_EventPeriod&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EventPeriodModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventPeriodImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see EventPeriodImpl
 * @generated
 */
@JSON(strict = true)
public class EventPeriodModelImpl
	extends BaseModelImpl<EventPeriod> implements EventPeriodModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a event period model instance should use the <code>EventPeriod</code> interface instead.
	 */
	public static final String TABLE_NAME = "agenda_EventPeriod";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"eventPeriodId", Types.BIGINT},
		{"startDate", Types.TIMESTAMP}, {"endDate", Types.TIMESTAMP},
		{"timeDetail", Types.VARCHAR}, {"eventId", Types.BIGINT},
		{"campaignEventId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventPeriodId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("timeDetail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("campaignEventId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table agenda_EventPeriod (uuid_ VARCHAR(75) null,eventPeriodId LONG not null primary key,startDate DATE null,endDate DATE null,timeDetail STRING null,eventId LONG,campaignEventId LONG)";

	public static final String TABLE_SQL_DROP = "drop table agenda_EventPeriod";

	public static final String ORDER_BY_JPQL =
		" ORDER BY eventPeriod.eventPeriodId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY agenda_EventPeriod.eventPeriodId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CAMPAIGNEVENTID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EVENTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EVENTPERIODID_COLUMN_BITMASK = 8L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.agenda.model.EventPeriod"));

	public EventPeriodModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventPeriodId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventPeriodId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventPeriodId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EventPeriod.class;
	}

	@Override
	public String getModelClassName() {
		return EventPeriod.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EventPeriod, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EventPeriod, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EventPeriod, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EventPeriod)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EventPeriod, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EventPeriod, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EventPeriod)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EventPeriod, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EventPeriod, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<EventPeriod, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<EventPeriod, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<EventPeriod, Object>>();

			attributeGetterFunctions.put("uuid", EventPeriod::getUuid);
			attributeGetterFunctions.put(
				"eventPeriodId", EventPeriod::getEventPeriodId);
			attributeGetterFunctions.put(
				"startDate", EventPeriod::getStartDate);
			attributeGetterFunctions.put("endDate", EventPeriod::getEndDate);
			attributeGetterFunctions.put(
				"timeDetail", EventPeriod::getTimeDetail);
			attributeGetterFunctions.put("eventId", EventPeriod::getEventId);
			attributeGetterFunctions.put(
				"campaignEventId", EventPeriod::getCampaignEventId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<EventPeriod, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<EventPeriod, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<EventPeriod, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<EventPeriod, String>)EventPeriod::setUuid);
			attributeSetterBiConsumers.put(
				"eventPeriodId",
				(BiConsumer<EventPeriod, Long>)EventPeriod::setEventPeriodId);
			attributeSetterBiConsumers.put(
				"startDate",
				(BiConsumer<EventPeriod, Date>)EventPeriod::setStartDate);
			attributeSetterBiConsumers.put(
				"endDate",
				(BiConsumer<EventPeriod, Date>)EventPeriod::setEndDate);
			attributeSetterBiConsumers.put(
				"timeDetail",
				(BiConsumer<EventPeriod, String>)EventPeriod::setTimeDetail);
			attributeSetterBiConsumers.put(
				"eventId",
				(BiConsumer<EventPeriod, Long>)EventPeriod::setEventId);
			attributeSetterBiConsumers.put(
				"campaignEventId",
				(BiConsumer<EventPeriod, Long>)EventPeriod::setCampaignEventId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEventPeriodId() {
		return _eventPeriodId;
	}

	@Override
	public void setEventPeriodId(long eventPeriodId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_eventPeriodId = eventPeriodId;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	@JSON
	@Override
	public String getTimeDetail() {
		if (_timeDetail == null) {
			return "";
		}
		else {
			return _timeDetail;
		}
	}

	@Override
	public String getTimeDetail(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTimeDetail(languageId);
	}

	@Override
	public String getTimeDetail(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTimeDetail(languageId, useDefault);
	}

	@Override
	public String getTimeDetail(String languageId) {
		return LocalizationUtil.getLocalization(getTimeDetail(), languageId);
	}

	@Override
	public String getTimeDetail(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTimeDetail(), languageId, useDefault);
	}

	@Override
	public String getTimeDetailCurrentLanguageId() {
		return _timeDetailCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTimeDetailCurrentValue() {
		Locale locale = getLocale(_timeDetailCurrentLanguageId);

		return getTimeDetail(locale);
	}

	@Override
	public Map<Locale, String> getTimeDetailMap() {
		return LocalizationUtil.getLocalizationMap(getTimeDetail());
	}

	@Override
	public void setTimeDetail(String timeDetail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_timeDetail = timeDetail;
	}

	@Override
	public void setTimeDetail(String timeDetail, Locale locale) {
		setTimeDetail(timeDetail, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTimeDetail(
		String timeDetail, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(timeDetail)) {
			setTimeDetail(
				LocalizationUtil.updateLocalization(
					getTimeDetail(), "TimeDetail", timeDetail, languageId,
					defaultLanguageId));
		}
		else {
			setTimeDetail(
				LocalizationUtil.removeLocalization(
					getTimeDetail(), "TimeDetail", languageId));
		}
	}

	@Override
	public void setTimeDetailCurrentLanguageId(String languageId) {
		_timeDetailCurrentLanguageId = languageId;
	}

	@Override
	public void setTimeDetailMap(Map<Locale, String> timeDetailMap) {
		setTimeDetailMap(timeDetailMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTimeDetailMap(
		Map<Locale, String> timeDetailMap, Locale defaultLocale) {

		if (timeDetailMap == null) {
			return;
		}

		setTimeDetail(
			LocalizationUtil.updateLocalization(
				timeDetailMap, getTimeDetail(), "TimeDetail",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_eventId = eventId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEventId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("eventId"));
	}

	@JSON
	@Override
	public long getCampaignEventId() {
		return _campaignEventId;
	}

	@Override
	public void setCampaignEventId(long campaignEventId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_campaignEventId = campaignEventId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCampaignEventId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("campaignEventId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, EventPeriod.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> timeDetailMap = getTimeDetailMap();

		for (Map.Entry<Locale, String> entry : timeDetailMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTimeDetail();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			EventPeriod.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String timeDetail = getTimeDetail(defaultLocale);

		if (Validator.isNull(timeDetail)) {
			setTimeDetail(getTimeDetail(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTimeDetail(
				getTimeDetail(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public EventPeriod toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EventPeriod>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EventPeriodImpl eventPeriodImpl = new EventPeriodImpl();

		eventPeriodImpl.setUuid(getUuid());
		eventPeriodImpl.setEventPeriodId(getEventPeriodId());
		eventPeriodImpl.setStartDate(getStartDate());
		eventPeriodImpl.setEndDate(getEndDate());
		eventPeriodImpl.setTimeDetail(getTimeDetail());
		eventPeriodImpl.setEventId(getEventId());
		eventPeriodImpl.setCampaignEventId(getCampaignEventId());

		eventPeriodImpl.resetOriginalValues();

		return eventPeriodImpl;
	}

	@Override
	public EventPeriod cloneWithOriginalValues() {
		EventPeriodImpl eventPeriodImpl = new EventPeriodImpl();

		eventPeriodImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		eventPeriodImpl.setEventPeriodId(
			this.<Long>getColumnOriginalValue("eventPeriodId"));
		eventPeriodImpl.setStartDate(
			this.<Date>getColumnOriginalValue("startDate"));
		eventPeriodImpl.setEndDate(
			this.<Date>getColumnOriginalValue("endDate"));
		eventPeriodImpl.setTimeDetail(
			this.<String>getColumnOriginalValue("timeDetail"));
		eventPeriodImpl.setEventId(
			this.<Long>getColumnOriginalValue("eventId"));
		eventPeriodImpl.setCampaignEventId(
			this.<Long>getColumnOriginalValue("campaignEventId"));

		return eventPeriodImpl;
	}

	@Override
	public int compareTo(EventPeriod eventPeriod) {
		long primaryKey = eventPeriod.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EventPeriod)) {
			return false;
		}

		EventPeriod eventPeriod = (EventPeriod)object;

		long primaryKey = eventPeriod.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EventPeriod> toCacheModel() {
		EventPeriodCacheModel eventPeriodCacheModel =
			new EventPeriodCacheModel();

		eventPeriodCacheModel.uuid = getUuid();

		String uuid = eventPeriodCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			eventPeriodCacheModel.uuid = null;
		}

		eventPeriodCacheModel.eventPeriodId = getEventPeriodId();

		Date startDate = getStartDate();

		if (startDate != null) {
			eventPeriodCacheModel.startDate = startDate.getTime();
		}
		else {
			eventPeriodCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			eventPeriodCacheModel.endDate = endDate.getTime();
		}
		else {
			eventPeriodCacheModel.endDate = Long.MIN_VALUE;
		}

		eventPeriodCacheModel.timeDetail = getTimeDetail();

		String timeDetail = eventPeriodCacheModel.timeDetail;

		if ((timeDetail != null) && (timeDetail.length() == 0)) {
			eventPeriodCacheModel.timeDetail = null;
		}

		eventPeriodCacheModel.eventId = getEventId();

		eventPeriodCacheModel.campaignEventId = getCampaignEventId();

		return eventPeriodCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EventPeriod, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EventPeriod, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EventPeriod, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((EventPeriod)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EventPeriod>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					EventPeriod.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _eventPeriodId;
	private Date _startDate;
	private Date _endDate;
	private String _timeDetail;
	private String _timeDetailCurrentLanguageId;
	private long _eventId;
	private long _campaignEventId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<EventPeriod, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EventPeriod)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("eventPeriodId", _eventPeriodId);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put("endDate", _endDate);
		_columnOriginalValues.put("timeDetail", _timeDetail);
		_columnOriginalValues.put("eventId", _eventId);
		_columnOriginalValues.put("campaignEventId", _campaignEventId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("eventPeriodId", 2L);

		columnBitmasks.put("startDate", 4L);

		columnBitmasks.put("endDate", 8L);

		columnBitmasks.put("timeDetail", 16L);

		columnBitmasks.put("eventId", 32L);

		columnBitmasks.put("campaignEventId", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EventPeriod _escapedModel;

}