/**
 * SPDX-FileCopyrightText: (c) 2023 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package eu.strasbourg.service.agenda.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.agenda.model.Campaign;
import eu.strasbourg.service.agenda.model.CampaignModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Campaign service. Represents a row in the &quot;agenda_Campaign&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CampaignModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CampaignImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see CampaignImpl
 * @generated
 */
public class CampaignModelImpl
	extends BaseModelImpl<Campaign> implements CampaignModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a campaign model instance should use the <code>Campaign</code> interface instead.
	 */
	public static final String TABLE_NAME = "agenda_Campaign";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"campaignId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"lastPublishDate", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}, {"title", Types.VARCHAR},
		{"defaultImageId", Types.BIGINT},
		{"defaultImageCopyright", Types.VARCHAR},
		{"managersIds", Types.VARCHAR}, {"exportEnabled", Types.BOOLEAN},
		{"startDate", Types.TIMESTAMP}, {"endDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("campaignId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("defaultImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("defaultImageCopyright", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managersIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("exportEnabled", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table agenda_Campaign (uuid_ VARCHAR(75) null,campaignId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,lastPublishDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,title STRING null,defaultImageId LONG,defaultImageCopyright STRING null,managersIds VARCHAR(75) null,exportEnabled BOOLEAN,startDate DATE null,endDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table agenda_Campaign";

	public static final String ORDER_BY_JPQL =
		" ORDER BY campaign.modifiedDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY agenda_Campaign.modifiedDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TITLE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 16L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.agenda.model.Campaign"));

	public CampaignModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _campaignId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCampaignId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _campaignId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Campaign.class;
	}

	@Override
	public String getModelClassName() {
		return Campaign.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Campaign, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Campaign, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Campaign, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Campaign)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Campaign, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Campaign, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Campaign)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Campaign, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Campaign, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Campaign, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Campaign, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Campaign, Object>>();

			attributeGetterFunctions.put("uuid", Campaign::getUuid);
			attributeGetterFunctions.put("campaignId", Campaign::getCampaignId);
			attributeGetterFunctions.put("groupId", Campaign::getGroupId);
			attributeGetterFunctions.put("companyId", Campaign::getCompanyId);
			attributeGetterFunctions.put("userId", Campaign::getUserId);
			attributeGetterFunctions.put("userName", Campaign::getUserName);
			attributeGetterFunctions.put("createDate", Campaign::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Campaign::getModifiedDate);
			attributeGetterFunctions.put(
				"lastPublishDate", Campaign::getLastPublishDate);
			attributeGetterFunctions.put("status", Campaign::getStatus);
			attributeGetterFunctions.put(
				"statusByUserId", Campaign::getStatusByUserId);
			attributeGetterFunctions.put(
				"statusByUserName", Campaign::getStatusByUserName);
			attributeGetterFunctions.put("statusDate", Campaign::getStatusDate);
			attributeGetterFunctions.put("title", Campaign::getTitle);
			attributeGetterFunctions.put(
				"defaultImageId", Campaign::getDefaultImageId);
			attributeGetterFunctions.put(
				"defaultImageCopyright", Campaign::getDefaultImageCopyright);
			attributeGetterFunctions.put(
				"managersIds", Campaign::getManagersIds);
			attributeGetterFunctions.put(
				"exportEnabled", Campaign::getExportEnabled);
			attributeGetterFunctions.put("startDate", Campaign::getStartDate);
			attributeGetterFunctions.put("endDate", Campaign::getEndDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Campaign, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Campaign, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Campaign, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Campaign, String>)Campaign::setUuid);
			attributeSetterBiConsumers.put(
				"campaignId",
				(BiConsumer<Campaign, Long>)Campaign::setCampaignId);
			attributeSetterBiConsumers.put(
				"groupId", (BiConsumer<Campaign, Long>)Campaign::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<Campaign, Long>)Campaign::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<Campaign, Long>)Campaign::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<Campaign, String>)Campaign::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Campaign, Date>)Campaign::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Campaign, Date>)Campaign::setModifiedDate);
			attributeSetterBiConsumers.put(
				"lastPublishDate",
				(BiConsumer<Campaign, Date>)Campaign::setLastPublishDate);
			attributeSetterBiConsumers.put(
				"status", (BiConsumer<Campaign, Integer>)Campaign::setStatus);
			attributeSetterBiConsumers.put(
				"statusByUserId",
				(BiConsumer<Campaign, Long>)Campaign::setStatusByUserId);
			attributeSetterBiConsumers.put(
				"statusByUserName",
				(BiConsumer<Campaign, String>)Campaign::setStatusByUserName);
			attributeSetterBiConsumers.put(
				"statusDate",
				(BiConsumer<Campaign, Date>)Campaign::setStatusDate);
			attributeSetterBiConsumers.put(
				"title", (BiConsumer<Campaign, String>)Campaign::setTitle);
			attributeSetterBiConsumers.put(
				"defaultImageId",
				(BiConsumer<Campaign, Long>)Campaign::setDefaultImageId);
			attributeSetterBiConsumers.put(
				"defaultImageCopyright",
				(BiConsumer<Campaign, String>)
					Campaign::setDefaultImageCopyright);
			attributeSetterBiConsumers.put(
				"managersIds",
				(BiConsumer<Campaign, String>)Campaign::setManagersIds);
			attributeSetterBiConsumers.put(
				"exportEnabled",
				(BiConsumer<Campaign, Boolean>)Campaign::setExportEnabled);
			attributeSetterBiConsumers.put(
				"startDate",
				(BiConsumer<Campaign, Date>)Campaign::setStartDate);
			attributeSetterBiConsumers.put(
				"endDate", (BiConsumer<Campaign, Date>)Campaign::setEndDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getCampaignId() {
		return _campaignId;
	}

	@Override
	public void setCampaignId(long campaignId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_campaignId = campaignId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastPublishDate = lastPublishDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTitle(), languageId, useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(
				LocalizationUtil.updateLocalization(
					getTitle(), "Title", title, languageId, defaultLanguageId));
		}
		else {
			setTitle(
				LocalizationUtil.removeLocalization(
					getTitle(), "Title", languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(
		Map<Locale, String> titleMap, Locale defaultLocale) {

		if (titleMap == null) {
			return;
		}

		setTitle(
			LocalizationUtil.updateLocalization(
				titleMap, getTitle(), "Title",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTitle() {
		return getColumnOriginalValue("title");
	}

	@Override
	public long getDefaultImageId() {
		return _defaultImageId;
	}

	@Override
	public void setDefaultImageId(long defaultImageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_defaultImageId = defaultImageId;
	}

	@Override
	public String getDefaultImageCopyright() {
		if (_defaultImageCopyright == null) {
			return "";
		}
		else {
			return _defaultImageCopyright;
		}
	}

	@Override
	public String getDefaultImageCopyright(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDefaultImageCopyright(languageId);
	}

	@Override
	public String getDefaultImageCopyright(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDefaultImageCopyright(languageId, useDefault);
	}

	@Override
	public String getDefaultImageCopyright(String languageId) {
		return LocalizationUtil.getLocalization(
			getDefaultImageCopyright(), languageId);
	}

	@Override
	public String getDefaultImageCopyright(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getDefaultImageCopyright(), languageId, useDefault);
	}

	@Override
	public String getDefaultImageCopyrightCurrentLanguageId() {
		return _defaultImageCopyrightCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDefaultImageCopyrightCurrentValue() {
		Locale locale = getLocale(_defaultImageCopyrightCurrentLanguageId);

		return getDefaultImageCopyright(locale);
	}

	@Override
	public Map<Locale, String> getDefaultImageCopyrightMap() {
		return LocalizationUtil.getLocalizationMap(getDefaultImageCopyright());
	}

	@Override
	public void setDefaultImageCopyright(String defaultImageCopyright) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_defaultImageCopyright = defaultImageCopyright;
	}

	@Override
	public void setDefaultImageCopyright(
		String defaultImageCopyright, Locale locale) {

		setDefaultImageCopyright(
			defaultImageCopyright, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDefaultImageCopyright(
		String defaultImageCopyright, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(defaultImageCopyright)) {
			setDefaultImageCopyright(
				LocalizationUtil.updateLocalization(
					getDefaultImageCopyright(), "DefaultImageCopyright",
					defaultImageCopyright, languageId, defaultLanguageId));
		}
		else {
			setDefaultImageCopyright(
				LocalizationUtil.removeLocalization(
					getDefaultImageCopyright(), "DefaultImageCopyright",
					languageId));
		}
	}

	@Override
	public void setDefaultImageCopyrightCurrentLanguageId(String languageId) {
		_defaultImageCopyrightCurrentLanguageId = languageId;
	}

	@Override
	public void setDefaultImageCopyrightMap(
		Map<Locale, String> defaultImageCopyrightMap) {

		setDefaultImageCopyrightMap(
			defaultImageCopyrightMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDefaultImageCopyrightMap(
		Map<Locale, String> defaultImageCopyrightMap, Locale defaultLocale) {

		if (defaultImageCopyrightMap == null) {
			return;
		}

		setDefaultImageCopyright(
			LocalizationUtil.updateLocalization(
				defaultImageCopyrightMap, getDefaultImageCopyright(),
				"DefaultImageCopyright",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getManagersIds() {
		if (_managersIds == null) {
			return "";
		}
		else {
			return _managersIds;
		}
	}

	@Override
	public void setManagersIds(String managersIds) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managersIds = managersIds;
	}

	@Override
	public Boolean getExportEnabled() {
		return _exportEnabled;
	}

	@Override
	public void setExportEnabled(Boolean exportEnabled) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_exportEnabled = exportEnabled;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Campaign.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Campaign.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> defaultImageCopyrightMap =
			getDefaultImageCopyrightMap();

		for (Map.Entry<Locale, String> entry :
				defaultImageCopyrightMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			Campaign.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String defaultImageCopyright = getDefaultImageCopyright(defaultLocale);

		if (Validator.isNull(defaultImageCopyright)) {
			setDefaultImageCopyright(
				getDefaultImageCopyright(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setDefaultImageCopyright(
				getDefaultImageCopyright(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public Campaign toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Campaign>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CampaignImpl campaignImpl = new CampaignImpl();

		campaignImpl.setUuid(getUuid());
		campaignImpl.setCampaignId(getCampaignId());
		campaignImpl.setGroupId(getGroupId());
		campaignImpl.setCompanyId(getCompanyId());
		campaignImpl.setUserId(getUserId());
		campaignImpl.setUserName(getUserName());
		campaignImpl.setCreateDate(getCreateDate());
		campaignImpl.setModifiedDate(getModifiedDate());
		campaignImpl.setLastPublishDate(getLastPublishDate());
		campaignImpl.setStatus(getStatus());
		campaignImpl.setStatusByUserId(getStatusByUserId());
		campaignImpl.setStatusByUserName(getStatusByUserName());
		campaignImpl.setStatusDate(getStatusDate());
		campaignImpl.setTitle(getTitle());
		campaignImpl.setDefaultImageId(getDefaultImageId());
		campaignImpl.setDefaultImageCopyright(getDefaultImageCopyright());
		campaignImpl.setManagersIds(getManagersIds());
		campaignImpl.setExportEnabled(getExportEnabled());
		campaignImpl.setStartDate(getStartDate());
		campaignImpl.setEndDate(getEndDate());

		campaignImpl.resetOriginalValues();

		return campaignImpl;
	}

	@Override
	public Campaign cloneWithOriginalValues() {
		CampaignImpl campaignImpl = new CampaignImpl();

		campaignImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		campaignImpl.setCampaignId(
			this.<Long>getColumnOriginalValue("campaignId"));
		campaignImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		campaignImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		campaignImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		campaignImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		campaignImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		campaignImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		campaignImpl.setLastPublishDate(
			this.<Date>getColumnOriginalValue("lastPublishDate"));
		campaignImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
		campaignImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		campaignImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		campaignImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));
		campaignImpl.setTitle(this.<String>getColumnOriginalValue("title"));
		campaignImpl.setDefaultImageId(
			this.<Long>getColumnOriginalValue("defaultImageId"));
		campaignImpl.setDefaultImageCopyright(
			this.<String>getColumnOriginalValue("defaultImageCopyright"));
		campaignImpl.setManagersIds(
			this.<String>getColumnOriginalValue("managersIds"));
		campaignImpl.setExportEnabled(
			this.<Boolean>getColumnOriginalValue("exportEnabled"));
		campaignImpl.setStartDate(
			this.<Date>getColumnOriginalValue("startDate"));
		campaignImpl.setEndDate(this.<Date>getColumnOriginalValue("endDate"));

		return campaignImpl;
	}

	@Override
	public int compareTo(Campaign campaign) {
		int value = 0;

		value = DateUtil.compareTo(
			getModifiedDate(), campaign.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Campaign)) {
			return false;
		}

		Campaign campaign = (Campaign)object;

		long primaryKey = campaign.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Campaign> toCacheModel() {
		CampaignCacheModel campaignCacheModel = new CampaignCacheModel();

		campaignCacheModel.uuid = getUuid();

		String uuid = campaignCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			campaignCacheModel.uuid = null;
		}

		campaignCacheModel.campaignId = getCampaignId();

		campaignCacheModel.groupId = getGroupId();

		campaignCacheModel.companyId = getCompanyId();

		campaignCacheModel.userId = getUserId();

		campaignCacheModel.userName = getUserName();

		String userName = campaignCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			campaignCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			campaignCacheModel.createDate = createDate.getTime();
		}
		else {
			campaignCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			campaignCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			campaignCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			campaignCacheModel.lastPublishDate = lastPublishDate.getTime();
		}
		else {
			campaignCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		campaignCacheModel.status = getStatus();

		campaignCacheModel.statusByUserId = getStatusByUserId();

		campaignCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = campaignCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			campaignCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			campaignCacheModel.statusDate = statusDate.getTime();
		}
		else {
			campaignCacheModel.statusDate = Long.MIN_VALUE;
		}

		campaignCacheModel.title = getTitle();

		String title = campaignCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			campaignCacheModel.title = null;
		}

		campaignCacheModel.defaultImageId = getDefaultImageId();

		campaignCacheModel.defaultImageCopyright = getDefaultImageCopyright();

		String defaultImageCopyright = campaignCacheModel.defaultImageCopyright;

		if ((defaultImageCopyright != null) &&
			(defaultImageCopyright.length() == 0)) {

			campaignCacheModel.defaultImageCopyright = null;
		}

		campaignCacheModel.managersIds = getManagersIds();

		String managersIds = campaignCacheModel.managersIds;

		if ((managersIds != null) && (managersIds.length() == 0)) {
			campaignCacheModel.managersIds = null;
		}

		Boolean exportEnabled = getExportEnabled();

		if (exportEnabled != null) {
			campaignCacheModel.exportEnabled = exportEnabled;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			campaignCacheModel.startDate = startDate.getTime();
		}
		else {
			campaignCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			campaignCacheModel.endDate = endDate.getTime();
		}
		else {
			campaignCacheModel.endDate = Long.MIN_VALUE;
		}

		return campaignCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Campaign, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Campaign, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Campaign, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Campaign)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Campaign>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Campaign.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _campaignId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _lastPublishDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _title;
	private String _titleCurrentLanguageId;
	private long _defaultImageId;
	private String _defaultImageCopyright;
	private String _defaultImageCopyrightCurrentLanguageId;
	private String _managersIds;
	private Boolean _exportEnabled;
	private Date _startDate;
	private Date _endDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Campaign, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Campaign)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("campaignId", _campaignId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("lastPublishDate", _lastPublishDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("defaultImageId", _defaultImageId);
		_columnOriginalValues.put(
			"defaultImageCopyright", _defaultImageCopyright);
		_columnOriginalValues.put("managersIds", _managersIds);
		_columnOriginalValues.put("exportEnabled", _exportEnabled);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put("endDate", _endDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("campaignId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("lastPublishDate", 256L);

		columnBitmasks.put("status", 512L);

		columnBitmasks.put("statusByUserId", 1024L);

		columnBitmasks.put("statusByUserName", 2048L);

		columnBitmasks.put("statusDate", 4096L);

		columnBitmasks.put("title", 8192L);

		columnBitmasks.put("defaultImageId", 16384L);

		columnBitmasks.put("defaultImageCopyright", 32768L);

		columnBitmasks.put("managersIds", 65536L);

		columnBitmasks.put("exportEnabled", 131072L);

		columnBitmasks.put("startDate", 262144L);

		columnBitmasks.put("endDate", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Campaign _escapedModel;

}