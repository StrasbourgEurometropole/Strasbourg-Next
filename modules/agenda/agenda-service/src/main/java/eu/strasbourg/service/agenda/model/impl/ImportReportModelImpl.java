/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.agenda.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import eu.strasbourg.service.agenda.model.ImportReport;
import eu.strasbourg.service.agenda.model.ImportReportModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ImportReport service. Represents a row in the &quot;agenda_ImportReport&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ImportReportModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImportReportImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see ImportReportImpl
 * @generated
 */
public class ImportReportModelImpl
	extends BaseModelImpl<ImportReport> implements ImportReportModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a import report model instance should use the <code>ImportReport</code> interface instead.
	 */
	public static final String TABLE_NAME = "agenda_ImportReport";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"reportId", Types.BIGINT},
		{"provider", Types.VARCHAR}, {"filename", Types.VARCHAR},
		{"status", Types.BIGINT}, {"globalErrorCause", Types.VARCHAR},
		{"newEventsCount", Types.BIGINT}, {"modifiedEventsCount", Types.BIGINT},
		{"errorEventsCount", Types.BIGINT},
		{"unmodifiedEventsCount", Types.BIGINT},
		{"deletedEventsCount", Types.BIGINT},
		{"newManifestationsCount", Types.BIGINT},
		{"modifiedManifestationsCount", Types.BIGINT},
		{"errorManifestationsCount", Types.BIGINT},
		{"unmodifiedManifestationsCount", Types.BIGINT},
		{"deletedManifestationsCount", Types.BIGINT},
		{"startDate", Types.TIMESTAMP}, {"endDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reportId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("provider", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("filename", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("globalErrorCause", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newEventsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedEventsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("errorEventsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("unmodifiedEventsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("deletedEventsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("newManifestationsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedManifestationsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("errorManifestationsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("unmodifiedManifestationsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("deletedManifestationsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table agenda_ImportReport (uuid_ VARCHAR(75) null,reportId LONG not null primary key,provider VARCHAR(75) null,filename VARCHAR(75) null,status LONG,globalErrorCause VARCHAR(75) null,newEventsCount LONG,modifiedEventsCount LONG,errorEventsCount LONG,unmodifiedEventsCount LONG,deletedEventsCount LONG,newManifestationsCount LONG,modifiedManifestationsCount LONG,errorManifestationsCount LONG,unmodifiedManifestationsCount LONG,deletedManifestationsCount LONG,startDate DATE null,endDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table agenda_ImportReport";

	public static final String ORDER_BY_JPQL =
		" ORDER BY importReport.reportId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY agenda_ImportReport.reportId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REPORTID_COLUMN_BITMASK = 2L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.agenda.model.ImportReport"));

	public ImportReportModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _reportId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setReportId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _reportId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ImportReport.class;
	}

	@Override
	public String getModelClassName() {
		return ImportReport.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ImportReport, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ImportReport, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ImportReport, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ImportReport)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ImportReport, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ImportReport, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ImportReport)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ImportReport, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ImportReport, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ImportReport, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ImportReport, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ImportReport, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ImportReport, Object>>();
		Map<String, BiConsumer<ImportReport, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ImportReport, ?>>();

		attributeGetterFunctions.put("uuid", ImportReport::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<ImportReport, String>)ImportReport::setUuid);
		attributeGetterFunctions.put("reportId", ImportReport::getReportId);
		attributeSetterBiConsumers.put(
			"reportId",
			(BiConsumer<ImportReport, Long>)ImportReport::setReportId);
		attributeGetterFunctions.put("provider", ImportReport::getProvider);
		attributeSetterBiConsumers.put(
			"provider",
			(BiConsumer<ImportReport, String>)ImportReport::setProvider);
		attributeGetterFunctions.put("filename", ImportReport::getFilename);
		attributeSetterBiConsumers.put(
			"filename",
			(BiConsumer<ImportReport, String>)ImportReport::setFilename);
		attributeGetterFunctions.put("status", ImportReport::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<ImportReport, Long>)ImportReport::setStatus);
		attributeGetterFunctions.put(
			"globalErrorCause", ImportReport::getGlobalErrorCause);
		attributeSetterBiConsumers.put(
			"globalErrorCause",
			(BiConsumer<ImportReport, String>)
				ImportReport::setGlobalErrorCause);
		attributeGetterFunctions.put(
			"newEventsCount", ImportReport::getNewEventsCount);
		attributeSetterBiConsumers.put(
			"newEventsCount",
			(BiConsumer<ImportReport, Long>)ImportReport::setNewEventsCount);
		attributeGetterFunctions.put(
			"modifiedEventsCount", ImportReport::getModifiedEventsCount);
		attributeSetterBiConsumers.put(
			"modifiedEventsCount",
			(BiConsumer<ImportReport, Long>)
				ImportReport::setModifiedEventsCount);
		attributeGetterFunctions.put(
			"errorEventsCount", ImportReport::getErrorEventsCount);
		attributeSetterBiConsumers.put(
			"errorEventsCount",
			(BiConsumer<ImportReport, Long>)ImportReport::setErrorEventsCount);
		attributeGetterFunctions.put(
			"unmodifiedEventsCount", ImportReport::getUnmodifiedEventsCount);
		attributeSetterBiConsumers.put(
			"unmodifiedEventsCount",
			(BiConsumer<ImportReport, Long>)
				ImportReport::setUnmodifiedEventsCount);
		attributeGetterFunctions.put(
			"deletedEventsCount", ImportReport::getDeletedEventsCount);
		attributeSetterBiConsumers.put(
			"deletedEventsCount",
			(BiConsumer<ImportReport, Long>)
				ImportReport::setDeletedEventsCount);
		attributeGetterFunctions.put(
			"newManifestationsCount", ImportReport::getNewManifestationsCount);
		attributeSetterBiConsumers.put(
			"newManifestationsCount",
			(BiConsumer<ImportReport, Long>)
				ImportReport::setNewManifestationsCount);
		attributeGetterFunctions.put(
			"modifiedManifestationsCount",
			ImportReport::getModifiedManifestationsCount);
		attributeSetterBiConsumers.put(
			"modifiedManifestationsCount",
			(BiConsumer<ImportReport, Long>)
				ImportReport::setModifiedManifestationsCount);
		attributeGetterFunctions.put(
			"errorManifestationsCount",
			ImportReport::getErrorManifestationsCount);
		attributeSetterBiConsumers.put(
			"errorManifestationsCount",
			(BiConsumer<ImportReport, Long>)
				ImportReport::setErrorManifestationsCount);
		attributeGetterFunctions.put(
			"unmodifiedManifestationsCount",
			ImportReport::getUnmodifiedManifestationsCount);
		attributeSetterBiConsumers.put(
			"unmodifiedManifestationsCount",
			(BiConsumer<ImportReport, Long>)
				ImportReport::setUnmodifiedManifestationsCount);
		attributeGetterFunctions.put(
			"deletedManifestationsCount",
			ImportReport::getDeletedManifestationsCount);
		attributeSetterBiConsumers.put(
			"deletedManifestationsCount",
			(BiConsumer<ImportReport, Long>)
				ImportReport::setDeletedManifestationsCount);
		attributeGetterFunctions.put("startDate", ImportReport::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<ImportReport, Date>)ImportReport::setStartDate);
		attributeGetterFunctions.put("endDate", ImportReport::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<ImportReport, Date>)ImportReport::setEndDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getReportId() {
		return _reportId;
	}

	@Override
	public void setReportId(long reportId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reportId = reportId;
	}

	@Override
	public String getProvider() {
		if (_provider == null) {
			return "";
		}
		else {
			return _provider;
		}
	}

	@Override
	public void setProvider(String provider) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_provider = provider;
	}

	@Override
	public String getFilename() {
		if (_filename == null) {
			return "";
		}
		else {
			return _filename;
		}
	}

	@Override
	public void setFilename(String filename) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_filename = filename;
	}

	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public String getGlobalErrorCause() {
		if (_globalErrorCause == null) {
			return "";
		}
		else {
			return _globalErrorCause;
		}
	}

	@Override
	public void setGlobalErrorCause(String globalErrorCause) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_globalErrorCause = globalErrorCause;
	}

	@Override
	public long getNewEventsCount() {
		return _newEventsCount;
	}

	@Override
	public void setNewEventsCount(long newEventsCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newEventsCount = newEventsCount;
	}

	@Override
	public long getModifiedEventsCount() {
		return _modifiedEventsCount;
	}

	@Override
	public void setModifiedEventsCount(long modifiedEventsCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedEventsCount = modifiedEventsCount;
	}

	@Override
	public long getErrorEventsCount() {
		return _errorEventsCount;
	}

	@Override
	public void setErrorEventsCount(long errorEventsCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_errorEventsCount = errorEventsCount;
	}

	@Override
	public long getUnmodifiedEventsCount() {
		return _unmodifiedEventsCount;
	}

	@Override
	public void setUnmodifiedEventsCount(long unmodifiedEventsCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unmodifiedEventsCount = unmodifiedEventsCount;
	}

	@Override
	public long getDeletedEventsCount() {
		return _deletedEventsCount;
	}

	@Override
	public void setDeletedEventsCount(long deletedEventsCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deletedEventsCount = deletedEventsCount;
	}

	@Override
	public long getNewManifestationsCount() {
		return _newManifestationsCount;
	}

	@Override
	public void setNewManifestationsCount(long newManifestationsCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_newManifestationsCount = newManifestationsCount;
	}

	@Override
	public long getModifiedManifestationsCount() {
		return _modifiedManifestationsCount;
	}

	@Override
	public void setModifiedManifestationsCount(
		long modifiedManifestationsCount) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedManifestationsCount = modifiedManifestationsCount;
	}

	@Override
	public long getErrorManifestationsCount() {
		return _errorManifestationsCount;
	}

	@Override
	public void setErrorManifestationsCount(long errorManifestationsCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_errorManifestationsCount = errorManifestationsCount;
	}

	@Override
	public long getUnmodifiedManifestationsCount() {
		return _unmodifiedManifestationsCount;
	}

	@Override
	public void setUnmodifiedManifestationsCount(
		long unmodifiedManifestationsCount) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unmodifiedManifestationsCount = unmodifiedManifestationsCount;
	}

	@Override
	public long getDeletedManifestationsCount() {
		return _deletedManifestationsCount;
	}

	@Override
	public void setDeletedManifestationsCount(long deletedManifestationsCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deletedManifestationsCount = deletedManifestationsCount;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ImportReport.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ImportReport toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ImportReport>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ImportReportImpl importReportImpl = new ImportReportImpl();

		importReportImpl.setUuid(getUuid());
		importReportImpl.setReportId(getReportId());
		importReportImpl.setProvider(getProvider());
		importReportImpl.setFilename(getFilename());
		importReportImpl.setStatus(getStatus());
		importReportImpl.setGlobalErrorCause(getGlobalErrorCause());
		importReportImpl.setNewEventsCount(getNewEventsCount());
		importReportImpl.setModifiedEventsCount(getModifiedEventsCount());
		importReportImpl.setErrorEventsCount(getErrorEventsCount());
		importReportImpl.setUnmodifiedEventsCount(getUnmodifiedEventsCount());
		importReportImpl.setDeletedEventsCount(getDeletedEventsCount());
		importReportImpl.setNewManifestationsCount(getNewManifestationsCount());
		importReportImpl.setModifiedManifestationsCount(
			getModifiedManifestationsCount());
		importReportImpl.setErrorManifestationsCount(
			getErrorManifestationsCount());
		importReportImpl.setUnmodifiedManifestationsCount(
			getUnmodifiedManifestationsCount());
		importReportImpl.setDeletedManifestationsCount(
			getDeletedManifestationsCount());
		importReportImpl.setStartDate(getStartDate());
		importReportImpl.setEndDate(getEndDate());

		importReportImpl.resetOriginalValues();

		return importReportImpl;
	}

	@Override
	public ImportReport cloneWithOriginalValues() {
		ImportReportImpl importReportImpl = new ImportReportImpl();

		importReportImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		importReportImpl.setReportId(
			this.<Long>getColumnOriginalValue("reportId"));
		importReportImpl.setProvider(
			this.<String>getColumnOriginalValue("provider"));
		importReportImpl.setFilename(
			this.<String>getColumnOriginalValue("filename"));
		importReportImpl.setStatus(this.<Long>getColumnOriginalValue("status"));
		importReportImpl.setGlobalErrorCause(
			this.<String>getColumnOriginalValue("globalErrorCause"));
		importReportImpl.setNewEventsCount(
			this.<Long>getColumnOriginalValue("newEventsCount"));
		importReportImpl.setModifiedEventsCount(
			this.<Long>getColumnOriginalValue("modifiedEventsCount"));
		importReportImpl.setErrorEventsCount(
			this.<Long>getColumnOriginalValue("errorEventsCount"));
		importReportImpl.setUnmodifiedEventsCount(
			this.<Long>getColumnOriginalValue("unmodifiedEventsCount"));
		importReportImpl.setDeletedEventsCount(
			this.<Long>getColumnOriginalValue("deletedEventsCount"));
		importReportImpl.setNewManifestationsCount(
			this.<Long>getColumnOriginalValue("newManifestationsCount"));
		importReportImpl.setModifiedManifestationsCount(
			this.<Long>getColumnOriginalValue("modifiedManifestationsCount"));
		importReportImpl.setErrorManifestationsCount(
			this.<Long>getColumnOriginalValue("errorManifestationsCount"));
		importReportImpl.setUnmodifiedManifestationsCount(
			this.<Long>getColumnOriginalValue("unmodifiedManifestationsCount"));
		importReportImpl.setDeletedManifestationsCount(
			this.<Long>getColumnOriginalValue("deletedManifestationsCount"));
		importReportImpl.setStartDate(
			this.<Date>getColumnOriginalValue("startDate"));
		importReportImpl.setEndDate(
			this.<Date>getColumnOriginalValue("endDate"));

		return importReportImpl;
	}

	@Override
	public int compareTo(ImportReport importReport) {
		long primaryKey = importReport.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ImportReport)) {
			return false;
		}

		ImportReport importReport = (ImportReport)object;

		long primaryKey = importReport.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ImportReport> toCacheModel() {
		ImportReportCacheModel importReportCacheModel =
			new ImportReportCacheModel();

		importReportCacheModel.uuid = getUuid();

		String uuid = importReportCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			importReportCacheModel.uuid = null;
		}

		importReportCacheModel.reportId = getReportId();

		importReportCacheModel.provider = getProvider();

		String provider = importReportCacheModel.provider;

		if ((provider != null) && (provider.length() == 0)) {
			importReportCacheModel.provider = null;
		}

		importReportCacheModel.filename = getFilename();

		String filename = importReportCacheModel.filename;

		if ((filename != null) && (filename.length() == 0)) {
			importReportCacheModel.filename = null;
		}

		importReportCacheModel.status = getStatus();

		importReportCacheModel.globalErrorCause = getGlobalErrorCause();

		String globalErrorCause = importReportCacheModel.globalErrorCause;

		if ((globalErrorCause != null) && (globalErrorCause.length() == 0)) {
			importReportCacheModel.globalErrorCause = null;
		}

		importReportCacheModel.newEventsCount = getNewEventsCount();

		importReportCacheModel.modifiedEventsCount = getModifiedEventsCount();

		importReportCacheModel.errorEventsCount = getErrorEventsCount();

		importReportCacheModel.unmodifiedEventsCount =
			getUnmodifiedEventsCount();

		importReportCacheModel.deletedEventsCount = getDeletedEventsCount();

		importReportCacheModel.newManifestationsCount =
			getNewManifestationsCount();

		importReportCacheModel.modifiedManifestationsCount =
			getModifiedManifestationsCount();

		importReportCacheModel.errorManifestationsCount =
			getErrorManifestationsCount();

		importReportCacheModel.unmodifiedManifestationsCount =
			getUnmodifiedManifestationsCount();

		importReportCacheModel.deletedManifestationsCount =
			getDeletedManifestationsCount();

		Date startDate = getStartDate();

		if (startDate != null) {
			importReportCacheModel.startDate = startDate.getTime();
		}
		else {
			importReportCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			importReportCacheModel.endDate = endDate.getTime();
		}
		else {
			importReportCacheModel.endDate = Long.MIN_VALUE;
		}

		return importReportCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ImportReport, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ImportReport, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ImportReport, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ImportReport)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ImportReport>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ImportReport.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _reportId;
	private String _provider;
	private String _filename;
	private long _status;
	private String _globalErrorCause;
	private long _newEventsCount;
	private long _modifiedEventsCount;
	private long _errorEventsCount;
	private long _unmodifiedEventsCount;
	private long _deletedEventsCount;
	private long _newManifestationsCount;
	private long _modifiedManifestationsCount;
	private long _errorManifestationsCount;
	private long _unmodifiedManifestationsCount;
	private long _deletedManifestationsCount;
	private Date _startDate;
	private Date _endDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ImportReport, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ImportReport)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("reportId", _reportId);
		_columnOriginalValues.put("provider", _provider);
		_columnOriginalValues.put("filename", _filename);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("globalErrorCause", _globalErrorCause);
		_columnOriginalValues.put("newEventsCount", _newEventsCount);
		_columnOriginalValues.put("modifiedEventsCount", _modifiedEventsCount);
		_columnOriginalValues.put("errorEventsCount", _errorEventsCount);
		_columnOriginalValues.put(
			"unmodifiedEventsCount", _unmodifiedEventsCount);
		_columnOriginalValues.put("deletedEventsCount", _deletedEventsCount);
		_columnOriginalValues.put(
			"newManifestationsCount", _newManifestationsCount);
		_columnOriginalValues.put(
			"modifiedManifestationsCount", _modifiedManifestationsCount);
		_columnOriginalValues.put(
			"errorManifestationsCount", _errorManifestationsCount);
		_columnOriginalValues.put(
			"unmodifiedManifestationsCount", _unmodifiedManifestationsCount);
		_columnOriginalValues.put(
			"deletedManifestationsCount", _deletedManifestationsCount);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put("endDate", _endDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("lines_", "lines");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("reportId", 2L);

		columnBitmasks.put("provider", 4L);

		columnBitmasks.put("filename", 8L);

		columnBitmasks.put("status", 16L);

		columnBitmasks.put("globalErrorCause", 32L);

		columnBitmasks.put("newEventsCount", 64L);

		columnBitmasks.put("modifiedEventsCount", 128L);

		columnBitmasks.put("errorEventsCount", 256L);

		columnBitmasks.put("unmodifiedEventsCount", 512L);

		columnBitmasks.put("deletedEventsCount", 1024L);

		columnBitmasks.put("newManifestationsCount", 2048L);

		columnBitmasks.put("modifiedManifestationsCount", 4096L);

		columnBitmasks.put("errorManifestationsCount", 8192L);

		columnBitmasks.put("unmodifiedManifestationsCount", 16384L);

		columnBitmasks.put("deletedManifestationsCount", 32768L);

		columnBitmasks.put("startDate", 65536L);

		columnBitmasks.put("endDate", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ImportReport _escapedModel;

}