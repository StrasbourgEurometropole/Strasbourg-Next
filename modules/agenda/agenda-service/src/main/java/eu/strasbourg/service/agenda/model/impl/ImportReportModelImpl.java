/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.agenda.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import eu.strasbourg.service.agenda.model.ImportReport;
import eu.strasbourg.service.agenda.model.ImportReportModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ImportReport service. Represents a row in the &quot;agenda_ImportReport&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ImportReportModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImportReportImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see ImportReportImpl
 * @see ImportReport
 * @see ImportReportModel
 * @generated
 */
@ProviderType
public class ImportReportModelImpl extends BaseModelImpl<ImportReport>
	implements ImportReportModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a import report model instance should use the {@link ImportReport} interface instead.
	 */
	public static final String TABLE_NAME = "agenda_ImportReport";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "reportId", Types.BIGINT },
			{ "provider", Types.VARCHAR },
			{ "filename", Types.VARCHAR },
			{ "status", Types.BIGINT },
			{ "globalErrorCause", Types.VARCHAR },
			{ "newEventsCount", Types.BIGINT },
			{ "modifiedEventsCount", Types.BIGINT },
			{ "errorEventsCount", Types.BIGINT },
			{ "newManifestationsCount", Types.BIGINT },
			{ "modifiedManifestationsCount", Types.BIGINT },
			{ "errorManifestationsCount", Types.BIGINT },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reportId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("provider", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("filename", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("globalErrorCause", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newEventsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedEventsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("errorEventsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("newManifestationsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedManifestationsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("errorManifestationsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table agenda_ImportReport (uuid_ VARCHAR(75) null,reportId LONG not null primary key,provider VARCHAR(75) null,filename VARCHAR(75) null,status LONG,globalErrorCause VARCHAR(75) null,newEventsCount LONG,modifiedEventsCount LONG,errorEventsCount LONG,newManifestationsCount LONG,modifiedManifestationsCount LONG,errorManifestationsCount LONG,startDate DATE null,endDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table agenda_ImportReport";
	public static final String ORDER_BY_JPQL = " ORDER BY importReport.reportId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY agenda_ImportReport.reportId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.agenda.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.agenda.model.ImportReport"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.agenda.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.agenda.model.ImportReport"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.agenda.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.agenda.model.ImportReport"),
			true);
	public static final long UUID_COLUMN_BITMASK = 1L;
	public static final long REPORTID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.agenda.service.util.PropsUtil.get(
				"lock.expiration.time.eu.strasbourg.service.agenda.model.ImportReport"));

	public ImportReportModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _reportId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setReportId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _reportId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ImportReport.class;
	}

	@Override
	public String getModelClassName() {
		return ImportReport.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("reportId", getReportId());
		attributes.put("provider", getProvider());
		attributes.put("filename", getFilename());
		attributes.put("status", getStatus());
		attributes.put("globalErrorCause", getGlobalErrorCause());
		attributes.put("newEventsCount", getNewEventsCount());
		attributes.put("modifiedEventsCount", getModifiedEventsCount());
		attributes.put("errorEventsCount", getErrorEventsCount());
		attributes.put("newManifestationsCount", getNewManifestationsCount());
		attributes.put("modifiedManifestationsCount",
			getModifiedManifestationsCount());
		attributes.put("errorManifestationsCount", getErrorManifestationsCount());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long reportId = (Long)attributes.get("reportId");

		if (reportId != null) {
			setReportId(reportId);
		}

		String provider = (String)attributes.get("provider");

		if (provider != null) {
			setProvider(provider);
		}

		String filename = (String)attributes.get("filename");

		if (filename != null) {
			setFilename(filename);
		}

		Long status = (Long)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String globalErrorCause = (String)attributes.get("globalErrorCause");

		if (globalErrorCause != null) {
			setGlobalErrorCause(globalErrorCause);
		}

		Long newEventsCount = (Long)attributes.get("newEventsCount");

		if (newEventsCount != null) {
			setNewEventsCount(newEventsCount);
		}

		Long modifiedEventsCount = (Long)attributes.get("modifiedEventsCount");

		if (modifiedEventsCount != null) {
			setModifiedEventsCount(modifiedEventsCount);
		}

		Long errorEventsCount = (Long)attributes.get("errorEventsCount");

		if (errorEventsCount != null) {
			setErrorEventsCount(errorEventsCount);
		}

		Long newManifestationsCount = (Long)attributes.get(
				"newManifestationsCount");

		if (newManifestationsCount != null) {
			setNewManifestationsCount(newManifestationsCount);
		}

		Long modifiedManifestationsCount = (Long)attributes.get(
				"modifiedManifestationsCount");

		if (modifiedManifestationsCount != null) {
			setModifiedManifestationsCount(modifiedManifestationsCount);
		}

		Long errorManifestationsCount = (Long)attributes.get(
				"errorManifestationsCount");

		if (errorManifestationsCount != null) {
			setErrorManifestationsCount(errorManifestationsCount);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getReportId() {
		return _reportId;
	}

	@Override
	public void setReportId(long reportId) {
		_reportId = reportId;
	}

	@Override
	public String getProvider() {
		if (_provider == null) {
			return StringPool.BLANK;
		}
		else {
			return _provider;
		}
	}

	@Override
	public void setProvider(String provider) {
		_provider = provider;
	}

	@Override
	public String getFilename() {
		if (_filename == null) {
			return StringPool.BLANK;
		}
		else {
			return _filename;
		}
	}

	@Override
	public void setFilename(String filename) {
		_filename = filename;
	}

	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		_status = status;
	}

	@Override
	public String getGlobalErrorCause() {
		if (_globalErrorCause == null) {
			return StringPool.BLANK;
		}
		else {
			return _globalErrorCause;
		}
	}

	@Override
	public void setGlobalErrorCause(String globalErrorCause) {
		_globalErrorCause = globalErrorCause;
	}

	@Override
	public long getNewEventsCount() {
		return _newEventsCount;
	}

	@Override
	public void setNewEventsCount(long newEventsCount) {
		_newEventsCount = newEventsCount;
	}

	@Override
	public long getModifiedEventsCount() {
		return _modifiedEventsCount;
	}

	@Override
	public void setModifiedEventsCount(long modifiedEventsCount) {
		_modifiedEventsCount = modifiedEventsCount;
	}

	@Override
	public long getErrorEventsCount() {
		return _errorEventsCount;
	}

	@Override
	public void setErrorEventsCount(long errorEventsCount) {
		_errorEventsCount = errorEventsCount;
	}

	@Override
	public long getNewManifestationsCount() {
		return _newManifestationsCount;
	}

	@Override
	public void setNewManifestationsCount(long newManifestationsCount) {
		_newManifestationsCount = newManifestationsCount;
	}

	@Override
	public long getModifiedManifestationsCount() {
		return _modifiedManifestationsCount;
	}

	@Override
	public void setModifiedManifestationsCount(long modifiedManifestationsCount) {
		_modifiedManifestationsCount = modifiedManifestationsCount;
	}

	@Override
	public long getErrorManifestationsCount() {
		return _errorManifestationsCount;
	}

	@Override
	public void setErrorManifestationsCount(long errorManifestationsCount) {
		_errorManifestationsCount = errorManifestationsCount;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ImportReport.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ImportReport toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ImportReport)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ImportReportImpl importReportImpl = new ImportReportImpl();

		importReportImpl.setUuid(getUuid());
		importReportImpl.setReportId(getReportId());
		importReportImpl.setProvider(getProvider());
		importReportImpl.setFilename(getFilename());
		importReportImpl.setStatus(getStatus());
		importReportImpl.setGlobalErrorCause(getGlobalErrorCause());
		importReportImpl.setNewEventsCount(getNewEventsCount());
		importReportImpl.setModifiedEventsCount(getModifiedEventsCount());
		importReportImpl.setErrorEventsCount(getErrorEventsCount());
		importReportImpl.setNewManifestationsCount(getNewManifestationsCount());
		importReportImpl.setModifiedManifestationsCount(getModifiedManifestationsCount());
		importReportImpl.setErrorManifestationsCount(getErrorManifestationsCount());
		importReportImpl.setStartDate(getStartDate());
		importReportImpl.setEndDate(getEndDate());

		importReportImpl.resetOriginalValues();

		return importReportImpl;
	}

	@Override
	public int compareTo(ImportReport importReport) {
		long primaryKey = importReport.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ImportReport)) {
			return false;
		}

		ImportReport importReport = (ImportReport)obj;

		long primaryKey = importReport.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ImportReportModelImpl importReportModelImpl = this;

		importReportModelImpl._originalUuid = importReportModelImpl._uuid;

		importReportModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ImportReport> toCacheModel() {
		ImportReportCacheModel importReportCacheModel = new ImportReportCacheModel();

		importReportCacheModel.uuid = getUuid();

		String uuid = importReportCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			importReportCacheModel.uuid = null;
		}

		importReportCacheModel.reportId = getReportId();

		importReportCacheModel.provider = getProvider();

		String provider = importReportCacheModel.provider;

		if ((provider != null) && (provider.length() == 0)) {
			importReportCacheModel.provider = null;
		}

		importReportCacheModel.filename = getFilename();

		String filename = importReportCacheModel.filename;

		if ((filename != null) && (filename.length() == 0)) {
			importReportCacheModel.filename = null;
		}

		importReportCacheModel.status = getStatus();

		importReportCacheModel.globalErrorCause = getGlobalErrorCause();

		String globalErrorCause = importReportCacheModel.globalErrorCause;

		if ((globalErrorCause != null) && (globalErrorCause.length() == 0)) {
			importReportCacheModel.globalErrorCause = null;
		}

		importReportCacheModel.newEventsCount = getNewEventsCount();

		importReportCacheModel.modifiedEventsCount = getModifiedEventsCount();

		importReportCacheModel.errorEventsCount = getErrorEventsCount();

		importReportCacheModel.newManifestationsCount = getNewManifestationsCount();

		importReportCacheModel.modifiedManifestationsCount = getModifiedManifestationsCount();

		importReportCacheModel.errorManifestationsCount = getErrorManifestationsCount();

		Date startDate = getStartDate();

		if (startDate != null) {
			importReportCacheModel.startDate = startDate.getTime();
		}
		else {
			importReportCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			importReportCacheModel.endDate = endDate.getTime();
		}
		else {
			importReportCacheModel.endDate = Long.MIN_VALUE;
		}

		return importReportCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", reportId=");
		sb.append(getReportId());
		sb.append(", provider=");
		sb.append(getProvider());
		sb.append(", filename=");
		sb.append(getFilename());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", globalErrorCause=");
		sb.append(getGlobalErrorCause());
		sb.append(", newEventsCount=");
		sb.append(getNewEventsCount());
		sb.append(", modifiedEventsCount=");
		sb.append(getModifiedEventsCount());
		sb.append(", errorEventsCount=");
		sb.append(getErrorEventsCount());
		sb.append(", newManifestationsCount=");
		sb.append(getNewManifestationsCount());
		sb.append(", modifiedManifestationsCount=");
		sb.append(getModifiedManifestationsCount());
		sb.append(", errorManifestationsCount=");
		sb.append(getErrorManifestationsCount());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.agenda.model.ImportReport");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportId</column-name><column-value><![CDATA[");
		sb.append(getReportId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>provider</column-name><column-value><![CDATA[");
		sb.append(getProvider());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>filename</column-name><column-value><![CDATA[");
		sb.append(getFilename());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>globalErrorCause</column-name><column-value><![CDATA[");
		sb.append(getGlobalErrorCause());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newEventsCount</column-name><column-value><![CDATA[");
		sb.append(getNewEventsCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedEventsCount</column-name><column-value><![CDATA[");
		sb.append(getModifiedEventsCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorEventsCount</column-name><column-value><![CDATA[");
		sb.append(getErrorEventsCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newManifestationsCount</column-name><column-value><![CDATA[");
		sb.append(getNewManifestationsCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedManifestationsCount</column-name><column-value><![CDATA[");
		sb.append(getModifiedManifestationsCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorManifestationsCount</column-name><column-value><![CDATA[");
		sb.append(getErrorManifestationsCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ImportReport.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ImportReport.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _reportId;
	private String _provider;
	private String _filename;
	private long _status;
	private String _globalErrorCause;
	private long _newEventsCount;
	private long _modifiedEventsCount;
	private long _errorEventsCount;
	private long _newManifestationsCount;
	private long _modifiedManifestationsCount;
	private long _errorManifestationsCount;
	private Date _startDate;
	private Date _endDate;
	private long _columnBitmask;
	private ImportReport _escapedModel;
}