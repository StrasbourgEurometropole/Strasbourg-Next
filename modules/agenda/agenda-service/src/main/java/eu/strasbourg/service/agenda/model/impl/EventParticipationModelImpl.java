/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.agenda.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import eu.strasbourg.service.agenda.model.EventParticipation;
import eu.strasbourg.service.agenda.model.EventParticipationModel;
import eu.strasbourg.service.agenda.model.EventParticipationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EventParticipation service. Represents a row in the &quot;agenda_EventParticipation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EventParticipationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventParticipationImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see EventParticipationImpl
 * @see EventParticipation
 * @see EventParticipationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EventParticipationModelImpl extends BaseModelImpl<EventParticipation>
	implements EventParticipationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a event participation model instance should use the {@link EventParticipation} interface instead.
	 */
	public static final String TABLE_NAME = "agenda_EventParticipation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eventParticipationId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "publikUserId", Types.VARCHAR },
			{ "eventId", Types.BIGINT },
			{ "groupId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("eventParticipationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("publikUserId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table agenda_EventParticipation (eventParticipationId LONG not null primary key,createDate DATE null,publikUserId VARCHAR(75) null,eventId LONG,groupId LONG)";
	public static final String TABLE_SQL_DROP = "drop table agenda_EventParticipation";
	public static final String ORDER_BY_JPQL = " ORDER BY eventParticipation.eventParticipationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY agenda_EventParticipation.eventParticipationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.agenda.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.agenda.model.EventParticipation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.agenda.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.agenda.model.EventParticipation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.agenda.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.agenda.model.EventParticipation"),
			true);
	public static final long EVENTID_COLUMN_BITMASK = 1L;
	public static final long PUBLIKUSERID_COLUMN_BITMASK = 2L;
	public static final long EVENTPARTICIPATIONID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EventParticipation toModel(EventParticipationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EventParticipation model = new EventParticipationImpl();

		model.setEventParticipationId(soapModel.getEventParticipationId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setPublikUserId(soapModel.getPublikUserId());
		model.setEventId(soapModel.getEventId());
		model.setGroupId(soapModel.getGroupId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EventParticipation> toModels(
		EventParticipationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EventParticipation> models = new ArrayList<EventParticipation>(soapModels.length);

		for (EventParticipationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.agenda.service.util.PropsUtil.get(
				"lock.expiration.time.eu.strasbourg.service.agenda.model.EventParticipation"));

	public EventParticipationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventParticipationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventParticipationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventParticipationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EventParticipation.class;
	}

	@Override
	public String getModelClassName() {
		return EventParticipation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eventParticipationId", getEventParticipationId());
		attributes.put("createDate", getCreateDate());
		attributes.put("publikUserId", getPublikUserId());
		attributes.put("eventId", getEventId());
		attributes.put("groupId", getGroupId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eventParticipationId = (Long)attributes.get("eventParticipationId");

		if (eventParticipationId != null) {
			setEventParticipationId(eventParticipationId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String publikUserId = (String)attributes.get("publikUserId");

		if (publikUserId != null) {
			setPublikUserId(publikUserId);
		}

		Long eventId = (Long)attributes.get("eventId");

		if (eventId != null) {
			setEventId(eventId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}
	}

	@JSON
	@Override
	public long getEventParticipationId() {
		return _eventParticipationId;
	}

	@Override
	public void setEventParticipationId(long eventParticipationId) {
		_eventParticipationId = eventParticipationId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public String getPublikUserId() {
		if (_publikUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _publikUserId;
		}
	}

	@Override
	public void setPublikUserId(String publikUserId) {
		_columnBitmask |= PUBLIKUSERID_COLUMN_BITMASK;

		if (_originalPublikUserId == null) {
			_originalPublikUserId = _publikUserId;
		}

		_publikUserId = publikUserId;
	}

	public String getOriginalPublikUserId() {
		return GetterUtil.getString(_originalPublikUserId);
	}

	@JSON
	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_columnBitmask |= EVENTID_COLUMN_BITMASK;

		if (!_setOriginalEventId) {
			_setOriginalEventId = true;

			_originalEventId = _eventId;
		}

		_eventId = eventId;
	}

	public long getOriginalEventId() {
		return _originalEventId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EventParticipation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EventParticipation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EventParticipation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EventParticipationImpl eventParticipationImpl = new EventParticipationImpl();

		eventParticipationImpl.setEventParticipationId(getEventParticipationId());
		eventParticipationImpl.setCreateDate(getCreateDate());
		eventParticipationImpl.setPublikUserId(getPublikUserId());
		eventParticipationImpl.setEventId(getEventId());
		eventParticipationImpl.setGroupId(getGroupId());

		eventParticipationImpl.resetOriginalValues();

		return eventParticipationImpl;
	}

	@Override
	public int compareTo(EventParticipation eventParticipation) {
		long primaryKey = eventParticipation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EventParticipation)) {
			return false;
		}

		EventParticipation eventParticipation = (EventParticipation)obj;

		long primaryKey = eventParticipation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EventParticipationModelImpl eventParticipationModelImpl = this;

		eventParticipationModelImpl._originalPublikUserId = eventParticipationModelImpl._publikUserId;

		eventParticipationModelImpl._originalEventId = eventParticipationModelImpl._eventId;

		eventParticipationModelImpl._setOriginalEventId = false;

		eventParticipationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EventParticipation> toCacheModel() {
		EventParticipationCacheModel eventParticipationCacheModel = new EventParticipationCacheModel();

		eventParticipationCacheModel.eventParticipationId = getEventParticipationId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			eventParticipationCacheModel.createDate = createDate.getTime();
		}
		else {
			eventParticipationCacheModel.createDate = Long.MIN_VALUE;
		}

		eventParticipationCacheModel.publikUserId = getPublikUserId();

		String publikUserId = eventParticipationCacheModel.publikUserId;

		if ((publikUserId != null) && (publikUserId.length() == 0)) {
			eventParticipationCacheModel.publikUserId = null;
		}

		eventParticipationCacheModel.eventId = getEventId();

		eventParticipationCacheModel.groupId = getGroupId();

		return eventParticipationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{eventParticipationId=");
		sb.append(getEventParticipationId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", publikUserId=");
		sb.append(getPublikUserId());
		sb.append(", eventId=");
		sb.append(getEventId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.agenda.model.EventParticipation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eventParticipationId</column-name><column-value><![CDATA[");
		sb.append(getEventParticipationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publikUserId</column-name><column-value><![CDATA[");
		sb.append(getPublikUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = EventParticipation.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			EventParticipation.class
		};
	private long _eventParticipationId;
	private Date _createDate;
	private String _publikUserId;
	private String _originalPublikUserId;
	private long _eventId;
	private long _originalEventId;
	private boolean _setOriginalEventId;
	private long _groupId;
	private long _columnBitmask;
	private EventParticipation _escapedModel;
}