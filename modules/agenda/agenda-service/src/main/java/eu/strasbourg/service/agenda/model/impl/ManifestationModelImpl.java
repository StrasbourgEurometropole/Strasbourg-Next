/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.agenda.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.agenda.model.Manifestation;
import eu.strasbourg.service.agenda.model.ManifestationModel;
import eu.strasbourg.service.agenda.model.ManifestationSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Manifestation service. Represents a row in the &quot;agenda_Manifestation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ManifestationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ManifestationImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see ManifestationImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ManifestationModelImpl
	extends BaseModelImpl<Manifestation> implements ManifestationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a manifestation model instance should use the <code>Manifestation</code> interface instead.
	 */
	public static final String TABLE_NAME = "agenda_Manifestation";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"manifestationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"lastPublishDate", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}, {"imageId", Types.BIGINT},
		{"title", Types.VARCHAR}, {"description", Types.CLOB},
		{"externalImageURL", Types.VARCHAR},
		{"externalImageCopyright", Types.VARCHAR},
		{"startDate", Types.TIMESTAMP}, {"endDate", Types.TIMESTAMP},
		{"source", Types.VARCHAR}, {"idSource", Types.VARCHAR},
		{"publicationDate", Types.TIMESTAMP},
		{"createDateSource", Types.TIMESTAMP},
		{"modifiedDateSource", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("manifestationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("externalImageURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalImageCopyright", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("source", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idSource", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publicationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createDateSource", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDateSource", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table agenda_Manifestation (uuid_ VARCHAR(75) null,manifestationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,lastPublishDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,imageId LONG,title STRING null,description TEXT null,externalImageURL VARCHAR(75) null,externalImageCopyright VARCHAR(75) null,startDate DATE null,endDate DATE null,source VARCHAR(75) null,idSource VARCHAR(75) null,publicationDate DATE null,createDateSource DATE null,modifiedDateSource DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table agenda_Manifestation";

	public static final String ORDER_BY_JPQL =
		" ORDER BY manifestation.title ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY agenda_Manifestation.title ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.agenda.model.Manifestation"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.agenda.model.Manifestation"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.agenda.model.Manifestation"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long ENDDATE_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long IDSOURCE_COLUMN_BITMASK = 8L;

	public static final long PUBLICATIONDATE_COLUMN_BITMASK = 16L;

	public static final long SOURCE_COLUMN_BITMASK = 32L;

	public static final long STATUS_COLUMN_BITMASK = 64L;

	public static final long STATUSDATE_COLUMN_BITMASK = 128L;

	public static final long TITLE_COLUMN_BITMASK = 256L;

	public static final long UUID_COLUMN_BITMASK = 512L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Manifestation toModel(ManifestationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Manifestation model = new ManifestationImpl();

		model.setUuid(soapModel.getUuid());
		model.setManifestationId(soapModel.getManifestationId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLastPublishDate(soapModel.getLastPublishDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setImageId(soapModel.getImageId());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setExternalImageURL(soapModel.getExternalImageURL());
		model.setExternalImageCopyright(soapModel.getExternalImageCopyright());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setSource(soapModel.getSource());
		model.setIdSource(soapModel.getIdSource());
		model.setPublicationDate(soapModel.getPublicationDate());
		model.setCreateDateSource(soapModel.getCreateDateSource());
		model.setModifiedDateSource(soapModel.getModifiedDateSource());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Manifestation> toModels(ManifestationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Manifestation> models = new ArrayList<Manifestation>(
			soapModels.length);

		for (ManifestationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_AGENDA_EVENTTOMANIFESTATION_NAME =
		"agenda_EventToManifestation";

	public static final Object[][]
		MAPPING_TABLE_AGENDA_EVENTTOMANIFESTATION_COLUMNS = {
			{"companyId", Types.BIGINT}, {"eventId", Types.BIGINT},
			{"manifestationId", Types.BIGINT}
		};

	public static final String
		MAPPING_TABLE_AGENDA_EVENTTOMANIFESTATION_SQL_CREATE =
			"create table agenda_EventToManifestation (companyId LONG not null,eventId LONG not null,manifestationId LONG not null,primary key (eventId, manifestationId))";

	public static final boolean
		FINDER_CACHE_ENABLED_AGENDA_EVENTTOMANIFESTATION =
			GetterUtil.getBoolean(
				eu.strasbourg.service.agenda.service.util.PropsUtil.get(
					"value.object.finder.cache.enabled.agenda_EventToManifestation"),
				true);

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.agenda.model.Manifestation"));

	public ManifestationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _manifestationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setManifestationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _manifestationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Manifestation.class;
	}

	@Override
	public String getModelClassName() {
		return Manifestation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Manifestation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Manifestation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Manifestation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Manifestation)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Manifestation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Manifestation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Manifestation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Manifestation, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Manifestation, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Manifestation>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Manifestation.class.getClassLoader(), Manifestation.class,
			ModelWrapper.class);

		try {
			Constructor<Manifestation> constructor =
				(Constructor<Manifestation>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Manifestation, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Manifestation, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Manifestation, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Manifestation, Object>>();
		Map<String, BiConsumer<Manifestation, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Manifestation, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(Manifestation manifestation, Object uuid) {
					manifestation.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"manifestationId",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getManifestationId();
				}

			});
		attributeSetterBiConsumers.put(
			"manifestationId",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object manifestationId) {

					manifestation.setManifestationId((Long)manifestationId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object groupId) {

					manifestation.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object companyId) {

					manifestation.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(Manifestation manifestation, Object userId) {
					manifestation.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object userName) {

					manifestation.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object createDate) {

					manifestation.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object modifiedDate) {

					manifestation.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"lastPublishDate",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getLastPublishDate();
				}

			});
		attributeSetterBiConsumers.put(
			"lastPublishDate",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object lastPublishDate) {

					manifestation.setLastPublishDate((Date)lastPublishDate);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(Manifestation manifestation, Object status) {
					manifestation.setStatus((Integer)status);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserId",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getStatusByUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserId",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object statusByUserId) {

					manifestation.setStatusByUserId((Long)statusByUserId);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserName",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getStatusByUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserName",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object statusByUserName) {

					manifestation.setStatusByUserName((String)statusByUserName);
				}

			});
		attributeGetterFunctions.put(
			"statusDate",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getStatusDate();
				}

			});
		attributeSetterBiConsumers.put(
			"statusDate",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object statusDate) {

					manifestation.setStatusDate((Date)statusDate);
				}

			});
		attributeGetterFunctions.put(
			"imageId",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getImageId();
				}

			});
		attributeSetterBiConsumers.put(
			"imageId",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object imageId) {

					manifestation.setImageId((Long)imageId);
				}

			});
		attributeGetterFunctions.put(
			"title",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getTitle();
				}

			});
		attributeSetterBiConsumers.put(
			"title",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(Manifestation manifestation, Object title) {
					manifestation.setTitle((String)title);
				}

			});
		attributeGetterFunctions.put(
			"description",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getDescription();
				}

			});
		attributeSetterBiConsumers.put(
			"description",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object description) {

					manifestation.setDescription((String)description);
				}

			});
		attributeGetterFunctions.put(
			"externalImageURL",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getExternalImageURL();
				}

			});
		attributeSetterBiConsumers.put(
			"externalImageURL",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object externalImageURL) {

					manifestation.setExternalImageURL((String)externalImageURL);
				}

			});
		attributeGetterFunctions.put(
			"externalImageCopyright",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getExternalImageCopyright();
				}

			});
		attributeSetterBiConsumers.put(
			"externalImageCopyright",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation,
					Object externalImageCopyright) {

					manifestation.setExternalImageCopyright(
						(String)externalImageCopyright);
				}

			});
		attributeGetterFunctions.put(
			"startDate",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getStartDate();
				}

			});
		attributeSetterBiConsumers.put(
			"startDate",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object startDate) {

					manifestation.setStartDate((Date)startDate);
				}

			});
		attributeGetterFunctions.put(
			"endDate",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getEndDate();
				}

			});
		attributeSetterBiConsumers.put(
			"endDate",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object endDate) {

					manifestation.setEndDate((Date)endDate);
				}

			});
		attributeGetterFunctions.put(
			"source",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getSource();
				}

			});
		attributeSetterBiConsumers.put(
			"source",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(Manifestation manifestation, Object source) {
					manifestation.setSource((String)source);
				}

			});
		attributeGetterFunctions.put(
			"idSource",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getIdSource();
				}

			});
		attributeSetterBiConsumers.put(
			"idSource",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object idSource) {

					manifestation.setIdSource((String)idSource);
				}

			});
		attributeGetterFunctions.put(
			"publicationDate",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getPublicationDate();
				}

			});
		attributeSetterBiConsumers.put(
			"publicationDate",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object publicationDate) {

					manifestation.setPublicationDate((Date)publicationDate);
				}

			});
		attributeGetterFunctions.put(
			"createDateSource",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getCreateDateSource();
				}

			});
		attributeSetterBiConsumers.put(
			"createDateSource",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object createDateSource) {

					manifestation.setCreateDateSource((Date)createDateSource);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDateSource",
			new Function<Manifestation, Object>() {

				@Override
				public Object apply(Manifestation manifestation) {
					return manifestation.getModifiedDateSource();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDateSource",
			new BiConsumer<Manifestation, Object>() {

				@Override
				public void accept(
					Manifestation manifestation, Object modifiedDateSource) {

					manifestation.setModifiedDateSource(
						(Date)modifiedDateSource);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getManifestationId() {
		return _manifestationId;
	}

	@Override
	public void setManifestationId(long manifestationId) {
		_manifestationId = manifestationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		_lastPublishDate = lastPublishDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_columnBitmask |= STATUSDATE_COLUMN_BITMASK;

		if (_originalStatusDate == null) {
			_originalStatusDate = _statusDate;
		}

		_statusDate = statusDate;
	}

	public Date getOriginalStatusDate() {
		return _originalStatusDate;
	}

	@JSON
	@Override
	public Long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(Long imageId) {
		_imageId = imageId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTitle(), languageId, useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask = -1L;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(
				LocalizationUtil.updateLocalization(
					getTitle(), "Title", title, languageId, defaultLanguageId));
		}
		else {
			setTitle(
				LocalizationUtil.removeLocalization(
					getTitle(), "Title", languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(
		Map<Locale, String> titleMap, Locale defaultLocale) {

		if (titleMap == null) {
			return;
		}

		setTitle(
			LocalizationUtil.updateLocalization(
				titleMap, getTitle(), "Title",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDescription(), languageId, useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(
		String description, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(
				LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(
				LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(
		Map<Locale, String> descriptionMap, Locale defaultLocale) {

		if (descriptionMap == null) {
			return;
		}

		setDescription(
			LocalizationUtil.updateLocalization(
				descriptionMap, getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getExternalImageURL() {
		if (_externalImageURL == null) {
			return "";
		}
		else {
			return _externalImageURL;
		}
	}

	@Override
	public void setExternalImageURL(String externalImageURL) {
		_externalImageURL = externalImageURL;
	}

	@JSON
	@Override
	public String getExternalImageCopyright() {
		if (_externalImageCopyright == null) {
			return "";
		}
		else {
			return _externalImageCopyright;
		}
	}

	@Override
	public void setExternalImageCopyright(String externalImageCopyright) {
		_externalImageCopyright = externalImageCopyright;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_columnBitmask |= ENDDATE_COLUMN_BITMASK;

		if (_originalEndDate == null) {
			_originalEndDate = _endDate;
		}

		_endDate = endDate;
	}

	public Date getOriginalEndDate() {
		return _originalEndDate;
	}

	@JSON
	@Override
	public String getSource() {
		if (_source == null) {
			return "";
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_columnBitmask |= SOURCE_COLUMN_BITMASK;

		if (_originalSource == null) {
			_originalSource = _source;
		}

		_source = source;
	}

	public String getOriginalSource() {
		return GetterUtil.getString(_originalSource);
	}

	@JSON
	@Override
	public String getIdSource() {
		if (_idSource == null) {
			return "";
		}
		else {
			return _idSource;
		}
	}

	@Override
	public void setIdSource(String idSource) {
		_columnBitmask |= IDSOURCE_COLUMN_BITMASK;

		if (_originalIdSource == null) {
			_originalIdSource = _idSource;
		}

		_idSource = idSource;
	}

	public String getOriginalIdSource() {
		return GetterUtil.getString(_originalIdSource);
	}

	@JSON
	@Override
	public Date getPublicationDate() {
		return _publicationDate;
	}

	@Override
	public void setPublicationDate(Date publicationDate) {
		_columnBitmask |= PUBLICATIONDATE_COLUMN_BITMASK;

		if (_originalPublicationDate == null) {
			_originalPublicationDate = _publicationDate;
		}

		_publicationDate = publicationDate;
	}

	public Date getOriginalPublicationDate() {
		return _originalPublicationDate;
	}

	@JSON
	@Override
	public Date getCreateDateSource() {
		return _createDateSource;
	}

	@Override
	public void setCreateDateSource(Date createDateSource) {
		_createDateSource = createDateSource;
	}

	@JSON
	@Override
	public Date getModifiedDateSource() {
		return _modifiedDateSource;
	}

	@Override
	public void setModifiedDateSource(Date modifiedDateSource) {
		_modifiedDateSource = modifiedDateSource;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Manifestation.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Manifestation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			Manifestation.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(
				getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(
				getDescription(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Manifestation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ManifestationImpl manifestationImpl = new ManifestationImpl();

		manifestationImpl.setUuid(getUuid());
		manifestationImpl.setManifestationId(getManifestationId());
		manifestationImpl.setGroupId(getGroupId());
		manifestationImpl.setCompanyId(getCompanyId());
		manifestationImpl.setUserId(getUserId());
		manifestationImpl.setUserName(getUserName());
		manifestationImpl.setCreateDate(getCreateDate());
		manifestationImpl.setModifiedDate(getModifiedDate());
		manifestationImpl.setLastPublishDate(getLastPublishDate());
		manifestationImpl.setStatus(getStatus());
		manifestationImpl.setStatusByUserId(getStatusByUserId());
		manifestationImpl.setStatusByUserName(getStatusByUserName());
		manifestationImpl.setStatusDate(getStatusDate());
		manifestationImpl.setImageId(getImageId());
		manifestationImpl.setTitle(getTitle());
		manifestationImpl.setDescription(getDescription());
		manifestationImpl.setExternalImageURL(getExternalImageURL());
		manifestationImpl.setExternalImageCopyright(
			getExternalImageCopyright());
		manifestationImpl.setStartDate(getStartDate());
		manifestationImpl.setEndDate(getEndDate());
		manifestationImpl.setSource(getSource());
		manifestationImpl.setIdSource(getIdSource());
		manifestationImpl.setPublicationDate(getPublicationDate());
		manifestationImpl.setCreateDateSource(getCreateDateSource());
		manifestationImpl.setModifiedDateSource(getModifiedDateSource());

		manifestationImpl.resetOriginalValues();

		return manifestationImpl;
	}

	@Override
	public int compareTo(Manifestation manifestation) {
		int value = 0;

		value = getTitle().compareTo(manifestation.getTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Manifestation)) {
			return false;
		}

		Manifestation manifestation = (Manifestation)obj;

		long primaryKey = manifestation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ManifestationModelImpl manifestationModelImpl = this;

		manifestationModelImpl._originalUuid = manifestationModelImpl._uuid;

		manifestationModelImpl._originalGroupId =
			manifestationModelImpl._groupId;

		manifestationModelImpl._setOriginalGroupId = false;

		manifestationModelImpl._originalCompanyId =
			manifestationModelImpl._companyId;

		manifestationModelImpl._setOriginalCompanyId = false;

		manifestationModelImpl._setModifiedDate = false;

		manifestationModelImpl._originalStatus = manifestationModelImpl._status;

		manifestationModelImpl._setOriginalStatus = false;

		manifestationModelImpl._originalStatusDate =
			manifestationModelImpl._statusDate;

		manifestationModelImpl._originalTitle = manifestationModelImpl._title;

		manifestationModelImpl._originalEndDate =
			manifestationModelImpl._endDate;

		manifestationModelImpl._originalSource = manifestationModelImpl._source;

		manifestationModelImpl._originalIdSource =
			manifestationModelImpl._idSource;

		manifestationModelImpl._originalPublicationDate =
			manifestationModelImpl._publicationDate;

		manifestationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Manifestation> toCacheModel() {
		ManifestationCacheModel manifestationCacheModel =
			new ManifestationCacheModel();

		manifestationCacheModel.uuid = getUuid();

		String uuid = manifestationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			manifestationCacheModel.uuid = null;
		}

		manifestationCacheModel.manifestationId = getManifestationId();

		manifestationCacheModel.groupId = getGroupId();

		manifestationCacheModel.companyId = getCompanyId();

		manifestationCacheModel.userId = getUserId();

		manifestationCacheModel.userName = getUserName();

		String userName = manifestationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			manifestationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			manifestationCacheModel.createDate = createDate.getTime();
		}
		else {
			manifestationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			manifestationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			manifestationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			manifestationCacheModel.lastPublishDate = lastPublishDate.getTime();
		}
		else {
			manifestationCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		manifestationCacheModel.status = getStatus();

		manifestationCacheModel.statusByUserId = getStatusByUserId();

		manifestationCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = manifestationCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			manifestationCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			manifestationCacheModel.statusDate = statusDate.getTime();
		}
		else {
			manifestationCacheModel.statusDate = Long.MIN_VALUE;
		}

		manifestationCacheModel.imageId = getImageId();

		manifestationCacheModel.title = getTitle();

		String title = manifestationCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			manifestationCacheModel.title = null;
		}

		manifestationCacheModel.description = getDescription();

		String description = manifestationCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			manifestationCacheModel.description = null;
		}

		manifestationCacheModel.externalImageURL = getExternalImageURL();

		String externalImageURL = manifestationCacheModel.externalImageURL;

		if ((externalImageURL != null) && (externalImageURL.length() == 0)) {
			manifestationCacheModel.externalImageURL = null;
		}

		manifestationCacheModel.externalImageCopyright =
			getExternalImageCopyright();

		String externalImageCopyright =
			manifestationCacheModel.externalImageCopyright;

		if ((externalImageCopyright != null) &&
			(externalImageCopyright.length() == 0)) {

			manifestationCacheModel.externalImageCopyright = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			manifestationCacheModel.startDate = startDate.getTime();
		}
		else {
			manifestationCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			manifestationCacheModel.endDate = endDate.getTime();
		}
		else {
			manifestationCacheModel.endDate = Long.MIN_VALUE;
		}

		manifestationCacheModel.source = getSource();

		String source = manifestationCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			manifestationCacheModel.source = null;
		}

		manifestationCacheModel.idSource = getIdSource();

		String idSource = manifestationCacheModel.idSource;

		if ((idSource != null) && (idSource.length() == 0)) {
			manifestationCacheModel.idSource = null;
		}

		Date publicationDate = getPublicationDate();

		if (publicationDate != null) {
			manifestationCacheModel.publicationDate = publicationDate.getTime();
		}
		else {
			manifestationCacheModel.publicationDate = Long.MIN_VALUE;
		}

		Date createDateSource = getCreateDateSource();

		if (createDateSource != null) {
			manifestationCacheModel.createDateSource =
				createDateSource.getTime();
		}
		else {
			manifestationCacheModel.createDateSource = Long.MIN_VALUE;
		}

		Date modifiedDateSource = getModifiedDateSource();

		if (modifiedDateSource != null) {
			manifestationCacheModel.modifiedDateSource =
				modifiedDateSource.getTime();
		}
		else {
			manifestationCacheModel.modifiedDateSource = Long.MIN_VALUE;
		}

		return manifestationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Manifestation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Manifestation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Manifestation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Manifestation)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Manifestation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Manifestation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Manifestation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Manifestation)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Manifestation>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private String _uuid;
	private String _originalUuid;
	private long _manifestationId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _lastPublishDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private Date _originalStatusDate;
	private Long _imageId;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _originalTitle;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _externalImageURL;
	private String _externalImageCopyright;
	private Date _startDate;
	private Date _endDate;
	private Date _originalEndDate;
	private String _source;
	private String _originalSource;
	private String _idSource;
	private String _originalIdSource;
	private Date _publicationDate;
	private Date _originalPublicationDate;
	private Date _createDateSource;
	private Date _modifiedDateSource;
	private long _columnBitmask;
	private Manifestation _escapedModel;

}