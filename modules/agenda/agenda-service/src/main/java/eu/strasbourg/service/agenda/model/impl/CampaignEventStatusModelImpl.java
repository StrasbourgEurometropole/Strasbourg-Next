/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.agenda.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import eu.strasbourg.service.agenda.model.CampaignEventStatus;
import eu.strasbourg.service.agenda.model.CampaignEventStatusModel;
import eu.strasbourg.service.agenda.model.CampaignEventStatusSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CampaignEventStatus service. Represents a row in the &quot;agenda_CampaignEventStatus&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CampaignEventStatusModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CampaignEventStatusImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see CampaignEventStatusImpl
 * @generated
 */
@JSON(strict = true)
public class CampaignEventStatusModelImpl
	extends BaseModelImpl<CampaignEventStatus>
	implements CampaignEventStatusModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a campaign event status model instance should use the <code>CampaignEventStatus</code> interface instead.
	 */
	public static final String TABLE_NAME = "agenda_CampaignEventStatus";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"statusId", Types.BIGINT},
		{"status", Types.INTEGER}, {"comment_", Types.CLOB},
		{"deletionDenied", Types.BOOLEAN}, {"date_", Types.TIMESTAMP},
		{"campaignEventId", Types.BIGINT}, {"previousStatusId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("comment_", Types.CLOB);
		TABLE_COLUMNS_MAP.put("deletionDenied", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("campaignEventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("previousStatusId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table agenda_CampaignEventStatus (uuid_ VARCHAR(75) null,statusId LONG not null primary key,status INTEGER,comment_ TEXT null,deletionDenied BOOLEAN,date_ DATE null,campaignEventId LONG,previousStatusId LONG,userId LONG,userName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table agenda_CampaignEventStatus";

	public static final String ORDER_BY_JPQL =
		" ORDER BY campaignEventStatus.statusId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY agenda_CampaignEventStatus.statusId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.agenda.model.CampaignEventStatus"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.agenda.model.CampaignEventStatus"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.agenda.model.CampaignEventStatus"),
		true);

	public static final long CAMPAIGNEVENTID_COLUMN_BITMASK = 1L;

	public static final long UUID_COLUMN_BITMASK = 2L;

	public static final long STATUSID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CampaignEventStatus toModel(
		CampaignEventStatusSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		CampaignEventStatus model = new CampaignEventStatusImpl();

		model.setUuid(soapModel.getUuid());
		model.setStatusId(soapModel.getStatusId());
		model.setStatus(soapModel.getStatus());
		model.setComment(soapModel.getComment());
		model.setDeletionDenied(soapModel.getDeletionDenied());
		model.setDate(soapModel.getDate());
		model.setCampaignEventId(soapModel.getCampaignEventId());
		model.setPreviousStatusId(soapModel.getPreviousStatusId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CampaignEventStatus> toModels(
		CampaignEventStatusSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<CampaignEventStatus> models = new ArrayList<CampaignEventStatus>(
			soapModels.length);

		for (CampaignEventStatusSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.agenda.model.CampaignEventStatus"));

	public CampaignEventStatusModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _statusId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStatusId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _statusId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CampaignEventStatus.class;
	}

	@Override
	public String getModelClassName() {
		return CampaignEventStatus.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CampaignEventStatus, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CampaignEventStatus, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CampaignEventStatus, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CampaignEventStatus)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CampaignEventStatus, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CampaignEventStatus, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CampaignEventStatus)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CampaignEventStatus, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CampaignEventStatus, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CampaignEventStatus>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CampaignEventStatus.class.getClassLoader(),
			CampaignEventStatus.class, ModelWrapper.class);

		try {
			Constructor<CampaignEventStatus> constructor =
				(Constructor<CampaignEventStatus>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<CampaignEventStatus, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CampaignEventStatus, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CampaignEventStatus, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<CampaignEventStatus, Object>>();
		Map<String, BiConsumer<CampaignEventStatus, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<CampaignEventStatus, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<CampaignEventStatus, Object>() {

				@Override
				public Object apply(CampaignEventStatus campaignEventStatus) {
					return campaignEventStatus.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<CampaignEventStatus, Object>() {

				@Override
				public void accept(
					CampaignEventStatus campaignEventStatus,
					Object uuidObject) {

					campaignEventStatus.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"statusId",
			new Function<CampaignEventStatus, Object>() {

				@Override
				public Object apply(CampaignEventStatus campaignEventStatus) {
					return campaignEventStatus.getStatusId();
				}

			});
		attributeSetterBiConsumers.put(
			"statusId",
			new BiConsumer<CampaignEventStatus, Object>() {

				@Override
				public void accept(
					CampaignEventStatus campaignEventStatus,
					Object statusIdObject) {

					campaignEventStatus.setStatusId((Long)statusIdObject);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<CampaignEventStatus, Object>() {

				@Override
				public Object apply(CampaignEventStatus campaignEventStatus) {
					return campaignEventStatus.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<CampaignEventStatus, Object>() {

				@Override
				public void accept(
					CampaignEventStatus campaignEventStatus,
					Object statusObject) {

					campaignEventStatus.setStatus((Integer)statusObject);
				}

			});
		attributeGetterFunctions.put(
			"comment",
			new Function<CampaignEventStatus, Object>() {

				@Override
				public Object apply(CampaignEventStatus campaignEventStatus) {
					return campaignEventStatus.getComment();
				}

			});
		attributeSetterBiConsumers.put(
			"comment",
			new BiConsumer<CampaignEventStatus, Object>() {

				@Override
				public void accept(
					CampaignEventStatus campaignEventStatus,
					Object commentObject) {

					campaignEventStatus.setComment((String)commentObject);
				}

			});
		attributeGetterFunctions.put(
			"deletionDenied",
			new Function<CampaignEventStatus, Object>() {

				@Override
				public Object apply(CampaignEventStatus campaignEventStatus) {
					return campaignEventStatus.getDeletionDenied();
				}

			});
		attributeSetterBiConsumers.put(
			"deletionDenied",
			new BiConsumer<CampaignEventStatus, Object>() {

				@Override
				public void accept(
					CampaignEventStatus campaignEventStatus,
					Object deletionDeniedObject) {

					campaignEventStatus.setDeletionDenied(
						(Boolean)deletionDeniedObject);
				}

			});
		attributeGetterFunctions.put(
			"date",
			new Function<CampaignEventStatus, Object>() {

				@Override
				public Object apply(CampaignEventStatus campaignEventStatus) {
					return campaignEventStatus.getDate();
				}

			});
		attributeSetterBiConsumers.put(
			"date",
			new BiConsumer<CampaignEventStatus, Object>() {

				@Override
				public void accept(
					CampaignEventStatus campaignEventStatus,
					Object dateObject) {

					campaignEventStatus.setDate((Date)dateObject);
				}

			});
		attributeGetterFunctions.put(
			"campaignEventId",
			new Function<CampaignEventStatus, Object>() {

				@Override
				public Object apply(CampaignEventStatus campaignEventStatus) {
					return campaignEventStatus.getCampaignEventId();
				}

			});
		attributeSetterBiConsumers.put(
			"campaignEventId",
			new BiConsumer<CampaignEventStatus, Object>() {

				@Override
				public void accept(
					CampaignEventStatus campaignEventStatus,
					Object campaignEventIdObject) {

					campaignEventStatus.setCampaignEventId(
						(Long)campaignEventIdObject);
				}

			});
		attributeGetterFunctions.put(
			"previousStatusId",
			new Function<CampaignEventStatus, Object>() {

				@Override
				public Object apply(CampaignEventStatus campaignEventStatus) {
					return campaignEventStatus.getPreviousStatusId();
				}

			});
		attributeSetterBiConsumers.put(
			"previousStatusId",
			new BiConsumer<CampaignEventStatus, Object>() {

				@Override
				public void accept(
					CampaignEventStatus campaignEventStatus,
					Object previousStatusIdObject) {

					campaignEventStatus.setPreviousStatusId(
						(Long)previousStatusIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<CampaignEventStatus, Object>() {

				@Override
				public Object apply(CampaignEventStatus campaignEventStatus) {
					return campaignEventStatus.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<CampaignEventStatus, Object>() {

				@Override
				public void accept(
					CampaignEventStatus campaignEventStatus,
					Object userIdObject) {

					campaignEventStatus.setUserId((Long)userIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<CampaignEventStatus, Object>() {

				@Override
				public Object apply(CampaignEventStatus campaignEventStatus) {
					return campaignEventStatus.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<CampaignEventStatus, Object>() {

				@Override
				public void accept(
					CampaignEventStatus campaignEventStatus,
					Object userNameObject) {

					campaignEventStatus.setUserName((String)userNameObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getStatusId() {
		return _statusId;
	}

	@Override
	public void setStatusId(long statusId) {
		_statusId = statusId;
	}

	@JSON
	@Override
	public Integer getStatus() {
		return _status;
	}

	@Override
	public void setStatus(Integer status) {
		_status = status;
	}

	@JSON
	@Override
	public String getComment() {
		if (_comment == null) {
			return "";
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		_comment = comment;
	}

	@JSON
	@Override
	public Boolean getDeletionDenied() {
		return _deletionDenied;
	}

	@Override
	public void setDeletionDenied(Boolean deletionDenied) {
		_deletionDenied = deletionDenied;
	}

	@JSON
	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		_date = date;
	}

	@JSON
	@Override
	public long getCampaignEventId() {
		return _campaignEventId;
	}

	@Override
	public void setCampaignEventId(long campaignEventId) {
		_columnBitmask |= CAMPAIGNEVENTID_COLUMN_BITMASK;

		if (!_setOriginalCampaignEventId) {
			_setOriginalCampaignEventId = true;

			_originalCampaignEventId = _campaignEventId;
		}

		_campaignEventId = campaignEventId;
	}

	public long getOriginalCampaignEventId() {
		return _originalCampaignEventId;
	}

	@JSON
	@Override
	public long getPreviousStatusId() {
		return _previousStatusId;
	}

	@Override
	public void setPreviousStatusId(long previousStatusId) {
		_previousStatusId = previousStatusId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, CampaignEventStatus.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CampaignEventStatus toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CampaignEventStatus>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CampaignEventStatusImpl campaignEventStatusImpl =
			new CampaignEventStatusImpl();

		campaignEventStatusImpl.setUuid(getUuid());
		campaignEventStatusImpl.setStatusId(getStatusId());
		campaignEventStatusImpl.setStatus(getStatus());
		campaignEventStatusImpl.setComment(getComment());
		campaignEventStatusImpl.setDeletionDenied(getDeletionDenied());
		campaignEventStatusImpl.setDate(getDate());
		campaignEventStatusImpl.setCampaignEventId(getCampaignEventId());
		campaignEventStatusImpl.setPreviousStatusId(getPreviousStatusId());
		campaignEventStatusImpl.setUserId(getUserId());
		campaignEventStatusImpl.setUserName(getUserName());

		campaignEventStatusImpl.resetOriginalValues();

		return campaignEventStatusImpl;
	}

	@Override
	public int compareTo(CampaignEventStatus campaignEventStatus) {
		long primaryKey = campaignEventStatus.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CampaignEventStatus)) {
			return false;
		}

		CampaignEventStatus campaignEventStatus = (CampaignEventStatus)object;

		long primaryKey = campaignEventStatus.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CampaignEventStatusModelImpl campaignEventStatusModelImpl = this;

		campaignEventStatusModelImpl._originalUuid =
			campaignEventStatusModelImpl._uuid;

		campaignEventStatusModelImpl._originalCampaignEventId =
			campaignEventStatusModelImpl._campaignEventId;

		campaignEventStatusModelImpl._setOriginalCampaignEventId = false;

		campaignEventStatusModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CampaignEventStatus> toCacheModel() {
		CampaignEventStatusCacheModel campaignEventStatusCacheModel =
			new CampaignEventStatusCacheModel();

		campaignEventStatusCacheModel.uuid = getUuid();

		String uuid = campaignEventStatusCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			campaignEventStatusCacheModel.uuid = null;
		}

		campaignEventStatusCacheModel.statusId = getStatusId();

		Integer status = getStatus();

		if (status != null) {
			campaignEventStatusCacheModel.status = status;
		}

		campaignEventStatusCacheModel.comment = getComment();

		String comment = campaignEventStatusCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			campaignEventStatusCacheModel.comment = null;
		}

		Boolean deletionDenied = getDeletionDenied();

		if (deletionDenied != null) {
			campaignEventStatusCacheModel.deletionDenied = deletionDenied;
		}

		Date date = getDate();

		if (date != null) {
			campaignEventStatusCacheModel.date = date.getTime();
		}
		else {
			campaignEventStatusCacheModel.date = Long.MIN_VALUE;
		}

		campaignEventStatusCacheModel.campaignEventId = getCampaignEventId();

		campaignEventStatusCacheModel.previousStatusId = getPreviousStatusId();

		campaignEventStatusCacheModel.userId = getUserId();

		campaignEventStatusCacheModel.userName = getUserName();

		String userName = campaignEventStatusCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			campaignEventStatusCacheModel.userName = null;
		}

		return campaignEventStatusCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CampaignEventStatus, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CampaignEventStatus, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CampaignEventStatus, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CampaignEventStatus)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CampaignEventStatus, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CampaignEventStatus, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CampaignEventStatus, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CampaignEventStatus)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CampaignEventStatus>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _statusId;
	private Integer _status;
	private String _comment;
	private Boolean _deletionDenied;
	private Date _date;
	private long _campaignEventId;
	private long _originalCampaignEventId;
	private boolean _setOriginalCampaignEventId;
	private long _previousStatusId;
	private long _userId;
	private String _userName;
	private long _columnBitmask;
	private CampaignEventStatus _escapedModel;

}