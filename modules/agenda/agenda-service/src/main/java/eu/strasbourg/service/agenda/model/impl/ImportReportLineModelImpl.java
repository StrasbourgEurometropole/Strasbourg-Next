/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.agenda.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import eu.strasbourg.service.agenda.model.ImportReportLine;
import eu.strasbourg.service.agenda.model.ImportReportLineModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ImportReportLine service. Represents a row in the &quot;agenda_ImportReportLine&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ImportReportLineModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImportReportLineImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see ImportReportLineImpl
 * @generated
 */
@ProviderType
public class ImportReportLineModelImpl
	extends BaseModelImpl<ImportReportLine> implements ImportReportLineModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a import report line model instance should use the <code>ImportReportLine</code> interface instead.
	 */
	public static final String TABLE_NAME = "agenda_ImportReportLine";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"lineId", Types.BIGINT},
		{"type_", Types.VARCHAR}, {"status", Types.BIGINT},
		{"log_", Types.CLOB}, {"entityName", Types.VARCHAR},
		{"entityExternalId", Types.VARCHAR}, {"entityId", Types.BIGINT},
		{"reportId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lineId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("log_", Types.CLOB);
		TABLE_COLUMNS_MAP.put("entityName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityExternalId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("reportId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table agenda_ImportReportLine (uuid_ VARCHAR(75) null,lineId LONG not null primary key,type_ VARCHAR(75) null,status LONG,log_ TEXT null,entityName VARCHAR(200) null,entityExternalId VARCHAR(75) null,entityId LONG,reportId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table agenda_ImportReportLine";

	public static final String ORDER_BY_JPQL =
		" ORDER BY importReportLine.lineId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY agenda_ImportReportLine.lineId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.agenda.model.ImportReportLine"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.agenda.model.ImportReportLine"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.agenda.model.ImportReportLine"),
		true);

	public static final long REPORTID_COLUMN_BITMASK = 1L;

	public static final long STATUS_COLUMN_BITMASK = 2L;

	public static final long TYPE_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long LINEID_COLUMN_BITMASK = 16L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.agenda.model.ImportReportLine"));

	public ImportReportLineModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lineId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLineId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lineId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ImportReportLine.class;
	}

	@Override
	public String getModelClassName() {
		return ImportReportLine.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ImportReportLine, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ImportReportLine, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ImportReportLine, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ImportReportLine)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ImportReportLine, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ImportReportLine, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ImportReportLine)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ImportReportLine, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ImportReportLine, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ImportReportLine>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ImportReportLine.class.getClassLoader(), ImportReportLine.class,
			ModelWrapper.class);

		try {
			Constructor<ImportReportLine> constructor =
				(Constructor<ImportReportLine>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<ImportReportLine, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ImportReportLine, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ImportReportLine, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<ImportReportLine, Object>>();
		Map<String, BiConsumer<ImportReportLine, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<ImportReportLine, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<ImportReportLine, Object>() {

				@Override
				public Object apply(ImportReportLine importReportLine) {
					return importReportLine.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<ImportReportLine, Object>() {

				@Override
				public void accept(
					ImportReportLine importReportLine, Object uuid) {

					importReportLine.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"lineId",
			new Function<ImportReportLine, Object>() {

				@Override
				public Object apply(ImportReportLine importReportLine) {
					return importReportLine.getLineId();
				}

			});
		attributeSetterBiConsumers.put(
			"lineId",
			new BiConsumer<ImportReportLine, Object>() {

				@Override
				public void accept(
					ImportReportLine importReportLine, Object lineId) {

					importReportLine.setLineId((Long)lineId);
				}

			});
		attributeGetterFunctions.put(
			"type",
			new Function<ImportReportLine, Object>() {

				@Override
				public Object apply(ImportReportLine importReportLine) {
					return importReportLine.getType();
				}

			});
		attributeSetterBiConsumers.put(
			"type",
			new BiConsumer<ImportReportLine, Object>() {

				@Override
				public void accept(
					ImportReportLine importReportLine, Object type) {

					importReportLine.setType((String)type);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<ImportReportLine, Object>() {

				@Override
				public Object apply(ImportReportLine importReportLine) {
					return importReportLine.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<ImportReportLine, Object>() {

				@Override
				public void accept(
					ImportReportLine importReportLine, Object status) {

					importReportLine.setStatus((Long)status);
				}

			});
		attributeGetterFunctions.put(
			"log",
			new Function<ImportReportLine, Object>() {

				@Override
				public Object apply(ImportReportLine importReportLine) {
					return importReportLine.getLog();
				}

			});
		attributeSetterBiConsumers.put(
			"log",
			new BiConsumer<ImportReportLine, Object>() {

				@Override
				public void accept(
					ImportReportLine importReportLine, Object log) {

					importReportLine.setLog((String)log);
				}

			});
		attributeGetterFunctions.put(
			"entityName",
			new Function<ImportReportLine, Object>() {

				@Override
				public Object apply(ImportReportLine importReportLine) {
					return importReportLine.getEntityName();
				}

			});
		attributeSetterBiConsumers.put(
			"entityName",
			new BiConsumer<ImportReportLine, Object>() {

				@Override
				public void accept(
					ImportReportLine importReportLine, Object entityName) {

					importReportLine.setEntityName((String)entityName);
				}

			});
		attributeGetterFunctions.put(
			"entityExternalId",
			new Function<ImportReportLine, Object>() {

				@Override
				public Object apply(ImportReportLine importReportLine) {
					return importReportLine.getEntityExternalId();
				}

			});
		attributeSetterBiConsumers.put(
			"entityExternalId",
			new BiConsumer<ImportReportLine, Object>() {

				@Override
				public void accept(
					ImportReportLine importReportLine,
					Object entityExternalId) {

					importReportLine.setEntityExternalId(
						(String)entityExternalId);
				}

			});
		attributeGetterFunctions.put(
			"entityId",
			new Function<ImportReportLine, Object>() {

				@Override
				public Object apply(ImportReportLine importReportLine) {
					return importReportLine.getEntityId();
				}

			});
		attributeSetterBiConsumers.put(
			"entityId",
			new BiConsumer<ImportReportLine, Object>() {

				@Override
				public void accept(
					ImportReportLine importReportLine, Object entityId) {

					importReportLine.setEntityId((Long)entityId);
				}

			});
		attributeGetterFunctions.put(
			"reportId",
			new Function<ImportReportLine, Object>() {

				@Override
				public Object apply(ImportReportLine importReportLine) {
					return importReportLine.getReportId();
				}

			});
		attributeSetterBiConsumers.put(
			"reportId",
			new BiConsumer<ImportReportLine, Object>() {

				@Override
				public void accept(
					ImportReportLine importReportLine, Object reportId) {

					importReportLine.setReportId((Long)reportId);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getLineId() {
		return _lineId;
	}

	@Override
	public void setLineId(long lineId) {
		_lineId = lineId;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public long getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public String getLog() {
		if (_log == null) {
			return "";
		}
		else {
			return _log;
		}
	}

	@Override
	public void setLog(String log) {
		_log = log;
	}

	@Override
	public String getEntityName() {
		if (_entityName == null) {
			return "";
		}
		else {
			return _entityName;
		}
	}

	@Override
	public void setEntityName(String entityName) {
		_entityName = entityName;
	}

	@Override
	public String getEntityExternalId() {
		if (_entityExternalId == null) {
			return "";
		}
		else {
			return _entityExternalId;
		}
	}

	@Override
	public void setEntityExternalId(String entityExternalId) {
		_entityExternalId = entityExternalId;
	}

	@Override
	public long getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(long entityId) {
		_entityId = entityId;
	}

	@Override
	public long getReportId() {
		return _reportId;
	}

	@Override
	public void setReportId(long reportId) {
		_columnBitmask |= REPORTID_COLUMN_BITMASK;

		if (!_setOriginalReportId) {
			_setOriginalReportId = true;

			_originalReportId = _reportId;
		}

		_reportId = reportId;
	}

	public long getOriginalReportId() {
		return _originalReportId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ImportReportLine.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ImportReportLine toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ImportReportLineImpl importReportLineImpl = new ImportReportLineImpl();

		importReportLineImpl.setUuid(getUuid());
		importReportLineImpl.setLineId(getLineId());
		importReportLineImpl.setType(getType());
		importReportLineImpl.setStatus(getStatus());
		importReportLineImpl.setLog(getLog());
		importReportLineImpl.setEntityName(getEntityName());
		importReportLineImpl.setEntityExternalId(getEntityExternalId());
		importReportLineImpl.setEntityId(getEntityId());
		importReportLineImpl.setReportId(getReportId());

		importReportLineImpl.resetOriginalValues();

		return importReportLineImpl;
	}

	@Override
	public int compareTo(ImportReportLine importReportLine) {
		long primaryKey = importReportLine.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ImportReportLine)) {
			return false;
		}

		ImportReportLine importReportLine = (ImportReportLine)obj;

		long primaryKey = importReportLine.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ImportReportLineModelImpl importReportLineModelImpl = this;

		importReportLineModelImpl._originalUuid =
			importReportLineModelImpl._uuid;

		importReportLineModelImpl._originalType =
			importReportLineModelImpl._type;

		importReportLineModelImpl._originalStatus =
			importReportLineModelImpl._status;

		importReportLineModelImpl._setOriginalStatus = false;

		importReportLineModelImpl._originalReportId =
			importReportLineModelImpl._reportId;

		importReportLineModelImpl._setOriginalReportId = false;

		importReportLineModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ImportReportLine> toCacheModel() {
		ImportReportLineCacheModel importReportLineCacheModel =
			new ImportReportLineCacheModel();

		importReportLineCacheModel.uuid = getUuid();

		String uuid = importReportLineCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			importReportLineCacheModel.uuid = null;
		}

		importReportLineCacheModel.lineId = getLineId();

		importReportLineCacheModel.type = getType();

		String type = importReportLineCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			importReportLineCacheModel.type = null;
		}

		importReportLineCacheModel.status = getStatus();

		importReportLineCacheModel.log = getLog();

		String log = importReportLineCacheModel.log;

		if ((log != null) && (log.length() == 0)) {
			importReportLineCacheModel.log = null;
		}

		importReportLineCacheModel.entityName = getEntityName();

		String entityName = importReportLineCacheModel.entityName;

		if ((entityName != null) && (entityName.length() == 0)) {
			importReportLineCacheModel.entityName = null;
		}

		importReportLineCacheModel.entityExternalId = getEntityExternalId();

		String entityExternalId = importReportLineCacheModel.entityExternalId;

		if ((entityExternalId != null) && (entityExternalId.length() == 0)) {
			importReportLineCacheModel.entityExternalId = null;
		}

		importReportLineCacheModel.entityId = getEntityId();

		importReportLineCacheModel.reportId = getReportId();

		return importReportLineCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ImportReportLine, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ImportReportLine, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ImportReportLine, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ImportReportLine)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ImportReportLine, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ImportReportLine, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ImportReportLine, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ImportReportLine)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, ImportReportLine>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private String _uuid;
	private String _originalUuid;
	private long _lineId;
	private String _type;
	private String _originalType;
	private long _status;
	private long _originalStatus;
	private boolean _setOriginalStatus;
	private String _log;
	private String _entityName;
	private String _entityExternalId;
	private long _entityId;
	private long _reportId;
	private long _originalReportId;
	private boolean _setOriginalReportId;
	private long _columnBitmask;
	private ImportReportLine _escapedModel;

}