/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.agenda.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import eu.strasbourg.service.agenda.model.ImportReportLine;
import eu.strasbourg.service.agenda.model.ImportReportLineModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ImportReportLine service. Represents a row in the &quot;agenda_ImportReportLine&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ImportReportLineModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImportReportLineImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see ImportReportLineImpl
 * @generated
 */
public class ImportReportLineModelImpl
	extends BaseModelImpl<ImportReportLine> implements ImportReportLineModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a import report line model instance should use the <code>ImportReportLine</code> interface instead.
	 */
	public static final String TABLE_NAME = "agenda_ImportReportLine";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"lineId", Types.BIGINT},
		{"type_", Types.VARCHAR}, {"status", Types.BIGINT},
		{"log_", Types.CLOB}, {"entityName", Types.VARCHAR},
		{"entityExternalId", Types.VARCHAR}, {"entityId", Types.BIGINT},
		{"reportId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lineId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("log_", Types.CLOB);
		TABLE_COLUMNS_MAP.put("entityName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityExternalId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("entityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("reportId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table agenda_ImportReportLine (uuid_ VARCHAR(75) null,lineId LONG not null primary key,type_ VARCHAR(75) null,status LONG,log_ TEXT null,entityName VARCHAR(200) null,entityExternalId VARCHAR(75) null,entityId LONG,reportId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table agenda_ImportReportLine";

	public static final String ORDER_BY_JPQL =
		" ORDER BY importReportLine.lineId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY agenda_ImportReportLine.lineId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REPORTID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TYPE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LINEID_COLUMN_BITMASK = 16L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.agenda.model.ImportReportLine"));

	public ImportReportLineModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lineId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLineId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lineId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ImportReportLine.class;
	}

	@Override
	public String getModelClassName() {
		return ImportReportLine.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ImportReportLine, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ImportReportLine, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ImportReportLine, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ImportReportLine)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ImportReportLine, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ImportReportLine, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ImportReportLine)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ImportReportLine, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ImportReportLine, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ImportReportLine, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ImportReportLine, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ImportReportLine, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<ImportReportLine, Object>>();
		Map<String, BiConsumer<ImportReportLine, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<ImportReportLine, ?>>();

		attributeGetterFunctions.put("uuid", ImportReportLine::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<ImportReportLine, String>)ImportReportLine::setUuid);
		attributeGetterFunctions.put("lineId", ImportReportLine::getLineId);
		attributeSetterBiConsumers.put(
			"lineId",
			(BiConsumer<ImportReportLine, Long>)ImportReportLine::setLineId);
		attributeGetterFunctions.put("type", ImportReportLine::getType);
		attributeSetterBiConsumers.put(
			"type",
			(BiConsumer<ImportReportLine, String>)ImportReportLine::setType);
		attributeGetterFunctions.put("status", ImportReportLine::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<ImportReportLine, Long>)ImportReportLine::setStatus);
		attributeGetterFunctions.put("log", ImportReportLine::getLog);
		attributeSetterBiConsumers.put(
			"log",
			(BiConsumer<ImportReportLine, String>)ImportReportLine::setLog);
		attributeGetterFunctions.put(
			"entityName", ImportReportLine::getEntityName);
		attributeSetterBiConsumers.put(
			"entityName",
			(BiConsumer<ImportReportLine, String>)
				ImportReportLine::setEntityName);
		attributeGetterFunctions.put(
			"entityExternalId", ImportReportLine::getEntityExternalId);
		attributeSetterBiConsumers.put(
			"entityExternalId",
			(BiConsumer<ImportReportLine, String>)
				ImportReportLine::setEntityExternalId);
		attributeGetterFunctions.put("entityId", ImportReportLine::getEntityId);
		attributeSetterBiConsumers.put(
			"entityId",
			(BiConsumer<ImportReportLine, Long>)ImportReportLine::setEntityId);
		attributeGetterFunctions.put("reportId", ImportReportLine::getReportId);
		attributeSetterBiConsumers.put(
			"reportId",
			(BiConsumer<ImportReportLine, Long>)ImportReportLine::setReportId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getLineId() {
		return _lineId;
	}

	@Override
	public void setLineId(long lineId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lineId = lineId;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type = type;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalType() {
		return getColumnOriginalValue("type_");
	}

	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalStatus() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("status"));
	}

	@Override
	public String getLog() {
		if (_log == null) {
			return "";
		}
		else {
			return _log;
		}
	}

	@Override
	public void setLog(String log) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_log = log;
	}

	@Override
	public String getEntityName() {
		if (_entityName == null) {
			return "";
		}
		else {
			return _entityName;
		}
	}

	@Override
	public void setEntityName(String entityName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityName = entityName;
	}

	@Override
	public String getEntityExternalId() {
		if (_entityExternalId == null) {
			return "";
		}
		else {
			return _entityExternalId;
		}
	}

	@Override
	public void setEntityExternalId(String entityExternalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityExternalId = entityExternalId;
	}

	@Override
	public long getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(long entityId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entityId = entityId;
	}

	@Override
	public long getReportId() {
		return _reportId;
	}

	@Override
	public void setReportId(long reportId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reportId = reportId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalReportId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("reportId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ImportReportLine.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ImportReportLine toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ImportReportLine>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ImportReportLineImpl importReportLineImpl = new ImportReportLineImpl();

		importReportLineImpl.setUuid(getUuid());
		importReportLineImpl.setLineId(getLineId());
		importReportLineImpl.setType(getType());
		importReportLineImpl.setStatus(getStatus());
		importReportLineImpl.setLog(getLog());
		importReportLineImpl.setEntityName(getEntityName());
		importReportLineImpl.setEntityExternalId(getEntityExternalId());
		importReportLineImpl.setEntityId(getEntityId());
		importReportLineImpl.setReportId(getReportId());

		importReportLineImpl.resetOriginalValues();

		return importReportLineImpl;
	}

	@Override
	public ImportReportLine cloneWithOriginalValues() {
		ImportReportLineImpl importReportLineImpl = new ImportReportLineImpl();

		importReportLineImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		importReportLineImpl.setLineId(
			this.<Long>getColumnOriginalValue("lineId"));
		importReportLineImpl.setType(
			this.<String>getColumnOriginalValue("type_"));
		importReportLineImpl.setStatus(
			this.<Long>getColumnOriginalValue("status"));
		importReportLineImpl.setLog(
			this.<String>getColumnOriginalValue("log_"));
		importReportLineImpl.setEntityName(
			this.<String>getColumnOriginalValue("entityName"));
		importReportLineImpl.setEntityExternalId(
			this.<String>getColumnOriginalValue("entityExternalId"));
		importReportLineImpl.setEntityId(
			this.<Long>getColumnOriginalValue("entityId"));
		importReportLineImpl.setReportId(
			this.<Long>getColumnOriginalValue("reportId"));

		return importReportLineImpl;
	}

	@Override
	public int compareTo(ImportReportLine importReportLine) {
		long primaryKey = importReportLine.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ImportReportLine)) {
			return false;
		}

		ImportReportLine importReportLine = (ImportReportLine)object;

		long primaryKey = importReportLine.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ImportReportLine> toCacheModel() {
		ImportReportLineCacheModel importReportLineCacheModel =
			new ImportReportLineCacheModel();

		importReportLineCacheModel.uuid = getUuid();

		String uuid = importReportLineCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			importReportLineCacheModel.uuid = null;
		}

		importReportLineCacheModel.lineId = getLineId();

		importReportLineCacheModel.type = getType();

		String type = importReportLineCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			importReportLineCacheModel.type = null;
		}

		importReportLineCacheModel.status = getStatus();

		importReportLineCacheModel.log = getLog();

		String log = importReportLineCacheModel.log;

		if ((log != null) && (log.length() == 0)) {
			importReportLineCacheModel.log = null;
		}

		importReportLineCacheModel.entityName = getEntityName();

		String entityName = importReportLineCacheModel.entityName;

		if ((entityName != null) && (entityName.length() == 0)) {
			importReportLineCacheModel.entityName = null;
		}

		importReportLineCacheModel.entityExternalId = getEntityExternalId();

		String entityExternalId = importReportLineCacheModel.entityExternalId;

		if ((entityExternalId != null) && (entityExternalId.length() == 0)) {
			importReportLineCacheModel.entityExternalId = null;
		}

		importReportLineCacheModel.entityId = getEntityId();

		importReportLineCacheModel.reportId = getReportId();

		return importReportLineCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ImportReportLine, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ImportReportLine, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ImportReportLine, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ImportReportLine)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ImportReportLine>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ImportReportLine.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _lineId;
	private String _type;
	private long _status;
	private String _log;
	private String _entityName;
	private String _entityExternalId;
	private long _entityId;
	private long _reportId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ImportReportLine, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ImportReportLine)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("lineId", _lineId);
		_columnOriginalValues.put("type_", _type);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("log_", _log);
		_columnOriginalValues.put("entityName", _entityName);
		_columnOriginalValues.put("entityExternalId", _entityExternalId);
		_columnOriginalValues.put("entityId", _entityId);
		_columnOriginalValues.put("reportId", _reportId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("type_", "type");
		attributeNames.put("log_", "log");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("lineId", 2L);

		columnBitmasks.put("type_", 4L);

		columnBitmasks.put("status", 8L);

		columnBitmasks.put("log_", 16L);

		columnBitmasks.put("entityName", 32L);

		columnBitmasks.put("entityExternalId", 64L);

		columnBitmasks.put("entityId", 128L);

		columnBitmasks.put("reportId", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ImportReportLine _escapedModel;

}