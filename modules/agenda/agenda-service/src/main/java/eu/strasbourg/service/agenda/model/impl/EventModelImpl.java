/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.agenda.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.agenda.model.Event;
import eu.strasbourg.service.agenda.model.EventModel;
import eu.strasbourg.service.agenda.model.EventSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Event service. Represents a row in the &quot;agenda_Event&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>EventModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see EventImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EventModelImpl extends BaseModelImpl<Event> implements EventModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a event model instance should use the <code>Event</code> interface instead.
	 */
	public static final String TABLE_NAME = "agenda_Event";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"eventId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"lastPublishDate", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}, {"title", Types.VARCHAR},
		{"subtitle", Types.VARCHAR}, {"description", Types.CLOB},
		{"externalImageURL", Types.VARCHAR},
		{"externalImageCopyright", Types.VARCHAR},
		{"imageWidth", Types.INTEGER}, {"imageHeight", Types.INTEGER},
		{"placeSIGId", Types.VARCHAR}, {"placeName", Types.VARCHAR},
		{"placeStreetNumber", Types.VARCHAR},
		{"placeStreetName", Types.VARCHAR}, {"placeZipCode", Types.VARCHAR},
		{"placeCity", Types.VARCHAR}, {"placeCountry", Types.VARCHAR},
		{"access_", Types.CLOB}, {"accessForDisabled", Types.CLOB},
		{"accessForBlind", Types.BOOLEAN}, {"accessForDeaf", Types.BOOLEAN},
		{"accessForWheelchair", Types.BOOLEAN},
		{"accessForElder", Types.BOOLEAN},
		{"accessForDeficient", Types.BOOLEAN}, {"promoter", Types.VARCHAR},
		{"phone", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"websiteURL", Types.VARCHAR}, {"websiteName", Types.VARCHAR},
		{"free", Types.INTEGER}, {"price", Types.CLOB},
		{"bookingDescription", Types.CLOB}, {"bookingURL", Types.VARCHAR},
		{"subscriptionURL", Types.VARCHAR}, {"source", Types.VARCHAR},
		{"idSource", Types.VARCHAR}, {"publicationDate", Types.TIMESTAMP},
		{"distribution", Types.VARCHAR}, {"composer", Types.VARCHAR},
		{"concertId", Types.VARCHAR}, {"program", Types.CLOB},
		{"firstStartDate", Types.TIMESTAMP}, {"lastEndDate", Types.TIMESTAMP},
		{"createDateSource", Types.TIMESTAMP},
		{"modifiedDateSource", Types.TIMESTAMP}, {"imageId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subtitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("externalImageURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalImageCopyright", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageWidth", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("imageHeight", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("placeSIGId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeStreetNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeStreetName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeZipCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("access_", Types.CLOB);
		TABLE_COLUMNS_MAP.put("accessForDisabled", Types.CLOB);
		TABLE_COLUMNS_MAP.put("accessForBlind", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("accessForDeaf", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("accessForWheelchair", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("accessForElder", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("accessForDeficient", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("promoter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("websiteURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("websiteName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("free", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("price", Types.CLOB);
		TABLE_COLUMNS_MAP.put("bookingDescription", Types.CLOB);
		TABLE_COLUMNS_MAP.put("bookingURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subscriptionURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("source", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idSource", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publicationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("distribution", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("composer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("concertId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("program", Types.CLOB);
		TABLE_COLUMNS_MAP.put("firstStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createDateSource", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDateSource", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table agenda_Event (uuid_ VARCHAR(75) null,eventId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,lastPublishDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,title STRING null,subtitle STRING null,description TEXT null,externalImageURL VARCHAR(255) null,externalImageCopyright VARCHAR(400) null,imageWidth INTEGER,imageHeight INTEGER,placeSIGId VARCHAR(75) null,placeName STRING null,placeStreetNumber VARCHAR(75) null,placeStreetName VARCHAR(75) null,placeZipCode VARCHAR(75) null,placeCity VARCHAR(75) null,placeCountry VARCHAR(75) null,access_ TEXT null,accessForDisabled TEXT null,accessForBlind BOOLEAN,accessForDeaf BOOLEAN,accessForWheelchair BOOLEAN,accessForElder BOOLEAN,accessForDeficient BOOLEAN,promoter VARCHAR(75) null,phone VARCHAR(75) null,email VARCHAR(75) null,websiteURL STRING null,websiteName STRING null,free INTEGER,price TEXT null,bookingDescription TEXT null,bookingURL VARCHAR(400) null,subscriptionURL VARCHAR(400) null,source VARCHAR(75) null,idSource VARCHAR(75) null,publicationDate DATE null,distribution STRING null,composer VARCHAR(400) null,concertId VARCHAR(75) null,program TEXT null,firstStartDate DATE null,lastEndDate DATE null,createDateSource DATE null,modifiedDateSource DATE null,imageId LONG)";

	public static final String TABLE_SQL_DROP = "drop table agenda_Event";

	public static final String ORDER_BY_JPQL =
		" ORDER BY event.modifiedDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY agenda_Event.modifiedDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.agenda.model.Event"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.agenda.model.Event"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.agenda.model.Event"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long IDSOURCE_COLUMN_BITMASK = 4L;

	public static final long LASTENDDATE_COLUMN_BITMASK = 8L;

	public static final long PLACESIGID_COLUMN_BITMASK = 16L;

	public static final long PUBLICATIONDATE_COLUMN_BITMASK = 32L;

	public static final long SOURCE_COLUMN_BITMASK = 64L;

	public static final long STATUS_COLUMN_BITMASK = 128L;

	public static final long STATUSDATE_COLUMN_BITMASK = 256L;

	public static final long TITLE_COLUMN_BITMASK = 512L;

	public static final long UUID_COLUMN_BITMASK = 1024L;

	public static final long MODIFIEDDATE_COLUMN_BITMASK = 2048L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Event toModel(EventSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Event model = new EventImpl();

		model.setUuid(soapModel.getUuid());
		model.setEventId(soapModel.getEventId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLastPublishDate(soapModel.getLastPublishDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setTitle(soapModel.getTitle());
		model.setSubtitle(soapModel.getSubtitle());
		model.setDescription(soapModel.getDescription());
		model.setExternalImageURL(soapModel.getExternalImageURL());
		model.setExternalImageCopyright(soapModel.getExternalImageCopyright());
		model.setImageWidth(soapModel.getImageWidth());
		model.setImageHeight(soapModel.getImageHeight());
		model.setPlaceSIGId(soapModel.getPlaceSIGId());
		model.setPlaceName(soapModel.getPlaceName());
		model.setPlaceStreetNumber(soapModel.getPlaceStreetNumber());
		model.setPlaceStreetName(soapModel.getPlaceStreetName());
		model.setPlaceZipCode(soapModel.getPlaceZipCode());
		model.setPlaceCity(soapModel.getPlaceCity());
		model.setPlaceCountry(soapModel.getPlaceCountry());
		model.setAccess(soapModel.getAccess());
		model.setAccessForDisabled(soapModel.getAccessForDisabled());
		model.setAccessForBlind(soapModel.getAccessForBlind());
		model.setAccessForDeaf(soapModel.getAccessForDeaf());
		model.setAccessForWheelchair(soapModel.getAccessForWheelchair());
		model.setAccessForElder(soapModel.getAccessForElder());
		model.setAccessForDeficient(soapModel.getAccessForDeficient());
		model.setPromoter(soapModel.getPromoter());
		model.setPhone(soapModel.getPhone());
		model.setEmail(soapModel.getEmail());
		model.setWebsiteURL(soapModel.getWebsiteURL());
		model.setWebsiteName(soapModel.getWebsiteName());
		model.setFree(soapModel.getFree());
		model.setPrice(soapModel.getPrice());
		model.setBookingDescription(soapModel.getBookingDescription());
		model.setBookingURL(soapModel.getBookingURL());
		model.setSubscriptionURL(soapModel.getSubscriptionURL());
		model.setSource(soapModel.getSource());
		model.setIdSource(soapModel.getIdSource());
		model.setPublicationDate(soapModel.getPublicationDate());
		model.setDistribution(soapModel.getDistribution());
		model.setComposer(soapModel.getComposer());
		model.setConcertId(soapModel.getConcertId());
		model.setProgram(soapModel.getProgram());
		model.setFirstStartDate(soapModel.getFirstStartDate());
		model.setLastEndDate(soapModel.getLastEndDate());
		model.setCreateDateSource(soapModel.getCreateDateSource());
		model.setModifiedDateSource(soapModel.getModifiedDateSource());
		model.setImageId(soapModel.getImageId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Event> toModels(EventSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Event> models = new ArrayList<Event>(soapModels.length);

		for (EventSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_AGENDA_EVENTTOMANIFESTATION_NAME =
		"agenda_EventToManifestation";

	public static final Object[][]
		MAPPING_TABLE_AGENDA_EVENTTOMANIFESTATION_COLUMNS = {
			{"companyId", Types.BIGINT}, {"eventId", Types.BIGINT},
			{"manifestationId", Types.BIGINT}
		};

	public static final String
		MAPPING_TABLE_AGENDA_EVENTTOMANIFESTATION_SQL_CREATE =
			"create table agenda_EventToManifestation (companyId LONG not null,eventId LONG not null,manifestationId LONG not null,primary key (eventId, manifestationId))";

	public static final boolean
		FINDER_CACHE_ENABLED_AGENDA_EVENTTOMANIFESTATION =
			GetterUtil.getBoolean(
				eu.strasbourg.service.agenda.service.util.PropsUtil.get(
					"value.object.finder.cache.enabled.agenda_EventToManifestation"),
				true);

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.agenda.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.agenda.model.Event"));

	public EventModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Event.class;
	}

	@Override
	public String getModelClassName() {
		return Event.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Event, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Event, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Event, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Event)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Event, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Event, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Event)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Event, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Event, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Event>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Event.class.getClassLoader(), Event.class, ModelWrapper.class);

		try {
			Constructor<Event> constructor =
				(Constructor<Event>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Event, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Event, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Event, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Event, Object>>();
		Map<String, BiConsumer<Event, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Event, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object uuid) {
					event.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"eventId",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getEventId();
				}

			});
		attributeSetterBiConsumers.put(
			"eventId",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object eventId) {
					event.setEventId((Long)eventId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object groupId) {
					event.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object companyId) {
					event.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object userId) {
					event.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object userName) {
					event.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object createDate) {
					event.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object modifiedDate) {
					event.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"lastPublishDate",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getLastPublishDate();
				}

			});
		attributeSetterBiConsumers.put(
			"lastPublishDate",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object lastPublishDate) {
					event.setLastPublishDate((Date)lastPublishDate);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object status) {
					event.setStatus((Integer)status);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserId",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getStatusByUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserId",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object statusByUserId) {
					event.setStatusByUserId((Long)statusByUserId);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserName",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getStatusByUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserName",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object statusByUserName) {
					event.setStatusByUserName((String)statusByUserName);
				}

			});
		attributeGetterFunctions.put(
			"statusDate",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getStatusDate();
				}

			});
		attributeSetterBiConsumers.put(
			"statusDate",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object statusDate) {
					event.setStatusDate((Date)statusDate);
				}

			});
		attributeGetterFunctions.put(
			"title",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getTitle();
				}

			});
		attributeSetterBiConsumers.put(
			"title",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object title) {
					event.setTitle((String)title);
				}

			});
		attributeGetterFunctions.put(
			"subtitle",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getSubtitle();
				}

			});
		attributeSetterBiConsumers.put(
			"subtitle",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object subtitle) {
					event.setSubtitle((String)subtitle);
				}

			});
		attributeGetterFunctions.put(
			"description",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getDescription();
				}

			});
		attributeSetterBiConsumers.put(
			"description",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object description) {
					event.setDescription((String)description);
				}

			});
		attributeGetterFunctions.put(
			"externalImageURL",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getExternalImageURL();
				}

			});
		attributeSetterBiConsumers.put(
			"externalImageURL",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object externalImageURL) {
					event.setExternalImageURL((String)externalImageURL);
				}

			});
		attributeGetterFunctions.put(
			"externalImageCopyright",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getExternalImageCopyright();
				}

			});
		attributeSetterBiConsumers.put(
			"externalImageCopyright",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object externalImageCopyright) {
					event.setExternalImageCopyright(
						(String)externalImageCopyright);
				}

			});
		attributeGetterFunctions.put(
			"imageWidth",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getImageWidth();
				}

			});
		attributeSetterBiConsumers.put(
			"imageWidth",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object imageWidth) {
					event.setImageWidth((Integer)imageWidth);
				}

			});
		attributeGetterFunctions.put(
			"imageHeight",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getImageHeight();
				}

			});
		attributeSetterBiConsumers.put(
			"imageHeight",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object imageHeight) {
					event.setImageHeight((Integer)imageHeight);
				}

			});
		attributeGetterFunctions.put(
			"placeSIGId",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getPlaceSIGId();
				}

			});
		attributeSetterBiConsumers.put(
			"placeSIGId",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object placeSIGId) {
					event.setPlaceSIGId((String)placeSIGId);
				}

			});
		attributeGetterFunctions.put(
			"placeName",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getPlaceName();
				}

			});
		attributeSetterBiConsumers.put(
			"placeName",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object placeName) {
					event.setPlaceName((String)placeName);
				}

			});
		attributeGetterFunctions.put(
			"placeStreetNumber",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getPlaceStreetNumber();
				}

			});
		attributeSetterBiConsumers.put(
			"placeStreetNumber",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object placeStreetNumber) {
					event.setPlaceStreetNumber((String)placeStreetNumber);
				}

			});
		attributeGetterFunctions.put(
			"placeStreetName",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getPlaceStreetName();
				}

			});
		attributeSetterBiConsumers.put(
			"placeStreetName",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object placeStreetName) {
					event.setPlaceStreetName((String)placeStreetName);
				}

			});
		attributeGetterFunctions.put(
			"placeZipCode",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getPlaceZipCode();
				}

			});
		attributeSetterBiConsumers.put(
			"placeZipCode",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object placeZipCode) {
					event.setPlaceZipCode((String)placeZipCode);
				}

			});
		attributeGetterFunctions.put(
			"placeCity",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getPlaceCity();
				}

			});
		attributeSetterBiConsumers.put(
			"placeCity",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object placeCity) {
					event.setPlaceCity((String)placeCity);
				}

			});
		attributeGetterFunctions.put(
			"placeCountry",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getPlaceCountry();
				}

			});
		attributeSetterBiConsumers.put(
			"placeCountry",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object placeCountry) {
					event.setPlaceCountry((String)placeCountry);
				}

			});
		attributeGetterFunctions.put(
			"access",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getAccess();
				}

			});
		attributeSetterBiConsumers.put(
			"access",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object access) {
					event.setAccess((String)access);
				}

			});
		attributeGetterFunctions.put(
			"accessForDisabled",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getAccessForDisabled();
				}

			});
		attributeSetterBiConsumers.put(
			"accessForDisabled",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object accessForDisabled) {
					event.setAccessForDisabled((String)accessForDisabled);
				}

			});
		attributeGetterFunctions.put(
			"accessForBlind",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getAccessForBlind();
				}

			});
		attributeSetterBiConsumers.put(
			"accessForBlind",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object accessForBlind) {
					event.setAccessForBlind((Boolean)accessForBlind);
				}

			});
		attributeGetterFunctions.put(
			"accessForDeaf",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getAccessForDeaf();
				}

			});
		attributeSetterBiConsumers.put(
			"accessForDeaf",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object accessForDeaf) {
					event.setAccessForDeaf((Boolean)accessForDeaf);
				}

			});
		attributeGetterFunctions.put(
			"accessForWheelchair",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getAccessForWheelchair();
				}

			});
		attributeSetterBiConsumers.put(
			"accessForWheelchair",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object accessForWheelchair) {
					event.setAccessForWheelchair((Boolean)accessForWheelchair);
				}

			});
		attributeGetterFunctions.put(
			"accessForElder",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getAccessForElder();
				}

			});
		attributeSetterBiConsumers.put(
			"accessForElder",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object accessForElder) {
					event.setAccessForElder((Boolean)accessForElder);
				}

			});
		attributeGetterFunctions.put(
			"accessForDeficient",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getAccessForDeficient();
				}

			});
		attributeSetterBiConsumers.put(
			"accessForDeficient",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object accessForDeficient) {
					event.setAccessForDeficient((Boolean)accessForDeficient);
				}

			});
		attributeGetterFunctions.put(
			"promoter",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getPromoter();
				}

			});
		attributeSetterBiConsumers.put(
			"promoter",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object promoter) {
					event.setPromoter((String)promoter);
				}

			});
		attributeGetterFunctions.put(
			"phone",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getPhone();
				}

			});
		attributeSetterBiConsumers.put(
			"phone",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object phone) {
					event.setPhone((String)phone);
				}

			});
		attributeGetterFunctions.put(
			"email",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getEmail();
				}

			});
		attributeSetterBiConsumers.put(
			"email",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object email) {
					event.setEmail((String)email);
				}

			});
		attributeGetterFunctions.put(
			"websiteURL",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getWebsiteURL();
				}

			});
		attributeSetterBiConsumers.put(
			"websiteURL",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object websiteURL) {
					event.setWebsiteURL((String)websiteURL);
				}

			});
		attributeGetterFunctions.put(
			"websiteName",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getWebsiteName();
				}

			});
		attributeSetterBiConsumers.put(
			"websiteName",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object websiteName) {
					event.setWebsiteName((String)websiteName);
				}

			});
		attributeGetterFunctions.put(
			"free",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getFree();
				}

			});
		attributeSetterBiConsumers.put(
			"free",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object free) {
					event.setFree((Integer)free);
				}

			});
		attributeGetterFunctions.put(
			"price",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getPrice();
				}

			});
		attributeSetterBiConsumers.put(
			"price",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object price) {
					event.setPrice((String)price);
				}

			});
		attributeGetterFunctions.put(
			"bookingDescription",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getBookingDescription();
				}

			});
		attributeSetterBiConsumers.put(
			"bookingDescription",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object bookingDescription) {
					event.setBookingDescription((String)bookingDescription);
				}

			});
		attributeGetterFunctions.put(
			"bookingURL",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getBookingURL();
				}

			});
		attributeSetterBiConsumers.put(
			"bookingURL",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object bookingURL) {
					event.setBookingURL((String)bookingURL);
				}

			});
		attributeGetterFunctions.put(
			"subscriptionURL",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getSubscriptionURL();
				}

			});
		attributeSetterBiConsumers.put(
			"subscriptionURL",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object subscriptionURL) {
					event.setSubscriptionURL((String)subscriptionURL);
				}

			});
		attributeGetterFunctions.put(
			"source",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getSource();
				}

			});
		attributeSetterBiConsumers.put(
			"source",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object source) {
					event.setSource((String)source);
				}

			});
		attributeGetterFunctions.put(
			"idSource",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getIdSource();
				}

			});
		attributeSetterBiConsumers.put(
			"idSource",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object idSource) {
					event.setIdSource((String)idSource);
				}

			});
		attributeGetterFunctions.put(
			"publicationDate",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getPublicationDate();
				}

			});
		attributeSetterBiConsumers.put(
			"publicationDate",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object publicationDate) {
					event.setPublicationDate((Date)publicationDate);
				}

			});
		attributeGetterFunctions.put(
			"distribution",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getDistribution();
				}

			});
		attributeSetterBiConsumers.put(
			"distribution",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object distribution) {
					event.setDistribution((String)distribution);
				}

			});
		attributeGetterFunctions.put(
			"composer",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getComposer();
				}

			});
		attributeSetterBiConsumers.put(
			"composer",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object composer) {
					event.setComposer((String)composer);
				}

			});
		attributeGetterFunctions.put(
			"concertId",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getConcertId();
				}

			});
		attributeSetterBiConsumers.put(
			"concertId",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object concertId) {
					event.setConcertId((String)concertId);
				}

			});
		attributeGetterFunctions.put(
			"program",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getProgram();
				}

			});
		attributeSetterBiConsumers.put(
			"program",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object program) {
					event.setProgram((String)program);
				}

			});
		attributeGetterFunctions.put(
			"firstStartDate",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getFirstStartDate();
				}

			});
		attributeSetterBiConsumers.put(
			"firstStartDate",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object firstStartDate) {
					event.setFirstStartDate((Date)firstStartDate);
				}

			});
		attributeGetterFunctions.put(
			"lastEndDate",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getLastEndDate();
				}

			});
		attributeSetterBiConsumers.put(
			"lastEndDate",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object lastEndDate) {
					event.setLastEndDate((Date)lastEndDate);
				}

			});
		attributeGetterFunctions.put(
			"createDateSource",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getCreateDateSource();
				}

			});
		attributeSetterBiConsumers.put(
			"createDateSource",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object createDateSource) {
					event.setCreateDateSource((Date)createDateSource);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDateSource",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getModifiedDateSource();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDateSource",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object modifiedDateSource) {
					event.setModifiedDateSource((Date)modifiedDateSource);
				}

			});
		attributeGetterFunctions.put(
			"imageId",
			new Function<Event, Object>() {

				@Override
				public Object apply(Event event) {
					return event.getImageId();
				}

			});
		attributeSetterBiConsumers.put(
			"imageId",
			new BiConsumer<Event, Object>() {

				@Override
				public void accept(Event event, Object imageId) {
					event.setImageId((Long)imageId);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_eventId = eventId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		_lastPublishDate = lastPublishDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_columnBitmask |= STATUSDATE_COLUMN_BITMASK;

		if (_originalStatusDate == null) {
			_originalStatusDate = _statusDate;
		}

		_statusDate = statusDate;
	}

	public Date getOriginalStatusDate() {
		return _originalStatusDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTitle(), languageId, useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(
				LocalizationUtil.updateLocalization(
					getTitle(), "Title", title, languageId, defaultLanguageId));
		}
		else {
			setTitle(
				LocalizationUtil.removeLocalization(
					getTitle(), "Title", languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(
		Map<Locale, String> titleMap, Locale defaultLocale) {

		if (titleMap == null) {
			return;
		}

		setTitle(
			LocalizationUtil.updateLocalization(
				titleMap, getTitle(), "Title",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@JSON
	@Override
	public String getSubtitle() {
		if (_subtitle == null) {
			return "";
		}
		else {
			return _subtitle;
		}
	}

	@Override
	public String getSubtitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSubtitle(languageId);
	}

	@Override
	public String getSubtitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSubtitle(languageId, useDefault);
	}

	@Override
	public String getSubtitle(String languageId) {
		return LocalizationUtil.getLocalization(getSubtitle(), languageId);
	}

	@Override
	public String getSubtitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getSubtitle(), languageId, useDefault);
	}

	@Override
	public String getSubtitleCurrentLanguageId() {
		return _subtitleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSubtitleCurrentValue() {
		Locale locale = getLocale(_subtitleCurrentLanguageId);

		return getSubtitle(locale);
	}

	@Override
	public Map<Locale, String> getSubtitleMap() {
		return LocalizationUtil.getLocalizationMap(getSubtitle());
	}

	@Override
	public void setSubtitle(String subtitle) {
		_subtitle = subtitle;
	}

	@Override
	public void setSubtitle(String subtitle, Locale locale) {
		setSubtitle(subtitle, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSubtitle(
		String subtitle, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(subtitle)) {
			setSubtitle(
				LocalizationUtil.updateLocalization(
					getSubtitle(), "Subtitle", subtitle, languageId,
					defaultLanguageId));
		}
		else {
			setSubtitle(
				LocalizationUtil.removeLocalization(
					getSubtitle(), "Subtitle", languageId));
		}
	}

	@Override
	public void setSubtitleCurrentLanguageId(String languageId) {
		_subtitleCurrentLanguageId = languageId;
	}

	@Override
	public void setSubtitleMap(Map<Locale, String> subtitleMap) {
		setSubtitleMap(subtitleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSubtitleMap(
		Map<Locale, String> subtitleMap, Locale defaultLocale) {

		if (subtitleMap == null) {
			return;
		}

		setSubtitle(
			LocalizationUtil.updateLocalization(
				subtitleMap, getSubtitle(), "Subtitle",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDescription(), languageId, useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(
		String description, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(
				LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(
				LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(
		Map<Locale, String> descriptionMap, Locale defaultLocale) {

		if (descriptionMap == null) {
			return;
		}

		setDescription(
			LocalizationUtil.updateLocalization(
				descriptionMap, getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getExternalImageURL() {
		if (_externalImageURL == null) {
			return "";
		}
		else {
			return _externalImageURL;
		}
	}

	@Override
	public void setExternalImageURL(String externalImageURL) {
		_externalImageURL = externalImageURL;
	}

	@JSON
	@Override
	public String getExternalImageCopyright() {
		if (_externalImageCopyright == null) {
			return "";
		}
		else {
			return _externalImageCopyright;
		}
	}

	@Override
	public void setExternalImageCopyright(String externalImageCopyright) {
		_externalImageCopyright = externalImageCopyright;
	}

	@JSON
	@Override
	public Integer getImageWidth() {
		return _imageWidth;
	}

	@Override
	public void setImageWidth(Integer imageWidth) {
		_imageWidth = imageWidth;
	}

	@JSON
	@Override
	public Integer getImageHeight() {
		return _imageHeight;
	}

	@Override
	public void setImageHeight(Integer imageHeight) {
		_imageHeight = imageHeight;
	}

	@JSON
	@Override
	public String getPlaceSIGId() {
		if (_placeSIGId == null) {
			return "";
		}
		else {
			return _placeSIGId;
		}
	}

	@Override
	public void setPlaceSIGId(String placeSIGId) {
		_columnBitmask |= PLACESIGID_COLUMN_BITMASK;

		if (_originalPlaceSIGId == null) {
			_originalPlaceSIGId = _placeSIGId;
		}

		_placeSIGId = placeSIGId;
	}

	public String getOriginalPlaceSIGId() {
		return GetterUtil.getString(_originalPlaceSIGId);
	}

	@JSON
	@Override
	public String getPlaceName() {
		if (_placeName == null) {
			return "";
		}
		else {
			return _placeName;
		}
	}

	@Override
	public String getPlaceName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPlaceName(languageId);
	}

	@Override
	public String getPlaceName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPlaceName(languageId, useDefault);
	}

	@Override
	public String getPlaceName(String languageId) {
		return LocalizationUtil.getLocalization(getPlaceName(), languageId);
	}

	@Override
	public String getPlaceName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getPlaceName(), languageId, useDefault);
	}

	@Override
	public String getPlaceNameCurrentLanguageId() {
		return _placeNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPlaceNameCurrentValue() {
		Locale locale = getLocale(_placeNameCurrentLanguageId);

		return getPlaceName(locale);
	}

	@Override
	public Map<Locale, String> getPlaceNameMap() {
		return LocalizationUtil.getLocalizationMap(getPlaceName());
	}

	@Override
	public void setPlaceName(String placeName) {
		_placeName = placeName;
	}

	@Override
	public void setPlaceName(String placeName, Locale locale) {
		setPlaceName(placeName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPlaceName(
		String placeName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(placeName)) {
			setPlaceName(
				LocalizationUtil.updateLocalization(
					getPlaceName(), "PlaceName", placeName, languageId,
					defaultLanguageId));
		}
		else {
			setPlaceName(
				LocalizationUtil.removeLocalization(
					getPlaceName(), "PlaceName", languageId));
		}
	}

	@Override
	public void setPlaceNameCurrentLanguageId(String languageId) {
		_placeNameCurrentLanguageId = languageId;
	}

	@Override
	public void setPlaceNameMap(Map<Locale, String> placeNameMap) {
		setPlaceNameMap(placeNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPlaceNameMap(
		Map<Locale, String> placeNameMap, Locale defaultLocale) {

		if (placeNameMap == null) {
			return;
		}

		setPlaceName(
			LocalizationUtil.updateLocalization(
				placeNameMap, getPlaceName(), "PlaceName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPlaceStreetNumber() {
		if (_placeStreetNumber == null) {
			return "";
		}
		else {
			return _placeStreetNumber;
		}
	}

	@Override
	public void setPlaceStreetNumber(String placeStreetNumber) {
		_placeStreetNumber = placeStreetNumber;
	}

	@JSON
	@Override
	public String getPlaceStreetName() {
		if (_placeStreetName == null) {
			return "";
		}
		else {
			return _placeStreetName;
		}
	}

	@Override
	public void setPlaceStreetName(String placeStreetName) {
		_placeStreetName = placeStreetName;
	}

	@JSON
	@Override
	public String getPlaceZipCode() {
		if (_placeZipCode == null) {
			return "";
		}
		else {
			return _placeZipCode;
		}
	}

	@Override
	public void setPlaceZipCode(String placeZipCode) {
		_placeZipCode = placeZipCode;
	}

	@JSON
	@Override
	public String getPlaceCity() {
		if (_placeCity == null) {
			return "";
		}
		else {
			return _placeCity;
		}
	}

	@Override
	public void setPlaceCity(String placeCity) {
		_placeCity = placeCity;
	}

	@JSON
	@Override
	public String getPlaceCountry() {
		if (_placeCountry == null) {
			return "";
		}
		else {
			return _placeCountry;
		}
	}

	@Override
	public void setPlaceCountry(String placeCountry) {
		_placeCountry = placeCountry;
	}

	@JSON
	@Override
	public String getAccess() {
		if (_access == null) {
			return "";
		}
		else {
			return _access;
		}
	}

	@Override
	public String getAccess(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAccess(languageId);
	}

	@Override
	public String getAccess(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAccess(languageId, useDefault);
	}

	@Override
	public String getAccess(String languageId) {
		return LocalizationUtil.getLocalization(getAccess(), languageId);
	}

	@Override
	public String getAccess(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getAccess(), languageId, useDefault);
	}

	@Override
	public String getAccessCurrentLanguageId() {
		return _accessCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAccessCurrentValue() {
		Locale locale = getLocale(_accessCurrentLanguageId);

		return getAccess(locale);
	}

	@Override
	public Map<Locale, String> getAccessMap() {
		return LocalizationUtil.getLocalizationMap(getAccess());
	}

	@Override
	public void setAccess(String access) {
		_access = access;
	}

	@Override
	public void setAccess(String access, Locale locale) {
		setAccess(access, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAccess(String access, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(access)) {
			setAccess(
				LocalizationUtil.updateLocalization(
					getAccess(), "Access", access, languageId,
					defaultLanguageId));
		}
		else {
			setAccess(
				LocalizationUtil.removeLocalization(
					getAccess(), "Access", languageId));
		}
	}

	@Override
	public void setAccessCurrentLanguageId(String languageId) {
		_accessCurrentLanguageId = languageId;
	}

	@Override
	public void setAccessMap(Map<Locale, String> accessMap) {
		setAccessMap(accessMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAccessMap(
		Map<Locale, String> accessMap, Locale defaultLocale) {

		if (accessMap == null) {
			return;
		}

		setAccess(
			LocalizationUtil.updateLocalization(
				accessMap, getAccess(), "Access",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getAccessForDisabled() {
		if (_accessForDisabled == null) {
			return "";
		}
		else {
			return _accessForDisabled;
		}
	}

	@Override
	public String getAccessForDisabled(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAccessForDisabled(languageId);
	}

	@Override
	public String getAccessForDisabled(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAccessForDisabled(languageId, useDefault);
	}

	@Override
	public String getAccessForDisabled(String languageId) {
		return LocalizationUtil.getLocalization(
			getAccessForDisabled(), languageId);
	}

	@Override
	public String getAccessForDisabled(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getAccessForDisabled(), languageId, useDefault);
	}

	@Override
	public String getAccessForDisabledCurrentLanguageId() {
		return _accessForDisabledCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAccessForDisabledCurrentValue() {
		Locale locale = getLocale(_accessForDisabledCurrentLanguageId);

		return getAccessForDisabled(locale);
	}

	@Override
	public Map<Locale, String> getAccessForDisabledMap() {
		return LocalizationUtil.getLocalizationMap(getAccessForDisabled());
	}

	@Override
	public void setAccessForDisabled(String accessForDisabled) {
		_accessForDisabled = accessForDisabled;
	}

	@Override
	public void setAccessForDisabled(String accessForDisabled, Locale locale) {
		setAccessForDisabled(
			accessForDisabled, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAccessForDisabled(
		String accessForDisabled, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(accessForDisabled)) {
			setAccessForDisabled(
				LocalizationUtil.updateLocalization(
					getAccessForDisabled(), "AccessForDisabled",
					accessForDisabled, languageId, defaultLanguageId));
		}
		else {
			setAccessForDisabled(
				LocalizationUtil.removeLocalization(
					getAccessForDisabled(), "AccessForDisabled", languageId));
		}
	}

	@Override
	public void setAccessForDisabledCurrentLanguageId(String languageId) {
		_accessForDisabledCurrentLanguageId = languageId;
	}

	@Override
	public void setAccessForDisabledMap(
		Map<Locale, String> accessForDisabledMap) {

		setAccessForDisabledMap(
			accessForDisabledMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAccessForDisabledMap(
		Map<Locale, String> accessForDisabledMap, Locale defaultLocale) {

		if (accessForDisabledMap == null) {
			return;
		}

		setAccessForDisabled(
			LocalizationUtil.updateLocalization(
				accessForDisabledMap, getAccessForDisabled(),
				"AccessForDisabled", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Boolean getAccessForBlind() {
		return _accessForBlind;
	}

	@Override
	public void setAccessForBlind(Boolean accessForBlind) {
		_accessForBlind = accessForBlind;
	}

	@JSON
	@Override
	public Boolean getAccessForDeaf() {
		return _accessForDeaf;
	}

	@Override
	public void setAccessForDeaf(Boolean accessForDeaf) {
		_accessForDeaf = accessForDeaf;
	}

	@JSON
	@Override
	public Boolean getAccessForWheelchair() {
		return _accessForWheelchair;
	}

	@Override
	public void setAccessForWheelchair(Boolean accessForWheelchair) {
		_accessForWheelchair = accessForWheelchair;
	}

	@JSON
	@Override
	public Boolean getAccessForElder() {
		return _accessForElder;
	}

	@Override
	public void setAccessForElder(Boolean accessForElder) {
		_accessForElder = accessForElder;
	}

	@JSON
	@Override
	public Boolean getAccessForDeficient() {
		return _accessForDeficient;
	}

	@Override
	public void setAccessForDeficient(Boolean accessForDeficient) {
		_accessForDeficient = accessForDeficient;
	}

	@JSON
	@Override
	public String getPromoter() {
		if (_promoter == null) {
			return "";
		}
		else {
			return _promoter;
		}
	}

	@Override
	public void setPromoter(String promoter) {
		_promoter = promoter;
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return "";
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getWebsiteURL() {
		if (_websiteURL == null) {
			return "";
		}
		else {
			return _websiteURL;
		}
	}

	@Override
	public String getWebsiteURL(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getWebsiteURL(languageId);
	}

	@Override
	public String getWebsiteURL(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getWebsiteURL(languageId, useDefault);
	}

	@Override
	public String getWebsiteURL(String languageId) {
		return LocalizationUtil.getLocalization(getWebsiteURL(), languageId);
	}

	@Override
	public String getWebsiteURL(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getWebsiteURL(), languageId, useDefault);
	}

	@Override
	public String getWebsiteURLCurrentLanguageId() {
		return _websiteURLCurrentLanguageId;
	}

	@JSON
	@Override
	public String getWebsiteURLCurrentValue() {
		Locale locale = getLocale(_websiteURLCurrentLanguageId);

		return getWebsiteURL(locale);
	}

	@Override
	public Map<Locale, String> getWebsiteURLMap() {
		return LocalizationUtil.getLocalizationMap(getWebsiteURL());
	}

	@Override
	public void setWebsiteURL(String websiteURL) {
		_websiteURL = websiteURL;
	}

	@Override
	public void setWebsiteURL(String websiteURL, Locale locale) {
		setWebsiteURL(websiteURL, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setWebsiteURL(
		String websiteURL, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(websiteURL)) {
			setWebsiteURL(
				LocalizationUtil.updateLocalization(
					getWebsiteURL(), "WebsiteURL", websiteURL, languageId,
					defaultLanguageId));
		}
		else {
			setWebsiteURL(
				LocalizationUtil.removeLocalization(
					getWebsiteURL(), "WebsiteURL", languageId));
		}
	}

	@Override
	public void setWebsiteURLCurrentLanguageId(String languageId) {
		_websiteURLCurrentLanguageId = languageId;
	}

	@Override
	public void setWebsiteURLMap(Map<Locale, String> websiteURLMap) {
		setWebsiteURLMap(websiteURLMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setWebsiteURLMap(
		Map<Locale, String> websiteURLMap, Locale defaultLocale) {

		if (websiteURLMap == null) {
			return;
		}

		setWebsiteURL(
			LocalizationUtil.updateLocalization(
				websiteURLMap, getWebsiteURL(), "WebsiteURL",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getWebsiteName() {
		if (_websiteName == null) {
			return "";
		}
		else {
			return _websiteName;
		}
	}

	@Override
	public String getWebsiteName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getWebsiteName(languageId);
	}

	@Override
	public String getWebsiteName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getWebsiteName(languageId, useDefault);
	}

	@Override
	public String getWebsiteName(String languageId) {
		return LocalizationUtil.getLocalization(getWebsiteName(), languageId);
	}

	@Override
	public String getWebsiteName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getWebsiteName(), languageId, useDefault);
	}

	@Override
	public String getWebsiteNameCurrentLanguageId() {
		return _websiteNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getWebsiteNameCurrentValue() {
		Locale locale = getLocale(_websiteNameCurrentLanguageId);

		return getWebsiteName(locale);
	}

	@Override
	public Map<Locale, String> getWebsiteNameMap() {
		return LocalizationUtil.getLocalizationMap(getWebsiteName());
	}

	@Override
	public void setWebsiteName(String websiteName) {
		_websiteName = websiteName;
	}

	@Override
	public void setWebsiteName(String websiteName, Locale locale) {
		setWebsiteName(websiteName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setWebsiteName(
		String websiteName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(websiteName)) {
			setWebsiteName(
				LocalizationUtil.updateLocalization(
					getWebsiteName(), "WebsiteName", websiteName, languageId,
					defaultLanguageId));
		}
		else {
			setWebsiteName(
				LocalizationUtil.removeLocalization(
					getWebsiteName(), "WebsiteName", languageId));
		}
	}

	@Override
	public void setWebsiteNameCurrentLanguageId(String languageId) {
		_websiteNameCurrentLanguageId = languageId;
	}

	@Override
	public void setWebsiteNameMap(Map<Locale, String> websiteNameMap) {
		setWebsiteNameMap(websiteNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setWebsiteNameMap(
		Map<Locale, String> websiteNameMap, Locale defaultLocale) {

		if (websiteNameMap == null) {
			return;
		}

		setWebsiteName(
			LocalizationUtil.updateLocalization(
				websiteNameMap, getWebsiteName(), "WebsiteName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Integer getFree() {
		return _free;
	}

	@Override
	public void setFree(Integer free) {
		_free = free;
	}

	@JSON
	@Override
	public String getPrice() {
		if (_price == null) {
			return "";
		}
		else {
			return _price;
		}
	}

	@Override
	public String getPrice(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPrice(languageId);
	}

	@Override
	public String getPrice(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPrice(languageId, useDefault);
	}

	@Override
	public String getPrice(String languageId) {
		return LocalizationUtil.getLocalization(getPrice(), languageId);
	}

	@Override
	public String getPrice(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getPrice(), languageId, useDefault);
	}

	@Override
	public String getPriceCurrentLanguageId() {
		return _priceCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPriceCurrentValue() {
		Locale locale = getLocale(_priceCurrentLanguageId);

		return getPrice(locale);
	}

	@Override
	public Map<Locale, String> getPriceMap() {
		return LocalizationUtil.getLocalizationMap(getPrice());
	}

	@Override
	public void setPrice(String price) {
		_price = price;
	}

	@Override
	public void setPrice(String price, Locale locale) {
		setPrice(price, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPrice(String price, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(price)) {
			setPrice(
				LocalizationUtil.updateLocalization(
					getPrice(), "Price", price, languageId, defaultLanguageId));
		}
		else {
			setPrice(
				LocalizationUtil.removeLocalization(
					getPrice(), "Price", languageId));
		}
	}

	@Override
	public void setPriceCurrentLanguageId(String languageId) {
		_priceCurrentLanguageId = languageId;
	}

	@Override
	public void setPriceMap(Map<Locale, String> priceMap) {
		setPriceMap(priceMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPriceMap(
		Map<Locale, String> priceMap, Locale defaultLocale) {

		if (priceMap == null) {
			return;
		}

		setPrice(
			LocalizationUtil.updateLocalization(
				priceMap, getPrice(), "Price",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getBookingDescription() {
		if (_bookingDescription == null) {
			return "";
		}
		else {
			return _bookingDescription;
		}
	}

	@Override
	public String getBookingDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getBookingDescription(languageId);
	}

	@Override
	public String getBookingDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getBookingDescription(languageId, useDefault);
	}

	@Override
	public String getBookingDescription(String languageId) {
		return LocalizationUtil.getLocalization(
			getBookingDescription(), languageId);
	}

	@Override
	public String getBookingDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getBookingDescription(), languageId, useDefault);
	}

	@Override
	public String getBookingDescriptionCurrentLanguageId() {
		return _bookingDescriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getBookingDescriptionCurrentValue() {
		Locale locale = getLocale(_bookingDescriptionCurrentLanguageId);

		return getBookingDescription(locale);
	}

	@Override
	public Map<Locale, String> getBookingDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getBookingDescription());
	}

	@Override
	public void setBookingDescription(String bookingDescription) {
		_bookingDescription = bookingDescription;
	}

	@Override
	public void setBookingDescription(
		String bookingDescription, Locale locale) {

		setBookingDescription(
			bookingDescription, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setBookingDescription(
		String bookingDescription, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(bookingDescription)) {
			setBookingDescription(
				LocalizationUtil.updateLocalization(
					getBookingDescription(), "BookingDescription",
					bookingDescription, languageId, defaultLanguageId));
		}
		else {
			setBookingDescription(
				LocalizationUtil.removeLocalization(
					getBookingDescription(), "BookingDescription", languageId));
		}
	}

	@Override
	public void setBookingDescriptionCurrentLanguageId(String languageId) {
		_bookingDescriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setBookingDescriptionMap(
		Map<Locale, String> bookingDescriptionMap) {

		setBookingDescriptionMap(
			bookingDescriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setBookingDescriptionMap(
		Map<Locale, String> bookingDescriptionMap, Locale defaultLocale) {

		if (bookingDescriptionMap == null) {
			return;
		}

		setBookingDescription(
			LocalizationUtil.updateLocalization(
				bookingDescriptionMap, getBookingDescription(),
				"BookingDescription", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getBookingURL() {
		if (_bookingURL == null) {
			return "";
		}
		else {
			return _bookingURL;
		}
	}

	@Override
	public void setBookingURL(String bookingURL) {
		_bookingURL = bookingURL;
	}

	@JSON
	@Override
	public String getSubscriptionURL() {
		if (_subscriptionURL == null) {
			return "";
		}
		else {
			return _subscriptionURL;
		}
	}

	@Override
	public void setSubscriptionURL(String subscriptionURL) {
		_subscriptionURL = subscriptionURL;
	}

	@JSON
	@Override
	public String getSource() {
		if (_source == null) {
			return "";
		}
		else {
			return _source;
		}
	}

	@Override
	public void setSource(String source) {
		_columnBitmask |= SOURCE_COLUMN_BITMASK;

		if (_originalSource == null) {
			_originalSource = _source;
		}

		_source = source;
	}

	public String getOriginalSource() {
		return GetterUtil.getString(_originalSource);
	}

	@JSON
	@Override
	public String getIdSource() {
		if (_idSource == null) {
			return "";
		}
		else {
			return _idSource;
		}
	}

	@Override
	public void setIdSource(String idSource) {
		_columnBitmask |= IDSOURCE_COLUMN_BITMASK;

		if (_originalIdSource == null) {
			_originalIdSource = _idSource;
		}

		_idSource = idSource;
	}

	public String getOriginalIdSource() {
		return GetterUtil.getString(_originalIdSource);
	}

	@JSON
	@Override
	public Date getPublicationDate() {
		return _publicationDate;
	}

	@Override
	public void setPublicationDate(Date publicationDate) {
		_columnBitmask |= PUBLICATIONDATE_COLUMN_BITMASK;

		if (_originalPublicationDate == null) {
			_originalPublicationDate = _publicationDate;
		}

		_publicationDate = publicationDate;
	}

	public Date getOriginalPublicationDate() {
		return _originalPublicationDate;
	}

	@JSON
	@Override
	public String getDistribution() {
		if (_distribution == null) {
			return "";
		}
		else {
			return _distribution;
		}
	}

	@Override
	public String getDistribution(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDistribution(languageId);
	}

	@Override
	public String getDistribution(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDistribution(languageId, useDefault);
	}

	@Override
	public String getDistribution(String languageId) {
		return LocalizationUtil.getLocalization(getDistribution(), languageId);
	}

	@Override
	public String getDistribution(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDistribution(), languageId, useDefault);
	}

	@Override
	public String getDistributionCurrentLanguageId() {
		return _distributionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDistributionCurrentValue() {
		Locale locale = getLocale(_distributionCurrentLanguageId);

		return getDistribution(locale);
	}

	@Override
	public Map<Locale, String> getDistributionMap() {
		return LocalizationUtil.getLocalizationMap(getDistribution());
	}

	@Override
	public void setDistribution(String distribution) {
		_distribution = distribution;
	}

	@Override
	public void setDistribution(String distribution, Locale locale) {
		setDistribution(distribution, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDistribution(
		String distribution, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(distribution)) {
			setDistribution(
				LocalizationUtil.updateLocalization(
					getDistribution(), "Distribution", distribution, languageId,
					defaultLanguageId));
		}
		else {
			setDistribution(
				LocalizationUtil.removeLocalization(
					getDistribution(), "Distribution", languageId));
		}
	}

	@Override
	public void setDistributionCurrentLanguageId(String languageId) {
		_distributionCurrentLanguageId = languageId;
	}

	@Override
	public void setDistributionMap(Map<Locale, String> distributionMap) {
		setDistributionMap(distributionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDistributionMap(
		Map<Locale, String> distributionMap, Locale defaultLocale) {

		if (distributionMap == null) {
			return;
		}

		setDistribution(
			LocalizationUtil.updateLocalization(
				distributionMap, getDistribution(), "Distribution",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getComposer() {
		if (_composer == null) {
			return "";
		}
		else {
			return _composer;
		}
	}

	@Override
	public void setComposer(String composer) {
		_composer = composer;
	}

	@JSON
	@Override
	public String getConcertId() {
		if (_concertId == null) {
			return "";
		}
		else {
			return _concertId;
		}
	}

	@Override
	public void setConcertId(String concertId) {
		_concertId = concertId;
	}

	@JSON
	@Override
	public String getProgram() {
		if (_program == null) {
			return "";
		}
		else {
			return _program;
		}
	}

	@Override
	public String getProgram(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProgram(languageId);
	}

	@Override
	public String getProgram(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getProgram(languageId, useDefault);
	}

	@Override
	public String getProgram(String languageId) {
		return LocalizationUtil.getLocalization(getProgram(), languageId);
	}

	@Override
	public String getProgram(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getProgram(), languageId, useDefault);
	}

	@Override
	public String getProgramCurrentLanguageId() {
		return _programCurrentLanguageId;
	}

	@JSON
	@Override
	public String getProgramCurrentValue() {
		Locale locale = getLocale(_programCurrentLanguageId);

		return getProgram(locale);
	}

	@Override
	public Map<Locale, String> getProgramMap() {
		return LocalizationUtil.getLocalizationMap(getProgram());
	}

	@Override
	public void setProgram(String program) {
		_program = program;
	}

	@Override
	public void setProgram(String program, Locale locale) {
		setProgram(program, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setProgram(
		String program, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(program)) {
			setProgram(
				LocalizationUtil.updateLocalization(
					getProgram(), "Program", program, languageId,
					defaultLanguageId));
		}
		else {
			setProgram(
				LocalizationUtil.removeLocalization(
					getProgram(), "Program", languageId));
		}
	}

	@Override
	public void setProgramCurrentLanguageId(String languageId) {
		_programCurrentLanguageId = languageId;
	}

	@Override
	public void setProgramMap(Map<Locale, String> programMap) {
		setProgramMap(programMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setProgramMap(
		Map<Locale, String> programMap, Locale defaultLocale) {

		if (programMap == null) {
			return;
		}

		setProgram(
			LocalizationUtil.updateLocalization(
				programMap, getProgram(), "Program",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Date getFirstStartDate() {
		return _firstStartDate;
	}

	@Override
	public void setFirstStartDate(Date firstStartDate) {
		_firstStartDate = firstStartDate;
	}

	@JSON
	@Override
	public Date getLastEndDate() {
		return _lastEndDate;
	}

	@Override
	public void setLastEndDate(Date lastEndDate) {
		_columnBitmask |= LASTENDDATE_COLUMN_BITMASK;

		if (_originalLastEndDate == null) {
			_originalLastEndDate = _lastEndDate;
		}

		_lastEndDate = lastEndDate;
	}

	public Date getOriginalLastEndDate() {
		return _originalLastEndDate;
	}

	@JSON
	@Override
	public Date getCreateDateSource() {
		return _createDateSource;
	}

	@Override
	public void setCreateDateSource(Date createDateSource) {
		_createDateSource = createDateSource;
	}

	@JSON
	@Override
	public Date getModifiedDateSource() {
		return _modifiedDateSource;
	}

	@Override
	public void setModifiedDateSource(Date modifiedDateSource) {
		_modifiedDateSource = modifiedDateSource;
	}

	@JSON
	@Override
	public Long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(Long imageId) {
		_imageId = imageId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Event.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Event.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> subtitleMap = getSubtitleMap();

		for (Map.Entry<Locale, String> entry : subtitleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> placeNameMap = getPlaceNameMap();

		for (Map.Entry<Locale, String> entry : placeNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> accessMap = getAccessMap();

		for (Map.Entry<Locale, String> entry : accessMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> accessForDisabledMap = getAccessForDisabledMap();

		for (Map.Entry<Locale, String> entry :
				accessForDisabledMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> websiteURLMap = getWebsiteURLMap();

		for (Map.Entry<Locale, String> entry : websiteURLMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> websiteNameMap = getWebsiteNameMap();

		for (Map.Entry<Locale, String> entry : websiteNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> priceMap = getPriceMap();

		for (Map.Entry<Locale, String> entry : priceMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> bookingDescriptionMap = getBookingDescriptionMap();

		for (Map.Entry<Locale, String> entry :
				bookingDescriptionMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> distributionMap = getDistributionMap();

		for (Map.Entry<Locale, String> entry : distributionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> programMap = getProgramMap();

		for (Map.Entry<Locale, String> entry : programMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			Event.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String subtitle = getSubtitle(defaultLocale);

		if (Validator.isNull(subtitle)) {
			setSubtitle(getSubtitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSubtitle(
				getSubtitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(
				getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(
				getDescription(defaultLocale), defaultLocale, defaultLocale);
		}

		String placeName = getPlaceName(defaultLocale);

		if (Validator.isNull(placeName)) {
			setPlaceName(getPlaceName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPlaceName(
				getPlaceName(defaultLocale), defaultLocale, defaultLocale);
		}

		String access = getAccess(defaultLocale);

		if (Validator.isNull(access)) {
			setAccess(getAccess(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setAccess(getAccess(defaultLocale), defaultLocale, defaultLocale);
		}

		String accessForDisabled = getAccessForDisabled(defaultLocale);

		if (Validator.isNull(accessForDisabled)) {
			setAccessForDisabled(
				getAccessForDisabled(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setAccessForDisabled(
				getAccessForDisabled(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String websiteURL = getWebsiteURL(defaultLocale);

		if (Validator.isNull(websiteURL)) {
			setWebsiteURL(getWebsiteURL(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setWebsiteURL(
				getWebsiteURL(defaultLocale), defaultLocale, defaultLocale);
		}

		String websiteName = getWebsiteName(defaultLocale);

		if (Validator.isNull(websiteName)) {
			setWebsiteName(
				getWebsiteName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setWebsiteName(
				getWebsiteName(defaultLocale), defaultLocale, defaultLocale);
		}

		String price = getPrice(defaultLocale);

		if (Validator.isNull(price)) {
			setPrice(getPrice(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPrice(getPrice(defaultLocale), defaultLocale, defaultLocale);
		}

		String bookingDescription = getBookingDescription(defaultLocale);

		if (Validator.isNull(bookingDescription)) {
			setBookingDescription(
				getBookingDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setBookingDescription(
				getBookingDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String distribution = getDistribution(defaultLocale);

		if (Validator.isNull(distribution)) {
			setDistribution(
				getDistribution(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDistribution(
				getDistribution(defaultLocale), defaultLocale, defaultLocale);
		}

		String program = getProgram(defaultLocale);

		if (Validator.isNull(program)) {
			setProgram(getProgram(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setProgram(getProgram(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Event toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EventImpl eventImpl = new EventImpl();

		eventImpl.setUuid(getUuid());
		eventImpl.setEventId(getEventId());
		eventImpl.setGroupId(getGroupId());
		eventImpl.setCompanyId(getCompanyId());
		eventImpl.setUserId(getUserId());
		eventImpl.setUserName(getUserName());
		eventImpl.setCreateDate(getCreateDate());
		eventImpl.setModifiedDate(getModifiedDate());
		eventImpl.setLastPublishDate(getLastPublishDate());
		eventImpl.setStatus(getStatus());
		eventImpl.setStatusByUserId(getStatusByUserId());
		eventImpl.setStatusByUserName(getStatusByUserName());
		eventImpl.setStatusDate(getStatusDate());
		eventImpl.setTitle(getTitle());
		eventImpl.setSubtitle(getSubtitle());
		eventImpl.setDescription(getDescription());
		eventImpl.setExternalImageURL(getExternalImageURL());
		eventImpl.setExternalImageCopyright(getExternalImageCopyright());
		eventImpl.setImageWidth(getImageWidth());
		eventImpl.setImageHeight(getImageHeight());
		eventImpl.setPlaceSIGId(getPlaceSIGId());
		eventImpl.setPlaceName(getPlaceName());
		eventImpl.setPlaceStreetNumber(getPlaceStreetNumber());
		eventImpl.setPlaceStreetName(getPlaceStreetName());
		eventImpl.setPlaceZipCode(getPlaceZipCode());
		eventImpl.setPlaceCity(getPlaceCity());
		eventImpl.setPlaceCountry(getPlaceCountry());
		eventImpl.setAccess(getAccess());
		eventImpl.setAccessForDisabled(getAccessForDisabled());
		eventImpl.setAccessForBlind(getAccessForBlind());
		eventImpl.setAccessForDeaf(getAccessForDeaf());
		eventImpl.setAccessForWheelchair(getAccessForWheelchair());
		eventImpl.setAccessForElder(getAccessForElder());
		eventImpl.setAccessForDeficient(getAccessForDeficient());
		eventImpl.setPromoter(getPromoter());
		eventImpl.setPhone(getPhone());
		eventImpl.setEmail(getEmail());
		eventImpl.setWebsiteURL(getWebsiteURL());
		eventImpl.setWebsiteName(getWebsiteName());
		eventImpl.setFree(getFree());
		eventImpl.setPrice(getPrice());
		eventImpl.setBookingDescription(getBookingDescription());
		eventImpl.setBookingURL(getBookingURL());
		eventImpl.setSubscriptionURL(getSubscriptionURL());
		eventImpl.setSource(getSource());
		eventImpl.setIdSource(getIdSource());
		eventImpl.setPublicationDate(getPublicationDate());
		eventImpl.setDistribution(getDistribution());
		eventImpl.setComposer(getComposer());
		eventImpl.setConcertId(getConcertId());
		eventImpl.setProgram(getProgram());
		eventImpl.setFirstStartDate(getFirstStartDate());
		eventImpl.setLastEndDate(getLastEndDate());
		eventImpl.setCreateDateSource(getCreateDateSource());
		eventImpl.setModifiedDateSource(getModifiedDateSource());
		eventImpl.setImageId(getImageId());

		eventImpl.resetOriginalValues();

		return eventImpl;
	}

	@Override
	public int compareTo(Event event) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(), event.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Event)) {
			return false;
		}

		Event event = (Event)obj;

		long primaryKey = event.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EventModelImpl eventModelImpl = this;

		eventModelImpl._originalUuid = eventModelImpl._uuid;

		eventModelImpl._originalGroupId = eventModelImpl._groupId;

		eventModelImpl._setOriginalGroupId = false;

		eventModelImpl._originalCompanyId = eventModelImpl._companyId;

		eventModelImpl._setOriginalCompanyId = false;

		eventModelImpl._setModifiedDate = false;

		eventModelImpl._originalStatus = eventModelImpl._status;

		eventModelImpl._setOriginalStatus = false;

		eventModelImpl._originalStatusDate = eventModelImpl._statusDate;

		eventModelImpl._originalTitle = eventModelImpl._title;

		eventModelImpl._originalPlaceSIGId = eventModelImpl._placeSIGId;

		eventModelImpl._originalSource = eventModelImpl._source;

		eventModelImpl._originalIdSource = eventModelImpl._idSource;

		eventModelImpl._originalPublicationDate =
			eventModelImpl._publicationDate;

		eventModelImpl._originalLastEndDate = eventModelImpl._lastEndDate;

		eventModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Event> toCacheModel() {
		EventCacheModel eventCacheModel = new EventCacheModel();

		eventCacheModel.uuid = getUuid();

		String uuid = eventCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			eventCacheModel.uuid = null;
		}

		eventCacheModel.eventId = getEventId();

		eventCacheModel.groupId = getGroupId();

		eventCacheModel.companyId = getCompanyId();

		eventCacheModel.userId = getUserId();

		eventCacheModel.userName = getUserName();

		String userName = eventCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			eventCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			eventCacheModel.createDate = createDate.getTime();
		}
		else {
			eventCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			eventCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			eventCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			eventCacheModel.lastPublishDate = lastPublishDate.getTime();
		}
		else {
			eventCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		eventCacheModel.status = getStatus();

		eventCacheModel.statusByUserId = getStatusByUserId();

		eventCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = eventCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			eventCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			eventCacheModel.statusDate = statusDate.getTime();
		}
		else {
			eventCacheModel.statusDate = Long.MIN_VALUE;
		}

		eventCacheModel.title = getTitle();

		String title = eventCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			eventCacheModel.title = null;
		}

		eventCacheModel.subtitle = getSubtitle();

		String subtitle = eventCacheModel.subtitle;

		if ((subtitle != null) && (subtitle.length() == 0)) {
			eventCacheModel.subtitle = null;
		}

		eventCacheModel.description = getDescription();

		String description = eventCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			eventCacheModel.description = null;
		}

		eventCacheModel.externalImageURL = getExternalImageURL();

		String externalImageURL = eventCacheModel.externalImageURL;

		if ((externalImageURL != null) && (externalImageURL.length() == 0)) {
			eventCacheModel.externalImageURL = null;
		}

		eventCacheModel.externalImageCopyright = getExternalImageCopyright();

		String externalImageCopyright = eventCacheModel.externalImageCopyright;

		if ((externalImageCopyright != null) &&
			(externalImageCopyright.length() == 0)) {

			eventCacheModel.externalImageCopyright = null;
		}

		eventCacheModel.imageWidth = getImageWidth();

		eventCacheModel.imageHeight = getImageHeight();

		eventCacheModel.placeSIGId = getPlaceSIGId();

		String placeSIGId = eventCacheModel.placeSIGId;

		if ((placeSIGId != null) && (placeSIGId.length() == 0)) {
			eventCacheModel.placeSIGId = null;
		}

		eventCacheModel.placeName = getPlaceName();

		String placeName = eventCacheModel.placeName;

		if ((placeName != null) && (placeName.length() == 0)) {
			eventCacheModel.placeName = null;
		}

		eventCacheModel.placeStreetNumber = getPlaceStreetNumber();

		String placeStreetNumber = eventCacheModel.placeStreetNumber;

		if ((placeStreetNumber != null) && (placeStreetNumber.length() == 0)) {
			eventCacheModel.placeStreetNumber = null;
		}

		eventCacheModel.placeStreetName = getPlaceStreetName();

		String placeStreetName = eventCacheModel.placeStreetName;

		if ((placeStreetName != null) && (placeStreetName.length() == 0)) {
			eventCacheModel.placeStreetName = null;
		}

		eventCacheModel.placeZipCode = getPlaceZipCode();

		String placeZipCode = eventCacheModel.placeZipCode;

		if ((placeZipCode != null) && (placeZipCode.length() == 0)) {
			eventCacheModel.placeZipCode = null;
		}

		eventCacheModel.placeCity = getPlaceCity();

		String placeCity = eventCacheModel.placeCity;

		if ((placeCity != null) && (placeCity.length() == 0)) {
			eventCacheModel.placeCity = null;
		}

		eventCacheModel.placeCountry = getPlaceCountry();

		String placeCountry = eventCacheModel.placeCountry;

		if ((placeCountry != null) && (placeCountry.length() == 0)) {
			eventCacheModel.placeCountry = null;
		}

		eventCacheModel.access = getAccess();

		String access = eventCacheModel.access;

		if ((access != null) && (access.length() == 0)) {
			eventCacheModel.access = null;
		}

		eventCacheModel.accessForDisabled = getAccessForDisabled();

		String accessForDisabled = eventCacheModel.accessForDisabled;

		if ((accessForDisabled != null) && (accessForDisabled.length() == 0)) {
			eventCacheModel.accessForDisabled = null;
		}

		eventCacheModel.accessForBlind = getAccessForBlind();

		eventCacheModel.accessForDeaf = getAccessForDeaf();

		eventCacheModel.accessForWheelchair = getAccessForWheelchair();

		eventCacheModel.accessForElder = getAccessForElder();

		eventCacheModel.accessForDeficient = getAccessForDeficient();

		eventCacheModel.promoter = getPromoter();

		String promoter = eventCacheModel.promoter;

		if ((promoter != null) && (promoter.length() == 0)) {
			eventCacheModel.promoter = null;
		}

		eventCacheModel.phone = getPhone();

		String phone = eventCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			eventCacheModel.phone = null;
		}

		eventCacheModel.email = getEmail();

		String email = eventCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			eventCacheModel.email = null;
		}

		eventCacheModel.websiteURL = getWebsiteURL();

		String websiteURL = eventCacheModel.websiteURL;

		if ((websiteURL != null) && (websiteURL.length() == 0)) {
			eventCacheModel.websiteURL = null;
		}

		eventCacheModel.websiteName = getWebsiteName();

		String websiteName = eventCacheModel.websiteName;

		if ((websiteName != null) && (websiteName.length() == 0)) {
			eventCacheModel.websiteName = null;
		}

		eventCacheModel.free = getFree();

		eventCacheModel.price = getPrice();

		String price = eventCacheModel.price;

		if ((price != null) && (price.length() == 0)) {
			eventCacheModel.price = null;
		}

		eventCacheModel.bookingDescription = getBookingDescription();

		String bookingDescription = eventCacheModel.bookingDescription;

		if ((bookingDescription != null) &&
			(bookingDescription.length() == 0)) {

			eventCacheModel.bookingDescription = null;
		}

		eventCacheModel.bookingURL = getBookingURL();

		String bookingURL = eventCacheModel.bookingURL;

		if ((bookingURL != null) && (bookingURL.length() == 0)) {
			eventCacheModel.bookingURL = null;
		}

		eventCacheModel.subscriptionURL = getSubscriptionURL();

		String subscriptionURL = eventCacheModel.subscriptionURL;

		if ((subscriptionURL != null) && (subscriptionURL.length() == 0)) {
			eventCacheModel.subscriptionURL = null;
		}

		eventCacheModel.source = getSource();

		String source = eventCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			eventCacheModel.source = null;
		}

		eventCacheModel.idSource = getIdSource();

		String idSource = eventCacheModel.idSource;

		if ((idSource != null) && (idSource.length() == 0)) {
			eventCacheModel.idSource = null;
		}

		Date publicationDate = getPublicationDate();

		if (publicationDate != null) {
			eventCacheModel.publicationDate = publicationDate.getTime();
		}
		else {
			eventCacheModel.publicationDate = Long.MIN_VALUE;
		}

		eventCacheModel.distribution = getDistribution();

		String distribution = eventCacheModel.distribution;

		if ((distribution != null) && (distribution.length() == 0)) {
			eventCacheModel.distribution = null;
		}

		eventCacheModel.composer = getComposer();

		String composer = eventCacheModel.composer;

		if ((composer != null) && (composer.length() == 0)) {
			eventCacheModel.composer = null;
		}

		eventCacheModel.concertId = getConcertId();

		String concertId = eventCacheModel.concertId;

		if ((concertId != null) && (concertId.length() == 0)) {
			eventCacheModel.concertId = null;
		}

		eventCacheModel.program = getProgram();

		String program = eventCacheModel.program;

		if ((program != null) && (program.length() == 0)) {
			eventCacheModel.program = null;
		}

		Date firstStartDate = getFirstStartDate();

		if (firstStartDate != null) {
			eventCacheModel.firstStartDate = firstStartDate.getTime();
		}
		else {
			eventCacheModel.firstStartDate = Long.MIN_VALUE;
		}

		Date lastEndDate = getLastEndDate();

		if (lastEndDate != null) {
			eventCacheModel.lastEndDate = lastEndDate.getTime();
		}
		else {
			eventCacheModel.lastEndDate = Long.MIN_VALUE;
		}

		Date createDateSource = getCreateDateSource();

		if (createDateSource != null) {
			eventCacheModel.createDateSource = createDateSource.getTime();
		}
		else {
			eventCacheModel.createDateSource = Long.MIN_VALUE;
		}

		Date modifiedDateSource = getModifiedDateSource();

		if (modifiedDateSource != null) {
			eventCacheModel.modifiedDateSource = modifiedDateSource.getTime();
		}
		else {
			eventCacheModel.modifiedDateSource = Long.MIN_VALUE;
		}

		eventCacheModel.imageId = getImageId();

		return eventCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Event, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Event, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Event, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Event)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Event, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Event, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Event, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Event)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Event>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private String _uuid;
	private String _originalUuid;
	private long _eventId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _lastPublishDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private Date _originalStatusDate;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _originalTitle;
	private String _subtitle;
	private String _subtitleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _externalImageURL;
	private String _externalImageCopyright;
	private Integer _imageWidth;
	private Integer _imageHeight;
	private String _placeSIGId;
	private String _originalPlaceSIGId;
	private String _placeName;
	private String _placeNameCurrentLanguageId;
	private String _placeStreetNumber;
	private String _placeStreetName;
	private String _placeZipCode;
	private String _placeCity;
	private String _placeCountry;
	private String _access;
	private String _accessCurrentLanguageId;
	private String _accessForDisabled;
	private String _accessForDisabledCurrentLanguageId;
	private Boolean _accessForBlind;
	private Boolean _accessForDeaf;
	private Boolean _accessForWheelchair;
	private Boolean _accessForElder;
	private Boolean _accessForDeficient;
	private String _promoter;
	private String _phone;
	private String _email;
	private String _websiteURL;
	private String _websiteURLCurrentLanguageId;
	private String _websiteName;
	private String _websiteNameCurrentLanguageId;
	private Integer _free;
	private String _price;
	private String _priceCurrentLanguageId;
	private String _bookingDescription;
	private String _bookingDescriptionCurrentLanguageId;
	private String _bookingURL;
	private String _subscriptionURL;
	private String _source;
	private String _originalSource;
	private String _idSource;
	private String _originalIdSource;
	private Date _publicationDate;
	private Date _originalPublicationDate;
	private String _distribution;
	private String _distributionCurrentLanguageId;
	private String _composer;
	private String _concertId;
	private String _program;
	private String _programCurrentLanguageId;
	private Date _firstStartDate;
	private Date _lastEndDate;
	private Date _originalLastEndDate;
	private Date _createDateSource;
	private Date _modifiedDateSource;
	private Long _imageId;
	private long _columnBitmask;
	private Event _escapedModel;

}