/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.agenda.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedGroupedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Event service. Represents a row in the &quot;agenda_Event&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>eu.strasbourg.service.agenda.model.impl.EventModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>eu.strasbourg.service.agenda.model.impl.EventImpl</code>.
 * </p>
 *
 * @author BenjaminBini
 * @see Event
 * @generated
 */
@ProviderType
public interface EventModel
	extends BaseModel<Event>, LocalizedModel, ShardedModel, StagedGroupedModel,
			WorkflowedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a event model instance should use the {@link Event} interface instead.
	 */

	/**
	 * Returns the primary key of this event.
	 *
	 * @return the primary key of this event
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this event.
	 *
	 * @param primaryKey the primary key of this event
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this event.
	 *
	 * @return the uuid of this event
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this event.
	 *
	 * @param uuid the uuid of this event
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the event ID of this event.
	 *
	 * @return the event ID of this event
	 */
	public long getEventId();

	/**
	 * Sets the event ID of this event.
	 *
	 * @param eventId the event ID of this event
	 */
	public void setEventId(long eventId);

	/**
	 * Returns the group ID of this event.
	 *
	 * @return the group ID of this event
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this event.
	 *
	 * @param groupId the group ID of this event
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this event.
	 *
	 * @return the company ID of this event
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this event.
	 *
	 * @param companyId the company ID of this event
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this event.
	 *
	 * @return the user ID of this event
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this event.
	 *
	 * @param userId the user ID of this event
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this event.
	 *
	 * @return the user uuid of this event
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this event.
	 *
	 * @param userUuid the user uuid of this event
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this event.
	 *
	 * @return the user name of this event
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this event.
	 *
	 * @param userName the user name of this event
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this event.
	 *
	 * @return the create date of this event
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this event.
	 *
	 * @param createDate the create date of this event
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this event.
	 *
	 * @return the modified date of this event
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this event.
	 *
	 * @param modifiedDate the modified date of this event
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the last publish date of this event.
	 *
	 * @return the last publish date of this event
	 */
	@Override
	public Date getLastPublishDate();

	/**
	 * Sets the last publish date of this event.
	 *
	 * @param lastPublishDate the last publish date of this event
	 */
	@Override
	public void setLastPublishDate(Date lastPublishDate);

	/**
	 * Returns the status of this event.
	 *
	 * @return the status of this event
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this event.
	 *
	 * @param status the status of this event
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this event.
	 *
	 * @return the status by user ID of this event
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this event.
	 *
	 * @param statusByUserId the status by user ID of this event
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this event.
	 *
	 * @return the status by user uuid of this event
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this event.
	 *
	 * @param statusByUserUuid the status by user uuid of this event
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this event.
	 *
	 * @return the status by user name of this event
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this event.
	 *
	 * @param statusByUserName the status by user name of this event
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this event.
	 *
	 * @return the status date of this event
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this event.
	 *
	 * @param statusDate the status date of this event
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the title of this event.
	 *
	 * @return the title of this event
	 */
	public String getTitle();

	/**
	 * Returns the localized title of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized title of this event
	 */
	@AutoEscape
	public String getTitle(Locale locale);

	/**
	 * Returns the localized title of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this event. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized title of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized title of this event
	 */
	@AutoEscape
	public String getTitle(String languageId);

	/**
	 * Returns the localized title of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this event
	 */
	@AutoEscape
	public String getTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getTitleCurrentLanguageId();

	@AutoEscape
	public String getTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized titles of this event.
	 *
	 * @return the locales and localized titles of this event
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this event.
	 *
	 * @param title the title of this event
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this event in the language.
	 *
	 * @param title the localized title of this event
	 * @param locale the locale of the language
	 */
	public void setTitle(String title, Locale locale);

	/**
	 * Sets the localized title of this event in the language, and sets the default locale.
	 *
	 * @param title the localized title of this event
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTitle(String title, Locale locale, Locale defaultLocale);

	public void setTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized titles of this event from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this event
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	/**
	 * Sets the localized titles of this event from the map of locales and localized titles, and sets the default locale.
	 *
	 * @param titleMap the locales and localized titles of this event
	 * @param defaultLocale the default locale
	 */
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Returns the subtitle of this event.
	 *
	 * @return the subtitle of this event
	 */
	public String getSubtitle();

	/**
	 * Returns the localized subtitle of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized subtitle of this event
	 */
	@AutoEscape
	public String getSubtitle(Locale locale);

	/**
	 * Returns the localized subtitle of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized subtitle of this event. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getSubtitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized subtitle of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized subtitle of this event
	 */
	@AutoEscape
	public String getSubtitle(String languageId);

	/**
	 * Returns the localized subtitle of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized subtitle of this event
	 */
	@AutoEscape
	public String getSubtitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getSubtitleCurrentLanguageId();

	@AutoEscape
	public String getSubtitleCurrentValue();

	/**
	 * Returns a map of the locales and localized subtitles of this event.
	 *
	 * @return the locales and localized subtitles of this event
	 */
	public Map<Locale, String> getSubtitleMap();

	/**
	 * Sets the subtitle of this event.
	 *
	 * @param subtitle the subtitle of this event
	 */
	public void setSubtitle(String subtitle);

	/**
	 * Sets the localized subtitle of this event in the language.
	 *
	 * @param subtitle the localized subtitle of this event
	 * @param locale the locale of the language
	 */
	public void setSubtitle(String subtitle, Locale locale);

	/**
	 * Sets the localized subtitle of this event in the language, and sets the default locale.
	 *
	 * @param subtitle the localized subtitle of this event
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setSubtitle(
		String subtitle, Locale locale, Locale defaultLocale);

	public void setSubtitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized subtitles of this event from the map of locales and localized subtitles.
	 *
	 * @param subtitleMap the locales and localized subtitles of this event
	 */
	public void setSubtitleMap(Map<Locale, String> subtitleMap);

	/**
	 * Sets the localized subtitles of this event from the map of locales and localized subtitles, and sets the default locale.
	 *
	 * @param subtitleMap the locales and localized subtitles of this event
	 * @param defaultLocale the default locale
	 */
	public void setSubtitleMap(
		Map<Locale, String> subtitleMap, Locale defaultLocale);

	/**
	 * Returns the description of this event.
	 *
	 * @return the description of this event
	 */
	public String getDescription();

	/**
	 * Returns the localized description of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized description of this event
	 */
	@AutoEscape
	public String getDescription(Locale locale);

	/**
	 * Returns the localized description of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this event. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized description of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized description of this event
	 */
	@AutoEscape
	public String getDescription(String languageId);

	/**
	 * Returns the localized description of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this event
	 */
	@AutoEscape
	public String getDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getDescriptionCurrentLanguageId();

	@AutoEscape
	public String getDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized descriptions of this event.
	 *
	 * @return the locales and localized descriptions of this event
	 */
	public Map<Locale, String> getDescriptionMap();

	/**
	 * Sets the description of this event.
	 *
	 * @param description the description of this event
	 */
	public void setDescription(String description);

	/**
	 * Sets the localized description of this event in the language.
	 *
	 * @param description the localized description of this event
	 * @param locale the locale of the language
	 */
	public void setDescription(String description, Locale locale);

	/**
	 * Sets the localized description of this event in the language, and sets the default locale.
	 *
	 * @param description the localized description of this event
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDescription(
		String description, Locale locale, Locale defaultLocale);

	public void setDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized descriptions of this event from the map of locales and localized descriptions.
	 *
	 * @param descriptionMap the locales and localized descriptions of this event
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap);

	/**
	 * Sets the localized descriptions of this event from the map of locales and localized descriptions, and sets the default locale.
	 *
	 * @param descriptionMap the locales and localized descriptions of this event
	 * @param defaultLocale the default locale
	 */
	public void setDescriptionMap(
		Map<Locale, String> descriptionMap, Locale defaultLocale);

	/**
	 * Returns the external image url of this event.
	 *
	 * @return the external image url of this event
	 */
	@AutoEscape
	public String getExternalImageURL();

	/**
	 * Sets the external image url of this event.
	 *
	 * @param externalImageURL the external image url of this event
	 */
	public void setExternalImageURL(String externalImageURL);

	/**
	 * Returns the external image copyright of this event.
	 *
	 * @return the external image copyright of this event
	 */
	@AutoEscape
	public String getExternalImageCopyright();

	/**
	 * Sets the external image copyright of this event.
	 *
	 * @param externalImageCopyright the external image copyright of this event
	 */
	public void setExternalImageCopyright(String externalImageCopyright);

	/**
	 * Returns the image width of this event.
	 *
	 * @return the image width of this event
	 */
	public Integer getImageWidth();

	/**
	 * Sets the image width of this event.
	 *
	 * @param imageWidth the image width of this event
	 */
	public void setImageWidth(Integer imageWidth);

	/**
	 * Returns the image height of this event.
	 *
	 * @return the image height of this event
	 */
	public Integer getImageHeight();

	/**
	 * Sets the image height of this event.
	 *
	 * @param imageHeight the image height of this event
	 */
	public void setImageHeight(Integer imageHeight);

	/**
	 * Returns the place sig ID of this event.
	 *
	 * @return the place sig ID of this event
	 */
	@AutoEscape
	public String getPlaceSIGId();

	/**
	 * Sets the place sig ID of this event.
	 *
	 * @param placeSIGId the place sig ID of this event
	 */
	public void setPlaceSIGId(String placeSIGId);

	/**
	 * Returns the place name of this event.
	 *
	 * @return the place name of this event
	 */
	public String getPlaceName();

	/**
	 * Returns the localized place name of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized place name of this event
	 */
	@AutoEscape
	public String getPlaceName(Locale locale);

	/**
	 * Returns the localized place name of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized place name of this event. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getPlaceName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized place name of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized place name of this event
	 */
	@AutoEscape
	public String getPlaceName(String languageId);

	/**
	 * Returns the localized place name of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized place name of this event
	 */
	@AutoEscape
	public String getPlaceName(String languageId, boolean useDefault);

	@AutoEscape
	public String getPlaceNameCurrentLanguageId();

	@AutoEscape
	public String getPlaceNameCurrentValue();

	/**
	 * Returns a map of the locales and localized place names of this event.
	 *
	 * @return the locales and localized place names of this event
	 */
	public Map<Locale, String> getPlaceNameMap();

	/**
	 * Sets the place name of this event.
	 *
	 * @param placeName the place name of this event
	 */
	public void setPlaceName(String placeName);

	/**
	 * Sets the localized place name of this event in the language.
	 *
	 * @param placeName the localized place name of this event
	 * @param locale the locale of the language
	 */
	public void setPlaceName(String placeName, Locale locale);

	/**
	 * Sets the localized place name of this event in the language, and sets the default locale.
	 *
	 * @param placeName the localized place name of this event
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setPlaceName(
		String placeName, Locale locale, Locale defaultLocale);

	public void setPlaceNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized place names of this event from the map of locales and localized place names.
	 *
	 * @param placeNameMap the locales and localized place names of this event
	 */
	public void setPlaceNameMap(Map<Locale, String> placeNameMap);

	/**
	 * Sets the localized place names of this event from the map of locales and localized place names, and sets the default locale.
	 *
	 * @param placeNameMap the locales and localized place names of this event
	 * @param defaultLocale the default locale
	 */
	public void setPlaceNameMap(
		Map<Locale, String> placeNameMap, Locale defaultLocale);

	/**
	 * Returns the place street number of this event.
	 *
	 * @return the place street number of this event
	 */
	@AutoEscape
	public String getPlaceStreetNumber();

	/**
	 * Sets the place street number of this event.
	 *
	 * @param placeStreetNumber the place street number of this event
	 */
	public void setPlaceStreetNumber(String placeStreetNumber);

	/**
	 * Returns the place street name of this event.
	 *
	 * @return the place street name of this event
	 */
	@AutoEscape
	public String getPlaceStreetName();

	/**
	 * Sets the place street name of this event.
	 *
	 * @param placeStreetName the place street name of this event
	 */
	public void setPlaceStreetName(String placeStreetName);

	/**
	 * Returns the place zip code of this event.
	 *
	 * @return the place zip code of this event
	 */
	@AutoEscape
	public String getPlaceZipCode();

	/**
	 * Sets the place zip code of this event.
	 *
	 * @param placeZipCode the place zip code of this event
	 */
	public void setPlaceZipCode(String placeZipCode);

	/**
	 * Returns the place city of this event.
	 *
	 * @return the place city of this event
	 */
	@AutoEscape
	public String getPlaceCity();

	/**
	 * Sets the place city of this event.
	 *
	 * @param placeCity the place city of this event
	 */
	public void setPlaceCity(String placeCity);

	/**
	 * Returns the place country of this event.
	 *
	 * @return the place country of this event
	 */
	@AutoEscape
	public String getPlaceCountry();

	/**
	 * Sets the place country of this event.
	 *
	 * @param placeCountry the place country of this event
	 */
	public void setPlaceCountry(String placeCountry);

	/**
	 * Returns the access of this event.
	 *
	 * @return the access of this event
	 */
	public String getAccess();

	/**
	 * Returns the localized access of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized access of this event
	 */
	@AutoEscape
	public String getAccess(Locale locale);

	/**
	 * Returns the localized access of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized access of this event. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getAccess(Locale locale, boolean useDefault);

	/**
	 * Returns the localized access of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized access of this event
	 */
	@AutoEscape
	public String getAccess(String languageId);

	/**
	 * Returns the localized access of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized access of this event
	 */
	@AutoEscape
	public String getAccess(String languageId, boolean useDefault);

	@AutoEscape
	public String getAccessCurrentLanguageId();

	@AutoEscape
	public String getAccessCurrentValue();

	/**
	 * Returns a map of the locales and localized accesses of this event.
	 *
	 * @return the locales and localized accesses of this event
	 */
	public Map<Locale, String> getAccessMap();

	/**
	 * Sets the access of this event.
	 *
	 * @param access the access of this event
	 */
	public void setAccess(String access);

	/**
	 * Sets the localized access of this event in the language.
	 *
	 * @param access the localized access of this event
	 * @param locale the locale of the language
	 */
	public void setAccess(String access, Locale locale);

	/**
	 * Sets the localized access of this event in the language, and sets the default locale.
	 *
	 * @param access the localized access of this event
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setAccess(String access, Locale locale, Locale defaultLocale);

	public void setAccessCurrentLanguageId(String languageId);

	/**
	 * Sets the localized accesses of this event from the map of locales and localized accesses.
	 *
	 * @param accessMap the locales and localized accesses of this event
	 */
	public void setAccessMap(Map<Locale, String> accessMap);

	/**
	 * Sets the localized accesses of this event from the map of locales and localized accesses, and sets the default locale.
	 *
	 * @param accessMap the locales and localized accesses of this event
	 * @param defaultLocale the default locale
	 */
	public void setAccessMap(
		Map<Locale, String> accessMap, Locale defaultLocale);

	/**
	 * Returns the access for disabled of this event.
	 *
	 * @return the access for disabled of this event
	 */
	public String getAccessForDisabled();

	/**
	 * Returns the localized access for disabled of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized access for disabled of this event
	 */
	@AutoEscape
	public String getAccessForDisabled(Locale locale);

	/**
	 * Returns the localized access for disabled of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized access for disabled of this event. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getAccessForDisabled(Locale locale, boolean useDefault);

	/**
	 * Returns the localized access for disabled of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized access for disabled of this event
	 */
	@AutoEscape
	public String getAccessForDisabled(String languageId);

	/**
	 * Returns the localized access for disabled of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized access for disabled of this event
	 */
	@AutoEscape
	public String getAccessForDisabled(String languageId, boolean useDefault);

	@AutoEscape
	public String getAccessForDisabledCurrentLanguageId();

	@AutoEscape
	public String getAccessForDisabledCurrentValue();

	/**
	 * Returns a map of the locales and localized access for disableds of this event.
	 *
	 * @return the locales and localized access for disableds of this event
	 */
	public Map<Locale, String> getAccessForDisabledMap();

	/**
	 * Sets the access for disabled of this event.
	 *
	 * @param accessForDisabled the access for disabled of this event
	 */
	public void setAccessForDisabled(String accessForDisabled);

	/**
	 * Sets the localized access for disabled of this event in the language.
	 *
	 * @param accessForDisabled the localized access for disabled of this event
	 * @param locale the locale of the language
	 */
	public void setAccessForDisabled(String accessForDisabled, Locale locale);

	/**
	 * Sets the localized access for disabled of this event in the language, and sets the default locale.
	 *
	 * @param accessForDisabled the localized access for disabled of this event
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setAccessForDisabled(
		String accessForDisabled, Locale locale, Locale defaultLocale);

	public void setAccessForDisabledCurrentLanguageId(String languageId);

	/**
	 * Sets the localized access for disableds of this event from the map of locales and localized access for disableds.
	 *
	 * @param accessForDisabledMap the locales and localized access for disableds of this event
	 */
	public void setAccessForDisabledMap(
		Map<Locale, String> accessForDisabledMap);

	/**
	 * Sets the localized access for disableds of this event from the map of locales and localized access for disableds, and sets the default locale.
	 *
	 * @param accessForDisabledMap the locales and localized access for disableds of this event
	 * @param defaultLocale the default locale
	 */
	public void setAccessForDisabledMap(
		Map<Locale, String> accessForDisabledMap, Locale defaultLocale);

	/**
	 * Returns the access for blind of this event.
	 *
	 * @return the access for blind of this event
	 */
	public Boolean getAccessForBlind();

	/**
	 * Sets the access for blind of this event.
	 *
	 * @param accessForBlind the access for blind of this event
	 */
	public void setAccessForBlind(Boolean accessForBlind);

	/**
	 * Returns the access for deaf of this event.
	 *
	 * @return the access for deaf of this event
	 */
	public Boolean getAccessForDeaf();

	/**
	 * Sets the access for deaf of this event.
	 *
	 * @param accessForDeaf the access for deaf of this event
	 */
	public void setAccessForDeaf(Boolean accessForDeaf);

	/**
	 * Returns the access for wheelchair of this event.
	 *
	 * @return the access for wheelchair of this event
	 */
	public Boolean getAccessForWheelchair();

	/**
	 * Sets the access for wheelchair of this event.
	 *
	 * @param accessForWheelchair the access for wheelchair of this event
	 */
	public void setAccessForWheelchair(Boolean accessForWheelchair);

	/**
	 * Returns the access for elder of this event.
	 *
	 * @return the access for elder of this event
	 */
	public Boolean getAccessForElder();

	/**
	 * Sets the access for elder of this event.
	 *
	 * @param accessForElder the access for elder of this event
	 */
	public void setAccessForElder(Boolean accessForElder);

	/**
	 * Returns the access for deficient of this event.
	 *
	 * @return the access for deficient of this event
	 */
	public Boolean getAccessForDeficient();

	/**
	 * Sets the access for deficient of this event.
	 *
	 * @param accessForDeficient the access for deficient of this event
	 */
	public void setAccessForDeficient(Boolean accessForDeficient);

	/**
	 * Returns the promoter of this event.
	 *
	 * @return the promoter of this event
	 */
	@AutoEscape
	public String getPromoter();

	/**
	 * Sets the promoter of this event.
	 *
	 * @param promoter the promoter of this event
	 */
	public void setPromoter(String promoter);

	/**
	 * Returns the phone of this event.
	 *
	 * @return the phone of this event
	 */
	@AutoEscape
	public String getPhone();

	/**
	 * Sets the phone of this event.
	 *
	 * @param phone the phone of this event
	 */
	public void setPhone(String phone);

	/**
	 * Returns the email of this event.
	 *
	 * @return the email of this event
	 */
	@AutoEscape
	public String getEmail();

	/**
	 * Sets the email of this event.
	 *
	 * @param email the email of this event
	 */
	public void setEmail(String email);

	/**
	 * Returns the website url of this event.
	 *
	 * @return the website url of this event
	 */
	public String getWebsiteURL();

	/**
	 * Returns the localized website url of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized website url of this event
	 */
	@AutoEscape
	public String getWebsiteURL(Locale locale);

	/**
	 * Returns the localized website url of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized website url of this event. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getWebsiteURL(Locale locale, boolean useDefault);

	/**
	 * Returns the localized website url of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized website url of this event
	 */
	@AutoEscape
	public String getWebsiteURL(String languageId);

	/**
	 * Returns the localized website url of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized website url of this event
	 */
	@AutoEscape
	public String getWebsiteURL(String languageId, boolean useDefault);

	@AutoEscape
	public String getWebsiteURLCurrentLanguageId();

	@AutoEscape
	public String getWebsiteURLCurrentValue();

	/**
	 * Returns a map of the locales and localized website urls of this event.
	 *
	 * @return the locales and localized website urls of this event
	 */
	public Map<Locale, String> getWebsiteURLMap();

	/**
	 * Sets the website url of this event.
	 *
	 * @param websiteURL the website url of this event
	 */
	public void setWebsiteURL(String websiteURL);

	/**
	 * Sets the localized website url of this event in the language.
	 *
	 * @param websiteURL the localized website url of this event
	 * @param locale the locale of the language
	 */
	public void setWebsiteURL(String websiteURL, Locale locale);

	/**
	 * Sets the localized website url of this event in the language, and sets the default locale.
	 *
	 * @param websiteURL the localized website url of this event
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setWebsiteURL(
		String websiteURL, Locale locale, Locale defaultLocale);

	public void setWebsiteURLCurrentLanguageId(String languageId);

	/**
	 * Sets the localized website urls of this event from the map of locales and localized website urls.
	 *
	 * @param websiteURLMap the locales and localized website urls of this event
	 */
	public void setWebsiteURLMap(Map<Locale, String> websiteURLMap);

	/**
	 * Sets the localized website urls of this event from the map of locales and localized website urls, and sets the default locale.
	 *
	 * @param websiteURLMap the locales and localized website urls of this event
	 * @param defaultLocale the default locale
	 */
	public void setWebsiteURLMap(
		Map<Locale, String> websiteURLMap, Locale defaultLocale);

	/**
	 * Returns the website name of this event.
	 *
	 * @return the website name of this event
	 */
	public String getWebsiteName();

	/**
	 * Returns the localized website name of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized website name of this event
	 */
	@AutoEscape
	public String getWebsiteName(Locale locale);

	/**
	 * Returns the localized website name of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized website name of this event. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getWebsiteName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized website name of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized website name of this event
	 */
	@AutoEscape
	public String getWebsiteName(String languageId);

	/**
	 * Returns the localized website name of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized website name of this event
	 */
	@AutoEscape
	public String getWebsiteName(String languageId, boolean useDefault);

	@AutoEscape
	public String getWebsiteNameCurrentLanguageId();

	@AutoEscape
	public String getWebsiteNameCurrentValue();

	/**
	 * Returns a map of the locales and localized website names of this event.
	 *
	 * @return the locales and localized website names of this event
	 */
	public Map<Locale, String> getWebsiteNameMap();

	/**
	 * Sets the website name of this event.
	 *
	 * @param websiteName the website name of this event
	 */
	public void setWebsiteName(String websiteName);

	/**
	 * Sets the localized website name of this event in the language.
	 *
	 * @param websiteName the localized website name of this event
	 * @param locale the locale of the language
	 */
	public void setWebsiteName(String websiteName, Locale locale);

	/**
	 * Sets the localized website name of this event in the language, and sets the default locale.
	 *
	 * @param websiteName the localized website name of this event
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setWebsiteName(
		String websiteName, Locale locale, Locale defaultLocale);

	public void setWebsiteNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized website names of this event from the map of locales and localized website names.
	 *
	 * @param websiteNameMap the locales and localized website names of this event
	 */
	public void setWebsiteNameMap(Map<Locale, String> websiteNameMap);

	/**
	 * Sets the localized website names of this event from the map of locales and localized website names, and sets the default locale.
	 *
	 * @param websiteNameMap the locales and localized website names of this event
	 * @param defaultLocale the default locale
	 */
	public void setWebsiteNameMap(
		Map<Locale, String> websiteNameMap, Locale defaultLocale);

	/**
	 * Returns the free of this event.
	 *
	 * @return the free of this event
	 */
	public Integer getFree();

	/**
	 * Sets the free of this event.
	 *
	 * @param free the free of this event
	 */
	public void setFree(Integer free);

	/**
	 * Returns the price of this event.
	 *
	 * @return the price of this event
	 */
	public String getPrice();

	/**
	 * Returns the localized price of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized price of this event
	 */
	@AutoEscape
	public String getPrice(Locale locale);

	/**
	 * Returns the localized price of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized price of this event. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getPrice(Locale locale, boolean useDefault);

	/**
	 * Returns the localized price of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized price of this event
	 */
	@AutoEscape
	public String getPrice(String languageId);

	/**
	 * Returns the localized price of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized price of this event
	 */
	@AutoEscape
	public String getPrice(String languageId, boolean useDefault);

	@AutoEscape
	public String getPriceCurrentLanguageId();

	@AutoEscape
	public String getPriceCurrentValue();

	/**
	 * Returns a map of the locales and localized prices of this event.
	 *
	 * @return the locales and localized prices of this event
	 */
	public Map<Locale, String> getPriceMap();

	/**
	 * Sets the price of this event.
	 *
	 * @param price the price of this event
	 */
	public void setPrice(String price);

	/**
	 * Sets the localized price of this event in the language.
	 *
	 * @param price the localized price of this event
	 * @param locale the locale of the language
	 */
	public void setPrice(String price, Locale locale);

	/**
	 * Sets the localized price of this event in the language, and sets the default locale.
	 *
	 * @param price the localized price of this event
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setPrice(String price, Locale locale, Locale defaultLocale);

	public void setPriceCurrentLanguageId(String languageId);

	/**
	 * Sets the localized prices of this event from the map of locales and localized prices.
	 *
	 * @param priceMap the locales and localized prices of this event
	 */
	public void setPriceMap(Map<Locale, String> priceMap);

	/**
	 * Sets the localized prices of this event from the map of locales and localized prices, and sets the default locale.
	 *
	 * @param priceMap the locales and localized prices of this event
	 * @param defaultLocale the default locale
	 */
	public void setPriceMap(Map<Locale, String> priceMap, Locale defaultLocale);

	/**
	 * Returns the booking description of this event.
	 *
	 * @return the booking description of this event
	 */
	public String getBookingDescription();

	/**
	 * Returns the localized booking description of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized booking description of this event
	 */
	@AutoEscape
	public String getBookingDescription(Locale locale);

	/**
	 * Returns the localized booking description of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized booking description of this event. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getBookingDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized booking description of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized booking description of this event
	 */
	@AutoEscape
	public String getBookingDescription(String languageId);

	/**
	 * Returns the localized booking description of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized booking description of this event
	 */
	@AutoEscape
	public String getBookingDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getBookingDescriptionCurrentLanguageId();

	@AutoEscape
	public String getBookingDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized booking descriptions of this event.
	 *
	 * @return the locales and localized booking descriptions of this event
	 */
	public Map<Locale, String> getBookingDescriptionMap();

	/**
	 * Sets the booking description of this event.
	 *
	 * @param bookingDescription the booking description of this event
	 */
	public void setBookingDescription(String bookingDescription);

	/**
	 * Sets the localized booking description of this event in the language.
	 *
	 * @param bookingDescription the localized booking description of this event
	 * @param locale the locale of the language
	 */
	public void setBookingDescription(String bookingDescription, Locale locale);

	/**
	 * Sets the localized booking description of this event in the language, and sets the default locale.
	 *
	 * @param bookingDescription the localized booking description of this event
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setBookingDescription(
		String bookingDescription, Locale locale, Locale defaultLocale);

	public void setBookingDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized booking descriptions of this event from the map of locales and localized booking descriptions.
	 *
	 * @param bookingDescriptionMap the locales and localized booking descriptions of this event
	 */
	public void setBookingDescriptionMap(
		Map<Locale, String> bookingDescriptionMap);

	/**
	 * Sets the localized booking descriptions of this event from the map of locales and localized booking descriptions, and sets the default locale.
	 *
	 * @param bookingDescriptionMap the locales and localized booking descriptions of this event
	 * @param defaultLocale the default locale
	 */
	public void setBookingDescriptionMap(
		Map<Locale, String> bookingDescriptionMap, Locale defaultLocale);

	/**
	 * Returns the booking url of this event.
	 *
	 * @return the booking url of this event
	 */
	@AutoEscape
	public String getBookingURL();

	/**
	 * Sets the booking url of this event.
	 *
	 * @param bookingURL the booking url of this event
	 */
	public void setBookingURL(String bookingURL);

	/**
	 * Returns the subscription url of this event.
	 *
	 * @return the subscription url of this event
	 */
	@AutoEscape
	public String getSubscriptionURL();

	/**
	 * Sets the subscription url of this event.
	 *
	 * @param subscriptionURL the subscription url of this event
	 */
	public void setSubscriptionURL(String subscriptionURL);

	/**
	 * Returns the source of this event.
	 *
	 * @return the source of this event
	 */
	@AutoEscape
	public String getSource();

	/**
	 * Sets the source of this event.
	 *
	 * @param source the source of this event
	 */
	public void setSource(String source);

	/**
	 * Returns the id source of this event.
	 *
	 * @return the id source of this event
	 */
	@AutoEscape
	public String getIdSource();

	/**
	 * Sets the id source of this event.
	 *
	 * @param idSource the id source of this event
	 */
	public void setIdSource(String idSource);

	/**
	 * Returns the publication date of this event.
	 *
	 * @return the publication date of this event
	 */
	public Date getPublicationDate();

	/**
	 * Sets the publication date of this event.
	 *
	 * @param publicationDate the publication date of this event
	 */
	public void setPublicationDate(Date publicationDate);

	/**
	 * Returns the distribution of this event.
	 *
	 * @return the distribution of this event
	 */
	public String getDistribution();

	/**
	 * Returns the localized distribution of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized distribution of this event
	 */
	@AutoEscape
	public String getDistribution(Locale locale);

	/**
	 * Returns the localized distribution of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized distribution of this event. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDistribution(Locale locale, boolean useDefault);

	/**
	 * Returns the localized distribution of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized distribution of this event
	 */
	@AutoEscape
	public String getDistribution(String languageId);

	/**
	 * Returns the localized distribution of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized distribution of this event
	 */
	@AutoEscape
	public String getDistribution(String languageId, boolean useDefault);

	@AutoEscape
	public String getDistributionCurrentLanguageId();

	@AutoEscape
	public String getDistributionCurrentValue();

	/**
	 * Returns a map of the locales and localized distributions of this event.
	 *
	 * @return the locales and localized distributions of this event
	 */
	public Map<Locale, String> getDistributionMap();

	/**
	 * Sets the distribution of this event.
	 *
	 * @param distribution the distribution of this event
	 */
	public void setDistribution(String distribution);

	/**
	 * Sets the localized distribution of this event in the language.
	 *
	 * @param distribution the localized distribution of this event
	 * @param locale the locale of the language
	 */
	public void setDistribution(String distribution, Locale locale);

	/**
	 * Sets the localized distribution of this event in the language, and sets the default locale.
	 *
	 * @param distribution the localized distribution of this event
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDistribution(
		String distribution, Locale locale, Locale defaultLocale);

	public void setDistributionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized distributions of this event from the map of locales and localized distributions.
	 *
	 * @param distributionMap the locales and localized distributions of this event
	 */
	public void setDistributionMap(Map<Locale, String> distributionMap);

	/**
	 * Sets the localized distributions of this event from the map of locales and localized distributions, and sets the default locale.
	 *
	 * @param distributionMap the locales and localized distributions of this event
	 * @param defaultLocale the default locale
	 */
	public void setDistributionMap(
		Map<Locale, String> distributionMap, Locale defaultLocale);

	/**
	 * Returns the composer of this event.
	 *
	 * @return the composer of this event
	 */
	@AutoEscape
	public String getComposer();

	/**
	 * Sets the composer of this event.
	 *
	 * @param composer the composer of this event
	 */
	public void setComposer(String composer);

	/**
	 * Returns the concert ID of this event.
	 *
	 * @return the concert ID of this event
	 */
	@AutoEscape
	public String getConcertId();

	/**
	 * Sets the concert ID of this event.
	 *
	 * @param concertId the concert ID of this event
	 */
	public void setConcertId(String concertId);

	/**
	 * Returns the program of this event.
	 *
	 * @return the program of this event
	 */
	public String getProgram();

	/**
	 * Returns the localized program of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized program of this event
	 */
	@AutoEscape
	public String getProgram(Locale locale);

	/**
	 * Returns the localized program of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized program of this event. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getProgram(Locale locale, boolean useDefault);

	/**
	 * Returns the localized program of this event in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized program of this event
	 */
	@AutoEscape
	public String getProgram(String languageId);

	/**
	 * Returns the localized program of this event in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized program of this event
	 */
	@AutoEscape
	public String getProgram(String languageId, boolean useDefault);

	@AutoEscape
	public String getProgramCurrentLanguageId();

	@AutoEscape
	public String getProgramCurrentValue();

	/**
	 * Returns a map of the locales and localized programs of this event.
	 *
	 * @return the locales and localized programs of this event
	 */
	public Map<Locale, String> getProgramMap();

	/**
	 * Sets the program of this event.
	 *
	 * @param program the program of this event
	 */
	public void setProgram(String program);

	/**
	 * Sets the localized program of this event in the language.
	 *
	 * @param program the localized program of this event
	 * @param locale the locale of the language
	 */
	public void setProgram(String program, Locale locale);

	/**
	 * Sets the localized program of this event in the language, and sets the default locale.
	 *
	 * @param program the localized program of this event
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setProgram(String program, Locale locale, Locale defaultLocale);

	public void setProgramCurrentLanguageId(String languageId);

	/**
	 * Sets the localized programs of this event from the map of locales and localized programs.
	 *
	 * @param programMap the locales and localized programs of this event
	 */
	public void setProgramMap(Map<Locale, String> programMap);

	/**
	 * Sets the localized programs of this event from the map of locales and localized programs, and sets the default locale.
	 *
	 * @param programMap the locales and localized programs of this event
	 * @param defaultLocale the default locale
	 */
	public void setProgramMap(
		Map<Locale, String> programMap, Locale defaultLocale);

	/**
	 * Returns the first start date of this event.
	 *
	 * @return the first start date of this event
	 */
	public Date getFirstStartDate();

	/**
	 * Sets the first start date of this event.
	 *
	 * @param firstStartDate the first start date of this event
	 */
	public void setFirstStartDate(Date firstStartDate);

	/**
	 * Returns the last end date of this event.
	 *
	 * @return the last end date of this event
	 */
	public Date getLastEndDate();

	/**
	 * Sets the last end date of this event.
	 *
	 * @param lastEndDate the last end date of this event
	 */
	public void setLastEndDate(Date lastEndDate);

	/**
	 * Returns the create date source of this event.
	 *
	 * @return the create date source of this event
	 */
	public Date getCreateDateSource();

	/**
	 * Sets the create date source of this event.
	 *
	 * @param createDateSource the create date source of this event
	 */
	public void setCreateDateSource(Date createDateSource);

	/**
	 * Returns the modified date source of this event.
	 *
	 * @return the modified date source of this event
	 */
	public Date getModifiedDateSource();

	/**
	 * Sets the modified date source of this event.
	 *
	 * @param modifiedDateSource the modified date source of this event
	 */
	public void setModifiedDateSource(Date modifiedDateSource);

	/**
	 * Returns the image ID of this event.
	 *
	 * @return the image ID of this event
	 */
	public Long getImageId();

	/**
	 * Sets the image ID of this event.
	 *
	 * @param imageId the image ID of this event
	 */
	public void setImageId(Long imageId);

	/**
	 * Returns <code>true</code> if this event is approved.
	 *
	 * @return <code>true</code> if this event is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this event is denied.
	 *
	 * @return <code>true</code> if this event is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this event is a draft.
	 *
	 * @return <code>true</code> if this event is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this event is expired.
	 *
	 * @return <code>true</code> if this event is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this event is inactive.
	 *
	 * @return <code>true</code> if this event is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this event is incomplete.
	 *
	 * @return <code>true</code> if this event is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this event is pending.
	 *
	 * @return <code>true</code> if this event is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this event is scheduled.
	 *
	 * @return <code>true</code> if this event is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(eu.strasbourg.service.agenda.model.Event event);

	@Override
	public int hashCode();

	@Override
	public CacheModel<eu.strasbourg.service.agenda.model.Event> toCacheModel();

	@Override
	public eu.strasbourg.service.agenda.model.Event toEscapedModel();

	@Override
	public eu.strasbourg.service.agenda.model.Event toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();

}