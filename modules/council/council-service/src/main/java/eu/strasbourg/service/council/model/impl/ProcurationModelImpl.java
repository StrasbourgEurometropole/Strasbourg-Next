/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.council.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.council.model.Procuration;
import eu.strasbourg.service.council.model.ProcurationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Procuration service. Represents a row in the &quot;council_Procuration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProcurationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProcurationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProcurationImpl
 * @generated
 */
public class ProcurationModelImpl
	extends BaseModelImpl<Procuration> implements ProcurationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a procuration model instance should use the <code>Procuration</code> interface instead.
	 */
	public static final String TABLE_NAME = "council_Procuration";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"procurationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"officialVotersId", Types.BIGINT},
		{"officialUnavailableId", Types.BIGINT},
		{"councilSessionId", Types.BIGINT}, {"isAbsent", Types.BOOLEAN},
		{"procurationMode", Types.INTEGER}, {"presential", Types.INTEGER},
		{"isAfterVote", Types.BOOLEAN}, {"startHour", Types.TIMESTAMP},
		{"endHour", Types.TIMESTAMP}, {"startDelib", Types.BIGINT},
		{"endDelib", Types.BIGINT}, {"otherProcurationMode", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("procurationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("officialVotersId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("officialUnavailableId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("councilSessionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isAbsent", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("procurationMode", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("presential", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("isAfterVote", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("startHour", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endHour", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("startDelib", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("endDelib", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("otherProcurationMode", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table council_Procuration (uuid_ VARCHAR(75) null,procurationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,officialVotersId LONG,officialUnavailableId LONG,councilSessionId LONG,isAbsent BOOLEAN,procurationMode INTEGER,presential INTEGER,isAfterVote BOOLEAN,startHour DATE null,endHour DATE null,startDelib LONG,endDelib LONG,otherProcurationMode VARCHAR(20) null)";

	public static final String TABLE_SQL_DROP =
		"drop table council_Procuration";

	public static final String ORDER_BY_JPQL =
		" ORDER BY procuration.procurationId DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY council_Procuration.procurationId DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COUNCILSESSIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ISABSENT_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OFFICIALUNAVAILABLEID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long OFFICIALVOTERSID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROCURATIONID_COLUMN_BITMASK = 128L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.council.service.util.ServiceProps.get(
			"lock.expiration.time.eu.strasbourg.service.council.model.Procuration"));

	public ProcurationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _procurationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProcurationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _procurationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Procuration.class;
	}

	@Override
	public String getModelClassName() {
		return Procuration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Procuration, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Procuration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Procuration, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Procuration)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Procuration, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Procuration, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Procuration)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Procuration, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Procuration, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Procuration, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Procuration, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Procuration, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Procuration, Object>>();
		Map<String, BiConsumer<Procuration, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Procuration, ?>>();

		attributeGetterFunctions.put("uuid", Procuration::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Procuration, String>)Procuration::setUuid);
		attributeGetterFunctions.put(
			"procurationId", Procuration::getProcurationId);
		attributeSetterBiConsumers.put(
			"procurationId",
			(BiConsumer<Procuration, Long>)Procuration::setProcurationId);
		attributeGetterFunctions.put("groupId", Procuration::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Procuration, Long>)Procuration::setGroupId);
		attributeGetterFunctions.put("companyId", Procuration::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<Procuration, Long>)Procuration::setCompanyId);
		attributeGetterFunctions.put("userId", Procuration::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Procuration, Long>)Procuration::setUserId);
		attributeGetterFunctions.put("userName", Procuration::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<Procuration, String>)Procuration::setUserName);
		attributeGetterFunctions.put("createDate", Procuration::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Procuration, Date>)Procuration::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Procuration::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Procuration, Date>)Procuration::setModifiedDate);
		attributeGetterFunctions.put("status", Procuration::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Procuration, Integer>)Procuration::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", Procuration::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<Procuration, Long>)Procuration::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", Procuration::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<Procuration, String>)Procuration::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", Procuration::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<Procuration, Date>)Procuration::setStatusDate);
		attributeGetterFunctions.put(
			"officialVotersId", Procuration::getOfficialVotersId);
		attributeSetterBiConsumers.put(
			"officialVotersId",
			(BiConsumer<Procuration, Long>)Procuration::setOfficialVotersId);
		attributeGetterFunctions.put(
			"officialUnavailableId", Procuration::getOfficialUnavailableId);
		attributeSetterBiConsumers.put(
			"officialUnavailableId",
			(BiConsumer<Procuration, Long>)
				Procuration::setOfficialUnavailableId);
		attributeGetterFunctions.put(
			"councilSessionId", Procuration::getCouncilSessionId);
		attributeSetterBiConsumers.put(
			"councilSessionId",
			(BiConsumer<Procuration, Long>)Procuration::setCouncilSessionId);
		attributeGetterFunctions.put("isAbsent", Procuration::getIsAbsent);
		attributeSetterBiConsumers.put(
			"isAbsent",
			(BiConsumer<Procuration, Boolean>)Procuration::setIsAbsent);
		attributeGetterFunctions.put(
			"procurationMode", Procuration::getProcurationMode);
		attributeSetterBiConsumers.put(
			"procurationMode",
			(BiConsumer<Procuration, Integer>)Procuration::setProcurationMode);
		attributeGetterFunctions.put("presential", Procuration::getPresential);
		attributeSetterBiConsumers.put(
			"presential",
			(BiConsumer<Procuration, Integer>)Procuration::setPresential);
		attributeGetterFunctions.put(
			"isAfterVote", Procuration::getIsAfterVote);
		attributeSetterBiConsumers.put(
			"isAfterVote",
			(BiConsumer<Procuration, Boolean>)Procuration::setIsAfterVote);
		attributeGetterFunctions.put("startHour", Procuration::getStartHour);
		attributeSetterBiConsumers.put(
			"startHour",
			(BiConsumer<Procuration, Date>)Procuration::setStartHour);
		attributeGetterFunctions.put("endHour", Procuration::getEndHour);
		attributeSetterBiConsumers.put(
			"endHour", (BiConsumer<Procuration, Date>)Procuration::setEndHour);
		attributeGetterFunctions.put("startDelib", Procuration::getStartDelib);
		attributeSetterBiConsumers.put(
			"startDelib",
			(BiConsumer<Procuration, Long>)Procuration::setStartDelib);
		attributeGetterFunctions.put("endDelib", Procuration::getEndDelib);
		attributeSetterBiConsumers.put(
			"endDelib",
			(BiConsumer<Procuration, Long>)Procuration::setEndDelib);
		attributeGetterFunctions.put(
			"otherProcurationMode", Procuration::getOtherProcurationMode);
		attributeSetterBiConsumers.put(
			"otherProcurationMode",
			(BiConsumer<Procuration, String>)
				Procuration::setOtherProcurationMode);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getProcurationId() {
		return _procurationId;
	}

	@Override
	public void setProcurationId(long procurationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_procurationId = procurationId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public long getOfficialVotersId() {
		return _officialVotersId;
	}

	@Override
	public void setOfficialVotersId(long officialVotersId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_officialVotersId = officialVotersId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOfficialVotersId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("officialVotersId"));
	}

	@Override
	public long getOfficialUnavailableId() {
		return _officialUnavailableId;
	}

	@Override
	public void setOfficialUnavailableId(long officialUnavailableId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_officialUnavailableId = officialUnavailableId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOfficialUnavailableId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("officialUnavailableId"));
	}

	@Override
	public long getCouncilSessionId() {
		return _councilSessionId;
	}

	@Override
	public void setCouncilSessionId(long councilSessionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_councilSessionId = councilSessionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCouncilSessionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("councilSessionId"));
	}

	@Override
	public boolean getIsAbsent() {
		return _isAbsent;
	}

	@Override
	public boolean isIsAbsent() {
		return _isAbsent;
	}

	@Override
	public void setIsAbsent(boolean isAbsent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isAbsent = isAbsent;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalIsAbsent() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("isAbsent"));
	}

	@Override
	public int getProcurationMode() {
		return _procurationMode;
	}

	@Override
	public void setProcurationMode(int procurationMode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_procurationMode = procurationMode;
	}

	@Override
	public int getPresential() {
		return _presential;
	}

	@Override
	public void setPresential(int presential) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_presential = presential;
	}

	@Override
	public boolean getIsAfterVote() {
		return _isAfterVote;
	}

	@Override
	public boolean isIsAfterVote() {
		return _isAfterVote;
	}

	@Override
	public void setIsAfterVote(boolean isAfterVote) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isAfterVote = isAfterVote;
	}

	@Override
	public Date getStartHour() {
		return _startHour;
	}

	@Override
	public void setStartHour(Date startHour) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startHour = startHour;
	}

	@Override
	public Date getEndHour() {
		return _endHour;
	}

	@Override
	public void setEndHour(Date endHour) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endHour = endHour;
	}

	@Override
	public long getStartDelib() {
		return _startDelib;
	}

	@Override
	public void setStartDelib(long startDelib) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDelib = startDelib;
	}

	@Override
	public long getEndDelib() {
		return _endDelib;
	}

	@Override
	public void setEndDelib(long endDelib) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDelib = endDelib;
	}

	@Override
	public String getOtherProcurationMode() {
		if (_otherProcurationMode == null) {
			return "";
		}
		else {
			return _otherProcurationMode;
		}
	}

	@Override
	public void setOtherProcurationMode(String otherProcurationMode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otherProcurationMode = otherProcurationMode;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Procuration.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Procuration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Procuration toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Procuration>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProcurationImpl procurationImpl = new ProcurationImpl();

		procurationImpl.setUuid(getUuid());
		procurationImpl.setProcurationId(getProcurationId());
		procurationImpl.setGroupId(getGroupId());
		procurationImpl.setCompanyId(getCompanyId());
		procurationImpl.setUserId(getUserId());
		procurationImpl.setUserName(getUserName());
		procurationImpl.setCreateDate(getCreateDate());
		procurationImpl.setModifiedDate(getModifiedDate());
		procurationImpl.setStatus(getStatus());
		procurationImpl.setStatusByUserId(getStatusByUserId());
		procurationImpl.setStatusByUserName(getStatusByUserName());
		procurationImpl.setStatusDate(getStatusDate());
		procurationImpl.setOfficialVotersId(getOfficialVotersId());
		procurationImpl.setOfficialUnavailableId(getOfficialUnavailableId());
		procurationImpl.setCouncilSessionId(getCouncilSessionId());
		procurationImpl.setIsAbsent(isIsAbsent());
		procurationImpl.setProcurationMode(getProcurationMode());
		procurationImpl.setPresential(getPresential());
		procurationImpl.setIsAfterVote(isIsAfterVote());
		procurationImpl.setStartHour(getStartHour());
		procurationImpl.setEndHour(getEndHour());
		procurationImpl.setStartDelib(getStartDelib());
		procurationImpl.setEndDelib(getEndDelib());
		procurationImpl.setOtherProcurationMode(getOtherProcurationMode());

		procurationImpl.resetOriginalValues();

		return procurationImpl;
	}

	@Override
	public Procuration cloneWithOriginalValues() {
		ProcurationImpl procurationImpl = new ProcurationImpl();

		procurationImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		procurationImpl.setProcurationId(
			this.<Long>getColumnOriginalValue("procurationId"));
		procurationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		procurationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		procurationImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		procurationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		procurationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		procurationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		procurationImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		procurationImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		procurationImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		procurationImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));
		procurationImpl.setOfficialVotersId(
			this.<Long>getColumnOriginalValue("officialVotersId"));
		procurationImpl.setOfficialUnavailableId(
			this.<Long>getColumnOriginalValue("officialUnavailableId"));
		procurationImpl.setCouncilSessionId(
			this.<Long>getColumnOriginalValue("councilSessionId"));
		procurationImpl.setIsAbsent(
			this.<Boolean>getColumnOriginalValue("isAbsent"));
		procurationImpl.setProcurationMode(
			this.<Integer>getColumnOriginalValue("procurationMode"));
		procurationImpl.setPresential(
			this.<Integer>getColumnOriginalValue("presential"));
		procurationImpl.setIsAfterVote(
			this.<Boolean>getColumnOriginalValue("isAfterVote"));
		procurationImpl.setStartHour(
			this.<Date>getColumnOriginalValue("startHour"));
		procurationImpl.setEndHour(
			this.<Date>getColumnOriginalValue("endHour"));
		procurationImpl.setStartDelib(
			this.<Long>getColumnOriginalValue("startDelib"));
		procurationImpl.setEndDelib(
			this.<Long>getColumnOriginalValue("endDelib"));
		procurationImpl.setOtherProcurationMode(
			this.<String>getColumnOriginalValue("otherProcurationMode"));

		return procurationImpl;
	}

	@Override
	public int compareTo(Procuration procuration) {
		int value = 0;

		if (getProcurationId() < procuration.getProcurationId()) {
			value = -1;
		}
		else if (getProcurationId() > procuration.getProcurationId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Procuration)) {
			return false;
		}

		Procuration procuration = (Procuration)object;

		long primaryKey = procuration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Procuration> toCacheModel() {
		ProcurationCacheModel procurationCacheModel =
			new ProcurationCacheModel();

		procurationCacheModel.uuid = getUuid();

		String uuid = procurationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			procurationCacheModel.uuid = null;
		}

		procurationCacheModel.procurationId = getProcurationId();

		procurationCacheModel.groupId = getGroupId();

		procurationCacheModel.companyId = getCompanyId();

		procurationCacheModel.userId = getUserId();

		procurationCacheModel.userName = getUserName();

		String userName = procurationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			procurationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			procurationCacheModel.createDate = createDate.getTime();
		}
		else {
			procurationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			procurationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			procurationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		procurationCacheModel.status = getStatus();

		procurationCacheModel.statusByUserId = getStatusByUserId();

		procurationCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = procurationCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			procurationCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			procurationCacheModel.statusDate = statusDate.getTime();
		}
		else {
			procurationCacheModel.statusDate = Long.MIN_VALUE;
		}

		procurationCacheModel.officialVotersId = getOfficialVotersId();

		procurationCacheModel.officialUnavailableId =
			getOfficialUnavailableId();

		procurationCacheModel.councilSessionId = getCouncilSessionId();

		procurationCacheModel.isAbsent = isIsAbsent();

		procurationCacheModel.procurationMode = getProcurationMode();

		procurationCacheModel.presential = getPresential();

		procurationCacheModel.isAfterVote = isIsAfterVote();

		Date startHour = getStartHour();

		if (startHour != null) {
			procurationCacheModel.startHour = startHour.getTime();
		}
		else {
			procurationCacheModel.startHour = Long.MIN_VALUE;
		}

		Date endHour = getEndHour();

		if (endHour != null) {
			procurationCacheModel.endHour = endHour.getTime();
		}
		else {
			procurationCacheModel.endHour = Long.MIN_VALUE;
		}

		procurationCacheModel.startDelib = getStartDelib();

		procurationCacheModel.endDelib = getEndDelib();

		procurationCacheModel.otherProcurationMode = getOtherProcurationMode();

		String otherProcurationMode =
			procurationCacheModel.otherProcurationMode;

		if ((otherProcurationMode != null) &&
			(otherProcurationMode.length() == 0)) {

			procurationCacheModel.otherProcurationMode = null;
		}

		return procurationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Procuration, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Procuration, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Procuration, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Procuration)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Procuration>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Procuration.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _procurationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _officialVotersId;
	private long _officialUnavailableId;
	private long _councilSessionId;
	private boolean _isAbsent;
	private int _procurationMode;
	private int _presential;
	private boolean _isAfterVote;
	private Date _startHour;
	private Date _endHour;
	private long _startDelib;
	private long _endDelib;
	private String _otherProcurationMode;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Procuration, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Procuration)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("procurationId", _procurationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("officialVotersId", _officialVotersId);
		_columnOriginalValues.put(
			"officialUnavailableId", _officialUnavailableId);
		_columnOriginalValues.put("councilSessionId", _councilSessionId);
		_columnOriginalValues.put("isAbsent", _isAbsent);
		_columnOriginalValues.put("procurationMode", _procurationMode);
		_columnOriginalValues.put("presential", _presential);
		_columnOriginalValues.put("isAfterVote", _isAfterVote);
		_columnOriginalValues.put("startHour", _startHour);
		_columnOriginalValues.put("endHour", _endHour);
		_columnOriginalValues.put("startDelib", _startDelib);
		_columnOriginalValues.put("endDelib", _endDelib);
		_columnOriginalValues.put(
			"otherProcurationMode", _otherProcurationMode);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("procurationId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("status", 256L);

		columnBitmasks.put("statusByUserId", 512L);

		columnBitmasks.put("statusByUserName", 1024L);

		columnBitmasks.put("statusDate", 2048L);

		columnBitmasks.put("officialVotersId", 4096L);

		columnBitmasks.put("officialUnavailableId", 8192L);

		columnBitmasks.put("councilSessionId", 16384L);

		columnBitmasks.put("isAbsent", 32768L);

		columnBitmasks.put("procurationMode", 65536L);

		columnBitmasks.put("presential", 131072L);

		columnBitmasks.put("isAfterVote", 262144L);

		columnBitmasks.put("startHour", 524288L);

		columnBitmasks.put("endHour", 1048576L);

		columnBitmasks.put("startDelib", 2097152L);

		columnBitmasks.put("endDelib", 4194304L);

		columnBitmasks.put("otherProcurationMode", 8388608L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Procuration _escapedModel;

}