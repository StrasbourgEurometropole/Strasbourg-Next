/**
 * SPDX-FileCopyrightText: (c) 2023 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package eu.strasbourg.service.council.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.council.model.Deliberation;
import eu.strasbourg.service.council.model.DeliberationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Deliberation service. Represents a row in the &quot;council_Deliberation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DeliberationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DeliberationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DeliberationImpl
 * @generated
 */
@JSON(strict = true)
public class DeliberationModelImpl
	extends BaseModelImpl<Deliberation> implements DeliberationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a deliberation model instance should use the <code>Deliberation</code> interface instead.
	 */
	public static final String TABLE_NAME = "council_Deliberation";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"deliberationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"amendement", Types.VARCHAR}, {"title", Types.VARCHAR},
		{"order_", Types.INTEGER}, {"stage", Types.VARCHAR},
		{"countOfficialsVoting", Types.INTEGER},
		{"countOfficialsActive", Types.INTEGER}, {"quorum", Types.INTEGER},
		{"beginningVoteDate", Types.TIMESTAMP},
		{"endVoteDate", Types.TIMESTAMP}, {"councilSessionId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deliberationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("amendement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("order_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("stage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("countOfficialsVoting", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("countOfficialsActive", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("quorum", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("beginningVoteDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endVoteDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("councilSessionId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table council_Deliberation (uuid_ VARCHAR(75) null,deliberationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,amendement VARCHAR(3) null,title VARCHAR(500) null,order_ INTEGER,stage VARCHAR(75) null,countOfficialsVoting INTEGER,countOfficialsActive INTEGER,quorum INTEGER,beginningVoteDate DATE null,endVoteDate DATE null,councilSessionId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table council_Deliberation";

	public static final String ORDER_BY_JPQL =
		" ORDER BY deliberation.title ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY council_Deliberation.title ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COUNCILSESSIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TITLE_COLUMN_BITMASK = 16L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.council.service.util.ServiceProps.get(
			"lock.expiration.time.eu.strasbourg.service.council.model.Deliberation"));

	public DeliberationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _deliberationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDeliberationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _deliberationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Deliberation.class;
	}

	@Override
	public String getModelClassName() {
		return Deliberation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Deliberation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Deliberation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Deliberation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Deliberation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Deliberation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Deliberation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Deliberation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Deliberation, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Deliberation, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Deliberation, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Deliberation, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<Deliberation, Object>>();

			attributeGetterFunctions.put("uuid", Deliberation::getUuid);
			attributeGetterFunctions.put(
				"deliberationId", Deliberation::getDeliberationId);
			attributeGetterFunctions.put("groupId", Deliberation::getGroupId);
			attributeGetterFunctions.put(
				"companyId", Deliberation::getCompanyId);
			attributeGetterFunctions.put("userId", Deliberation::getUserId);
			attributeGetterFunctions.put("userName", Deliberation::getUserName);
			attributeGetterFunctions.put(
				"createDate", Deliberation::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Deliberation::getModifiedDate);
			attributeGetterFunctions.put("status", Deliberation::getStatus);
			attributeGetterFunctions.put(
				"statusByUserId", Deliberation::getStatusByUserId);
			attributeGetterFunctions.put(
				"statusByUserName", Deliberation::getStatusByUserName);
			attributeGetterFunctions.put(
				"statusDate", Deliberation::getStatusDate);
			attributeGetterFunctions.put(
				"amendement", Deliberation::getAmendement);
			attributeGetterFunctions.put("title", Deliberation::getTitle);
			attributeGetterFunctions.put("order", Deliberation::getOrder);
			attributeGetterFunctions.put("stage", Deliberation::getStage);
			attributeGetterFunctions.put(
				"countOfficialsVoting", Deliberation::getCountOfficialsVoting);
			attributeGetterFunctions.put(
				"countOfficialsActive", Deliberation::getCountOfficialsActive);
			attributeGetterFunctions.put("quorum", Deliberation::getQuorum);
			attributeGetterFunctions.put(
				"beginningVoteDate", Deliberation::getBeginningVoteDate);
			attributeGetterFunctions.put(
				"endVoteDate", Deliberation::getEndVoteDate);
			attributeGetterFunctions.put(
				"councilSessionId", Deliberation::getCouncilSessionId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Deliberation, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Deliberation, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<Deliberation, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<Deliberation, String>)Deliberation::setUuid);
			attributeSetterBiConsumers.put(
				"deliberationId",
				(BiConsumer<Deliberation, Long>)
					Deliberation::setDeliberationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<Deliberation, Long>)Deliberation::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<Deliberation, Long>)Deliberation::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<Deliberation, Long>)Deliberation::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<Deliberation, String>)Deliberation::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Deliberation, Date>)Deliberation::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Deliberation, Date>)Deliberation::setModifiedDate);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<Deliberation, Integer>)Deliberation::setStatus);
			attributeSetterBiConsumers.put(
				"statusByUserId",
				(BiConsumer<Deliberation, Long>)
					Deliberation::setStatusByUserId);
			attributeSetterBiConsumers.put(
				"statusByUserName",
				(BiConsumer<Deliberation, String>)
					Deliberation::setStatusByUserName);
			attributeSetterBiConsumers.put(
				"statusDate",
				(BiConsumer<Deliberation, Date>)Deliberation::setStatusDate);
			attributeSetterBiConsumers.put(
				"amendement",
				(BiConsumer<Deliberation, String>)Deliberation::setAmendement);
			attributeSetterBiConsumers.put(
				"title",
				(BiConsumer<Deliberation, String>)Deliberation::setTitle);
			attributeSetterBiConsumers.put(
				"order",
				(BiConsumer<Deliberation, Integer>)Deliberation::setOrder);
			attributeSetterBiConsumers.put(
				"stage",
				(BiConsumer<Deliberation, String>)Deliberation::setStage);
			attributeSetterBiConsumers.put(
				"countOfficialsVoting",
				(BiConsumer<Deliberation, Integer>)
					Deliberation::setCountOfficialsVoting);
			attributeSetterBiConsumers.put(
				"countOfficialsActive",
				(BiConsumer<Deliberation, Integer>)
					Deliberation::setCountOfficialsActive);
			attributeSetterBiConsumers.put(
				"quorum",
				(BiConsumer<Deliberation, Integer>)Deliberation::setQuorum);
			attributeSetterBiConsumers.put(
				"beginningVoteDate",
				(BiConsumer<Deliberation, Date>)
					Deliberation::setBeginningVoteDate);
			attributeSetterBiConsumers.put(
				"endVoteDate",
				(BiConsumer<Deliberation, Date>)Deliberation::setEndVoteDate);
			attributeSetterBiConsumers.put(
				"councilSessionId",
				(BiConsumer<Deliberation, Long>)
					Deliberation::setCouncilSessionId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getDeliberationId() {
		return _deliberationId;
	}

	@Override
	public void setDeliberationId(long deliberationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deliberationId = deliberationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getAmendement() {
		if (_amendement == null) {
			return "";
		}
		else {
			return _amendement;
		}
	}

	@Override
	public void setAmendement(String amendement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_amendement = amendement;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public int getOrder() {
		return _order;
	}

	@Override
	public void setOrder(int order) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_order = order;
	}

	@JSON
	@Override
	public String getStage() {
		if (_stage == null) {
			return "";
		}
		else {
			return _stage;
		}
	}

	@Override
	public void setStage(String stage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stage = stage;
	}

	@JSON
	@Override
	public int getCountOfficialsVoting() {
		return _countOfficialsVoting;
	}

	@Override
	public void setCountOfficialsVoting(int countOfficialsVoting) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_countOfficialsVoting = countOfficialsVoting;
	}

	@JSON
	@Override
	public int getCountOfficialsActive() {
		return _countOfficialsActive;
	}

	@Override
	public void setCountOfficialsActive(int countOfficialsActive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_countOfficialsActive = countOfficialsActive;
	}

	@JSON
	@Override
	public int getQuorum() {
		return _quorum;
	}

	@Override
	public void setQuorum(int quorum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quorum = quorum;
	}

	@JSON
	@Override
	public Date getBeginningVoteDate() {
		return _beginningVoteDate;
	}

	@Override
	public void setBeginningVoteDate(Date beginningVoteDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_beginningVoteDate = beginningVoteDate;
	}

	@JSON
	@Override
	public Date getEndVoteDate() {
		return _endVoteDate;
	}

	@Override
	public void setEndVoteDate(Date endVoteDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endVoteDate = endVoteDate;
	}

	@JSON
	@Override
	public long getCouncilSessionId() {
		return _councilSessionId;
	}

	@Override
	public void setCouncilSessionId(long councilSessionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_councilSessionId = councilSessionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCouncilSessionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("councilSessionId"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Deliberation.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Deliberation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Deliberation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Deliberation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DeliberationImpl deliberationImpl = new DeliberationImpl();

		deliberationImpl.setUuid(getUuid());
		deliberationImpl.setDeliberationId(getDeliberationId());
		deliberationImpl.setGroupId(getGroupId());
		deliberationImpl.setCompanyId(getCompanyId());
		deliberationImpl.setUserId(getUserId());
		deliberationImpl.setUserName(getUserName());
		deliberationImpl.setCreateDate(getCreateDate());
		deliberationImpl.setModifiedDate(getModifiedDate());
		deliberationImpl.setStatus(getStatus());
		deliberationImpl.setStatusByUserId(getStatusByUserId());
		deliberationImpl.setStatusByUserName(getStatusByUserName());
		deliberationImpl.setStatusDate(getStatusDate());
		deliberationImpl.setAmendement(getAmendement());
		deliberationImpl.setTitle(getTitle());
		deliberationImpl.setOrder(getOrder());
		deliberationImpl.setStage(getStage());
		deliberationImpl.setCountOfficialsVoting(getCountOfficialsVoting());
		deliberationImpl.setCountOfficialsActive(getCountOfficialsActive());
		deliberationImpl.setQuorum(getQuorum());
		deliberationImpl.setBeginningVoteDate(getBeginningVoteDate());
		deliberationImpl.setEndVoteDate(getEndVoteDate());
		deliberationImpl.setCouncilSessionId(getCouncilSessionId());

		deliberationImpl.resetOriginalValues();

		return deliberationImpl;
	}

	@Override
	public Deliberation cloneWithOriginalValues() {
		DeliberationImpl deliberationImpl = new DeliberationImpl();

		deliberationImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		deliberationImpl.setDeliberationId(
			this.<Long>getColumnOriginalValue("deliberationId"));
		deliberationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		deliberationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		deliberationImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		deliberationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		deliberationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		deliberationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		deliberationImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		deliberationImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		deliberationImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		deliberationImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));
		deliberationImpl.setAmendement(
			this.<String>getColumnOriginalValue("amendement"));
		deliberationImpl.setTitle(this.<String>getColumnOriginalValue("title"));
		deliberationImpl.setOrder(
			this.<Integer>getColumnOriginalValue("order_"));
		deliberationImpl.setStage(this.<String>getColumnOriginalValue("stage"));
		deliberationImpl.setCountOfficialsVoting(
			this.<Integer>getColumnOriginalValue("countOfficialsVoting"));
		deliberationImpl.setCountOfficialsActive(
			this.<Integer>getColumnOriginalValue("countOfficialsActive"));
		deliberationImpl.setQuorum(
			this.<Integer>getColumnOriginalValue("quorum"));
		deliberationImpl.setBeginningVoteDate(
			this.<Date>getColumnOriginalValue("beginningVoteDate"));
		deliberationImpl.setEndVoteDate(
			this.<Date>getColumnOriginalValue("endVoteDate"));
		deliberationImpl.setCouncilSessionId(
			this.<Long>getColumnOriginalValue("councilSessionId"));

		return deliberationImpl;
	}

	@Override
	public int compareTo(Deliberation deliberation) {
		int value = 0;

		value = getTitle().compareTo(deliberation.getTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Deliberation)) {
			return false;
		}

		Deliberation deliberation = (Deliberation)object;

		long primaryKey = deliberation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Deliberation> toCacheModel() {
		DeliberationCacheModel deliberationCacheModel =
			new DeliberationCacheModel();

		deliberationCacheModel.uuid = getUuid();

		String uuid = deliberationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			deliberationCacheModel.uuid = null;
		}

		deliberationCacheModel.deliberationId = getDeliberationId();

		deliberationCacheModel.groupId = getGroupId();

		deliberationCacheModel.companyId = getCompanyId();

		deliberationCacheModel.userId = getUserId();

		deliberationCacheModel.userName = getUserName();

		String userName = deliberationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			deliberationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			deliberationCacheModel.createDate = createDate.getTime();
		}
		else {
			deliberationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			deliberationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			deliberationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		deliberationCacheModel.status = getStatus();

		deliberationCacheModel.statusByUserId = getStatusByUserId();

		deliberationCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = deliberationCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			deliberationCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			deliberationCacheModel.statusDate = statusDate.getTime();
		}
		else {
			deliberationCacheModel.statusDate = Long.MIN_VALUE;
		}

		deliberationCacheModel.amendement = getAmendement();

		String amendement = deliberationCacheModel.amendement;

		if ((amendement != null) && (amendement.length() == 0)) {
			deliberationCacheModel.amendement = null;
		}

		deliberationCacheModel.title = getTitle();

		String title = deliberationCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			deliberationCacheModel.title = null;
		}

		deliberationCacheModel.order = getOrder();

		deliberationCacheModel.stage = getStage();

		String stage = deliberationCacheModel.stage;

		if ((stage != null) && (stage.length() == 0)) {
			deliberationCacheModel.stage = null;
		}

		deliberationCacheModel.countOfficialsVoting = getCountOfficialsVoting();

		deliberationCacheModel.countOfficialsActive = getCountOfficialsActive();

		deliberationCacheModel.quorum = getQuorum();

		Date beginningVoteDate = getBeginningVoteDate();

		if (beginningVoteDate != null) {
			deliberationCacheModel.beginningVoteDate =
				beginningVoteDate.getTime();
		}
		else {
			deliberationCacheModel.beginningVoteDate = Long.MIN_VALUE;
		}

		Date endVoteDate = getEndVoteDate();

		if (endVoteDate != null) {
			deliberationCacheModel.endVoteDate = endVoteDate.getTime();
		}
		else {
			deliberationCacheModel.endVoteDate = Long.MIN_VALUE;
		}

		deliberationCacheModel.councilSessionId = getCouncilSessionId();

		return deliberationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Deliberation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Deliberation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Deliberation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Deliberation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Deliberation>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Deliberation.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _deliberationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _amendement;
	private String _title;
	private int _order;
	private String _stage;
	private int _countOfficialsVoting;
	private int _countOfficialsActive;
	private int _quorum;
	private Date _beginningVoteDate;
	private Date _endVoteDate;
	private long _councilSessionId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Deliberation, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Deliberation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("deliberationId", _deliberationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("amendement", _amendement);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("order_", _order);
		_columnOriginalValues.put("stage", _stage);
		_columnOriginalValues.put(
			"countOfficialsVoting", _countOfficialsVoting);
		_columnOriginalValues.put(
			"countOfficialsActive", _countOfficialsActive);
		_columnOriginalValues.put("quorum", _quorum);
		_columnOriginalValues.put("beginningVoteDate", _beginningVoteDate);
		_columnOriginalValues.put("endVoteDate", _endVoteDate);
		_columnOriginalValues.put("councilSessionId", _councilSessionId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("order_", "order");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("deliberationId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("status", 256L);

		columnBitmasks.put("statusByUserId", 512L);

		columnBitmasks.put("statusByUserName", 1024L);

		columnBitmasks.put("statusDate", 2048L);

		columnBitmasks.put("amendement", 4096L);

		columnBitmasks.put("title", 8192L);

		columnBitmasks.put("order_", 16384L);

		columnBitmasks.put("stage", 32768L);

		columnBitmasks.put("countOfficialsVoting", 65536L);

		columnBitmasks.put("countOfficialsActive", 131072L);

		columnBitmasks.put("quorum", 262144L);

		columnBitmasks.put("beginningVoteDate", 524288L);

		columnBitmasks.put("endVoteDate", 1048576L);

		columnBitmasks.put("councilSessionId", 2097152L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Deliberation _escapedModel;

}