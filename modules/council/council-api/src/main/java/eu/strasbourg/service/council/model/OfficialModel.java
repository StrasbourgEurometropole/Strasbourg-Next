/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.council.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedAuditedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the Official service. Represents a row in the &quot;council_Official&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link eu.strasbourg.service.council.model.impl.OfficialModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link eu.strasbourg.service.council.model.impl.OfficialImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Official
 * @see eu.strasbourg.service.council.model.impl.OfficialImpl
 * @see eu.strasbourg.service.council.model.impl.OfficialModelImpl
 * @generated
 */
@ProviderType
public interface OfficialModel extends BaseModel<Official>, GroupedModel,
	ShardedModel, StagedAuditedModel, WorkflowedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a official model instance should use the {@link Official} interface instead.
	 */

	/**
	 * Returns the primary key of this official.
	 *
	 * @return the primary key of this official
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this official.
	 *
	 * @param primaryKey the primary key of this official
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this official.
	 *
	 * @return the uuid of this official
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this official.
	 *
	 * @param uuid the uuid of this official
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the officail ID of this official.
	 *
	 * @return the officail ID of this official
	 */
	public long getOfficailId();

	/**
	 * Sets the officail ID of this official.
	 *
	 * @param officailId the officail ID of this official
	 */
	public void setOfficailId(long officailId);

	/**
	 * Returns the group ID of this official.
	 *
	 * @return the group ID of this official
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this official.
	 *
	 * @param groupId the group ID of this official
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this official.
	 *
	 * @return the company ID of this official
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this official.
	 *
	 * @param companyId the company ID of this official
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this official.
	 *
	 * @return the user ID of this official
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this official.
	 *
	 * @param userId the user ID of this official
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this official.
	 *
	 * @return the user uuid of this official
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this official.
	 *
	 * @param userUuid the user uuid of this official
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this official.
	 *
	 * @return the user name of this official
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this official.
	 *
	 * @param userName the user name of this official
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this official.
	 *
	 * @return the create date of this official
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this official.
	 *
	 * @param createDate the create date of this official
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this official.
	 *
	 * @return the modified date of this official
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this official.
	 *
	 * @param modifiedDate the modified date of this official
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the status of this official.
	 *
	 * @return the status of this official
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this official.
	 *
	 * @param status the status of this official
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this official.
	 *
	 * @return the status by user ID of this official
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this official.
	 *
	 * @param statusByUserId the status by user ID of this official
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this official.
	 *
	 * @return the status by user uuid of this official
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this official.
	 *
	 * @param statusByUserUuid the status by user uuid of this official
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this official.
	 *
	 * @return the status by user name of this official
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this official.
	 *
	 * @param statusByUserName the status by user name of this official
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this official.
	 *
	 * @return the status date of this official
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this official.
	 *
	 * @param statusDate the status date of this official
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the email of this official.
	 *
	 * @return the email of this official
	 */
	@AutoEscape
	public String getEmail();

	/**
	 * Sets the email of this official.
	 *
	 * @param email the email of this official
	 */
	public void setEmail(String email);

	/**
	 * Returns the firstname of this official.
	 *
	 * @return the firstname of this official
	 */
	@AutoEscape
	public String getFirstname();

	/**
	 * Sets the firstname of this official.
	 *
	 * @param firstname the firstname of this official
	 */
	public void setFirstname(String firstname);

	/**
	 * Returns the lastname of this official.
	 *
	 * @return the lastname of this official
	 */
	@AutoEscape
	public String getLastname();

	/**
	 * Sets the lastname of this official.
	 *
	 * @param lastname the lastname of this official
	 */
	public void setLastname(String lastname);

	/**
	 * Returns the is ems of this official.
	 *
	 * @return the is ems of this official
	 */
	public boolean getIsEms();

	/**
	 * Returns <code>true</code> if this official is is ems.
	 *
	 * @return <code>true</code> if this official is is ems; <code>false</code> otherwise
	 */
	public boolean isIsEms();

	/**
	 * Sets whether this official is is ems.
	 *
	 * @param isEms the is ems of this official
	 */
	public void setIsEms(boolean isEms);

	/**
	 * Returns the is eurometropolitan of this official.
	 *
	 * @return the is eurometropolitan of this official
	 */
	public boolean getIsEurometropolitan();

	/**
	 * Returns <code>true</code> if this official is is eurometropolitan.
	 *
	 * @return <code>true</code> if this official is is eurometropolitan; <code>false</code> otherwise
	 */
	public boolean isIsEurometropolitan();

	/**
	 * Sets whether this official is is eurometropolitan.
	 *
	 * @param isEurometropolitan the is eurometropolitan of this official
	 */
	public void setIsEurometropolitan(boolean isEurometropolitan);

	/**
	 * Returns the is active of this official.
	 *
	 * @return the is active of this official
	 */
	public boolean getIsActive();

	/**
	 * Returns <code>true</code> if this official is is active.
	 *
	 * @return <code>true</code> if this official is is active; <code>false</code> otherwise
	 */
	public boolean isIsActive();

	/**
	 * Sets whether this official is is active.
	 *
	 * @param isActive the is active of this official
	 */
	public void setIsActive(boolean isActive);

	/**
	 * Returns <code>true</code> if this official is approved.
	 *
	 * @return <code>true</code> if this official is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this official is denied.
	 *
	 * @return <code>true</code> if this official is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this official is a draft.
	 *
	 * @return <code>true</code> if this official is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this official is expired.
	 *
	 * @return <code>true</code> if this official is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this official is inactive.
	 *
	 * @return <code>true</code> if this official is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this official is incomplete.
	 *
	 * @return <code>true</code> if this official is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this official is pending.
	 *
	 * @return <code>true</code> if this official is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this official is scheduled.
	 *
	 * @return <code>true</code> if this official is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(eu.strasbourg.service.council.model.Official official);

	@Override
	public int hashCode();

	@Override
	public CacheModel<eu.strasbourg.service.council.model.Official> toCacheModel();

	@Override
	public eu.strasbourg.service.council.model.Official toEscapedModel();

	@Override
	public eu.strasbourg.service.council.model.Official toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}