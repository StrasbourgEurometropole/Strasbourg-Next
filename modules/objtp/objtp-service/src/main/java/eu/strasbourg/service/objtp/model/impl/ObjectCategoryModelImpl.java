/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.objtp.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import eu.strasbourg.service.objtp.model.ObjectCategory;
import eu.strasbourg.service.objtp.model.ObjectCategoryModel;
import eu.strasbourg.service.objtp.model.ObjectCategorySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ObjectCategory service. Represents a row in the &quot;objtp_ObjectCategory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ObjectCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ObjectCategoryImpl}.
 * </p>
 *
 * @author JeremyZwickert
 * @see ObjectCategoryImpl
 * @see ObjectCategory
 * @see ObjectCategoryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ObjectCategoryModelImpl extends BaseModelImpl<ObjectCategory>
	implements ObjectCategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a object category model instance should use the {@link ObjectCategory} interface instead.
	 */
	public static final String TABLE_NAME = "objtp_ObjectCategory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "code_", Types.VARCHAR },
			{ "name", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("code_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table objtp_ObjectCategory (code_ VARCHAR(75) not null primary key,name VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table objtp_ObjectCategory";
	public static final String ORDER_BY_JPQL = " ORDER BY objectCategory.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY objtp_ObjectCategory.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.objtp.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.objtp.model.ObjectCategory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.objtp.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.objtp.model.ObjectCategory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ObjectCategory toModel(ObjectCategorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ObjectCategory model = new ObjectCategoryImpl();

		model.setCode(soapModel.getCode());
		model.setName(soapModel.getName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ObjectCategory> toModels(ObjectCategorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ObjectCategory> models = new ArrayList<ObjectCategory>(soapModels.length);

		for (ObjectCategorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.objtp.service.util.ServiceProps.get(
				"lock.expiration.time.eu.strasbourg.service.objtp.model.ObjectCategory"));

	public ObjectCategoryModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _code;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setCode(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _code;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ObjectCategory.class;
	}

	@Override
	public String getModelClassName() {
		return ObjectCategory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("code", getCode());
		attributes.put("name", getName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_code = code;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public ObjectCategory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ObjectCategory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ObjectCategoryImpl objectCategoryImpl = new ObjectCategoryImpl();

		objectCategoryImpl.setCode(getCode());
		objectCategoryImpl.setName(getName());

		objectCategoryImpl.resetOriginalValues();

		return objectCategoryImpl;
	}

	@Override
	public int compareTo(ObjectCategory objectCategory) {
		int value = 0;

		value = getName().compareTo(objectCategory.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ObjectCategory)) {
			return false;
		}

		ObjectCategory objectCategory = (ObjectCategory)obj;

		String primaryKey = objectCategory.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ObjectCategory> toCacheModel() {
		ObjectCategoryCacheModel objectCategoryCacheModel = new ObjectCategoryCacheModel();

		objectCategoryCacheModel.code = getCode();

		String code = objectCategoryCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			objectCategoryCacheModel.code = null;
		}

		objectCategoryCacheModel.name = getName();

		String name = objectCategoryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			objectCategoryCacheModel.name = null;
		}

		return objectCategoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{code=");
		sb.append(getCode());
		sb.append(", name=");
		sb.append(getName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.objtp.model.ObjectCategory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ObjectCategory.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ObjectCategory.class
		};
	private String _code;
	private String _name;
	private ObjectCategory _escapedModel;
}