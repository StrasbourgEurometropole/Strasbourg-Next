/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.objtp.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import eu.strasbourg.service.objtp.model.FoundObject;
import eu.strasbourg.service.objtp.model.FoundObjectModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FoundObject service. Represents a row in the &quot;objtp_FoundObject&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FoundObjectModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FoundObjectImpl}.
 * </p>
 *
 * @author JeremyZwickert
 * @see FoundObjectImpl
 * @generated
 */
@JSON(strict = true)
public class FoundObjectModelImpl
	extends BaseModelImpl<FoundObject> implements FoundObjectModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a found object model instance should use the <code>FoundObject</code> interface instead.
	 */
	public static final String TABLE_NAME = "objtp_FoundObject";

	public static final Object[][] TABLE_COLUMNS = {
		{"number_", Types.VARCHAR}, {"date_", Types.TIMESTAMP},
		{"imageUrl", Types.VARCHAR}, {"categoryCode", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("number_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("imageUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoryCode", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table objtp_FoundObject (number_ VARCHAR(75) not null primary key,date_ DATE null,imageUrl VARCHAR(75) null,categoryCode VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table objtp_FoundObject";

	public static final String ORDER_BY_JPQL = " ORDER BY foundObject.date ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY objtp_FoundObject.date_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CATEGORYCODE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DATE_COLUMN_BITMASK = 2L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.objtp.service.util.ServiceProps.get(
			"lock.expiration.time.eu.strasbourg.service.objtp.model.FoundObject"));

	public FoundObjectModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _number;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setNumber(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _number;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return FoundObject.class;
	}

	@Override
	public String getModelClassName() {
		return FoundObject.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FoundObject, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FoundObject, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FoundObject, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FoundObject)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FoundObject, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FoundObject, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FoundObject)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FoundObject, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FoundObject, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<FoundObject, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FoundObject, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FoundObject, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<FoundObject, Object>>();
		Map<String, BiConsumer<FoundObject, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FoundObject, ?>>();

		attributeGetterFunctions.put("number", FoundObject::getNumber);
		attributeSetterBiConsumers.put(
			"number", (BiConsumer<FoundObject, String>)FoundObject::setNumber);
		attributeGetterFunctions.put("date", FoundObject::getDate);
		attributeSetterBiConsumers.put(
			"date", (BiConsumer<FoundObject, Date>)FoundObject::setDate);
		attributeGetterFunctions.put("imageUrl", FoundObject::getImageUrl);
		attributeSetterBiConsumers.put(
			"imageUrl",
			(BiConsumer<FoundObject, String>)FoundObject::setImageUrl);
		attributeGetterFunctions.put(
			"categoryCode", FoundObject::getCategoryCode);
		attributeSetterBiConsumers.put(
			"categoryCode",
			(BiConsumer<FoundObject, String>)FoundObject::setCategoryCode);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getNumber() {
		if (_number == null) {
			return "";
		}
		else {
			return _number;
		}
	}

	@Override
	public void setNumber(String number) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_number = number;
	}

	@JSON
	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_date = date;
	}

	@JSON
	@Override
	public String getImageUrl() {
		if (_imageUrl == null) {
			return "";
		}
		else {
			return _imageUrl;
		}
	}

	@Override
	public void setImageUrl(String imageUrl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_imageUrl = imageUrl;
	}

	@JSON
	@Override
	public String getCategoryCode() {
		if (_categoryCode == null) {
			return "";
		}
		else {
			return _categoryCode;
		}
	}

	@Override
	public void setCategoryCode(String categoryCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryCode = categoryCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCategoryCode() {
		return getColumnOriginalValue("categoryCode");
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public FoundObject toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FoundObject>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FoundObjectImpl foundObjectImpl = new FoundObjectImpl();

		foundObjectImpl.setNumber(getNumber());
		foundObjectImpl.setDate(getDate());
		foundObjectImpl.setImageUrl(getImageUrl());
		foundObjectImpl.setCategoryCode(getCategoryCode());

		foundObjectImpl.resetOriginalValues();

		return foundObjectImpl;
	}

	@Override
	public FoundObject cloneWithOriginalValues() {
		FoundObjectImpl foundObjectImpl = new FoundObjectImpl();

		foundObjectImpl.setNumber(
			this.<String>getColumnOriginalValue("number_"));
		foundObjectImpl.setDate(this.<Date>getColumnOriginalValue("date_"));
		foundObjectImpl.setImageUrl(
			this.<String>getColumnOriginalValue("imageUrl"));
		foundObjectImpl.setCategoryCode(
			this.<String>getColumnOriginalValue("categoryCode"));

		return foundObjectImpl;
	}

	@Override
	public int compareTo(FoundObject foundObject) {
		int value = 0;

		value = DateUtil.compareTo(getDate(), foundObject.getDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FoundObject)) {
			return false;
		}

		FoundObject foundObject = (FoundObject)object;

		String primaryKey = foundObject.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FoundObject> toCacheModel() {
		FoundObjectCacheModel foundObjectCacheModel =
			new FoundObjectCacheModel();

		foundObjectCacheModel.number = getNumber();

		String number = foundObjectCacheModel.number;

		if ((number != null) && (number.length() == 0)) {
			foundObjectCacheModel.number = null;
		}

		Date date = getDate();

		if (date != null) {
			foundObjectCacheModel.date = date.getTime();
		}
		else {
			foundObjectCacheModel.date = Long.MIN_VALUE;
		}

		foundObjectCacheModel.imageUrl = getImageUrl();

		String imageUrl = foundObjectCacheModel.imageUrl;

		if ((imageUrl != null) && (imageUrl.length() == 0)) {
			foundObjectCacheModel.imageUrl = null;
		}

		foundObjectCacheModel.categoryCode = getCategoryCode();

		String categoryCode = foundObjectCacheModel.categoryCode;

		if ((categoryCode != null) && (categoryCode.length() == 0)) {
			foundObjectCacheModel.categoryCode = null;
		}

		return foundObjectCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FoundObject, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FoundObject, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FoundObject, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FoundObject)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FoundObject>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FoundObject.class, ModelWrapper.class);

	}

	private String _number;
	private Date _date;
	private String _imageUrl;
	private String _categoryCode;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<FoundObject, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FoundObject)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("number_", _number);
		_columnOriginalValues.put("date_", _date);
		_columnOriginalValues.put("imageUrl", _imageUrl);
		_columnOriginalValues.put("categoryCode", _categoryCode);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("number_", "number");
		attributeNames.put("date_", "date");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("number_", 1L);

		columnBitmasks.put("date_", 2L);

		columnBitmasks.put("imageUrl", 4L);

		columnBitmasks.put("categoryCode", 8L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FoundObject _escapedModel;

}