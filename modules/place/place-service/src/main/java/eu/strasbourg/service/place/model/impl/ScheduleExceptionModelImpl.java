/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.place.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;

import eu.strasbourg.service.place.model.ScheduleException;
import eu.strasbourg.service.place.model.ScheduleExceptionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the ScheduleException service. Represents a row in the &quot;place_ScheduleException&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ScheduleExceptionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ScheduleExceptionImpl}.
 * </p>
 *
 * @author Angelique Zunino Champougny
 * @see ScheduleExceptionImpl
 * @see ScheduleException
 * @see ScheduleExceptionModel
 * @generated
 */
@ProviderType
public class ScheduleExceptionModelImpl extends BaseModelImpl<ScheduleException>
	implements ScheduleExceptionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a schedule exception model instance should use the {@link ScheduleException} interface instead.
	 */
	public static final String TABLE_NAME = "place_ScheduleException";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "exceptionId", Types.BIGINT },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "openingTimes", Types.VARCHAR },
			{ "firstComment", Types.VARCHAR },
			{ "secondComment", Types.VARCHAR },
			{ "thirdComment", Types.VARCHAR },
			{ "fourthComment", Types.VARCHAR },
			{ "fifthComment", Types.VARCHAR },
			{ "comment_", Types.VARCHAR },
			{ "closed", Types.BOOLEAN },
			{ "placeId", Types.BIGINT },
			{ "subPlaceId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("exceptionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("openingTimes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thirdComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fourthComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fifthComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comment_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("closed", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("placeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("subPlaceId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table place_ScheduleException (uuid_ VARCHAR(75) null,exceptionId LONG not null primary key,startDate DATE null,endDate DATE null,openingTimes VARCHAR(75) null,firstComment STRING null,secondComment STRING null,thirdComment STRING null,fourthComment STRING null,fifthComment STRING null,comment_ STRING null,closed BOOLEAN,placeId LONG,subPlaceId LONG)";
	public static final String TABLE_SQL_DROP = "drop table place_ScheduleException";
	public static final String ORDER_BY_JPQL = " ORDER BY scheduleException.exceptionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY place_ScheduleException.exceptionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.place.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.place.model.ScheduleException"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.place.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.place.model.ScheduleException"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.place.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.place.model.ScheduleException"),
			true);
	public static final long PLACEID_COLUMN_BITMASK = 1L;
	public static final long SUBPLACEID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long EXCEPTIONID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.place.service.util.PropsUtil.get(
				"lock.expiration.time.eu.strasbourg.service.place.model.ScheduleException"));

	public ScheduleExceptionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _exceptionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExceptionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _exceptionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ScheduleException.class;
	}

	@Override
	public String getModelClassName() {
		return ScheduleException.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("exceptionId", getExceptionId());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("openingTimes", getOpeningTimes());
		attributes.put("firstComment", getFirstComment());
		attributes.put("secondComment", getSecondComment());
		attributes.put("thirdComment", getThirdComment());
		attributes.put("fourthComment", getFourthComment());
		attributes.put("fifthComment", getFifthComment());
		attributes.put("comment", getComment());
		attributes.put("closed", getClosed());
		attributes.put("placeId", getPlaceId());
		attributes.put("subPlaceId", getSubPlaceId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long exceptionId = (Long)attributes.get("exceptionId");

		if (exceptionId != null) {
			setExceptionId(exceptionId);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		String openingTimes = (String)attributes.get("openingTimes");

		if (openingTimes != null) {
			setOpeningTimes(openingTimes);
		}

		String firstComment = (String)attributes.get("firstComment");

		if (firstComment != null) {
			setFirstComment(firstComment);
		}

		String secondComment = (String)attributes.get("secondComment");

		if (secondComment != null) {
			setSecondComment(secondComment);
		}

		String thirdComment = (String)attributes.get("thirdComment");

		if (thirdComment != null) {
			setThirdComment(thirdComment);
		}

		String fourthComment = (String)attributes.get("fourthComment");

		if (fourthComment != null) {
			setFourthComment(fourthComment);
		}

		String fifthComment = (String)attributes.get("fifthComment");

		if (fifthComment != null) {
			setFifthComment(fifthComment);
		}

		String comment = (String)attributes.get("comment");

		if (comment != null) {
			setComment(comment);
		}

		Boolean closed = (Boolean)attributes.get("closed");

		if (closed != null) {
			setClosed(closed);
		}

		Long placeId = (Long)attributes.get("placeId");

		if (placeId != null) {
			setPlaceId(placeId);
		}

		Long subPlaceId = (Long)attributes.get("subPlaceId");

		if (subPlaceId != null) {
			setSubPlaceId(subPlaceId);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getExceptionId() {
		return _exceptionId;
	}

	@Override
	public void setExceptionId(long exceptionId) {
		_exceptionId = exceptionId;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public String getOpeningTimes() {
		if (_openingTimes == null) {
			return StringPool.BLANK;
		}
		else {
			return _openingTimes;
		}
	}

	@Override
	public void setOpeningTimes(String openingTimes) {
		_openingTimes = openingTimes;
	}

	@Override
	public String getFirstComment() {
		if (_firstComment == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstComment;
		}
	}

	@Override
	public String getFirstComment(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFirstComment(languageId);
	}

	@Override
	public String getFirstComment(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFirstComment(languageId, useDefault);
	}

	@Override
	public String getFirstComment(String languageId) {
		return LocalizationUtil.getLocalization(getFirstComment(), languageId);
	}

	@Override
	public String getFirstComment(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getFirstComment(), languageId,
			useDefault);
	}

	@Override
	public String getFirstCommentCurrentLanguageId() {
		return _firstCommentCurrentLanguageId;
	}

	@JSON
	@Override
	public String getFirstCommentCurrentValue() {
		Locale locale = getLocale(_firstCommentCurrentLanguageId);

		return getFirstComment(locale);
	}

	@Override
	public Map<Locale, String> getFirstCommentMap() {
		return LocalizationUtil.getLocalizationMap(getFirstComment());
	}

	@Override
	public void setFirstComment(String firstComment) {
		_firstComment = firstComment;
	}

	@Override
	public void setFirstComment(String firstComment, Locale locale) {
		setFirstComment(firstComment, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setFirstComment(String firstComment, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(firstComment)) {
			setFirstComment(LocalizationUtil.updateLocalization(
					getFirstComment(), "FirstComment", firstComment,
					languageId, defaultLanguageId));
		}
		else {
			setFirstComment(LocalizationUtil.removeLocalization(
					getFirstComment(), "FirstComment", languageId));
		}
	}

	@Override
	public void setFirstCommentCurrentLanguageId(String languageId) {
		_firstCommentCurrentLanguageId = languageId;
	}

	@Override
	public void setFirstCommentMap(Map<Locale, String> firstCommentMap) {
		setFirstCommentMap(firstCommentMap, LocaleUtil.getDefault());
	}

	@Override
	public void setFirstCommentMap(Map<Locale, String> firstCommentMap,
		Locale defaultLocale) {
		if (firstCommentMap == null) {
			return;
		}

		setFirstComment(LocalizationUtil.updateLocalization(firstCommentMap,
				getFirstComment(), "FirstComment",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getSecondComment() {
		if (_secondComment == null) {
			return StringPool.BLANK;
		}
		else {
			return _secondComment;
		}
	}

	@Override
	public String getSecondComment(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSecondComment(languageId);
	}

	@Override
	public String getSecondComment(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSecondComment(languageId, useDefault);
	}

	@Override
	public String getSecondComment(String languageId) {
		return LocalizationUtil.getLocalization(getSecondComment(), languageId);
	}

	@Override
	public String getSecondComment(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getSecondComment(), languageId,
			useDefault);
	}

	@Override
	public String getSecondCommentCurrentLanguageId() {
		return _secondCommentCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSecondCommentCurrentValue() {
		Locale locale = getLocale(_secondCommentCurrentLanguageId);

		return getSecondComment(locale);
	}

	@Override
	public Map<Locale, String> getSecondCommentMap() {
		return LocalizationUtil.getLocalizationMap(getSecondComment());
	}

	@Override
	public void setSecondComment(String secondComment) {
		_secondComment = secondComment;
	}

	@Override
	public void setSecondComment(String secondComment, Locale locale) {
		setSecondComment(secondComment, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setSecondComment(String secondComment, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(secondComment)) {
			setSecondComment(LocalizationUtil.updateLocalization(
					getSecondComment(), "SecondComment", secondComment,
					languageId, defaultLanguageId));
		}
		else {
			setSecondComment(LocalizationUtil.removeLocalization(
					getSecondComment(), "SecondComment", languageId));
		}
	}

	@Override
	public void setSecondCommentCurrentLanguageId(String languageId) {
		_secondCommentCurrentLanguageId = languageId;
	}

	@Override
	public void setSecondCommentMap(Map<Locale, String> secondCommentMap) {
		setSecondCommentMap(secondCommentMap, LocaleUtil.getDefault());
	}

	@Override
	public void setSecondCommentMap(Map<Locale, String> secondCommentMap,
		Locale defaultLocale) {
		if (secondCommentMap == null) {
			return;
		}

		setSecondComment(LocalizationUtil.updateLocalization(secondCommentMap,
				getSecondComment(), "SecondComment",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getThirdComment() {
		if (_thirdComment == null) {
			return StringPool.BLANK;
		}
		else {
			return _thirdComment;
		}
	}

	@Override
	public String getThirdComment(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getThirdComment(languageId);
	}

	@Override
	public String getThirdComment(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getThirdComment(languageId, useDefault);
	}

	@Override
	public String getThirdComment(String languageId) {
		return LocalizationUtil.getLocalization(getThirdComment(), languageId);
	}

	@Override
	public String getThirdComment(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getThirdComment(), languageId,
			useDefault);
	}

	@Override
	public String getThirdCommentCurrentLanguageId() {
		return _thirdCommentCurrentLanguageId;
	}

	@JSON
	@Override
	public String getThirdCommentCurrentValue() {
		Locale locale = getLocale(_thirdCommentCurrentLanguageId);

		return getThirdComment(locale);
	}

	@Override
	public Map<Locale, String> getThirdCommentMap() {
		return LocalizationUtil.getLocalizationMap(getThirdComment());
	}

	@Override
	public void setThirdComment(String thirdComment) {
		_thirdComment = thirdComment;
	}

	@Override
	public void setThirdComment(String thirdComment, Locale locale) {
		setThirdComment(thirdComment, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setThirdComment(String thirdComment, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(thirdComment)) {
			setThirdComment(LocalizationUtil.updateLocalization(
					getThirdComment(), "ThirdComment", thirdComment,
					languageId, defaultLanguageId));
		}
		else {
			setThirdComment(LocalizationUtil.removeLocalization(
					getThirdComment(), "ThirdComment", languageId));
		}
	}

	@Override
	public void setThirdCommentCurrentLanguageId(String languageId) {
		_thirdCommentCurrentLanguageId = languageId;
	}

	@Override
	public void setThirdCommentMap(Map<Locale, String> thirdCommentMap) {
		setThirdCommentMap(thirdCommentMap, LocaleUtil.getDefault());
	}

	@Override
	public void setThirdCommentMap(Map<Locale, String> thirdCommentMap,
		Locale defaultLocale) {
		if (thirdCommentMap == null) {
			return;
		}

		setThirdComment(LocalizationUtil.updateLocalization(thirdCommentMap,
				getThirdComment(), "ThirdComment",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getFourthComment() {
		if (_fourthComment == null) {
			return StringPool.BLANK;
		}
		else {
			return _fourthComment;
		}
	}

	@Override
	public String getFourthComment(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFourthComment(languageId);
	}

	@Override
	public String getFourthComment(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFourthComment(languageId, useDefault);
	}

	@Override
	public String getFourthComment(String languageId) {
		return LocalizationUtil.getLocalization(getFourthComment(), languageId);
	}

	@Override
	public String getFourthComment(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getFourthComment(), languageId,
			useDefault);
	}

	@Override
	public String getFourthCommentCurrentLanguageId() {
		return _fourthCommentCurrentLanguageId;
	}

	@JSON
	@Override
	public String getFourthCommentCurrentValue() {
		Locale locale = getLocale(_fourthCommentCurrentLanguageId);

		return getFourthComment(locale);
	}

	@Override
	public Map<Locale, String> getFourthCommentMap() {
		return LocalizationUtil.getLocalizationMap(getFourthComment());
	}

	@Override
	public void setFourthComment(String fourthComment) {
		_fourthComment = fourthComment;
	}

	@Override
	public void setFourthComment(String fourthComment, Locale locale) {
		setFourthComment(fourthComment, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setFourthComment(String fourthComment, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(fourthComment)) {
			setFourthComment(LocalizationUtil.updateLocalization(
					getFourthComment(), "FourthComment", fourthComment,
					languageId, defaultLanguageId));
		}
		else {
			setFourthComment(LocalizationUtil.removeLocalization(
					getFourthComment(), "FourthComment", languageId));
		}
	}

	@Override
	public void setFourthCommentCurrentLanguageId(String languageId) {
		_fourthCommentCurrentLanguageId = languageId;
	}

	@Override
	public void setFourthCommentMap(Map<Locale, String> fourthCommentMap) {
		setFourthCommentMap(fourthCommentMap, LocaleUtil.getDefault());
	}

	@Override
	public void setFourthCommentMap(Map<Locale, String> fourthCommentMap,
		Locale defaultLocale) {
		if (fourthCommentMap == null) {
			return;
		}

		setFourthComment(LocalizationUtil.updateLocalization(fourthCommentMap,
				getFourthComment(), "FourthComment",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getFifthComment() {
		if (_fifthComment == null) {
			return StringPool.BLANK;
		}
		else {
			return _fifthComment;
		}
	}

	@Override
	public String getFifthComment(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFifthComment(languageId);
	}

	@Override
	public String getFifthComment(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFifthComment(languageId, useDefault);
	}

	@Override
	public String getFifthComment(String languageId) {
		return LocalizationUtil.getLocalization(getFifthComment(), languageId);
	}

	@Override
	public String getFifthComment(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getFifthComment(), languageId,
			useDefault);
	}

	@Override
	public String getFifthCommentCurrentLanguageId() {
		return _fifthCommentCurrentLanguageId;
	}

	@JSON
	@Override
	public String getFifthCommentCurrentValue() {
		Locale locale = getLocale(_fifthCommentCurrentLanguageId);

		return getFifthComment(locale);
	}

	@Override
	public Map<Locale, String> getFifthCommentMap() {
		return LocalizationUtil.getLocalizationMap(getFifthComment());
	}

	@Override
	public void setFifthComment(String fifthComment) {
		_fifthComment = fifthComment;
	}

	@Override
	public void setFifthComment(String fifthComment, Locale locale) {
		setFifthComment(fifthComment, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setFifthComment(String fifthComment, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(fifthComment)) {
			setFifthComment(LocalizationUtil.updateLocalization(
					getFifthComment(), "FifthComment", fifthComment,
					languageId, defaultLanguageId));
		}
		else {
			setFifthComment(LocalizationUtil.removeLocalization(
					getFifthComment(), "FifthComment", languageId));
		}
	}

	@Override
	public void setFifthCommentCurrentLanguageId(String languageId) {
		_fifthCommentCurrentLanguageId = languageId;
	}

	@Override
	public void setFifthCommentMap(Map<Locale, String> fifthCommentMap) {
		setFifthCommentMap(fifthCommentMap, LocaleUtil.getDefault());
	}

	@Override
	public void setFifthCommentMap(Map<Locale, String> fifthCommentMap,
		Locale defaultLocale) {
		if (fifthCommentMap == null) {
			return;
		}

		setFifthComment(LocalizationUtil.updateLocalization(fifthCommentMap,
				getFifthComment(), "FifthComment",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getComment() {
		if (_comment == null) {
			return StringPool.BLANK;
		}
		else {
			return _comment;
		}
	}

	@Override
	public String getComment(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getComment(languageId);
	}

	@Override
	public String getComment(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getComment(languageId, useDefault);
	}

	@Override
	public String getComment(String languageId) {
		return LocalizationUtil.getLocalization(getComment(), languageId);
	}

	@Override
	public String getComment(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getComment(), languageId,
			useDefault);
	}

	@Override
	public String getCommentCurrentLanguageId() {
		return _commentCurrentLanguageId;
	}

	@JSON
	@Override
	public String getCommentCurrentValue() {
		Locale locale = getLocale(_commentCurrentLanguageId);

		return getComment(locale);
	}

	@Override
	public Map<Locale, String> getCommentMap() {
		return LocalizationUtil.getLocalizationMap(getComment());
	}

	@Override
	public void setComment(String comment) {
		_comment = comment;
	}

	@Override
	public void setComment(String comment, Locale locale) {
		setComment(comment, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setComment(String comment, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(comment)) {
			setComment(LocalizationUtil.updateLocalization(getComment(),
					"Comment", comment, languageId, defaultLanguageId));
		}
		else {
			setComment(LocalizationUtil.removeLocalization(getComment(),
					"Comment", languageId));
		}
	}

	@Override
	public void setCommentCurrentLanguageId(String languageId) {
		_commentCurrentLanguageId = languageId;
	}

	@Override
	public void setCommentMap(Map<Locale, String> commentMap) {
		setCommentMap(commentMap, LocaleUtil.getDefault());
	}

	@Override
	public void setCommentMap(Map<Locale, String> commentMap,
		Locale defaultLocale) {
		if (commentMap == null) {
			return;
		}

		setComment(LocalizationUtil.updateLocalization(commentMap,
				getComment(), "Comment", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public boolean getClosed() {
		return _closed;
	}

	@Override
	public boolean isClosed() {
		return _closed;
	}

	@Override
	public void setClosed(boolean closed) {
		_closed = closed;
	}

	@Override
	public long getPlaceId() {
		return _placeId;
	}

	@Override
	public void setPlaceId(long placeId) {
		_columnBitmask |= PLACEID_COLUMN_BITMASK;

		if (!_setOriginalPlaceId) {
			_setOriginalPlaceId = true;

			_originalPlaceId = _placeId;
		}

		_placeId = placeId;
	}

	public long getOriginalPlaceId() {
		return _originalPlaceId;
	}

	@Override
	public long getSubPlaceId() {
		return _subPlaceId;
	}

	@Override
	public void setSubPlaceId(long subPlaceId) {
		_columnBitmask |= SUBPLACEID_COLUMN_BITMASK;

		if (!_setOriginalSubPlaceId) {
			_setOriginalSubPlaceId = true;

			_originalSubPlaceId = _subPlaceId;
		}

		_subPlaceId = subPlaceId;
	}

	public long getOriginalSubPlaceId() {
		return _originalSubPlaceId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ScheduleException.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> firstCommentMap = getFirstCommentMap();

		for (Map.Entry<Locale, String> entry : firstCommentMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> secondCommentMap = getSecondCommentMap();

		for (Map.Entry<Locale, String> entry : secondCommentMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> thirdCommentMap = getThirdCommentMap();

		for (Map.Entry<Locale, String> entry : thirdCommentMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> fourthCommentMap = getFourthCommentMap();

		for (Map.Entry<Locale, String> entry : fourthCommentMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> fifthCommentMap = getFifthCommentMap();

		for (Map.Entry<Locale, String> entry : fifthCommentMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> commentMap = getCommentMap();

		for (Map.Entry<Locale, String> entry : commentMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getFirstComment();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(ScheduleException.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String firstComment = getFirstComment(defaultLocale);

		if (Validator.isNull(firstComment)) {
			setFirstComment(getFirstComment(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setFirstComment(getFirstComment(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String secondComment = getSecondComment(defaultLocale);

		if (Validator.isNull(secondComment)) {
			setSecondComment(getSecondComment(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setSecondComment(getSecondComment(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String thirdComment = getThirdComment(defaultLocale);

		if (Validator.isNull(thirdComment)) {
			setThirdComment(getThirdComment(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setThirdComment(getThirdComment(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String fourthComment = getFourthComment(defaultLocale);

		if (Validator.isNull(fourthComment)) {
			setFourthComment(getFourthComment(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setFourthComment(getFourthComment(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String fifthComment = getFifthComment(defaultLocale);

		if (Validator.isNull(fifthComment)) {
			setFifthComment(getFifthComment(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setFifthComment(getFifthComment(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String comment = getComment(defaultLocale);

		if (Validator.isNull(comment)) {
			setComment(getComment(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setComment(getComment(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public ScheduleException toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ScheduleException)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ScheduleExceptionImpl scheduleExceptionImpl = new ScheduleExceptionImpl();

		scheduleExceptionImpl.setUuid(getUuid());
		scheduleExceptionImpl.setExceptionId(getExceptionId());
		scheduleExceptionImpl.setStartDate(getStartDate());
		scheduleExceptionImpl.setEndDate(getEndDate());
		scheduleExceptionImpl.setOpeningTimes(getOpeningTimes());
		scheduleExceptionImpl.setFirstComment(getFirstComment());
		scheduleExceptionImpl.setSecondComment(getSecondComment());
		scheduleExceptionImpl.setThirdComment(getThirdComment());
		scheduleExceptionImpl.setFourthComment(getFourthComment());
		scheduleExceptionImpl.setFifthComment(getFifthComment());
		scheduleExceptionImpl.setComment(getComment());
		scheduleExceptionImpl.setClosed(getClosed());
		scheduleExceptionImpl.setPlaceId(getPlaceId());
		scheduleExceptionImpl.setSubPlaceId(getSubPlaceId());

		scheduleExceptionImpl.resetOriginalValues();

		return scheduleExceptionImpl;
	}

	@Override
	public int compareTo(ScheduleException scheduleException) {
		long primaryKey = scheduleException.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ScheduleException)) {
			return false;
		}

		ScheduleException scheduleException = (ScheduleException)obj;

		long primaryKey = scheduleException.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ScheduleExceptionModelImpl scheduleExceptionModelImpl = this;

		scheduleExceptionModelImpl._originalUuid = scheduleExceptionModelImpl._uuid;

		scheduleExceptionModelImpl._originalPlaceId = scheduleExceptionModelImpl._placeId;

		scheduleExceptionModelImpl._setOriginalPlaceId = false;

		scheduleExceptionModelImpl._originalSubPlaceId = scheduleExceptionModelImpl._subPlaceId;

		scheduleExceptionModelImpl._setOriginalSubPlaceId = false;

		scheduleExceptionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ScheduleException> toCacheModel() {
		ScheduleExceptionCacheModel scheduleExceptionCacheModel = new ScheduleExceptionCacheModel();

		scheduleExceptionCacheModel.uuid = getUuid();

		String uuid = scheduleExceptionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			scheduleExceptionCacheModel.uuid = null;
		}

		scheduleExceptionCacheModel.exceptionId = getExceptionId();

		Date startDate = getStartDate();

		if (startDate != null) {
			scheduleExceptionCacheModel.startDate = startDate.getTime();
		}
		else {
			scheduleExceptionCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			scheduleExceptionCacheModel.endDate = endDate.getTime();
		}
		else {
			scheduleExceptionCacheModel.endDate = Long.MIN_VALUE;
		}

		scheduleExceptionCacheModel.openingTimes = getOpeningTimes();

		String openingTimes = scheduleExceptionCacheModel.openingTimes;

		if ((openingTimes != null) && (openingTimes.length() == 0)) {
			scheduleExceptionCacheModel.openingTimes = null;
		}

		scheduleExceptionCacheModel.firstComment = getFirstComment();

		String firstComment = scheduleExceptionCacheModel.firstComment;

		if ((firstComment != null) && (firstComment.length() == 0)) {
			scheduleExceptionCacheModel.firstComment = null;
		}

		scheduleExceptionCacheModel.secondComment = getSecondComment();

		String secondComment = scheduleExceptionCacheModel.secondComment;

		if ((secondComment != null) && (secondComment.length() == 0)) {
			scheduleExceptionCacheModel.secondComment = null;
		}

		scheduleExceptionCacheModel.thirdComment = getThirdComment();

		String thirdComment = scheduleExceptionCacheModel.thirdComment;

		if ((thirdComment != null) && (thirdComment.length() == 0)) {
			scheduleExceptionCacheModel.thirdComment = null;
		}

		scheduleExceptionCacheModel.fourthComment = getFourthComment();

		String fourthComment = scheduleExceptionCacheModel.fourthComment;

		if ((fourthComment != null) && (fourthComment.length() == 0)) {
			scheduleExceptionCacheModel.fourthComment = null;
		}

		scheduleExceptionCacheModel.fifthComment = getFifthComment();

		String fifthComment = scheduleExceptionCacheModel.fifthComment;

		if ((fifthComment != null) && (fifthComment.length() == 0)) {
			scheduleExceptionCacheModel.fifthComment = null;
		}

		scheduleExceptionCacheModel.comment = getComment();

		String comment = scheduleExceptionCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			scheduleExceptionCacheModel.comment = null;
		}

		scheduleExceptionCacheModel.closed = getClosed();

		scheduleExceptionCacheModel.placeId = getPlaceId();

		scheduleExceptionCacheModel.subPlaceId = getSubPlaceId();

		return scheduleExceptionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", exceptionId=");
		sb.append(getExceptionId());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", openingTimes=");
		sb.append(getOpeningTimes());
		sb.append(", firstComment=");
		sb.append(getFirstComment());
		sb.append(", secondComment=");
		sb.append(getSecondComment());
		sb.append(", thirdComment=");
		sb.append(getThirdComment());
		sb.append(", fourthComment=");
		sb.append(getFourthComment());
		sb.append(", fifthComment=");
		sb.append(getFifthComment());
		sb.append(", comment=");
		sb.append(getComment());
		sb.append(", closed=");
		sb.append(getClosed());
		sb.append(", placeId=");
		sb.append(getPlaceId());
		sb.append(", subPlaceId=");
		sb.append(getSubPlaceId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.place.model.ScheduleException");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>exceptionId</column-name><column-value><![CDATA[");
		sb.append(getExceptionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>openingTimes</column-name><column-value><![CDATA[");
		sb.append(getOpeningTimes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstComment</column-name><column-value><![CDATA[");
		sb.append(getFirstComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secondComment</column-name><column-value><![CDATA[");
		sb.append(getSecondComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>thirdComment</column-name><column-value><![CDATA[");
		sb.append(getThirdComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fourthComment</column-name><column-value><![CDATA[");
		sb.append(getFourthComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fifthComment</column-name><column-value><![CDATA[");
		sb.append(getFifthComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comment</column-name><column-value><![CDATA[");
		sb.append(getComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>closed</column-name><column-value><![CDATA[");
		sb.append(getClosed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>placeId</column-name><column-value><![CDATA[");
		sb.append(getPlaceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subPlaceId</column-name><column-value><![CDATA[");
		sb.append(getSubPlaceId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ScheduleException.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ScheduleException.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _exceptionId;
	private Date _startDate;
	private Date _endDate;
	private String _openingTimes;
	private String _firstComment;
	private String _firstCommentCurrentLanguageId;
	private String _secondComment;
	private String _secondCommentCurrentLanguageId;
	private String _thirdComment;
	private String _thirdCommentCurrentLanguageId;
	private String _fourthComment;
	private String _fourthCommentCurrentLanguageId;
	private String _fifthComment;
	private String _fifthCommentCurrentLanguageId;
	private String _comment;
	private String _commentCurrentLanguageId;
	private boolean _closed;
	private long _placeId;
	private long _originalPlaceId;
	private boolean _setOriginalPlaceId;
	private long _subPlaceId;
	private long _originalSubPlaceId;
	private boolean _setOriginalSubPlaceId;
	private long _columnBitmask;
	private ScheduleException _escapedModel;
}