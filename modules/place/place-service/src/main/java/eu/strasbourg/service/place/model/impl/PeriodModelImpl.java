/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.place.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import eu.strasbourg.service.place.model.Period;
import eu.strasbourg.service.place.model.PeriodModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Period service. Represents a row in the &quot;place_Period&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PeriodModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PeriodImpl}.
 * </p>
 *
 * @author Angelique Zunino Champougny
 * @see PeriodImpl
 * @see Period
 * @see PeriodModel
 * @generated
 */
@ProviderType
public class PeriodModelImpl extends BaseModelImpl<Period>
	implements PeriodModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a period model instance should use the {@link Period} interface instead.
	 */
	public static final String TABLE_NAME = "place_Period";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "periodId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "defaultPeriod", Types.BOOLEAN },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "linkLabel", Types.VARCHAR },
			{ "linkURL", Types.VARCHAR },
			{ "alwaysOpen", Types.BOOLEAN },
			{ "placeId", Types.BIGINT },
			{ "subPlaceId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("periodId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("defaultPeriod", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("linkLabel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("linkURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("alwaysOpen", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("placeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("subPlaceId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table place_Period (uuid_ VARCHAR(75) null,periodId LONG not null primary key,name VARCHAR(400) null,defaultPeriod BOOLEAN,startDate DATE null,endDate DATE null,linkLabel VARCHAR(75) null,linkURL VARCHAR(400) null,alwaysOpen BOOLEAN,placeId LONG,subPlaceId LONG)";
	public static final String TABLE_SQL_DROP = "drop table place_Period";
	public static final String ORDER_BY_JPQL = " ORDER BY period.periodId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY place_Period.periodId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.place.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.place.model.Period"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.place.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.place.model.Period"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.place.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.place.model.Period"),
			true);
	public static final long PLACEID_COLUMN_BITMASK = 1L;
	public static final long SUBPLACEID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long PERIODID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.place.service.util.PropsUtil.get(
				"lock.expiration.time.eu.strasbourg.service.place.model.Period"));

	public PeriodModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _periodId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPeriodId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _periodId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Period.class;
	}

	@Override
	public String getModelClassName() {
		return Period.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("periodId", getPeriodId());
		attributes.put("name", getName());
		attributes.put("defaultPeriod", getDefaultPeriod());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("linkLabel", getLinkLabel());
		attributes.put("linkURL", getLinkURL());
		attributes.put("alwaysOpen", getAlwaysOpen());
		attributes.put("placeId", getPlaceId());
		attributes.put("subPlaceId", getSubPlaceId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long periodId = (Long)attributes.get("periodId");

		if (periodId != null) {
			setPeriodId(periodId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Boolean defaultPeriod = (Boolean)attributes.get("defaultPeriod");

		if (defaultPeriod != null) {
			setDefaultPeriod(defaultPeriod);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		String linkLabel = (String)attributes.get("linkLabel");

		if (linkLabel != null) {
			setLinkLabel(linkLabel);
		}

		String linkURL = (String)attributes.get("linkURL");

		if (linkURL != null) {
			setLinkURL(linkURL);
		}

		Boolean alwaysOpen = (Boolean)attributes.get("alwaysOpen");

		if (alwaysOpen != null) {
			setAlwaysOpen(alwaysOpen);
		}

		Long placeId = (Long)attributes.get("placeId");

		if (placeId != null) {
			setPlaceId(placeId);
		}

		Long subPlaceId = (Long)attributes.get("subPlaceId");

		if (subPlaceId != null) {
			setSubPlaceId(subPlaceId);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getPeriodId() {
		return _periodId;
	}

	@Override
	public void setPeriodId(long periodId) {
		_periodId = periodId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public Boolean getDefaultPeriod() {
		return _defaultPeriod;
	}

	@Override
	public void setDefaultPeriod(Boolean defaultPeriod) {
		_defaultPeriod = defaultPeriod;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public String getLinkLabel() {
		if (_linkLabel == null) {
			return StringPool.BLANK;
		}
		else {
			return _linkLabel;
		}
	}

	@Override
	public void setLinkLabel(String linkLabel) {
		_linkLabel = linkLabel;
	}

	@Override
	public String getLinkURL() {
		if (_linkURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _linkURL;
		}
	}

	@Override
	public void setLinkURL(String linkURL) {
		_linkURL = linkURL;
	}

	@Override
	public Boolean getAlwaysOpen() {
		return _alwaysOpen;
	}

	@Override
	public void setAlwaysOpen(Boolean alwaysOpen) {
		_alwaysOpen = alwaysOpen;
	}

	@Override
	public long getPlaceId() {
		return _placeId;
	}

	@Override
	public void setPlaceId(long placeId) {
		_columnBitmask |= PLACEID_COLUMN_BITMASK;

		if (!_setOriginalPlaceId) {
			_setOriginalPlaceId = true;

			_originalPlaceId = _placeId;
		}

		_placeId = placeId;
	}

	public long getOriginalPlaceId() {
		return _originalPlaceId;
	}

	@Override
	public long getSubPlaceId() {
		return _subPlaceId;
	}

	@Override
	public void setSubPlaceId(long subPlaceId) {
		_columnBitmask |= SUBPLACEID_COLUMN_BITMASK;

		if (!_setOriginalSubPlaceId) {
			_setOriginalSubPlaceId = true;

			_originalSubPlaceId = _subPlaceId;
		}

		_subPlaceId = subPlaceId;
	}

	public long getOriginalSubPlaceId() {
		return _originalSubPlaceId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Period.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Period toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Period)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PeriodImpl periodImpl = new PeriodImpl();

		periodImpl.setUuid(getUuid());
		periodImpl.setPeriodId(getPeriodId());
		periodImpl.setName(getName());
		periodImpl.setDefaultPeriod(getDefaultPeriod());
		periodImpl.setStartDate(getStartDate());
		periodImpl.setEndDate(getEndDate());
		periodImpl.setLinkLabel(getLinkLabel());
		periodImpl.setLinkURL(getLinkURL());
		periodImpl.setAlwaysOpen(getAlwaysOpen());
		periodImpl.setPlaceId(getPlaceId());
		periodImpl.setSubPlaceId(getSubPlaceId());

		periodImpl.resetOriginalValues();

		return periodImpl;
	}

	@Override
	public int compareTo(Period period) {
		long primaryKey = period.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Period)) {
			return false;
		}

		Period period = (Period)obj;

		long primaryKey = period.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PeriodModelImpl periodModelImpl = this;

		periodModelImpl._originalUuid = periodModelImpl._uuid;

		periodModelImpl._originalPlaceId = periodModelImpl._placeId;

		periodModelImpl._setOriginalPlaceId = false;

		periodModelImpl._originalSubPlaceId = periodModelImpl._subPlaceId;

		periodModelImpl._setOriginalSubPlaceId = false;

		periodModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Period> toCacheModel() {
		PeriodCacheModel periodCacheModel = new PeriodCacheModel();

		periodCacheModel.uuid = getUuid();

		String uuid = periodCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			periodCacheModel.uuid = null;
		}

		periodCacheModel.periodId = getPeriodId();

		periodCacheModel.name = getName();

		String name = periodCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			periodCacheModel.name = null;
		}

		periodCacheModel.defaultPeriod = getDefaultPeriod();

		Date startDate = getStartDate();

		if (startDate != null) {
			periodCacheModel.startDate = startDate.getTime();
		}
		else {
			periodCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			periodCacheModel.endDate = endDate.getTime();
		}
		else {
			periodCacheModel.endDate = Long.MIN_VALUE;
		}

		periodCacheModel.linkLabel = getLinkLabel();

		String linkLabel = periodCacheModel.linkLabel;

		if ((linkLabel != null) && (linkLabel.length() == 0)) {
			periodCacheModel.linkLabel = null;
		}

		periodCacheModel.linkURL = getLinkURL();

		String linkURL = periodCacheModel.linkURL;

		if ((linkURL != null) && (linkURL.length() == 0)) {
			periodCacheModel.linkURL = null;
		}

		periodCacheModel.alwaysOpen = getAlwaysOpen();

		periodCacheModel.placeId = getPlaceId();

		periodCacheModel.subPlaceId = getSubPlaceId();

		return periodCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", periodId=");
		sb.append(getPeriodId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", defaultPeriod=");
		sb.append(getDefaultPeriod());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", linkLabel=");
		sb.append(getLinkLabel());
		sb.append(", linkURL=");
		sb.append(getLinkURL());
		sb.append(", alwaysOpen=");
		sb.append(getAlwaysOpen());
		sb.append(", placeId=");
		sb.append(getPlaceId());
		sb.append(", subPlaceId=");
		sb.append(getSubPlaceId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.place.model.Period");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodId</column-name><column-value><![CDATA[");
		sb.append(getPeriodId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defaultPeriod</column-name><column-value><![CDATA[");
		sb.append(getDefaultPeriod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkLabel</column-name><column-value><![CDATA[");
		sb.append(getLinkLabel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkURL</column-name><column-value><![CDATA[");
		sb.append(getLinkURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>alwaysOpen</column-name><column-value><![CDATA[");
		sb.append(getAlwaysOpen());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>placeId</column-name><column-value><![CDATA[");
		sb.append(getPlaceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subPlaceId</column-name><column-value><![CDATA[");
		sb.append(getSubPlaceId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Period.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Period.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _periodId;
	private String _name;
	private Boolean _defaultPeriod;
	private Date _startDate;
	private Date _endDate;
	private String _linkLabel;
	private String _linkURL;
	private Boolean _alwaysOpen;
	private long _placeId;
	private long _originalPlaceId;
	private boolean _setOriginalPlaceId;
	private long _subPlaceId;
	private long _originalSubPlaceId;
	private boolean _setOriginalSubPlaceId;
	private long _columnBitmask;
	private Period _escapedModel;
}