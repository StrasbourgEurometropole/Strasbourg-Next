/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.place.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;

import eu.strasbourg.service.place.model.PublicHoliday;
import eu.strasbourg.service.place.model.PublicHolidayModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the PublicHoliday service. Represents a row in the &quot;place_PublicHoliday&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PublicHolidayModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PublicHolidayImpl}.
 * </p>
 *
 * @author Angelique Zunino Champougny
 * @see PublicHolidayImpl
 * @see PublicHoliday
 * @see PublicHolidayModel
 * @generated
 */
@ProviderType
public class PublicHolidayModelImpl extends BaseModelImpl<PublicHoliday>
	implements PublicHolidayModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a public holiday model instance should use the {@link PublicHoliday} interface instead.
	 */
	public static final String TABLE_NAME = "place_PublicHoliday";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "publicHolidayId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "date_", Types.TIMESTAMP },
			{ "recurrent", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publicHolidayId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("recurrent", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table place_PublicHoliday (uuid_ VARCHAR(75) null,publicHolidayId LONG not null primary key,name STRING null,date_ DATE null,recurrent BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table place_PublicHoliday";
	public static final String ORDER_BY_JPQL = " ORDER BY publicHoliday.publicHolidayId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY place_PublicHoliday.publicHolidayId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.place.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.place.model.PublicHoliday"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.place.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.place.model.PublicHoliday"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.place.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.place.model.PublicHoliday"),
			true);
	public static final long RECURRENT_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long PUBLICHOLIDAYID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.place.service.util.PropsUtil.get(
				"lock.expiration.time.eu.strasbourg.service.place.model.PublicHoliday"));

	public PublicHolidayModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _publicHolidayId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPublicHolidayId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _publicHolidayId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PublicHoliday.class;
	}

	@Override
	public String getModelClassName() {
		return PublicHoliday.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("publicHolidayId", getPublicHolidayId());
		attributes.put("name", getName());
		attributes.put("date", getDate());
		attributes.put("recurrent", getRecurrent());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long publicHolidayId = (Long)attributes.get("publicHolidayId");

		if (publicHolidayId != null) {
			setPublicHolidayId(publicHolidayId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Date date = (Date)attributes.get("date");

		if (date != null) {
			setDate(date);
		}

		Boolean recurrent = (Boolean)attributes.get("recurrent");

		if (recurrent != null) {
			setRecurrent(recurrent);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getPublicHolidayId() {
		return _publicHolidayId;
	}

	@Override
	public void setPublicHolidayId(long publicHolidayId) {
		_publicHolidayId = publicHolidayId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getName(), languageId,
			useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(LocalizationUtil.updateLocalization(getName(), "Name",
					name, languageId, defaultLanguageId));
		}
		else {
			setName(LocalizationUtil.removeLocalization(getName(), "Name",
					languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(LocalizationUtil.updateLocalization(nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		_date = date;
	}

	@Override
	public boolean getRecurrent() {
		return _recurrent;
	}

	@Override
	public boolean isRecurrent() {
		return _recurrent;
	}

	@Override
	public void setRecurrent(boolean recurrent) {
		_columnBitmask |= RECURRENT_COLUMN_BITMASK;

		if (!_setOriginalRecurrent) {
			_setOriginalRecurrent = true;

			_originalRecurrent = _recurrent;
		}

		_recurrent = recurrent;
	}

	public boolean getOriginalRecurrent() {
		return _originalRecurrent;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PublicHoliday.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getName();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(PublicHoliday.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public PublicHoliday toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PublicHoliday)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PublicHolidayImpl publicHolidayImpl = new PublicHolidayImpl();

		publicHolidayImpl.setUuid(getUuid());
		publicHolidayImpl.setPublicHolidayId(getPublicHolidayId());
		publicHolidayImpl.setName(getName());
		publicHolidayImpl.setDate(getDate());
		publicHolidayImpl.setRecurrent(getRecurrent());

		publicHolidayImpl.resetOriginalValues();

		return publicHolidayImpl;
	}

	@Override
	public int compareTo(PublicHoliday publicHoliday) {
		long primaryKey = publicHoliday.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PublicHoliday)) {
			return false;
		}

		PublicHoliday publicHoliday = (PublicHoliday)obj;

		long primaryKey = publicHoliday.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PublicHolidayModelImpl publicHolidayModelImpl = this;

		publicHolidayModelImpl._originalUuid = publicHolidayModelImpl._uuid;

		publicHolidayModelImpl._originalRecurrent = publicHolidayModelImpl._recurrent;

		publicHolidayModelImpl._setOriginalRecurrent = false;

		publicHolidayModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PublicHoliday> toCacheModel() {
		PublicHolidayCacheModel publicHolidayCacheModel = new PublicHolidayCacheModel();

		publicHolidayCacheModel.uuid = getUuid();

		String uuid = publicHolidayCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			publicHolidayCacheModel.uuid = null;
		}

		publicHolidayCacheModel.publicHolidayId = getPublicHolidayId();

		publicHolidayCacheModel.name = getName();

		String name = publicHolidayCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			publicHolidayCacheModel.name = null;
		}

		Date date = getDate();

		if (date != null) {
			publicHolidayCacheModel.date = date.getTime();
		}
		else {
			publicHolidayCacheModel.date = Long.MIN_VALUE;
		}

		publicHolidayCacheModel.recurrent = getRecurrent();

		return publicHolidayCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", publicHolidayId=");
		sb.append(getPublicHolidayId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", date=");
		sb.append(getDate());
		sb.append(", recurrent=");
		sb.append(getRecurrent());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.place.model.PublicHoliday");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publicHolidayId</column-name><column-value><![CDATA[");
		sb.append(getPublicHolidayId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date</column-name><column-value><![CDATA[");
		sb.append(getDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recurrent</column-name><column-value><![CDATA[");
		sb.append(getRecurrent());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = PublicHoliday.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			PublicHoliday.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _publicHolidayId;
	private String _name;
	private String _nameCurrentLanguageId;
	private Date _date;
	private boolean _recurrent;
	private boolean _originalRecurrent;
	private boolean _setOriginalRecurrent;
	private long _columnBitmask;
	private PublicHoliday _escapedModel;
}