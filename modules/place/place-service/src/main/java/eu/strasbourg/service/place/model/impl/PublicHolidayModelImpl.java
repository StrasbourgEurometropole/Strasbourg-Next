/**
 * SPDX-FileCopyrightText: (c) 2023 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package eu.strasbourg.service.place.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import eu.strasbourg.service.place.model.PublicHoliday;
import eu.strasbourg.service.place.model.PublicHolidayModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PublicHoliday service. Represents a row in the &quot;place_PublicHoliday&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PublicHolidayModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PublicHolidayImpl}.
 * </p>
 *
 * @author Angelique Zunino Champougny
 * @see PublicHolidayImpl
 * @generated
 */
public class PublicHolidayModelImpl
	extends BaseModelImpl<PublicHoliday> implements PublicHolidayModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a public holiday model instance should use the <code>PublicHoliday</code> interface instead.
	 */
	public static final String TABLE_NAME = "place_PublicHoliday";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"publicHolidayId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"date_", Types.TIMESTAMP},
		{"recurrent", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publicHolidayId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("recurrent", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table place_PublicHoliday (uuid_ VARCHAR(75) null,publicHolidayId LONG not null primary key,name STRING null,date_ DATE null,recurrent BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table place_PublicHoliday";

	public static final String ORDER_BY_JPQL =
		" ORDER BY publicHoliday.publicHolidayId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY place_PublicHoliday.publicHolidayId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long RECURRENT_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PUBLICHOLIDAYID_COLUMN_BITMASK = 4L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.place.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.place.model.PublicHoliday"));

	public PublicHolidayModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _publicHolidayId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPublicHolidayId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _publicHolidayId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PublicHoliday.class;
	}

	@Override
	public String getModelClassName() {
		return PublicHoliday.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PublicHoliday, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PublicHoliday, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PublicHoliday, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PublicHoliday)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PublicHoliday, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PublicHoliday, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PublicHoliday)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PublicHoliday, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PublicHoliday, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<PublicHoliday, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<PublicHoliday, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<PublicHoliday, Object>>();

			attributeGetterFunctions.put("uuid", PublicHoliday::getUuid);
			attributeGetterFunctions.put(
				"publicHolidayId", PublicHoliday::getPublicHolidayId);
			attributeGetterFunctions.put("name", PublicHoliday::getName);
			attributeGetterFunctions.put("date", PublicHoliday::getDate);
			attributeGetterFunctions.put(
				"recurrent", PublicHoliday::getRecurrent);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<PublicHoliday, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<PublicHoliday, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<PublicHoliday, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<PublicHoliday, String>)PublicHoliday::setUuid);
			attributeSetterBiConsumers.put(
				"publicHolidayId",
				(BiConsumer<PublicHoliday, Long>)
					PublicHoliday::setPublicHolidayId);
			attributeSetterBiConsumers.put(
				"name",
				(BiConsumer<PublicHoliday, String>)PublicHoliday::setName);
			attributeSetterBiConsumers.put(
				"date",
				(BiConsumer<PublicHoliday, Date>)PublicHoliday::setDate);
			attributeSetterBiConsumers.put(
				"recurrent",
				(BiConsumer<PublicHoliday, Boolean>)
					PublicHoliday::setRecurrent);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getPublicHolidayId() {
		return _publicHolidayId;
	}

	@Override
	public void setPublicHolidayId(long publicHolidayId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_publicHolidayId = publicHolidayId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getName(), languageId, useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(
				LocalizationUtil.updateLocalization(
					getName(), "Name", name, languageId, defaultLanguageId));
		}
		else {
			setName(
				LocalizationUtil.removeLocalization(
					getName(), "Name", languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(
			LocalizationUtil.updateLocalization(
				nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_date = date;
	}

	@Override
	public boolean getRecurrent() {
		return _recurrent;
	}

	@Override
	public boolean isRecurrent() {
		return _recurrent;
	}

	@Override
	public void setRecurrent(boolean recurrent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_recurrent = recurrent;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalRecurrent() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("recurrent"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, PublicHoliday.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			PublicHoliday.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public PublicHoliday toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PublicHoliday>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PublicHolidayImpl publicHolidayImpl = new PublicHolidayImpl();

		publicHolidayImpl.setUuid(getUuid());
		publicHolidayImpl.setPublicHolidayId(getPublicHolidayId());
		publicHolidayImpl.setName(getName());
		publicHolidayImpl.setDate(getDate());
		publicHolidayImpl.setRecurrent(isRecurrent());

		publicHolidayImpl.resetOriginalValues();

		return publicHolidayImpl;
	}

	@Override
	public PublicHoliday cloneWithOriginalValues() {
		PublicHolidayImpl publicHolidayImpl = new PublicHolidayImpl();

		publicHolidayImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		publicHolidayImpl.setPublicHolidayId(
			this.<Long>getColumnOriginalValue("publicHolidayId"));
		publicHolidayImpl.setName(this.<String>getColumnOriginalValue("name"));
		publicHolidayImpl.setDate(this.<Date>getColumnOriginalValue("date_"));
		publicHolidayImpl.setRecurrent(
			this.<Boolean>getColumnOriginalValue("recurrent"));

		return publicHolidayImpl;
	}

	@Override
	public int compareTo(PublicHoliday publicHoliday) {
		long primaryKey = publicHoliday.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PublicHoliday)) {
			return false;
		}

		PublicHoliday publicHoliday = (PublicHoliday)object;

		long primaryKey = publicHoliday.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PublicHoliday> toCacheModel() {
		PublicHolidayCacheModel publicHolidayCacheModel =
			new PublicHolidayCacheModel();

		publicHolidayCacheModel.uuid = getUuid();

		String uuid = publicHolidayCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			publicHolidayCacheModel.uuid = null;
		}

		publicHolidayCacheModel.publicHolidayId = getPublicHolidayId();

		publicHolidayCacheModel.name = getName();

		String name = publicHolidayCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			publicHolidayCacheModel.name = null;
		}

		Date date = getDate();

		if (date != null) {
			publicHolidayCacheModel.date = date.getTime();
		}
		else {
			publicHolidayCacheModel.date = Long.MIN_VALUE;
		}

		publicHolidayCacheModel.recurrent = isRecurrent();

		return publicHolidayCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PublicHoliday, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PublicHoliday, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PublicHoliday, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((PublicHoliday)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PublicHoliday>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					PublicHoliday.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _publicHolidayId;
	private String _name;
	private String _nameCurrentLanguageId;
	private Date _date;
	private boolean _recurrent;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<PublicHoliday, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PublicHoliday)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("publicHolidayId", _publicHolidayId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("date_", _date);
		_columnOriginalValues.put("recurrent", _recurrent);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("date_", "date");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("publicHolidayId", 2L);

		columnBitmasks.put("name", 4L);

		columnBitmasks.put("date_", 8L);

		columnBitmasks.put("recurrent", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PublicHoliday _escapedModel;

}