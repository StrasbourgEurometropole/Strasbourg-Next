/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.place.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.place.model.Place;
import eu.strasbourg.service.place.model.PlaceModel;
import eu.strasbourg.service.place.model.PlaceSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Place service. Represents a row in the &quot;place_Place&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PlaceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlaceImpl}.
 * </p>
 *
 * @author Angelique Zunino Champougny
 * @see PlaceImpl
 * @generated
 */
@JSON(strict = true)
public class PlaceModelImpl extends BaseModelImpl<Place> implements PlaceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a place model instance should use the <code>Place</code> interface instead.
	 */
	public static final String TABLE_NAME = "place_Place";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"placeId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"lastPublishDate", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}, {"SIGid", Types.VARCHAR},
		{"name", Types.VARCHAR}, {"addressComplement", Types.VARCHAR},
		{"addressStreet", Types.VARCHAR},
		{"addressDistribution", Types.VARCHAR},
		{"addressZipCode", Types.VARCHAR}, {"addressCountry", Types.VARCHAR},
		{"mercatorX", Types.VARCHAR}, {"mercatorY", Types.VARCHAR},
		{"RGF93X", Types.VARCHAR}, {"RGF93Y", Types.VARCHAR},
		{"locationId", Types.VARCHAR}, {"alias_", Types.VARCHAR},
		{"presentation", Types.CLOB}, {"serviceAndActivities", Types.CLOB},
		{"characteristics", Types.CLOB},
		{"subjectToPublicHoliday", Types.BOOLEAN},
		{"exceptionalSchedule", Types.CLOB}, {"displayEvents", Types.BOOLEAN},
		{"additionalInformation", Types.CLOB},
		{"contenuTooltipCarto", Types.CLOB}, {"hasURLSchedule", Types.BOOLEAN},
		{"scheduleLinkName", Types.VARCHAR}, {"scheduleLinkURL", Types.VARCHAR},
		{"phone", Types.VARCHAR}, {"mail", Types.VARCHAR},
		{"siteURL", Types.VARCHAR}, {"siteLabel", Types.VARCHAR},
		{"facebookURL", Types.VARCHAR}, {"facebookLabel", Types.VARCHAR},
		{"instagramURL", Types.VARCHAR}, {"instagramLabel", Types.VARCHAR},
		{"accesMap", Types.VARCHAR}, {"access_", Types.CLOB},
		{"accessForDisabled", Types.CLOB}, {"accessForBlind", Types.BOOLEAN},
		{"accessForDeaf", Types.BOOLEAN},
		{"accessForWheelchair", Types.BOOLEAN},
		{"accessForElder", Types.BOOLEAN},
		{"accessForDeficient", Types.BOOLEAN}, {"RTEnabled", Types.BOOLEAN},
		{"RTType", Types.VARCHAR}, {"RTExternalId", Types.VARCHAR},
		{"RTAvailable", Types.BIGINT}, {"RTOccupation", Types.BIGINT},
		{"RTCapacity", Types.BIGINT}, {"RTStatus", Types.VARCHAR},
		{"RTLastUpdate", Types.TIMESTAMP}, {"imageId", Types.BIGINT},
		{"imageWidth", Types.INTEGER}, {"imageHeight", Types.INTEGER},
		{"imageIds", Types.VARCHAR}, {"videosIds", Types.VARCHAR},
		{"priceId", Types.BIGINT}, {"documentsIds", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("SIGid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressComplement", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressStreet", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressDistribution", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressZipCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mercatorX", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mercatorY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RGF93X", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RGF93Y", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("locationId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("alias_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("presentation", Types.CLOB);
		TABLE_COLUMNS_MAP.put("serviceAndActivities", Types.CLOB);
		TABLE_COLUMNS_MAP.put("characteristics", Types.CLOB);
		TABLE_COLUMNS_MAP.put("subjectToPublicHoliday", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("exceptionalSchedule", Types.CLOB);
		TABLE_COLUMNS_MAP.put("displayEvents", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("additionalInformation", Types.CLOB);
		TABLE_COLUMNS_MAP.put("contenuTooltipCarto", Types.CLOB);
		TABLE_COLUMNS_MAP.put("hasURLSchedule", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("scheduleLinkName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("scheduleLinkURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("siteURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("siteLabel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("facebookURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("facebookLabel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("instagramURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("instagramLabel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accesMap", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("access_", Types.CLOB);
		TABLE_COLUMNS_MAP.put("accessForDisabled", Types.CLOB);
		TABLE_COLUMNS_MAP.put("accessForBlind", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("accessForDeaf", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("accessForWheelchair", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("accessForElder", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("accessForDeficient", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("RTEnabled", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("RTType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RTExternalId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RTAvailable", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("RTOccupation", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("RTCapacity", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("RTStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RTLastUpdate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("imageWidth", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("imageHeight", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("imageIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("videosIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("priceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("documentsIds", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table place_Place (uuid_ VARCHAR(75) null,placeId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,lastPublishDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,SIGid VARCHAR(75) null,name VARCHAR(400) null,addressComplement VARCHAR(400) null,addressStreet VARCHAR(400) null,addressDistribution VARCHAR(400) null,addressZipCode VARCHAR(75) null,addressCountry VARCHAR(75) null,mercatorX VARCHAR(75) null,mercatorY VARCHAR(75) null,RGF93X VARCHAR(75) null,RGF93Y VARCHAR(75) null,locationId VARCHAR(75) null,alias_ STRING null,presentation TEXT null,serviceAndActivities TEXT null,characteristics TEXT null,subjectToPublicHoliday BOOLEAN,exceptionalSchedule TEXT null,displayEvents BOOLEAN,additionalInformation TEXT null,contenuTooltipCarto TEXT null,hasURLSchedule BOOLEAN,scheduleLinkName STRING null,scheduleLinkURL STRING null,phone VARCHAR(75) null,mail VARCHAR(75) null,siteURL STRING null,siteLabel STRING null,facebookURL STRING null,facebookLabel STRING null,instagramURL STRING null,instagramLabel STRING null,accesMap STRING null,access_ TEXT null,accessForDisabled TEXT null,accessForBlind BOOLEAN,accessForDeaf BOOLEAN,accessForWheelchair BOOLEAN,accessForElder BOOLEAN,accessForDeficient BOOLEAN,RTEnabled BOOLEAN,RTType VARCHAR(75) null,RTExternalId VARCHAR(75) null,RTAvailable LONG,RTOccupation LONG,RTCapacity LONG,RTStatus VARCHAR(75) null,RTLastUpdate DATE null,imageId LONG,imageWidth INTEGER,imageHeight INTEGER,imageIds VARCHAR(400) null,videosIds VARCHAR(400) null,priceId LONG,documentsIds VARCHAR(400) null)";

	public static final String TABLE_SQL_DROP = "drop table place_Place";

	public static final String ORDER_BY_JPQL = " ORDER BY place.placeId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY place_Place.placeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.place.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.place.model.Place"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.place.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.place.model.Place"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.place.service.util.PropsUtil.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.place.model.Place"),
		true);

	public static final long SIGID_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long NAME_COLUMN_BITMASK = 8L;

	public static final long PRICEID_COLUMN_BITMASK = 16L;

	public static final long UUID_COLUMN_BITMASK = 32L;

	public static final long PLACEID_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Place toModel(PlaceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Place model = new PlaceImpl();

		model.setUuid(soapModel.getUuid());
		model.setPlaceId(soapModel.getPlaceId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLastPublishDate(soapModel.getLastPublishDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setSIGid(soapModel.getSIGid());
		model.setName(soapModel.getName());
		model.setAddressComplement(soapModel.getAddressComplement());
		model.setAddressStreet(soapModel.getAddressStreet());
		model.setAddressDistribution(soapModel.getAddressDistribution());
		model.setAddressZipCode(soapModel.getAddressZipCode());
		model.setAddressCountry(soapModel.getAddressCountry());
		model.setMercatorX(soapModel.getMercatorX());
		model.setMercatorY(soapModel.getMercatorY());
		model.setRGF93X(soapModel.getRGF93X());
		model.setRGF93Y(soapModel.getRGF93Y());
		model.setLocationId(soapModel.getLocationId());
		model.setAlias(soapModel.getAlias());
		model.setPresentation(soapModel.getPresentation());
		model.setServiceAndActivities(soapModel.getServiceAndActivities());
		model.setCharacteristics(soapModel.getCharacteristics());
		model.setSubjectToPublicHoliday(soapModel.isSubjectToPublicHoliday());
		model.setExceptionalSchedule(soapModel.getExceptionalSchedule());
		model.setDisplayEvents(soapModel.isDisplayEvents());
		model.setAdditionalInformation(soapModel.getAdditionalInformation());
		model.setContenuTooltipCarto(soapModel.getContenuTooltipCarto());
		model.setHasURLSchedule(soapModel.isHasURLSchedule());
		model.setScheduleLinkName(soapModel.getScheduleLinkName());
		model.setScheduleLinkURL(soapModel.getScheduleLinkURL());
		model.setPhone(soapModel.getPhone());
		model.setMail(soapModel.getMail());
		model.setSiteURL(soapModel.getSiteURL());
		model.setSiteLabel(soapModel.getSiteLabel());
		model.setFacebookURL(soapModel.getFacebookURL());
		model.setFacebookLabel(soapModel.getFacebookLabel());
		model.setInstagramURL(soapModel.getInstagramURL());
		model.setInstagramLabel(soapModel.getInstagramLabel());
		model.setAccesMap(soapModel.getAccesMap());
		model.setAccess(soapModel.getAccess());
		model.setAccessForDisabled(soapModel.getAccessForDisabled());
		model.setAccessForBlind(soapModel.getAccessForBlind());
		model.setAccessForDeaf(soapModel.getAccessForDeaf());
		model.setAccessForWheelchair(soapModel.getAccessForWheelchair());
		model.setAccessForElder(soapModel.getAccessForElder());
		model.setAccessForDeficient(soapModel.getAccessForDeficient());
		model.setRTEnabled(soapModel.getRTEnabled());
		model.setRTType(soapModel.getRTType());
		model.setRTExternalId(soapModel.getRTExternalId());
		model.setRTAvailable(soapModel.getRTAvailable());
		model.setRTOccupation(soapModel.getRTOccupation());
		model.setRTCapacity(soapModel.getRTCapacity());
		model.setRTStatus(soapModel.getRTStatus());
		model.setRTLastUpdate(soapModel.getRTLastUpdate());
		model.setImageId(soapModel.getImageId());
		model.setImageWidth(soapModel.getImageWidth());
		model.setImageHeight(soapModel.getImageHeight());
		model.setImageIds(soapModel.getImageIds());
		model.setVideosIds(soapModel.getVideosIds());
		model.setPriceId(soapModel.getPriceId());
		model.setDocumentsIds(soapModel.getDocumentsIds());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Place> toModels(PlaceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Place> models = new ArrayList<Place>(soapModels.length);

		for (PlaceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.place.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.place.model.Place"));

	public PlaceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _placeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPlaceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _placeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Place.class;
	}

	@Override
	public String getModelClassName() {
		return Place.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Place, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Place, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Place, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Place)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Place, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Place, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Place)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Place, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Place, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Place>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Place.class.getClassLoader(), Place.class, ModelWrapper.class);

		try {
			Constructor<Place> constructor =
				(Constructor<Place>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Place, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Place, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Place, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Place, Object>>();
		Map<String, BiConsumer<Place, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Place, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object uuidObject) {
					place.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"placeId",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getPlaceId();
				}

			});
		attributeSetterBiConsumers.put(
			"placeId",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object placeIdObject) {
					place.setPlaceId((Long)placeIdObject);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object groupIdObject) {
					place.setGroupId((Long)groupIdObject);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object companyIdObject) {
					place.setCompanyId((Long)companyIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object userIdObject) {
					place.setUserId((Long)userIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object userNameObject) {
					place.setUserName((String)userNameObject);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object createDateObject) {
					place.setCreateDate((Date)createDateObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object modifiedDateObject) {
					place.setModifiedDate((Date)modifiedDateObject);
				}

			});
		attributeGetterFunctions.put(
			"lastPublishDate",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getLastPublishDate();
				}

			});
		attributeSetterBiConsumers.put(
			"lastPublishDate",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object lastPublishDateObject) {
					place.setLastPublishDate((Date)lastPublishDateObject);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object statusObject) {
					place.setStatus((Integer)statusObject);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserId",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getStatusByUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserId",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object statusByUserIdObject) {
					place.setStatusByUserId((Long)statusByUserIdObject);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserName",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getStatusByUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserName",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object statusByUserNameObject) {
					place.setStatusByUserName((String)statusByUserNameObject);
				}

			});
		attributeGetterFunctions.put(
			"statusDate",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getStatusDate();
				}

			});
		attributeSetterBiConsumers.put(
			"statusDate",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object statusDateObject) {
					place.setStatusDate((Date)statusDateObject);
				}

			});
		attributeGetterFunctions.put(
			"SIGid",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getSIGid();
				}

			});
		attributeSetterBiConsumers.put(
			"SIGid",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object SIGidObject) {
					place.setSIGid((String)SIGidObject);
				}

			});
		attributeGetterFunctions.put(
			"name",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getName();
				}

			});
		attributeSetterBiConsumers.put(
			"name",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object nameObject) {
					place.setName((String)nameObject);
				}

			});
		attributeGetterFunctions.put(
			"addressComplement",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getAddressComplement();
				}

			});
		attributeSetterBiConsumers.put(
			"addressComplement",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(
					Place place, Object addressComplementObject) {

					place.setAddressComplement((String)addressComplementObject);
				}

			});
		attributeGetterFunctions.put(
			"addressStreet",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getAddressStreet();
				}

			});
		attributeSetterBiConsumers.put(
			"addressStreet",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object addressStreetObject) {
					place.setAddressStreet((String)addressStreetObject);
				}

			});
		attributeGetterFunctions.put(
			"addressDistribution",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getAddressDistribution();
				}

			});
		attributeSetterBiConsumers.put(
			"addressDistribution",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(
					Place place, Object addressDistributionObject) {

					place.setAddressDistribution(
						(String)addressDistributionObject);
				}

			});
		attributeGetterFunctions.put(
			"addressZipCode",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getAddressZipCode();
				}

			});
		attributeSetterBiConsumers.put(
			"addressZipCode",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object addressZipCodeObject) {
					place.setAddressZipCode((String)addressZipCodeObject);
				}

			});
		attributeGetterFunctions.put(
			"addressCountry",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getAddressCountry();
				}

			});
		attributeSetterBiConsumers.put(
			"addressCountry",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object addressCountryObject) {
					place.setAddressCountry((String)addressCountryObject);
				}

			});
		attributeGetterFunctions.put(
			"mercatorX",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getMercatorX();
				}

			});
		attributeSetterBiConsumers.put(
			"mercatorX",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object mercatorXObject) {
					place.setMercatorX((String)mercatorXObject);
				}

			});
		attributeGetterFunctions.put(
			"mercatorY",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getMercatorY();
				}

			});
		attributeSetterBiConsumers.put(
			"mercatorY",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object mercatorYObject) {
					place.setMercatorY((String)mercatorYObject);
				}

			});
		attributeGetterFunctions.put(
			"RGF93X",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getRGF93X();
				}

			});
		attributeSetterBiConsumers.put(
			"RGF93X",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object RGF93XObject) {
					place.setRGF93X((String)RGF93XObject);
				}

			});
		attributeGetterFunctions.put(
			"RGF93Y",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getRGF93Y();
				}

			});
		attributeSetterBiConsumers.put(
			"RGF93Y",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object RGF93YObject) {
					place.setRGF93Y((String)RGF93YObject);
				}

			});
		attributeGetterFunctions.put(
			"locationId",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getLocationId();
				}

			});
		attributeSetterBiConsumers.put(
			"locationId",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object locationIdObject) {
					place.setLocationId((String)locationIdObject);
				}

			});
		attributeGetterFunctions.put(
			"alias",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getAlias();
				}

			});
		attributeSetterBiConsumers.put(
			"alias",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object aliasObject) {
					place.setAlias((String)aliasObject);
				}

			});
		attributeGetterFunctions.put(
			"presentation",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getPresentation();
				}

			});
		attributeSetterBiConsumers.put(
			"presentation",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object presentationObject) {
					place.setPresentation((String)presentationObject);
				}

			});
		attributeGetterFunctions.put(
			"serviceAndActivities",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getServiceAndActivities();
				}

			});
		attributeSetterBiConsumers.put(
			"serviceAndActivities",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(
					Place place, Object serviceAndActivitiesObject) {

					place.setServiceAndActivities(
						(String)serviceAndActivitiesObject);
				}

			});
		attributeGetterFunctions.put(
			"characteristics",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getCharacteristics();
				}

			});
		attributeSetterBiConsumers.put(
			"characteristics",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object characteristicsObject) {
					place.setCharacteristics((String)characteristicsObject);
				}

			});
		attributeGetterFunctions.put(
			"subjectToPublicHoliday",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getSubjectToPublicHoliday();
				}

			});
		attributeSetterBiConsumers.put(
			"subjectToPublicHoliday",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(
					Place place, Object subjectToPublicHolidayObject) {

					place.setSubjectToPublicHoliday(
						(Boolean)subjectToPublicHolidayObject);
				}

			});
		attributeGetterFunctions.put(
			"exceptionalSchedule",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getExceptionalSchedule();
				}

			});
		attributeSetterBiConsumers.put(
			"exceptionalSchedule",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(
					Place place, Object exceptionalScheduleObject) {

					place.setExceptionalSchedule(
						(String)exceptionalScheduleObject);
				}

			});
		attributeGetterFunctions.put(
			"displayEvents",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getDisplayEvents();
				}

			});
		attributeSetterBiConsumers.put(
			"displayEvents",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object displayEventsObject) {
					place.setDisplayEvents((Boolean)displayEventsObject);
				}

			});
		attributeGetterFunctions.put(
			"additionalInformation",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getAdditionalInformation();
				}

			});
		attributeSetterBiConsumers.put(
			"additionalInformation",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(
					Place place, Object additionalInformationObject) {

					place.setAdditionalInformation(
						(String)additionalInformationObject);
				}

			});
		attributeGetterFunctions.put(
			"contenuTooltipCarto",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getContenuTooltipCarto();
				}

			});
		attributeSetterBiConsumers.put(
			"contenuTooltipCarto",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(
					Place place, Object contenuTooltipCartoObject) {

					place.setContenuTooltipCarto(
						(String)contenuTooltipCartoObject);
				}

			});
		attributeGetterFunctions.put(
			"hasURLSchedule",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getHasURLSchedule();
				}

			});
		attributeSetterBiConsumers.put(
			"hasURLSchedule",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object hasURLScheduleObject) {
					place.setHasURLSchedule((Boolean)hasURLScheduleObject);
				}

			});
		attributeGetterFunctions.put(
			"scheduleLinkName",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getScheduleLinkName();
				}

			});
		attributeSetterBiConsumers.put(
			"scheduleLinkName",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object scheduleLinkNameObject) {
					place.setScheduleLinkName((String)scheduleLinkNameObject);
				}

			});
		attributeGetterFunctions.put(
			"scheduleLinkURL",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getScheduleLinkURL();
				}

			});
		attributeSetterBiConsumers.put(
			"scheduleLinkURL",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object scheduleLinkURLObject) {
					place.setScheduleLinkURL((String)scheduleLinkURLObject);
				}

			});
		attributeGetterFunctions.put(
			"phone",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getPhone();
				}

			});
		attributeSetterBiConsumers.put(
			"phone",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object phoneObject) {
					place.setPhone((String)phoneObject);
				}

			});
		attributeGetterFunctions.put(
			"mail",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getMail();
				}

			});
		attributeSetterBiConsumers.put(
			"mail",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object mailObject) {
					place.setMail((String)mailObject);
				}

			});
		attributeGetterFunctions.put(
			"siteURL",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getSiteURL();
				}

			});
		attributeSetterBiConsumers.put(
			"siteURL",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object siteURLObject) {
					place.setSiteURL((String)siteURLObject);
				}

			});
		attributeGetterFunctions.put(
			"siteLabel",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getSiteLabel();
				}

			});
		attributeSetterBiConsumers.put(
			"siteLabel",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object siteLabelObject) {
					place.setSiteLabel((String)siteLabelObject);
				}

			});
		attributeGetterFunctions.put(
			"facebookURL",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getFacebookURL();
				}

			});
		attributeSetterBiConsumers.put(
			"facebookURL",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object facebookURLObject) {
					place.setFacebookURL((String)facebookURLObject);
				}

			});
		attributeGetterFunctions.put(
			"facebookLabel",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getFacebookLabel();
				}

			});
		attributeSetterBiConsumers.put(
			"facebookLabel",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object facebookLabelObject) {
					place.setFacebookLabel((String)facebookLabelObject);
				}

			});
		attributeGetterFunctions.put(
			"instagramURL",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getInstagramURL();
				}

			});
		attributeSetterBiConsumers.put(
			"instagramURL",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object instagramURLObject) {
					place.setInstagramURL((String)instagramURLObject);
				}

			});
		attributeGetterFunctions.put(
			"instagramLabel",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getInstagramLabel();
				}

			});
		attributeSetterBiConsumers.put(
			"instagramLabel",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object instagramLabelObject) {
					place.setInstagramLabel((String)instagramLabelObject);
				}

			});
		attributeGetterFunctions.put(
			"accesMap",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getAccesMap();
				}

			});
		attributeSetterBiConsumers.put(
			"accesMap",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object accesMapObject) {
					place.setAccesMap((String)accesMapObject);
				}

			});
		attributeGetterFunctions.put(
			"access",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getAccess();
				}

			});
		attributeSetterBiConsumers.put(
			"access",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object accessObject) {
					place.setAccess((String)accessObject);
				}

			});
		attributeGetterFunctions.put(
			"accessForDisabled",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getAccessForDisabled();
				}

			});
		attributeSetterBiConsumers.put(
			"accessForDisabled",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(
					Place place, Object accessForDisabledObject) {

					place.setAccessForDisabled((String)accessForDisabledObject);
				}

			});
		attributeGetterFunctions.put(
			"accessForBlind",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getAccessForBlind();
				}

			});
		attributeSetterBiConsumers.put(
			"accessForBlind",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object accessForBlindObject) {
					place.setAccessForBlind((Boolean)accessForBlindObject);
				}

			});
		attributeGetterFunctions.put(
			"accessForDeaf",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getAccessForDeaf();
				}

			});
		attributeSetterBiConsumers.put(
			"accessForDeaf",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object accessForDeafObject) {
					place.setAccessForDeaf((Boolean)accessForDeafObject);
				}

			});
		attributeGetterFunctions.put(
			"accessForWheelchair",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getAccessForWheelchair();
				}

			});
		attributeSetterBiConsumers.put(
			"accessForWheelchair",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(
					Place place, Object accessForWheelchairObject) {

					place.setAccessForWheelchair(
						(Boolean)accessForWheelchairObject);
				}

			});
		attributeGetterFunctions.put(
			"accessForElder",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getAccessForElder();
				}

			});
		attributeSetterBiConsumers.put(
			"accessForElder",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object accessForElderObject) {
					place.setAccessForElder((Boolean)accessForElderObject);
				}

			});
		attributeGetterFunctions.put(
			"accessForDeficient",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getAccessForDeficient();
				}

			});
		attributeSetterBiConsumers.put(
			"accessForDeficient",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(
					Place place, Object accessForDeficientObject) {

					place.setAccessForDeficient(
						(Boolean)accessForDeficientObject);
				}

			});
		attributeGetterFunctions.put(
			"RTEnabled",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getRTEnabled();
				}

			});
		attributeSetterBiConsumers.put(
			"RTEnabled",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object RTEnabledObject) {
					place.setRTEnabled((Boolean)RTEnabledObject);
				}

			});
		attributeGetterFunctions.put(
			"RTType",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getRTType();
				}

			});
		attributeSetterBiConsumers.put(
			"RTType",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object RTTypeObject) {
					place.setRTType((String)RTTypeObject);
				}

			});
		attributeGetterFunctions.put(
			"RTExternalId",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getRTExternalId();
				}

			});
		attributeSetterBiConsumers.put(
			"RTExternalId",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object RTExternalIdObject) {
					place.setRTExternalId((String)RTExternalIdObject);
				}

			});
		attributeGetterFunctions.put(
			"RTAvailable",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getRTAvailable();
				}

			});
		attributeSetterBiConsumers.put(
			"RTAvailable",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object RTAvailableObject) {
					place.setRTAvailable((Long)RTAvailableObject);
				}

			});
		attributeGetterFunctions.put(
			"RTOccupation",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getRTOccupation();
				}

			});
		attributeSetterBiConsumers.put(
			"RTOccupation",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object RTOccupationObject) {
					place.setRTOccupation((Long)RTOccupationObject);
				}

			});
		attributeGetterFunctions.put(
			"RTCapacity",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getRTCapacity();
				}

			});
		attributeSetterBiConsumers.put(
			"RTCapacity",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object RTCapacityObject) {
					place.setRTCapacity((Long)RTCapacityObject);
				}

			});
		attributeGetterFunctions.put(
			"RTStatus",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getRTStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"RTStatus",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object RTStatusObject) {
					place.setRTStatus((String)RTStatusObject);
				}

			});
		attributeGetterFunctions.put(
			"RTLastUpdate",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getRTLastUpdate();
				}

			});
		attributeSetterBiConsumers.put(
			"RTLastUpdate",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object RTLastUpdateObject) {
					place.setRTLastUpdate((Date)RTLastUpdateObject);
				}

			});
		attributeGetterFunctions.put(
			"imageId",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getImageId();
				}

			});
		attributeSetterBiConsumers.put(
			"imageId",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object imageIdObject) {
					place.setImageId((Long)imageIdObject);
				}

			});
		attributeGetterFunctions.put(
			"imageWidth",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getImageWidth();
				}

			});
		attributeSetterBiConsumers.put(
			"imageWidth",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object imageWidthObject) {
					place.setImageWidth((Integer)imageWidthObject);
				}

			});
		attributeGetterFunctions.put(
			"imageHeight",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getImageHeight();
				}

			});
		attributeSetterBiConsumers.put(
			"imageHeight",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object imageHeightObject) {
					place.setImageHeight((Integer)imageHeightObject);
				}

			});
		attributeGetterFunctions.put(
			"imageIds",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getImageIds();
				}

			});
		attributeSetterBiConsumers.put(
			"imageIds",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object imageIdsObject) {
					place.setImageIds((String)imageIdsObject);
				}

			});
		attributeGetterFunctions.put(
			"videosIds",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getVideosIds();
				}

			});
		attributeSetterBiConsumers.put(
			"videosIds",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object videosIdsObject) {
					place.setVideosIds((String)videosIdsObject);
				}

			});
		attributeGetterFunctions.put(
			"priceId",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getPriceId();
				}

			});
		attributeSetterBiConsumers.put(
			"priceId",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object priceIdObject) {
					place.setPriceId((Long)priceIdObject);
				}

			});
		attributeGetterFunctions.put(
			"documentsIds",
			new Function<Place, Object>() {

				@Override
				public Object apply(Place place) {
					return place.getDocumentsIds();
				}

			});
		attributeSetterBiConsumers.put(
			"documentsIds",
			new BiConsumer<Place, Object>() {

				@Override
				public void accept(Place place, Object documentsIdsObject) {
					place.setDocumentsIds((String)documentsIdsObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPlaceId() {
		return _placeId;
	}

	@Override
	public void setPlaceId(long placeId) {
		_placeId = placeId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		_lastPublishDate = lastPublishDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getSIGid() {
		if (_SIGid == null) {
			return "";
		}
		else {
			return _SIGid;
		}
	}

	@Override
	public void setSIGid(String SIGid) {
		_columnBitmask |= SIGID_COLUMN_BITMASK;

		if (_originalSIGid == null) {
			_originalSIGid = _SIGid;
		}

		_SIGid = SIGid;
	}

	public String getOriginalSIGid() {
		return GetterUtil.getString(_originalSIGid);
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getAddressComplement() {
		if (_addressComplement == null) {
			return "";
		}
		else {
			return _addressComplement;
		}
	}

	@Override
	public void setAddressComplement(String addressComplement) {
		_addressComplement = addressComplement;
	}

	@JSON
	@Override
	public String getAddressStreet() {
		if (_addressStreet == null) {
			return "";
		}
		else {
			return _addressStreet;
		}
	}

	@Override
	public void setAddressStreet(String addressStreet) {
		_addressStreet = addressStreet;
	}

	@JSON
	@Override
	public String getAddressDistribution() {
		if (_addressDistribution == null) {
			return "";
		}
		else {
			return _addressDistribution;
		}
	}

	@Override
	public void setAddressDistribution(String addressDistribution) {
		_addressDistribution = addressDistribution;
	}

	@JSON
	@Override
	public String getAddressZipCode() {
		if (_addressZipCode == null) {
			return "";
		}
		else {
			return _addressZipCode;
		}
	}

	@Override
	public void setAddressZipCode(String addressZipCode) {
		_addressZipCode = addressZipCode;
	}

	@JSON
	@Override
	public String getAddressCountry() {
		if (_addressCountry == null) {
			return "";
		}
		else {
			return _addressCountry;
		}
	}

	@Override
	public void setAddressCountry(String addressCountry) {
		_addressCountry = addressCountry;
	}

	@JSON
	@Override
	public String getMercatorX() {
		if (_mercatorX == null) {
			return "";
		}
		else {
			return _mercatorX;
		}
	}

	@Override
	public void setMercatorX(String mercatorX) {
		_mercatorX = mercatorX;
	}

	@JSON
	@Override
	public String getMercatorY() {
		if (_mercatorY == null) {
			return "";
		}
		else {
			return _mercatorY;
		}
	}

	@Override
	public void setMercatorY(String mercatorY) {
		_mercatorY = mercatorY;
	}

	@JSON
	@Override
	public String getRGF93X() {
		if (_RGF93X == null) {
			return "";
		}
		else {
			return _RGF93X;
		}
	}

	@Override
	public void setRGF93X(String RGF93X) {
		_RGF93X = RGF93X;
	}

	@JSON
	@Override
	public String getRGF93Y() {
		if (_RGF93Y == null) {
			return "";
		}
		else {
			return _RGF93Y;
		}
	}

	@Override
	public void setRGF93Y(String RGF93Y) {
		_RGF93Y = RGF93Y;
	}

	@JSON
	@Override
	public String getLocationId() {
		if (_locationId == null) {
			return "";
		}
		else {
			return _locationId;
		}
	}

	@Override
	public void setLocationId(String locationId) {
		_locationId = locationId;
	}

	@JSON
	@Override
	public String getAlias() {
		if (_alias == null) {
			return "";
		}
		else {
			return _alias;
		}
	}

	@Override
	public String getAlias(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAlias(languageId);
	}

	@Override
	public String getAlias(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAlias(languageId, useDefault);
	}

	@Override
	public String getAlias(String languageId) {
		return LocalizationUtil.getLocalization(getAlias(), languageId);
	}

	@Override
	public String getAlias(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getAlias(), languageId, useDefault);
	}

	@Override
	public String getAliasCurrentLanguageId() {
		return _aliasCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAliasCurrentValue() {
		Locale locale = getLocale(_aliasCurrentLanguageId);

		return getAlias(locale);
	}

	@Override
	public Map<Locale, String> getAliasMap() {
		return LocalizationUtil.getLocalizationMap(getAlias());
	}

	@Override
	public void setAlias(String alias) {
		_alias = alias;
	}

	@Override
	public void setAlias(String alias, Locale locale) {
		setAlias(alias, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAlias(String alias, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(alias)) {
			setAlias(
				LocalizationUtil.updateLocalization(
					getAlias(), "Alias", alias, languageId, defaultLanguageId));
		}
		else {
			setAlias(
				LocalizationUtil.removeLocalization(
					getAlias(), "Alias", languageId));
		}
	}

	@Override
	public void setAliasCurrentLanguageId(String languageId) {
		_aliasCurrentLanguageId = languageId;
	}

	@Override
	public void setAliasMap(Map<Locale, String> aliasMap) {
		setAliasMap(aliasMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAliasMap(
		Map<Locale, String> aliasMap, Locale defaultLocale) {

		if (aliasMap == null) {
			return;
		}

		setAlias(
			LocalizationUtil.updateLocalization(
				aliasMap, getAlias(), "Alias",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPresentation() {
		if (_presentation == null) {
			return "";
		}
		else {
			return _presentation;
		}
	}

	@Override
	public String getPresentation(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPresentation(languageId);
	}

	@Override
	public String getPresentation(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getPresentation(languageId, useDefault);
	}

	@Override
	public String getPresentation(String languageId) {
		return LocalizationUtil.getLocalization(getPresentation(), languageId);
	}

	@Override
	public String getPresentation(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getPresentation(), languageId, useDefault);
	}

	@Override
	public String getPresentationCurrentLanguageId() {
		return _presentationCurrentLanguageId;
	}

	@JSON
	@Override
	public String getPresentationCurrentValue() {
		Locale locale = getLocale(_presentationCurrentLanguageId);

		return getPresentation(locale);
	}

	@Override
	public Map<Locale, String> getPresentationMap() {
		return LocalizationUtil.getLocalizationMap(getPresentation());
	}

	@Override
	public void setPresentation(String presentation) {
		_presentation = presentation;
	}

	@Override
	public void setPresentation(String presentation, Locale locale) {
		setPresentation(presentation, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPresentation(
		String presentation, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(presentation)) {
			setPresentation(
				LocalizationUtil.updateLocalization(
					getPresentation(), "Presentation", presentation, languageId,
					defaultLanguageId));
		}
		else {
			setPresentation(
				LocalizationUtil.removeLocalization(
					getPresentation(), "Presentation", languageId));
		}
	}

	@Override
	public void setPresentationCurrentLanguageId(String languageId) {
		_presentationCurrentLanguageId = languageId;
	}

	@Override
	public void setPresentationMap(Map<Locale, String> presentationMap) {
		setPresentationMap(presentationMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setPresentationMap(
		Map<Locale, String> presentationMap, Locale defaultLocale) {

		if (presentationMap == null) {
			return;
		}

		setPresentation(
			LocalizationUtil.updateLocalization(
				presentationMap, getPresentation(), "Presentation",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getServiceAndActivities() {
		if (_serviceAndActivities == null) {
			return "";
		}
		else {
			return _serviceAndActivities;
		}
	}

	@Override
	public String getServiceAndActivities(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getServiceAndActivities(languageId);
	}

	@Override
	public String getServiceAndActivities(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getServiceAndActivities(languageId, useDefault);
	}

	@Override
	public String getServiceAndActivities(String languageId) {
		return LocalizationUtil.getLocalization(
			getServiceAndActivities(), languageId);
	}

	@Override
	public String getServiceAndActivities(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getServiceAndActivities(), languageId, useDefault);
	}

	@Override
	public String getServiceAndActivitiesCurrentLanguageId() {
		return _serviceAndActivitiesCurrentLanguageId;
	}

	@JSON
	@Override
	public String getServiceAndActivitiesCurrentValue() {
		Locale locale = getLocale(_serviceAndActivitiesCurrentLanguageId);

		return getServiceAndActivities(locale);
	}

	@Override
	public Map<Locale, String> getServiceAndActivitiesMap() {
		return LocalizationUtil.getLocalizationMap(getServiceAndActivities());
	}

	@Override
	public void setServiceAndActivities(String serviceAndActivities) {
		_serviceAndActivities = serviceAndActivities;
	}

	@Override
	public void setServiceAndActivities(
		String serviceAndActivities, Locale locale) {

		setServiceAndActivities(
			serviceAndActivities, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setServiceAndActivities(
		String serviceAndActivities, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(serviceAndActivities)) {
			setServiceAndActivities(
				LocalizationUtil.updateLocalization(
					getServiceAndActivities(), "ServiceAndActivities",
					serviceAndActivities, languageId, defaultLanguageId));
		}
		else {
			setServiceAndActivities(
				LocalizationUtil.removeLocalization(
					getServiceAndActivities(), "ServiceAndActivities",
					languageId));
		}
	}

	@Override
	public void setServiceAndActivitiesCurrentLanguageId(String languageId) {
		_serviceAndActivitiesCurrentLanguageId = languageId;
	}

	@Override
	public void setServiceAndActivitiesMap(
		Map<Locale, String> serviceAndActivitiesMap) {

		setServiceAndActivitiesMap(
			serviceAndActivitiesMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setServiceAndActivitiesMap(
		Map<Locale, String> serviceAndActivitiesMap, Locale defaultLocale) {

		if (serviceAndActivitiesMap == null) {
			return;
		}

		setServiceAndActivities(
			LocalizationUtil.updateLocalization(
				serviceAndActivitiesMap, getServiceAndActivities(),
				"ServiceAndActivities",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getCharacteristics() {
		if (_characteristics == null) {
			return "";
		}
		else {
			return _characteristics;
		}
	}

	@Override
	public String getCharacteristics(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getCharacteristics(languageId);
	}

	@Override
	public String getCharacteristics(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getCharacteristics(languageId, useDefault);
	}

	@Override
	public String getCharacteristics(String languageId) {
		return LocalizationUtil.getLocalization(
			getCharacteristics(), languageId);
	}

	@Override
	public String getCharacteristics(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getCharacteristics(), languageId, useDefault);
	}

	@Override
	public String getCharacteristicsCurrentLanguageId() {
		return _characteristicsCurrentLanguageId;
	}

	@JSON
	@Override
	public String getCharacteristicsCurrentValue() {
		Locale locale = getLocale(_characteristicsCurrentLanguageId);

		return getCharacteristics(locale);
	}

	@Override
	public Map<Locale, String> getCharacteristicsMap() {
		return LocalizationUtil.getLocalizationMap(getCharacteristics());
	}

	@Override
	public void setCharacteristics(String characteristics) {
		_characteristics = characteristics;
	}

	@Override
	public void setCharacteristics(String characteristics, Locale locale) {
		setCharacteristics(
			characteristics, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setCharacteristics(
		String characteristics, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(characteristics)) {
			setCharacteristics(
				LocalizationUtil.updateLocalization(
					getCharacteristics(), "Characteristics", characteristics,
					languageId, defaultLanguageId));
		}
		else {
			setCharacteristics(
				LocalizationUtil.removeLocalization(
					getCharacteristics(), "Characteristics", languageId));
		}
	}

	@Override
	public void setCharacteristicsCurrentLanguageId(String languageId) {
		_characteristicsCurrentLanguageId = languageId;
	}

	@Override
	public void setCharacteristicsMap(Map<Locale, String> characteristicsMap) {
		setCharacteristicsMap(characteristicsMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setCharacteristicsMap(
		Map<Locale, String> characteristicsMap, Locale defaultLocale) {

		if (characteristicsMap == null) {
			return;
		}

		setCharacteristics(
			LocalizationUtil.updateLocalization(
				characteristicsMap, getCharacteristics(), "Characteristics",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public boolean getSubjectToPublicHoliday() {
		return _subjectToPublicHoliday;
	}

	@JSON
	@Override
	public boolean isSubjectToPublicHoliday() {
		return _subjectToPublicHoliday;
	}

	@Override
	public void setSubjectToPublicHoliday(boolean subjectToPublicHoliday) {
		_subjectToPublicHoliday = subjectToPublicHoliday;
	}

	@JSON
	@Override
	public String getExceptionalSchedule() {
		if (_exceptionalSchedule == null) {
			return "";
		}
		else {
			return _exceptionalSchedule;
		}
	}

	@Override
	public String getExceptionalSchedule(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getExceptionalSchedule(languageId);
	}

	@Override
	public String getExceptionalSchedule(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getExceptionalSchedule(languageId, useDefault);
	}

	@Override
	public String getExceptionalSchedule(String languageId) {
		return LocalizationUtil.getLocalization(
			getExceptionalSchedule(), languageId);
	}

	@Override
	public String getExceptionalSchedule(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getExceptionalSchedule(), languageId, useDefault);
	}

	@Override
	public String getExceptionalScheduleCurrentLanguageId() {
		return _exceptionalScheduleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getExceptionalScheduleCurrentValue() {
		Locale locale = getLocale(_exceptionalScheduleCurrentLanguageId);

		return getExceptionalSchedule(locale);
	}

	@Override
	public Map<Locale, String> getExceptionalScheduleMap() {
		return LocalizationUtil.getLocalizationMap(getExceptionalSchedule());
	}

	@Override
	public void setExceptionalSchedule(String exceptionalSchedule) {
		_exceptionalSchedule = exceptionalSchedule;
	}

	@Override
	public void setExceptionalSchedule(
		String exceptionalSchedule, Locale locale) {

		setExceptionalSchedule(
			exceptionalSchedule, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setExceptionalSchedule(
		String exceptionalSchedule, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(exceptionalSchedule)) {
			setExceptionalSchedule(
				LocalizationUtil.updateLocalization(
					getExceptionalSchedule(), "ExceptionalSchedule",
					exceptionalSchedule, languageId, defaultLanguageId));
		}
		else {
			setExceptionalSchedule(
				LocalizationUtil.removeLocalization(
					getExceptionalSchedule(), "ExceptionalSchedule",
					languageId));
		}
	}

	@Override
	public void setExceptionalScheduleCurrentLanguageId(String languageId) {
		_exceptionalScheduleCurrentLanguageId = languageId;
	}

	@Override
	public void setExceptionalScheduleMap(
		Map<Locale, String> exceptionalScheduleMap) {

		setExceptionalScheduleMap(
			exceptionalScheduleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setExceptionalScheduleMap(
		Map<Locale, String> exceptionalScheduleMap, Locale defaultLocale) {

		if (exceptionalScheduleMap == null) {
			return;
		}

		setExceptionalSchedule(
			LocalizationUtil.updateLocalization(
				exceptionalScheduleMap, getExceptionalSchedule(),
				"ExceptionalSchedule", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public boolean getDisplayEvents() {
		return _displayEvents;
	}

	@JSON
	@Override
	public boolean isDisplayEvents() {
		return _displayEvents;
	}

	@Override
	public void setDisplayEvents(boolean displayEvents) {
		_displayEvents = displayEvents;
	}

	@JSON
	@Override
	public String getAdditionalInformation() {
		if (_additionalInformation == null) {
			return "";
		}
		else {
			return _additionalInformation;
		}
	}

	@Override
	public String getAdditionalInformation(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAdditionalInformation(languageId);
	}

	@Override
	public String getAdditionalInformation(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAdditionalInformation(languageId, useDefault);
	}

	@Override
	public String getAdditionalInformation(String languageId) {
		return LocalizationUtil.getLocalization(
			getAdditionalInformation(), languageId);
	}

	@Override
	public String getAdditionalInformation(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getAdditionalInformation(), languageId, useDefault);
	}

	@Override
	public String getAdditionalInformationCurrentLanguageId() {
		return _additionalInformationCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAdditionalInformationCurrentValue() {
		Locale locale = getLocale(_additionalInformationCurrentLanguageId);

		return getAdditionalInformation(locale);
	}

	@Override
	public Map<Locale, String> getAdditionalInformationMap() {
		return LocalizationUtil.getLocalizationMap(getAdditionalInformation());
	}

	@Override
	public void setAdditionalInformation(String additionalInformation) {
		_additionalInformation = additionalInformation;
	}

	@Override
	public void setAdditionalInformation(
		String additionalInformation, Locale locale) {

		setAdditionalInformation(
			additionalInformation, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAdditionalInformation(
		String additionalInformation, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(additionalInformation)) {
			setAdditionalInformation(
				LocalizationUtil.updateLocalization(
					getAdditionalInformation(), "AdditionalInformation",
					additionalInformation, languageId, defaultLanguageId));
		}
		else {
			setAdditionalInformation(
				LocalizationUtil.removeLocalization(
					getAdditionalInformation(), "AdditionalInformation",
					languageId));
		}
	}

	@Override
	public void setAdditionalInformationCurrentLanguageId(String languageId) {
		_additionalInformationCurrentLanguageId = languageId;
	}

	@Override
	public void setAdditionalInformationMap(
		Map<Locale, String> additionalInformationMap) {

		setAdditionalInformationMap(
			additionalInformationMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAdditionalInformationMap(
		Map<Locale, String> additionalInformationMap, Locale defaultLocale) {

		if (additionalInformationMap == null) {
			return;
		}

		setAdditionalInformation(
			LocalizationUtil.updateLocalization(
				additionalInformationMap, getAdditionalInformation(),
				"AdditionalInformation",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getContenuTooltipCarto() {
		if (_contenuTooltipCarto == null) {
			return "";
		}
		else {
			return _contenuTooltipCarto;
		}
	}

	@Override
	public String getContenuTooltipCarto(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContenuTooltipCarto(languageId);
	}

	@Override
	public String getContenuTooltipCarto(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContenuTooltipCarto(languageId, useDefault);
	}

	@Override
	public String getContenuTooltipCarto(String languageId) {
		return LocalizationUtil.getLocalization(
			getContenuTooltipCarto(), languageId);
	}

	@Override
	public String getContenuTooltipCarto(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getContenuTooltipCarto(), languageId, useDefault);
	}

	@Override
	public String getContenuTooltipCartoCurrentLanguageId() {
		return _contenuTooltipCartoCurrentLanguageId;
	}

	@JSON
	@Override
	public String getContenuTooltipCartoCurrentValue() {
		Locale locale = getLocale(_contenuTooltipCartoCurrentLanguageId);

		return getContenuTooltipCarto(locale);
	}

	@Override
	public Map<Locale, String> getContenuTooltipCartoMap() {
		return LocalizationUtil.getLocalizationMap(getContenuTooltipCarto());
	}

	@Override
	public void setContenuTooltipCarto(String contenuTooltipCarto) {
		_contenuTooltipCarto = contenuTooltipCarto;
	}

	@Override
	public void setContenuTooltipCarto(
		String contenuTooltipCarto, Locale locale) {

		setContenuTooltipCarto(
			contenuTooltipCarto, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setContenuTooltipCarto(
		String contenuTooltipCarto, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(contenuTooltipCarto)) {
			setContenuTooltipCarto(
				LocalizationUtil.updateLocalization(
					getContenuTooltipCarto(), "ContenuTooltipCarto",
					contenuTooltipCarto, languageId, defaultLanguageId));
		}
		else {
			setContenuTooltipCarto(
				LocalizationUtil.removeLocalization(
					getContenuTooltipCarto(), "ContenuTooltipCarto",
					languageId));
		}
	}

	@Override
	public void setContenuTooltipCartoCurrentLanguageId(String languageId) {
		_contenuTooltipCartoCurrentLanguageId = languageId;
	}

	@Override
	public void setContenuTooltipCartoMap(
		Map<Locale, String> contenuTooltipCartoMap) {

		setContenuTooltipCartoMap(
			contenuTooltipCartoMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setContenuTooltipCartoMap(
		Map<Locale, String> contenuTooltipCartoMap, Locale defaultLocale) {

		if (contenuTooltipCartoMap == null) {
			return;
		}

		setContenuTooltipCarto(
			LocalizationUtil.updateLocalization(
				contenuTooltipCartoMap, getContenuTooltipCarto(),
				"ContenuTooltipCarto", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public boolean getHasURLSchedule() {
		return _hasURLSchedule;
	}

	@JSON
	@Override
	public boolean isHasURLSchedule() {
		return _hasURLSchedule;
	}

	@Override
	public void setHasURLSchedule(boolean hasURLSchedule) {
		_hasURLSchedule = hasURLSchedule;
	}

	@JSON
	@Override
	public String getScheduleLinkName() {
		if (_scheduleLinkName == null) {
			return "";
		}
		else {
			return _scheduleLinkName;
		}
	}

	@Override
	public String getScheduleLinkName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getScheduleLinkName(languageId);
	}

	@Override
	public String getScheduleLinkName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getScheduleLinkName(languageId, useDefault);
	}

	@Override
	public String getScheduleLinkName(String languageId) {
		return LocalizationUtil.getLocalization(
			getScheduleLinkName(), languageId);
	}

	@Override
	public String getScheduleLinkName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getScheduleLinkName(), languageId, useDefault);
	}

	@Override
	public String getScheduleLinkNameCurrentLanguageId() {
		return _scheduleLinkNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getScheduleLinkNameCurrentValue() {
		Locale locale = getLocale(_scheduleLinkNameCurrentLanguageId);

		return getScheduleLinkName(locale);
	}

	@Override
	public Map<Locale, String> getScheduleLinkNameMap() {
		return LocalizationUtil.getLocalizationMap(getScheduleLinkName());
	}

	@Override
	public void setScheduleLinkName(String scheduleLinkName) {
		_scheduleLinkName = scheduleLinkName;
	}

	@Override
	public void setScheduleLinkName(String scheduleLinkName, Locale locale) {
		setScheduleLinkName(
			scheduleLinkName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setScheduleLinkName(
		String scheduleLinkName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(scheduleLinkName)) {
			setScheduleLinkName(
				LocalizationUtil.updateLocalization(
					getScheduleLinkName(), "ScheduleLinkName", scheduleLinkName,
					languageId, defaultLanguageId));
		}
		else {
			setScheduleLinkName(
				LocalizationUtil.removeLocalization(
					getScheduleLinkName(), "ScheduleLinkName", languageId));
		}
	}

	@Override
	public void setScheduleLinkNameCurrentLanguageId(String languageId) {
		_scheduleLinkNameCurrentLanguageId = languageId;
	}

	@Override
	public void setScheduleLinkNameMap(
		Map<Locale, String> scheduleLinkNameMap) {

		setScheduleLinkNameMap(
			scheduleLinkNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setScheduleLinkNameMap(
		Map<Locale, String> scheduleLinkNameMap, Locale defaultLocale) {

		if (scheduleLinkNameMap == null) {
			return;
		}

		setScheduleLinkName(
			LocalizationUtil.updateLocalization(
				scheduleLinkNameMap, getScheduleLinkName(), "ScheduleLinkName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getScheduleLinkURL() {
		if (_scheduleLinkURL == null) {
			return "";
		}
		else {
			return _scheduleLinkURL;
		}
	}

	@Override
	public String getScheduleLinkURL(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getScheduleLinkURL(languageId);
	}

	@Override
	public String getScheduleLinkURL(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getScheduleLinkURL(languageId, useDefault);
	}

	@Override
	public String getScheduleLinkURL(String languageId) {
		return LocalizationUtil.getLocalization(
			getScheduleLinkURL(), languageId);
	}

	@Override
	public String getScheduleLinkURL(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getScheduleLinkURL(), languageId, useDefault);
	}

	@Override
	public String getScheduleLinkURLCurrentLanguageId() {
		return _scheduleLinkURLCurrentLanguageId;
	}

	@JSON
	@Override
	public String getScheduleLinkURLCurrentValue() {
		Locale locale = getLocale(_scheduleLinkURLCurrentLanguageId);

		return getScheduleLinkURL(locale);
	}

	@Override
	public Map<Locale, String> getScheduleLinkURLMap() {
		return LocalizationUtil.getLocalizationMap(getScheduleLinkURL());
	}

	@Override
	public void setScheduleLinkURL(String scheduleLinkURL) {
		_scheduleLinkURL = scheduleLinkURL;
	}

	@Override
	public void setScheduleLinkURL(String scheduleLinkURL, Locale locale) {
		setScheduleLinkURL(
			scheduleLinkURL, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setScheduleLinkURL(
		String scheduleLinkURL, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(scheduleLinkURL)) {
			setScheduleLinkURL(
				LocalizationUtil.updateLocalization(
					getScheduleLinkURL(), "ScheduleLinkURL", scheduleLinkURL,
					languageId, defaultLanguageId));
		}
		else {
			setScheduleLinkURL(
				LocalizationUtil.removeLocalization(
					getScheduleLinkURL(), "ScheduleLinkURL", languageId));
		}
	}

	@Override
	public void setScheduleLinkURLCurrentLanguageId(String languageId) {
		_scheduleLinkURLCurrentLanguageId = languageId;
	}

	@Override
	public void setScheduleLinkURLMap(Map<Locale, String> scheduleLinkURLMap) {
		setScheduleLinkURLMap(scheduleLinkURLMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setScheduleLinkURLMap(
		Map<Locale, String> scheduleLinkURLMap, Locale defaultLocale) {

		if (scheduleLinkURLMap == null) {
			return;
		}

		setScheduleLinkURL(
			LocalizationUtil.updateLocalization(
				scheduleLinkURLMap, getScheduleLinkURL(), "ScheduleLinkURL",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return "";
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@JSON
	@Override
	public String getMail() {
		if (_mail == null) {
			return "";
		}
		else {
			return _mail;
		}
	}

	@Override
	public void setMail(String mail) {
		_mail = mail;
	}

	@JSON
	@Override
	public String getSiteURL() {
		if (_siteURL == null) {
			return "";
		}
		else {
			return _siteURL;
		}
	}

	@Override
	public String getSiteURL(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSiteURL(languageId);
	}

	@Override
	public String getSiteURL(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSiteURL(languageId, useDefault);
	}

	@Override
	public String getSiteURL(String languageId) {
		return LocalizationUtil.getLocalization(getSiteURL(), languageId);
	}

	@Override
	public String getSiteURL(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getSiteURL(), languageId, useDefault);
	}

	@Override
	public String getSiteURLCurrentLanguageId() {
		return _siteURLCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSiteURLCurrentValue() {
		Locale locale = getLocale(_siteURLCurrentLanguageId);

		return getSiteURL(locale);
	}

	@Override
	public Map<Locale, String> getSiteURLMap() {
		return LocalizationUtil.getLocalizationMap(getSiteURL());
	}

	@Override
	public void setSiteURL(String siteURL) {
		_siteURL = siteURL;
	}

	@Override
	public void setSiteURL(String siteURL, Locale locale) {
		setSiteURL(siteURL, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSiteURL(
		String siteURL, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(siteURL)) {
			setSiteURL(
				LocalizationUtil.updateLocalization(
					getSiteURL(), "SiteURL", siteURL, languageId,
					defaultLanguageId));
		}
		else {
			setSiteURL(
				LocalizationUtil.removeLocalization(
					getSiteURL(), "SiteURL", languageId));
		}
	}

	@Override
	public void setSiteURLCurrentLanguageId(String languageId) {
		_siteURLCurrentLanguageId = languageId;
	}

	@Override
	public void setSiteURLMap(Map<Locale, String> siteURLMap) {
		setSiteURLMap(siteURLMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSiteURLMap(
		Map<Locale, String> siteURLMap, Locale defaultLocale) {

		if (siteURLMap == null) {
			return;
		}

		setSiteURL(
			LocalizationUtil.updateLocalization(
				siteURLMap, getSiteURL(), "SiteURL",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getSiteLabel() {
		if (_siteLabel == null) {
			return "";
		}
		else {
			return _siteLabel;
		}
	}

	@Override
	public String getSiteLabel(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSiteLabel(languageId);
	}

	@Override
	public String getSiteLabel(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSiteLabel(languageId, useDefault);
	}

	@Override
	public String getSiteLabel(String languageId) {
		return LocalizationUtil.getLocalization(getSiteLabel(), languageId);
	}

	@Override
	public String getSiteLabel(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getSiteLabel(), languageId, useDefault);
	}

	@Override
	public String getSiteLabelCurrentLanguageId() {
		return _siteLabelCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSiteLabelCurrentValue() {
		Locale locale = getLocale(_siteLabelCurrentLanguageId);

		return getSiteLabel(locale);
	}

	@Override
	public Map<Locale, String> getSiteLabelMap() {
		return LocalizationUtil.getLocalizationMap(getSiteLabel());
	}

	@Override
	public void setSiteLabel(String siteLabel) {
		_siteLabel = siteLabel;
	}

	@Override
	public void setSiteLabel(String siteLabel, Locale locale) {
		setSiteLabel(siteLabel, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSiteLabel(
		String siteLabel, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(siteLabel)) {
			setSiteLabel(
				LocalizationUtil.updateLocalization(
					getSiteLabel(), "SiteLabel", siteLabel, languageId,
					defaultLanguageId));
		}
		else {
			setSiteLabel(
				LocalizationUtil.removeLocalization(
					getSiteLabel(), "SiteLabel", languageId));
		}
	}

	@Override
	public void setSiteLabelCurrentLanguageId(String languageId) {
		_siteLabelCurrentLanguageId = languageId;
	}

	@Override
	public void setSiteLabelMap(Map<Locale, String> siteLabelMap) {
		setSiteLabelMap(siteLabelMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSiteLabelMap(
		Map<Locale, String> siteLabelMap, Locale defaultLocale) {

		if (siteLabelMap == null) {
			return;
		}

		setSiteLabel(
			LocalizationUtil.updateLocalization(
				siteLabelMap, getSiteLabel(), "SiteLabel",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getFacebookURL() {
		if (_facebookURL == null) {
			return "";
		}
		else {
			return _facebookURL;
		}
	}

	@Override
	public String getFacebookURL(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFacebookURL(languageId);
	}

	@Override
	public String getFacebookURL(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFacebookURL(languageId, useDefault);
	}

	@Override
	public String getFacebookURL(String languageId) {
		return LocalizationUtil.getLocalization(getFacebookURL(), languageId);
	}

	@Override
	public String getFacebookURL(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getFacebookURL(), languageId, useDefault);
	}

	@Override
	public String getFacebookURLCurrentLanguageId() {
		return _facebookURLCurrentLanguageId;
	}

	@JSON
	@Override
	public String getFacebookURLCurrentValue() {
		Locale locale = getLocale(_facebookURLCurrentLanguageId);

		return getFacebookURL(locale);
	}

	@Override
	public Map<Locale, String> getFacebookURLMap() {
		return LocalizationUtil.getLocalizationMap(getFacebookURL());
	}

	@Override
	public void setFacebookURL(String facebookURL) {
		_facebookURL = facebookURL;
	}

	@Override
	public void setFacebookURL(String facebookURL, Locale locale) {
		setFacebookURL(facebookURL, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setFacebookURL(
		String facebookURL, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(facebookURL)) {
			setFacebookURL(
				LocalizationUtil.updateLocalization(
					getFacebookURL(), "FacebookURL", facebookURL, languageId,
					defaultLanguageId));
		}
		else {
			setFacebookURL(
				LocalizationUtil.removeLocalization(
					getFacebookURL(), "FacebookURL", languageId));
		}
	}

	@Override
	public void setFacebookURLCurrentLanguageId(String languageId) {
		_facebookURLCurrentLanguageId = languageId;
	}

	@Override
	public void setFacebookURLMap(Map<Locale, String> facebookURLMap) {
		setFacebookURLMap(facebookURLMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setFacebookURLMap(
		Map<Locale, String> facebookURLMap, Locale defaultLocale) {

		if (facebookURLMap == null) {
			return;
		}

		setFacebookURL(
			LocalizationUtil.updateLocalization(
				facebookURLMap, getFacebookURL(), "FacebookURL",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getFacebookLabel() {
		if (_facebookLabel == null) {
			return "";
		}
		else {
			return _facebookLabel;
		}
	}

	@Override
	public String getFacebookLabel(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFacebookLabel(languageId);
	}

	@Override
	public String getFacebookLabel(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getFacebookLabel(languageId, useDefault);
	}

	@Override
	public String getFacebookLabel(String languageId) {
		return LocalizationUtil.getLocalization(getFacebookLabel(), languageId);
	}

	@Override
	public String getFacebookLabel(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getFacebookLabel(), languageId, useDefault);
	}

	@Override
	public String getFacebookLabelCurrentLanguageId() {
		return _facebookLabelCurrentLanguageId;
	}

	@JSON
	@Override
	public String getFacebookLabelCurrentValue() {
		Locale locale = getLocale(_facebookLabelCurrentLanguageId);

		return getFacebookLabel(locale);
	}

	@Override
	public Map<Locale, String> getFacebookLabelMap() {
		return LocalizationUtil.getLocalizationMap(getFacebookLabel());
	}

	@Override
	public void setFacebookLabel(String facebookLabel) {
		_facebookLabel = facebookLabel;
	}

	@Override
	public void setFacebookLabel(String facebookLabel, Locale locale) {
		setFacebookLabel(facebookLabel, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setFacebookLabel(
		String facebookLabel, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(facebookLabel)) {
			setFacebookLabel(
				LocalizationUtil.updateLocalization(
					getFacebookLabel(), "FacebookLabel", facebookLabel,
					languageId, defaultLanguageId));
		}
		else {
			setFacebookLabel(
				LocalizationUtil.removeLocalization(
					getFacebookLabel(), "FacebookLabel", languageId));
		}
	}

	@Override
	public void setFacebookLabelCurrentLanguageId(String languageId) {
		_facebookLabelCurrentLanguageId = languageId;
	}

	@Override
	public void setFacebookLabelMap(Map<Locale, String> facebookLabelMap) {
		setFacebookLabelMap(facebookLabelMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setFacebookLabelMap(
		Map<Locale, String> facebookLabelMap, Locale defaultLocale) {

		if (facebookLabelMap == null) {
			return;
		}

		setFacebookLabel(
			LocalizationUtil.updateLocalization(
				facebookLabelMap, getFacebookLabel(), "FacebookLabel",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getInstagramURL() {
		if (_instagramURL == null) {
			return "";
		}
		else {
			return _instagramURL;
		}
	}

	@Override
	public String getInstagramURL(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getInstagramURL(languageId);
	}

	@Override
	public String getInstagramURL(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getInstagramURL(languageId, useDefault);
	}

	@Override
	public String getInstagramURL(String languageId) {
		return LocalizationUtil.getLocalization(getInstagramURL(), languageId);
	}

	@Override
	public String getInstagramURL(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getInstagramURL(), languageId, useDefault);
	}

	@Override
	public String getInstagramURLCurrentLanguageId() {
		return _instagramURLCurrentLanguageId;
	}

	@JSON
	@Override
	public String getInstagramURLCurrentValue() {
		Locale locale = getLocale(_instagramURLCurrentLanguageId);

		return getInstagramURL(locale);
	}

	@Override
	public Map<Locale, String> getInstagramURLMap() {
		return LocalizationUtil.getLocalizationMap(getInstagramURL());
	}

	@Override
	public void setInstagramURL(String instagramURL) {
		_instagramURL = instagramURL;
	}

	@Override
	public void setInstagramURL(String instagramURL, Locale locale) {
		setInstagramURL(instagramURL, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setInstagramURL(
		String instagramURL, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(instagramURL)) {
			setInstagramURL(
				LocalizationUtil.updateLocalization(
					getInstagramURL(), "InstagramURL", instagramURL, languageId,
					defaultLanguageId));
		}
		else {
			setInstagramURL(
				LocalizationUtil.removeLocalization(
					getInstagramURL(), "InstagramURL", languageId));
		}
	}

	@Override
	public void setInstagramURLCurrentLanguageId(String languageId) {
		_instagramURLCurrentLanguageId = languageId;
	}

	@Override
	public void setInstagramURLMap(Map<Locale, String> instagramURLMap) {
		setInstagramURLMap(instagramURLMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setInstagramURLMap(
		Map<Locale, String> instagramURLMap, Locale defaultLocale) {

		if (instagramURLMap == null) {
			return;
		}

		setInstagramURL(
			LocalizationUtil.updateLocalization(
				instagramURLMap, getInstagramURL(), "InstagramURL",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getInstagramLabel() {
		if (_instagramLabel == null) {
			return "";
		}
		else {
			return _instagramLabel;
		}
	}

	@Override
	public String getInstagramLabel(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getInstagramLabel(languageId);
	}

	@Override
	public String getInstagramLabel(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getInstagramLabel(languageId, useDefault);
	}

	@Override
	public String getInstagramLabel(String languageId) {
		return LocalizationUtil.getLocalization(
			getInstagramLabel(), languageId);
	}

	@Override
	public String getInstagramLabel(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getInstagramLabel(), languageId, useDefault);
	}

	@Override
	public String getInstagramLabelCurrentLanguageId() {
		return _instagramLabelCurrentLanguageId;
	}

	@JSON
	@Override
	public String getInstagramLabelCurrentValue() {
		Locale locale = getLocale(_instagramLabelCurrentLanguageId);

		return getInstagramLabel(locale);
	}

	@Override
	public Map<Locale, String> getInstagramLabelMap() {
		return LocalizationUtil.getLocalizationMap(getInstagramLabel());
	}

	@Override
	public void setInstagramLabel(String instagramLabel) {
		_instagramLabel = instagramLabel;
	}

	@Override
	public void setInstagramLabel(String instagramLabel, Locale locale) {
		setInstagramLabel(instagramLabel, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setInstagramLabel(
		String instagramLabel, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(instagramLabel)) {
			setInstagramLabel(
				LocalizationUtil.updateLocalization(
					getInstagramLabel(), "InstagramLabel", instagramLabel,
					languageId, defaultLanguageId));
		}
		else {
			setInstagramLabel(
				LocalizationUtil.removeLocalization(
					getInstagramLabel(), "InstagramLabel", languageId));
		}
	}

	@Override
	public void setInstagramLabelCurrentLanguageId(String languageId) {
		_instagramLabelCurrentLanguageId = languageId;
	}

	@Override
	public void setInstagramLabelMap(Map<Locale, String> instagramLabelMap) {
		setInstagramLabelMap(instagramLabelMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setInstagramLabelMap(
		Map<Locale, String> instagramLabelMap, Locale defaultLocale) {

		if (instagramLabelMap == null) {
			return;
		}

		setInstagramLabel(
			LocalizationUtil.updateLocalization(
				instagramLabelMap, getInstagramLabel(), "InstagramLabel",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getAccesMap() {
		if (_accesMap == null) {
			return "";
		}
		else {
			return _accesMap;
		}
	}

	@Override
	public String getAccesMap(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAccesMap(languageId);
	}

	@Override
	public String getAccesMap(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAccesMap(languageId, useDefault);
	}

	@Override
	public String getAccesMap(String languageId) {
		return LocalizationUtil.getLocalization(getAccesMap(), languageId);
	}

	@Override
	public String getAccesMap(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getAccesMap(), languageId, useDefault);
	}

	@Override
	public String getAccesMapCurrentLanguageId() {
		return _accesMapCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAccesMapCurrentValue() {
		Locale locale = getLocale(_accesMapCurrentLanguageId);

		return getAccesMap(locale);
	}

	@Override
	public Map<Locale, String> getAccesMapMap() {
		return LocalizationUtil.getLocalizationMap(getAccesMap());
	}

	@Override
	public void setAccesMap(String accesMap) {
		_accesMap = accesMap;
	}

	@Override
	public void setAccesMap(String accesMap, Locale locale) {
		setAccesMap(accesMap, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAccesMap(
		String accesMap, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(accesMap)) {
			setAccesMap(
				LocalizationUtil.updateLocalization(
					getAccesMap(), "AccesMap", accesMap, languageId,
					defaultLanguageId));
		}
		else {
			setAccesMap(
				LocalizationUtil.removeLocalization(
					getAccesMap(), "AccesMap", languageId));
		}
	}

	@Override
	public void setAccesMapCurrentLanguageId(String languageId) {
		_accesMapCurrentLanguageId = languageId;
	}

	@Override
	public void setAccesMapMap(Map<Locale, String> accesMapMap) {
		setAccesMapMap(accesMapMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAccesMapMap(
		Map<Locale, String> accesMapMap, Locale defaultLocale) {

		if (accesMapMap == null) {
			return;
		}

		setAccesMap(
			LocalizationUtil.updateLocalization(
				accesMapMap, getAccesMap(), "AccesMap",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getAccess() {
		if (_access == null) {
			return "";
		}
		else {
			return _access;
		}
	}

	@Override
	public String getAccess(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAccess(languageId);
	}

	@Override
	public String getAccess(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAccess(languageId, useDefault);
	}

	@Override
	public String getAccess(String languageId) {
		return LocalizationUtil.getLocalization(getAccess(), languageId);
	}

	@Override
	public String getAccess(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getAccess(), languageId, useDefault);
	}

	@Override
	public String getAccessCurrentLanguageId() {
		return _accessCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAccessCurrentValue() {
		Locale locale = getLocale(_accessCurrentLanguageId);

		return getAccess(locale);
	}

	@Override
	public Map<Locale, String> getAccessMap() {
		return LocalizationUtil.getLocalizationMap(getAccess());
	}

	@Override
	public void setAccess(String access) {
		_access = access;
	}

	@Override
	public void setAccess(String access, Locale locale) {
		setAccess(access, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAccess(String access, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(access)) {
			setAccess(
				LocalizationUtil.updateLocalization(
					getAccess(), "Access", access, languageId,
					defaultLanguageId));
		}
		else {
			setAccess(
				LocalizationUtil.removeLocalization(
					getAccess(), "Access", languageId));
		}
	}

	@Override
	public void setAccessCurrentLanguageId(String languageId) {
		_accessCurrentLanguageId = languageId;
	}

	@Override
	public void setAccessMap(Map<Locale, String> accessMap) {
		setAccessMap(accessMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAccessMap(
		Map<Locale, String> accessMap, Locale defaultLocale) {

		if (accessMap == null) {
			return;
		}

		setAccess(
			LocalizationUtil.updateLocalization(
				accessMap, getAccess(), "Access",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getAccessForDisabled() {
		if (_accessForDisabled == null) {
			return "";
		}
		else {
			return _accessForDisabled;
		}
	}

	@Override
	public String getAccessForDisabled(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAccessForDisabled(languageId);
	}

	@Override
	public String getAccessForDisabled(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAccessForDisabled(languageId, useDefault);
	}

	@Override
	public String getAccessForDisabled(String languageId) {
		return LocalizationUtil.getLocalization(
			getAccessForDisabled(), languageId);
	}

	@Override
	public String getAccessForDisabled(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getAccessForDisabled(), languageId, useDefault);
	}

	@Override
	public String getAccessForDisabledCurrentLanguageId() {
		return _accessForDisabledCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAccessForDisabledCurrentValue() {
		Locale locale = getLocale(_accessForDisabledCurrentLanguageId);

		return getAccessForDisabled(locale);
	}

	@Override
	public Map<Locale, String> getAccessForDisabledMap() {
		return LocalizationUtil.getLocalizationMap(getAccessForDisabled());
	}

	@Override
	public void setAccessForDisabled(String accessForDisabled) {
		_accessForDisabled = accessForDisabled;
	}

	@Override
	public void setAccessForDisabled(String accessForDisabled, Locale locale) {
		setAccessForDisabled(
			accessForDisabled, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAccessForDisabled(
		String accessForDisabled, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(accessForDisabled)) {
			setAccessForDisabled(
				LocalizationUtil.updateLocalization(
					getAccessForDisabled(), "AccessForDisabled",
					accessForDisabled, languageId, defaultLanguageId));
		}
		else {
			setAccessForDisabled(
				LocalizationUtil.removeLocalization(
					getAccessForDisabled(), "AccessForDisabled", languageId));
		}
	}

	@Override
	public void setAccessForDisabledCurrentLanguageId(String languageId) {
		_accessForDisabledCurrentLanguageId = languageId;
	}

	@Override
	public void setAccessForDisabledMap(
		Map<Locale, String> accessForDisabledMap) {

		setAccessForDisabledMap(
			accessForDisabledMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAccessForDisabledMap(
		Map<Locale, String> accessForDisabledMap, Locale defaultLocale) {

		if (accessForDisabledMap == null) {
			return;
		}

		setAccessForDisabled(
			LocalizationUtil.updateLocalization(
				accessForDisabledMap, getAccessForDisabled(),
				"AccessForDisabled", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Boolean getAccessForBlind() {
		return _accessForBlind;
	}

	@Override
	public void setAccessForBlind(Boolean accessForBlind) {
		_accessForBlind = accessForBlind;
	}

	@JSON
	@Override
	public Boolean getAccessForDeaf() {
		return _accessForDeaf;
	}

	@Override
	public void setAccessForDeaf(Boolean accessForDeaf) {
		_accessForDeaf = accessForDeaf;
	}

	@JSON
	@Override
	public Boolean getAccessForWheelchair() {
		return _accessForWheelchair;
	}

	@Override
	public void setAccessForWheelchair(Boolean accessForWheelchair) {
		_accessForWheelchair = accessForWheelchair;
	}

	@JSON
	@Override
	public Boolean getAccessForElder() {
		return _accessForElder;
	}

	@Override
	public void setAccessForElder(Boolean accessForElder) {
		_accessForElder = accessForElder;
	}

	@JSON
	@Override
	public Boolean getAccessForDeficient() {
		return _accessForDeficient;
	}

	@Override
	public void setAccessForDeficient(Boolean accessForDeficient) {
		_accessForDeficient = accessForDeficient;
	}

	@JSON
	@Override
	public Boolean getRTEnabled() {
		return _RTEnabled;
	}

	@Override
	public void setRTEnabled(Boolean RTEnabled) {
		_RTEnabled = RTEnabled;
	}

	@JSON
	@Override
	public String getRTType() {
		if (_RTType == null) {
			return "";
		}
		else {
			return _RTType;
		}
	}

	@Override
	public void setRTType(String RTType) {
		_RTType = RTType;
	}

	@JSON
	@Override
	public String getRTExternalId() {
		if (_RTExternalId == null) {
			return "";
		}
		else {
			return _RTExternalId;
		}
	}

	@Override
	public void setRTExternalId(String RTExternalId) {
		_RTExternalId = RTExternalId;
	}

	@JSON
	@Override
	public long getRTAvailable() {
		return _RTAvailable;
	}

	@Override
	public void setRTAvailable(long RTAvailable) {
		_RTAvailable = RTAvailable;
	}

	@JSON
	@Override
	public long getRTOccupation() {
		return _RTOccupation;
	}

	@Override
	public void setRTOccupation(long RTOccupation) {
		_RTOccupation = RTOccupation;
	}

	@JSON
	@Override
	public long getRTCapacity() {
		return _RTCapacity;
	}

	@Override
	public void setRTCapacity(long RTCapacity) {
		_RTCapacity = RTCapacity;
	}

	@JSON
	@Override
	public String getRTStatus() {
		if (_RTStatus == null) {
			return "";
		}
		else {
			return _RTStatus;
		}
	}

	@Override
	public void setRTStatus(String RTStatus) {
		_RTStatus = RTStatus;
	}

	@JSON
	@Override
	public Date getRTLastUpdate() {
		return _RTLastUpdate;
	}

	@Override
	public void setRTLastUpdate(Date RTLastUpdate) {
		_RTLastUpdate = RTLastUpdate;
	}

	@JSON
	@Override
	public long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(long imageId) {
		_imageId = imageId;
	}

	@JSON
	@Override
	public Integer getImageWidth() {
		return _imageWidth;
	}

	@Override
	public void setImageWidth(Integer imageWidth) {
		_imageWidth = imageWidth;
	}

	@JSON
	@Override
	public Integer getImageHeight() {
		return _imageHeight;
	}

	@Override
	public void setImageHeight(Integer imageHeight) {
		_imageHeight = imageHeight;
	}

	@JSON
	@Override
	public String getImageIds() {
		if (_imageIds == null) {
			return "";
		}
		else {
			return _imageIds;
		}
	}

	@Override
	public void setImageIds(String imageIds) {
		_imageIds = imageIds;
	}

	@JSON
	@Override
	public String getVideosIds() {
		if (_videosIds == null) {
			return "";
		}
		else {
			return _videosIds;
		}
	}

	@Override
	public void setVideosIds(String videosIds) {
		_videosIds = videosIds;
	}

	@JSON
	@Override
	public long getPriceId() {
		return _priceId;
	}

	@Override
	public void setPriceId(long priceId) {
		_columnBitmask |= PRICEID_COLUMN_BITMASK;

		if (!_setOriginalPriceId) {
			_setOriginalPriceId = true;

			_originalPriceId = _priceId;
		}

		_priceId = priceId;
	}

	public long getOriginalPriceId() {
		return _originalPriceId;
	}

	@JSON
	@Override
	public String getDocumentsIds() {
		if (_documentsIds == null) {
			return "";
		}
		else {
			return _documentsIds;
		}
	}

	@Override
	public void setDocumentsIds(String documentsIds) {
		_documentsIds = documentsIds;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Place.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Place.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> aliasMap = getAliasMap();

		for (Map.Entry<Locale, String> entry : aliasMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> presentationMap = getPresentationMap();

		for (Map.Entry<Locale, String> entry : presentationMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> serviceAndActivitiesMap =
			getServiceAndActivitiesMap();

		for (Map.Entry<Locale, String> entry :
				serviceAndActivitiesMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> characteristicsMap = getCharacteristicsMap();

		for (Map.Entry<Locale, String> entry : characteristicsMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> exceptionalScheduleMap =
			getExceptionalScheduleMap();

		for (Map.Entry<Locale, String> entry :
				exceptionalScheduleMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> additionalInformationMap =
			getAdditionalInformationMap();

		for (Map.Entry<Locale, String> entry :
				additionalInformationMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> contenuTooltipCartoMap =
			getContenuTooltipCartoMap();

		for (Map.Entry<Locale, String> entry :
				contenuTooltipCartoMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> scheduleLinkNameMap = getScheduleLinkNameMap();

		for (Map.Entry<Locale, String> entry : scheduleLinkNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> scheduleLinkURLMap = getScheduleLinkURLMap();

		for (Map.Entry<Locale, String> entry : scheduleLinkURLMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> siteURLMap = getSiteURLMap();

		for (Map.Entry<Locale, String> entry : siteURLMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> siteLabelMap = getSiteLabelMap();

		for (Map.Entry<Locale, String> entry : siteLabelMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> facebookURLMap = getFacebookURLMap();

		for (Map.Entry<Locale, String> entry : facebookURLMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> facebookLabelMap = getFacebookLabelMap();

		for (Map.Entry<Locale, String> entry : facebookLabelMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> instagramURLMap = getInstagramURLMap();

		for (Map.Entry<Locale, String> entry : instagramURLMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> instagramLabelMap = getInstagramLabelMap();

		for (Map.Entry<Locale, String> entry : instagramLabelMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> accesMapMap = getAccesMapMap();

		for (Map.Entry<Locale, String> entry : accesMapMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> accessMap = getAccessMap();

		for (Map.Entry<Locale, String> entry : accessMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> accessForDisabledMap = getAccessForDisabledMap();

		for (Map.Entry<Locale, String> entry :
				accessForDisabledMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getAlias();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			Place.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String alias = getAlias(defaultLocale);

		if (Validator.isNull(alias)) {
			setAlias(getAlias(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setAlias(getAlias(defaultLocale), defaultLocale, defaultLocale);
		}

		String presentation = getPresentation(defaultLocale);

		if (Validator.isNull(presentation)) {
			setPresentation(
				getPresentation(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setPresentation(
				getPresentation(defaultLocale), defaultLocale, defaultLocale);
		}

		String serviceAndActivities = getServiceAndActivities(defaultLocale);

		if (Validator.isNull(serviceAndActivities)) {
			setServiceAndActivities(
				getServiceAndActivities(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setServiceAndActivities(
				getServiceAndActivities(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String characteristics = getCharacteristics(defaultLocale);

		if (Validator.isNull(characteristics)) {
			setCharacteristics(
				getCharacteristics(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setCharacteristics(
				getCharacteristics(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String exceptionalSchedule = getExceptionalSchedule(defaultLocale);

		if (Validator.isNull(exceptionalSchedule)) {
			setExceptionalSchedule(
				getExceptionalSchedule(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setExceptionalSchedule(
				getExceptionalSchedule(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String additionalInformation = getAdditionalInformation(defaultLocale);

		if (Validator.isNull(additionalInformation)) {
			setAdditionalInformation(
				getAdditionalInformation(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setAdditionalInformation(
				getAdditionalInformation(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String contenuTooltipCarto = getContenuTooltipCarto(defaultLocale);

		if (Validator.isNull(contenuTooltipCarto)) {
			setContenuTooltipCarto(
				getContenuTooltipCarto(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setContenuTooltipCarto(
				getContenuTooltipCarto(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String scheduleLinkName = getScheduleLinkName(defaultLocale);

		if (Validator.isNull(scheduleLinkName)) {
			setScheduleLinkName(
				getScheduleLinkName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setScheduleLinkName(
				getScheduleLinkName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String scheduleLinkURL = getScheduleLinkURL(defaultLocale);

		if (Validator.isNull(scheduleLinkURL)) {
			setScheduleLinkURL(
				getScheduleLinkURL(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setScheduleLinkURL(
				getScheduleLinkURL(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String siteURL = getSiteURL(defaultLocale);

		if (Validator.isNull(siteURL)) {
			setSiteURL(getSiteURL(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSiteURL(getSiteURL(defaultLocale), defaultLocale, defaultLocale);
		}

		String siteLabel = getSiteLabel(defaultLocale);

		if (Validator.isNull(siteLabel)) {
			setSiteLabel(getSiteLabel(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSiteLabel(
				getSiteLabel(defaultLocale), defaultLocale, defaultLocale);
		}

		String facebookURL = getFacebookURL(defaultLocale);

		if (Validator.isNull(facebookURL)) {
			setFacebookURL(
				getFacebookURL(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setFacebookURL(
				getFacebookURL(defaultLocale), defaultLocale, defaultLocale);
		}

		String facebookLabel = getFacebookLabel(defaultLocale);

		if (Validator.isNull(facebookLabel)) {
			setFacebookLabel(
				getFacebookLabel(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setFacebookLabel(
				getFacebookLabel(defaultLocale), defaultLocale, defaultLocale);
		}

		String instagramURL = getInstagramURL(defaultLocale);

		if (Validator.isNull(instagramURL)) {
			setInstagramURL(
				getInstagramURL(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setInstagramURL(
				getInstagramURL(defaultLocale), defaultLocale, defaultLocale);
		}

		String instagramLabel = getInstagramLabel(defaultLocale);

		if (Validator.isNull(instagramLabel)) {
			setInstagramLabel(
				getInstagramLabel(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setInstagramLabel(
				getInstagramLabel(defaultLocale), defaultLocale, defaultLocale);
		}

		String accesMap = getAccesMap(defaultLocale);

		if (Validator.isNull(accesMap)) {
			setAccesMap(getAccesMap(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setAccesMap(
				getAccesMap(defaultLocale), defaultLocale, defaultLocale);
		}

		String access = getAccess(defaultLocale);

		if (Validator.isNull(access)) {
			setAccess(getAccess(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setAccess(getAccess(defaultLocale), defaultLocale, defaultLocale);
		}

		String accessForDisabled = getAccessForDisabled(defaultLocale);

		if (Validator.isNull(accessForDisabled)) {
			setAccessForDisabled(
				getAccessForDisabled(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setAccessForDisabled(
				getAccessForDisabled(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public Place toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Place>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PlaceImpl placeImpl = new PlaceImpl();

		placeImpl.setUuid(getUuid());
		placeImpl.setPlaceId(getPlaceId());
		placeImpl.setGroupId(getGroupId());
		placeImpl.setCompanyId(getCompanyId());
		placeImpl.setUserId(getUserId());
		placeImpl.setUserName(getUserName());
		placeImpl.setCreateDate(getCreateDate());
		placeImpl.setModifiedDate(getModifiedDate());
		placeImpl.setLastPublishDate(getLastPublishDate());
		placeImpl.setStatus(getStatus());
		placeImpl.setStatusByUserId(getStatusByUserId());
		placeImpl.setStatusByUserName(getStatusByUserName());
		placeImpl.setStatusDate(getStatusDate());
		placeImpl.setSIGid(getSIGid());
		placeImpl.setName(getName());
		placeImpl.setAddressComplement(getAddressComplement());
		placeImpl.setAddressStreet(getAddressStreet());
		placeImpl.setAddressDistribution(getAddressDistribution());
		placeImpl.setAddressZipCode(getAddressZipCode());
		placeImpl.setAddressCountry(getAddressCountry());
		placeImpl.setMercatorX(getMercatorX());
		placeImpl.setMercatorY(getMercatorY());
		placeImpl.setRGF93X(getRGF93X());
		placeImpl.setRGF93Y(getRGF93Y());
		placeImpl.setLocationId(getLocationId());
		placeImpl.setAlias(getAlias());
		placeImpl.setPresentation(getPresentation());
		placeImpl.setServiceAndActivities(getServiceAndActivities());
		placeImpl.setCharacteristics(getCharacteristics());
		placeImpl.setSubjectToPublicHoliday(isSubjectToPublicHoliday());
		placeImpl.setExceptionalSchedule(getExceptionalSchedule());
		placeImpl.setDisplayEvents(isDisplayEvents());
		placeImpl.setAdditionalInformation(getAdditionalInformation());
		placeImpl.setContenuTooltipCarto(getContenuTooltipCarto());
		placeImpl.setHasURLSchedule(isHasURLSchedule());
		placeImpl.setScheduleLinkName(getScheduleLinkName());
		placeImpl.setScheduleLinkURL(getScheduleLinkURL());
		placeImpl.setPhone(getPhone());
		placeImpl.setMail(getMail());
		placeImpl.setSiteURL(getSiteURL());
		placeImpl.setSiteLabel(getSiteLabel());
		placeImpl.setFacebookURL(getFacebookURL());
		placeImpl.setFacebookLabel(getFacebookLabel());
		placeImpl.setInstagramURL(getInstagramURL());
		placeImpl.setInstagramLabel(getInstagramLabel());
		placeImpl.setAccesMap(getAccesMap());
		placeImpl.setAccess(getAccess());
		placeImpl.setAccessForDisabled(getAccessForDisabled());
		placeImpl.setAccessForBlind(getAccessForBlind());
		placeImpl.setAccessForDeaf(getAccessForDeaf());
		placeImpl.setAccessForWheelchair(getAccessForWheelchair());
		placeImpl.setAccessForElder(getAccessForElder());
		placeImpl.setAccessForDeficient(getAccessForDeficient());
		placeImpl.setRTEnabled(getRTEnabled());
		placeImpl.setRTType(getRTType());
		placeImpl.setRTExternalId(getRTExternalId());
		placeImpl.setRTAvailable(getRTAvailable());
		placeImpl.setRTOccupation(getRTOccupation());
		placeImpl.setRTCapacity(getRTCapacity());
		placeImpl.setRTStatus(getRTStatus());
		placeImpl.setRTLastUpdate(getRTLastUpdate());
		placeImpl.setImageId(getImageId());
		placeImpl.setImageWidth(getImageWidth());
		placeImpl.setImageHeight(getImageHeight());
		placeImpl.setImageIds(getImageIds());
		placeImpl.setVideosIds(getVideosIds());
		placeImpl.setPriceId(getPriceId());
		placeImpl.setDocumentsIds(getDocumentsIds());

		placeImpl.resetOriginalValues();

		return placeImpl;
	}

	@Override
	public int compareTo(Place place) {
		long primaryKey = place.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Place)) {
			return false;
		}

		Place place = (Place)object;

		long primaryKey = place.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PlaceModelImpl placeModelImpl = this;

		placeModelImpl._originalUuid = placeModelImpl._uuid;

		placeModelImpl._originalGroupId = placeModelImpl._groupId;

		placeModelImpl._setOriginalGroupId = false;

		placeModelImpl._originalCompanyId = placeModelImpl._companyId;

		placeModelImpl._setOriginalCompanyId = false;

		placeModelImpl._setModifiedDate = false;

		placeModelImpl._originalSIGid = placeModelImpl._SIGid;

		placeModelImpl._originalName = placeModelImpl._name;

		placeModelImpl._originalPriceId = placeModelImpl._priceId;

		placeModelImpl._setOriginalPriceId = false;

		placeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Place> toCacheModel() {
		PlaceCacheModel placeCacheModel = new PlaceCacheModel();

		placeCacheModel.uuid = getUuid();

		String uuid = placeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			placeCacheModel.uuid = null;
		}

		placeCacheModel.placeId = getPlaceId();

		placeCacheModel.groupId = getGroupId();

		placeCacheModel.companyId = getCompanyId();

		placeCacheModel.userId = getUserId();

		placeCacheModel.userName = getUserName();

		String userName = placeCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			placeCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			placeCacheModel.createDate = createDate.getTime();
		}
		else {
			placeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			placeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			placeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			placeCacheModel.lastPublishDate = lastPublishDate.getTime();
		}
		else {
			placeCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		placeCacheModel.status = getStatus();

		placeCacheModel.statusByUserId = getStatusByUserId();

		placeCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = placeCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			placeCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			placeCacheModel.statusDate = statusDate.getTime();
		}
		else {
			placeCacheModel.statusDate = Long.MIN_VALUE;
		}

		placeCacheModel.SIGid = getSIGid();

		String SIGid = placeCacheModel.SIGid;

		if ((SIGid != null) && (SIGid.length() == 0)) {
			placeCacheModel.SIGid = null;
		}

		placeCacheModel.name = getName();

		String name = placeCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			placeCacheModel.name = null;
		}

		placeCacheModel.addressComplement = getAddressComplement();

		String addressComplement = placeCacheModel.addressComplement;

		if ((addressComplement != null) && (addressComplement.length() == 0)) {
			placeCacheModel.addressComplement = null;
		}

		placeCacheModel.addressStreet = getAddressStreet();

		String addressStreet = placeCacheModel.addressStreet;

		if ((addressStreet != null) && (addressStreet.length() == 0)) {
			placeCacheModel.addressStreet = null;
		}

		placeCacheModel.addressDistribution = getAddressDistribution();

		String addressDistribution = placeCacheModel.addressDistribution;

		if ((addressDistribution != null) &&
			(addressDistribution.length() == 0)) {

			placeCacheModel.addressDistribution = null;
		}

		placeCacheModel.addressZipCode = getAddressZipCode();

		String addressZipCode = placeCacheModel.addressZipCode;

		if ((addressZipCode != null) && (addressZipCode.length() == 0)) {
			placeCacheModel.addressZipCode = null;
		}

		placeCacheModel.addressCountry = getAddressCountry();

		String addressCountry = placeCacheModel.addressCountry;

		if ((addressCountry != null) && (addressCountry.length() == 0)) {
			placeCacheModel.addressCountry = null;
		}

		placeCacheModel.mercatorX = getMercatorX();

		String mercatorX = placeCacheModel.mercatorX;

		if ((mercatorX != null) && (mercatorX.length() == 0)) {
			placeCacheModel.mercatorX = null;
		}

		placeCacheModel.mercatorY = getMercatorY();

		String mercatorY = placeCacheModel.mercatorY;

		if ((mercatorY != null) && (mercatorY.length() == 0)) {
			placeCacheModel.mercatorY = null;
		}

		placeCacheModel.RGF93X = getRGF93X();

		String RGF93X = placeCacheModel.RGF93X;

		if ((RGF93X != null) && (RGF93X.length() == 0)) {
			placeCacheModel.RGF93X = null;
		}

		placeCacheModel.RGF93Y = getRGF93Y();

		String RGF93Y = placeCacheModel.RGF93Y;

		if ((RGF93Y != null) && (RGF93Y.length() == 0)) {
			placeCacheModel.RGF93Y = null;
		}

		placeCacheModel.locationId = getLocationId();

		String locationId = placeCacheModel.locationId;

		if ((locationId != null) && (locationId.length() == 0)) {
			placeCacheModel.locationId = null;
		}

		placeCacheModel.alias = getAlias();

		String alias = placeCacheModel.alias;

		if ((alias != null) && (alias.length() == 0)) {
			placeCacheModel.alias = null;
		}

		placeCacheModel.presentation = getPresentation();

		String presentation = placeCacheModel.presentation;

		if ((presentation != null) && (presentation.length() == 0)) {
			placeCacheModel.presentation = null;
		}

		placeCacheModel.serviceAndActivities = getServiceAndActivities();

		String serviceAndActivities = placeCacheModel.serviceAndActivities;

		if ((serviceAndActivities != null) &&
			(serviceAndActivities.length() == 0)) {

			placeCacheModel.serviceAndActivities = null;
		}

		placeCacheModel.characteristics = getCharacteristics();

		String characteristics = placeCacheModel.characteristics;

		if ((characteristics != null) && (characteristics.length() == 0)) {
			placeCacheModel.characteristics = null;
		}

		placeCacheModel.subjectToPublicHoliday = isSubjectToPublicHoliday();

		placeCacheModel.exceptionalSchedule = getExceptionalSchedule();

		String exceptionalSchedule = placeCacheModel.exceptionalSchedule;

		if ((exceptionalSchedule != null) &&
			(exceptionalSchedule.length() == 0)) {

			placeCacheModel.exceptionalSchedule = null;
		}

		placeCacheModel.displayEvents = isDisplayEvents();

		placeCacheModel.additionalInformation = getAdditionalInformation();

		String additionalInformation = placeCacheModel.additionalInformation;

		if ((additionalInformation != null) &&
			(additionalInformation.length() == 0)) {

			placeCacheModel.additionalInformation = null;
		}

		placeCacheModel.contenuTooltipCarto = getContenuTooltipCarto();

		String contenuTooltipCarto = placeCacheModel.contenuTooltipCarto;

		if ((contenuTooltipCarto != null) &&
			(contenuTooltipCarto.length() == 0)) {

			placeCacheModel.contenuTooltipCarto = null;
		}

		placeCacheModel.hasURLSchedule = isHasURLSchedule();

		placeCacheModel.scheduleLinkName = getScheduleLinkName();

		String scheduleLinkName = placeCacheModel.scheduleLinkName;

		if ((scheduleLinkName != null) && (scheduleLinkName.length() == 0)) {
			placeCacheModel.scheduleLinkName = null;
		}

		placeCacheModel.scheduleLinkURL = getScheduleLinkURL();

		String scheduleLinkURL = placeCacheModel.scheduleLinkURL;

		if ((scheduleLinkURL != null) && (scheduleLinkURL.length() == 0)) {
			placeCacheModel.scheduleLinkURL = null;
		}

		placeCacheModel.phone = getPhone();

		String phone = placeCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			placeCacheModel.phone = null;
		}

		placeCacheModel.mail = getMail();

		String mail = placeCacheModel.mail;

		if ((mail != null) && (mail.length() == 0)) {
			placeCacheModel.mail = null;
		}

		placeCacheModel.siteURL = getSiteURL();

		String siteURL = placeCacheModel.siteURL;

		if ((siteURL != null) && (siteURL.length() == 0)) {
			placeCacheModel.siteURL = null;
		}

		placeCacheModel.siteLabel = getSiteLabel();

		String siteLabel = placeCacheModel.siteLabel;

		if ((siteLabel != null) && (siteLabel.length() == 0)) {
			placeCacheModel.siteLabel = null;
		}

		placeCacheModel.facebookURL = getFacebookURL();

		String facebookURL = placeCacheModel.facebookURL;

		if ((facebookURL != null) && (facebookURL.length() == 0)) {
			placeCacheModel.facebookURL = null;
		}

		placeCacheModel.facebookLabel = getFacebookLabel();

		String facebookLabel = placeCacheModel.facebookLabel;

		if ((facebookLabel != null) && (facebookLabel.length() == 0)) {
			placeCacheModel.facebookLabel = null;
		}

		placeCacheModel.instagramURL = getInstagramURL();

		String instagramURL = placeCacheModel.instagramURL;

		if ((instagramURL != null) && (instagramURL.length() == 0)) {
			placeCacheModel.instagramURL = null;
		}

		placeCacheModel.instagramLabel = getInstagramLabel();

		String instagramLabel = placeCacheModel.instagramLabel;

		if ((instagramLabel != null) && (instagramLabel.length() == 0)) {
			placeCacheModel.instagramLabel = null;
		}

		placeCacheModel.accesMap = getAccesMap();

		String accesMap = placeCacheModel.accesMap;

		if ((accesMap != null) && (accesMap.length() == 0)) {
			placeCacheModel.accesMap = null;
		}

		placeCacheModel.access = getAccess();

		String access = placeCacheModel.access;

		if ((access != null) && (access.length() == 0)) {
			placeCacheModel.access = null;
		}

		placeCacheModel.accessForDisabled = getAccessForDisabled();

		String accessForDisabled = placeCacheModel.accessForDisabled;

		if ((accessForDisabled != null) && (accessForDisabled.length() == 0)) {
			placeCacheModel.accessForDisabled = null;
		}

		Boolean accessForBlind = getAccessForBlind();

		if (accessForBlind != null) {
			placeCacheModel.accessForBlind = accessForBlind;
		}

		Boolean accessForDeaf = getAccessForDeaf();

		if (accessForDeaf != null) {
			placeCacheModel.accessForDeaf = accessForDeaf;
		}

		Boolean accessForWheelchair = getAccessForWheelchair();

		if (accessForWheelchair != null) {
			placeCacheModel.accessForWheelchair = accessForWheelchair;
		}

		Boolean accessForElder = getAccessForElder();

		if (accessForElder != null) {
			placeCacheModel.accessForElder = accessForElder;
		}

		Boolean accessForDeficient = getAccessForDeficient();

		if (accessForDeficient != null) {
			placeCacheModel.accessForDeficient = accessForDeficient;
		}

		Boolean RTEnabled = getRTEnabled();

		if (RTEnabled != null) {
			placeCacheModel.RTEnabled = RTEnabled;
		}

		placeCacheModel.RTType = getRTType();

		String RTType = placeCacheModel.RTType;

		if ((RTType != null) && (RTType.length() == 0)) {
			placeCacheModel.RTType = null;
		}

		placeCacheModel.RTExternalId = getRTExternalId();

		String RTExternalId = placeCacheModel.RTExternalId;

		if ((RTExternalId != null) && (RTExternalId.length() == 0)) {
			placeCacheModel.RTExternalId = null;
		}

		placeCacheModel.RTAvailable = getRTAvailable();

		placeCacheModel.RTOccupation = getRTOccupation();

		placeCacheModel.RTCapacity = getRTCapacity();

		placeCacheModel.RTStatus = getRTStatus();

		String RTStatus = placeCacheModel.RTStatus;

		if ((RTStatus != null) && (RTStatus.length() == 0)) {
			placeCacheModel.RTStatus = null;
		}

		Date RTLastUpdate = getRTLastUpdate();

		if (RTLastUpdate != null) {
			placeCacheModel.RTLastUpdate = RTLastUpdate.getTime();
		}
		else {
			placeCacheModel.RTLastUpdate = Long.MIN_VALUE;
		}

		placeCacheModel.imageId = getImageId();

		Integer imageWidth = getImageWidth();

		if (imageWidth != null) {
			placeCacheModel.imageWidth = imageWidth;
		}

		Integer imageHeight = getImageHeight();

		if (imageHeight != null) {
			placeCacheModel.imageHeight = imageHeight;
		}

		placeCacheModel.imageIds = getImageIds();

		String imageIds = placeCacheModel.imageIds;

		if ((imageIds != null) && (imageIds.length() == 0)) {
			placeCacheModel.imageIds = null;
		}

		placeCacheModel.videosIds = getVideosIds();

		String videosIds = placeCacheModel.videosIds;

		if ((videosIds != null) && (videosIds.length() == 0)) {
			placeCacheModel.videosIds = null;
		}

		placeCacheModel.priceId = getPriceId();

		placeCacheModel.documentsIds = getDocumentsIds();

		String documentsIds = placeCacheModel.documentsIds;

		if ((documentsIds != null) && (documentsIds.length() == 0)) {
			placeCacheModel.documentsIds = null;
		}

		return placeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Place, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Place, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Place, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Place)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Place, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Place, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Place, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Place)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Place>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _placeId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _lastPublishDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _SIGid;
	private String _originalSIGid;
	private String _name;
	private String _originalName;
	private String _addressComplement;
	private String _addressStreet;
	private String _addressDistribution;
	private String _addressZipCode;
	private String _addressCountry;
	private String _mercatorX;
	private String _mercatorY;

	private String _RGF93X;

	private String _RGF93Y;

	private String _locationId;
	private String _alias;
	private String _aliasCurrentLanguageId;
	private String _presentation;
	private String _presentationCurrentLanguageId;
	private String _serviceAndActivities;
	private String _serviceAndActivitiesCurrentLanguageId;
	private String _characteristics;
	private String _characteristicsCurrentLanguageId;
	private boolean _subjectToPublicHoliday;
	private String _exceptionalSchedule;
	private String _exceptionalScheduleCurrentLanguageId;
	private boolean _displayEvents;
	private String _additionalInformation;
	private String _additionalInformationCurrentLanguageId;
	private String _contenuTooltipCarto;
	private String _contenuTooltipCartoCurrentLanguageId;
	private boolean _hasURLSchedule;
	private String _scheduleLinkName;
	private String _scheduleLinkNameCurrentLanguageId;
	private String _scheduleLinkURL;
	private String _scheduleLinkURLCurrentLanguageId;
	private String _phone;
	private String _mail;
	private String _siteURL;
	private String _siteURLCurrentLanguageId;
	private String _siteLabel;
	private String _siteLabelCurrentLanguageId;
	private String _facebookURL;
	private String _facebookURLCurrentLanguageId;
	private String _facebookLabel;
	private String _facebookLabelCurrentLanguageId;
	private String _instagramURL;
	private String _instagramURLCurrentLanguageId;
	private String _instagramLabel;
	private String _instagramLabelCurrentLanguageId;
	private String _accesMap;
	private String _accesMapCurrentLanguageId;
	private String _access;
	private String _accessCurrentLanguageId;
	private String _accessForDisabled;
	private String _accessForDisabledCurrentLanguageId;
	private Boolean _accessForBlind;
	private Boolean _accessForDeaf;
	private Boolean _accessForWheelchair;
	private Boolean _accessForElder;
	private Boolean _accessForDeficient;
	private Boolean _RTEnabled;
	private String _RTType;
	private String _RTExternalId;
	private long _RTAvailable;
	private long _RTOccupation;
	private long _RTCapacity;
	private String _RTStatus;
	private Date _RTLastUpdate;
	private long _imageId;
	private Integer _imageWidth;
	private Integer _imageHeight;
	private String _imageIds;
	private String _videosIds;
	private long _priceId;
	private long _originalPriceId;
	private boolean _setOriginalPriceId;
	private String _documentsIds;
	private long _columnBitmask;
	private Place _escapedModel;

}