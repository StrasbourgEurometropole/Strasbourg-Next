/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.place.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import eu.strasbourg.service.place.model.Slot;
import eu.strasbourg.service.place.model.SlotModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Slot service. Represents a row in the &quot;place_Slot&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SlotModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SlotImpl}.
 * </p>
 *
 * @author Angelique Zunino Champougny
 * @see SlotImpl
 * @see Slot
 * @see SlotModel
 * @generated
 */
@ProviderType
public class SlotModelImpl extends BaseModelImpl<Slot> implements SlotModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a slot model instance should use the {@link Slot} interface instead.
	 */
	public static final String TABLE_NAME = "place_Slot";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "slotId", Types.BIGINT },
			{ "dayOfWeek", Types.BIGINT },
			{ "startHout", Types.VARCHAR },
			{ "endHour", Types.VARCHAR },
			{ "periodId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("slotId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dayOfWeek", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startHout", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("endHour", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("periodId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table place_Slot (uuid_ VARCHAR(75) null,slotId LONG not null primary key,dayOfWeek LONG,startHout VARCHAR(75) null,endHour VARCHAR(75) null,periodId LONG)";
	public static final String TABLE_SQL_DROP = "drop table place_Slot";
	public static final String ORDER_BY_JPQL = " ORDER BY slot.slotId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY place_Slot.slotId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.place.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.place.model.Slot"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.place.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.place.model.Slot"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.place.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.place.model.Slot"),
			true);
	public static final long PERIODID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long SLOTID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.place.service.util.PropsUtil.get(
				"lock.expiration.time.eu.strasbourg.service.place.model.Slot"));

	public SlotModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _slotId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSlotId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _slotId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Slot.class;
	}

	@Override
	public String getModelClassName() {
		return Slot.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("slotId", getSlotId());
		attributes.put("dayOfWeek", getDayOfWeek());
		attributes.put("startHout", getStartHout());
		attributes.put("endHour", getEndHour());
		attributes.put("periodId", getPeriodId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long slotId = (Long)attributes.get("slotId");

		if (slotId != null) {
			setSlotId(slotId);
		}

		Long dayOfWeek = (Long)attributes.get("dayOfWeek");

		if (dayOfWeek != null) {
			setDayOfWeek(dayOfWeek);
		}

		String startHout = (String)attributes.get("startHout");

		if (startHout != null) {
			setStartHout(startHout);
		}

		String endHour = (String)attributes.get("endHour");

		if (endHour != null) {
			setEndHour(endHour);
		}

		Long periodId = (Long)attributes.get("periodId");

		if (periodId != null) {
			setPeriodId(periodId);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getSlotId() {
		return _slotId;
	}

	@Override
	public void setSlotId(long slotId) {
		_slotId = slotId;
	}

	@Override
	public long getDayOfWeek() {
		return _dayOfWeek;
	}

	@Override
	public void setDayOfWeek(long dayOfWeek) {
		_dayOfWeek = dayOfWeek;
	}

	@Override
	public String getStartHout() {
		if (_startHout == null) {
			return StringPool.BLANK;
		}
		else {
			return _startHout;
		}
	}

	@Override
	public void setStartHout(String startHout) {
		_startHout = startHout;
	}

	@Override
	public String getEndHour() {
		if (_endHour == null) {
			return StringPool.BLANK;
		}
		else {
			return _endHour;
		}
	}

	@Override
	public void setEndHour(String endHour) {
		_endHour = endHour;
	}

	@Override
	public long getPeriodId() {
		return _periodId;
	}

	@Override
	public void setPeriodId(long periodId) {
		_columnBitmask |= PERIODID_COLUMN_BITMASK;

		if (!_setOriginalPeriodId) {
			_setOriginalPeriodId = true;

			_originalPeriodId = _periodId;
		}

		_periodId = periodId;
	}

	public long getOriginalPeriodId() {
		return _originalPeriodId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Slot.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Slot toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Slot)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SlotImpl slotImpl = new SlotImpl();

		slotImpl.setUuid(getUuid());
		slotImpl.setSlotId(getSlotId());
		slotImpl.setDayOfWeek(getDayOfWeek());
		slotImpl.setStartHout(getStartHout());
		slotImpl.setEndHour(getEndHour());
		slotImpl.setPeriodId(getPeriodId());

		slotImpl.resetOriginalValues();

		return slotImpl;
	}

	@Override
	public int compareTo(Slot slot) {
		long primaryKey = slot.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Slot)) {
			return false;
		}

		Slot slot = (Slot)obj;

		long primaryKey = slot.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SlotModelImpl slotModelImpl = this;

		slotModelImpl._originalUuid = slotModelImpl._uuid;

		slotModelImpl._originalPeriodId = slotModelImpl._periodId;

		slotModelImpl._setOriginalPeriodId = false;

		slotModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Slot> toCacheModel() {
		SlotCacheModel slotCacheModel = new SlotCacheModel();

		slotCacheModel.uuid = getUuid();

		String uuid = slotCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			slotCacheModel.uuid = null;
		}

		slotCacheModel.slotId = getSlotId();

		slotCacheModel.dayOfWeek = getDayOfWeek();

		slotCacheModel.startHout = getStartHout();

		String startHout = slotCacheModel.startHout;

		if ((startHout != null) && (startHout.length() == 0)) {
			slotCacheModel.startHout = null;
		}

		slotCacheModel.endHour = getEndHour();

		String endHour = slotCacheModel.endHour;

		if ((endHour != null) && (endHour.length() == 0)) {
			slotCacheModel.endHour = null;
		}

		slotCacheModel.periodId = getPeriodId();

		return slotCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", slotId=");
		sb.append(getSlotId());
		sb.append(", dayOfWeek=");
		sb.append(getDayOfWeek());
		sb.append(", startHout=");
		sb.append(getStartHout());
		sb.append(", endHour=");
		sb.append(getEndHour());
		sb.append(", periodId=");
		sb.append(getPeriodId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.place.model.Slot");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>slotId</column-name><column-value><![CDATA[");
		sb.append(getSlotId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dayOfWeek</column-name><column-value><![CDATA[");
		sb.append(getDayOfWeek());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startHout</column-name><column-value><![CDATA[");
		sb.append(getStartHout());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endHour</column-name><column-value><![CDATA[");
		sb.append(getEndHour());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>periodId</column-name><column-value><![CDATA[");
		sb.append(getPeriodId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Slot.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Slot.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _slotId;
	private long _dayOfWeek;
	private String _startHout;
	private String _endHour;
	private long _periodId;
	private long _originalPeriodId;
	private boolean _setOriginalPeriodId;
	private long _columnBitmask;
	private Slot _escapedModel;
}