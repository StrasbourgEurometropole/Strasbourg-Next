/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.place.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import eu.strasbourg.service.place.model.CsmapCacheJson;
import eu.strasbourg.service.place.model.CsmapCacheJsonModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CsmapCacheJson service. Represents a row in the &quot;place_CsmapCacheJson&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CsmapCacheJsonModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CsmapCacheJsonImpl}.
 * </p>
 *
 * @author Angelique Zunino Champougny
 * @see CsmapCacheJsonImpl
 * @generated
 */
public class CsmapCacheJsonModelImpl
	extends BaseModelImpl<CsmapCacheJson> implements CsmapCacheJsonModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a csmap cache json model instance should use the <code>CsmapCacheJson</code> interface instead.
	 */
	public static final String TABLE_NAME = "place_CsmapCacheJson";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"sigId", Types.VARCHAR},
		{"jsonLieu", Types.CLOB}, {"jsonHoraire", Types.CLOB},
		{"createPlace", Types.TIMESTAMP}, {"modifiedPlace", Types.TIMESTAMP},
		{"isActive", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sigId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jsonLieu", Types.CLOB);
		TABLE_COLUMNS_MAP.put("jsonHoraire", Types.CLOB);
		TABLE_COLUMNS_MAP.put("createPlace", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedPlace", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("isActive", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table place_CsmapCacheJson (uuid_ VARCHAR(75) null,sigId VARCHAR(75) not null primary key,jsonLieu TEXT null,jsonHoraire TEXT null,createPlace DATE null,modifiedPlace DATE null,isActive BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table place_CsmapCacheJson";

	public static final String ORDER_BY_JPQL =
		" ORDER BY csmapCacheJson.sigId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY place_CsmapCacheJson.sigId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEPLACE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ISACTIVE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MODIFIEDPLACE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SIGID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.place.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.place.model.CsmapCacheJson"));

	public CsmapCacheJsonModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _sigId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setSigId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sigId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return CsmapCacheJson.class;
	}

	@Override
	public String getModelClassName() {
		return CsmapCacheJson.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CsmapCacheJson, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CsmapCacheJson, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CsmapCacheJson, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CsmapCacheJson)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CsmapCacheJson, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CsmapCacheJson, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CsmapCacheJson)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CsmapCacheJson, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CsmapCacheJson, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<CsmapCacheJson, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CsmapCacheJson, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CsmapCacheJson, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CsmapCacheJson, Object>>();
		Map<String, BiConsumer<CsmapCacheJson, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CsmapCacheJson, ?>>();

		attributeGetterFunctions.put("uuid", CsmapCacheJson::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<CsmapCacheJson, String>)CsmapCacheJson::setUuid);
		attributeGetterFunctions.put("sigId", CsmapCacheJson::getSigId);
		attributeSetterBiConsumers.put(
			"sigId",
			(BiConsumer<CsmapCacheJson, String>)CsmapCacheJson::setSigId);
		attributeGetterFunctions.put("jsonLieu", CsmapCacheJson::getJsonLieu);
		attributeSetterBiConsumers.put(
			"jsonLieu",
			(BiConsumer<CsmapCacheJson, String>)CsmapCacheJson::setJsonLieu);
		attributeGetterFunctions.put(
			"jsonHoraire", CsmapCacheJson::getJsonHoraire);
		attributeSetterBiConsumers.put(
			"jsonHoraire",
			(BiConsumer<CsmapCacheJson, String>)CsmapCacheJson::setJsonHoraire);
		attributeGetterFunctions.put(
			"createPlace", CsmapCacheJson::getCreatePlace);
		attributeSetterBiConsumers.put(
			"createPlace",
			(BiConsumer<CsmapCacheJson, Date>)CsmapCacheJson::setCreatePlace);
		attributeGetterFunctions.put(
			"modifiedPlace", CsmapCacheJson::getModifiedPlace);
		attributeSetterBiConsumers.put(
			"modifiedPlace",
			(BiConsumer<CsmapCacheJson, Date>)CsmapCacheJson::setModifiedPlace);
		attributeGetterFunctions.put("isActive", CsmapCacheJson::getIsActive);
		attributeSetterBiConsumers.put(
			"isActive",
			(BiConsumer<CsmapCacheJson, Boolean>)CsmapCacheJson::setIsActive);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public String getSigId() {
		if (_sigId == null) {
			return "";
		}
		else {
			return _sigId;
		}
	}

	@Override
	public void setSigId(String sigId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sigId = sigId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalSigId() {
		return getColumnOriginalValue("sigId");
	}

	@Override
	public String getJsonLieu() {
		if (_jsonLieu == null) {
			return "";
		}
		else {
			return _jsonLieu;
		}
	}

	@Override
	public void setJsonLieu(String jsonLieu) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jsonLieu = jsonLieu;
	}

	@Override
	public String getJsonHoraire() {
		if (_jsonHoraire == null) {
			return "";
		}
		else {
			return _jsonHoraire;
		}
	}

	@Override
	public void setJsonHoraire(String jsonHoraire) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jsonHoraire = jsonHoraire;
	}

	@Override
	public Date getCreatePlace() {
		return _createPlace;
	}

	@Override
	public void setCreatePlace(Date createPlace) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createPlace = createPlace;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Date getOriginalCreatePlace() {
		return getColumnOriginalValue("createPlace");
	}

	@Override
	public Date getModifiedPlace() {
		return _modifiedPlace;
	}

	@Override
	public void setModifiedPlace(Date modifiedPlace) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedPlace = modifiedPlace;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Date getOriginalModifiedPlace() {
		return getColumnOriginalValue("modifiedPlace");
	}

	@Override
	public boolean getIsActive() {
		return _isActive;
	}

	@Override
	public boolean isIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(boolean isActive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isActive = isActive;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalIsActive() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("isActive"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public CsmapCacheJson toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CsmapCacheJson>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CsmapCacheJsonImpl csmapCacheJsonImpl = new CsmapCacheJsonImpl();

		csmapCacheJsonImpl.setUuid(getUuid());
		csmapCacheJsonImpl.setSigId(getSigId());
		csmapCacheJsonImpl.setJsonLieu(getJsonLieu());
		csmapCacheJsonImpl.setJsonHoraire(getJsonHoraire());
		csmapCacheJsonImpl.setCreatePlace(getCreatePlace());
		csmapCacheJsonImpl.setModifiedPlace(getModifiedPlace());
		csmapCacheJsonImpl.setIsActive(isIsActive());

		csmapCacheJsonImpl.resetOriginalValues();

		return csmapCacheJsonImpl;
	}

	@Override
	public CsmapCacheJson cloneWithOriginalValues() {
		CsmapCacheJsonImpl csmapCacheJsonImpl = new CsmapCacheJsonImpl();

		csmapCacheJsonImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		csmapCacheJsonImpl.setSigId(
			this.<String>getColumnOriginalValue("sigId"));
		csmapCacheJsonImpl.setJsonLieu(
			this.<String>getColumnOriginalValue("jsonLieu"));
		csmapCacheJsonImpl.setJsonHoraire(
			this.<String>getColumnOriginalValue("jsonHoraire"));
		csmapCacheJsonImpl.setCreatePlace(
			this.<Date>getColumnOriginalValue("createPlace"));
		csmapCacheJsonImpl.setModifiedPlace(
			this.<Date>getColumnOriginalValue("modifiedPlace"));
		csmapCacheJsonImpl.setIsActive(
			this.<Boolean>getColumnOriginalValue("isActive"));

		return csmapCacheJsonImpl;
	}

	@Override
	public int compareTo(CsmapCacheJson csmapCacheJson) {
		String primaryKey = csmapCacheJson.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CsmapCacheJson)) {
			return false;
		}

		CsmapCacheJson csmapCacheJson = (CsmapCacheJson)object;

		String primaryKey = csmapCacheJson.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CsmapCacheJson> toCacheModel() {
		CsmapCacheJsonCacheModel csmapCacheJsonCacheModel =
			new CsmapCacheJsonCacheModel();

		csmapCacheJsonCacheModel.uuid = getUuid();

		String uuid = csmapCacheJsonCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			csmapCacheJsonCacheModel.uuid = null;
		}

		csmapCacheJsonCacheModel.sigId = getSigId();

		String sigId = csmapCacheJsonCacheModel.sigId;

		if ((sigId != null) && (sigId.length() == 0)) {
			csmapCacheJsonCacheModel.sigId = null;
		}

		csmapCacheJsonCacheModel.jsonLieu = getJsonLieu();

		String jsonLieu = csmapCacheJsonCacheModel.jsonLieu;

		if ((jsonLieu != null) && (jsonLieu.length() == 0)) {
			csmapCacheJsonCacheModel.jsonLieu = null;
		}

		csmapCacheJsonCacheModel.jsonHoraire = getJsonHoraire();

		String jsonHoraire = csmapCacheJsonCacheModel.jsonHoraire;

		if ((jsonHoraire != null) && (jsonHoraire.length() == 0)) {
			csmapCacheJsonCacheModel.jsonHoraire = null;
		}

		Date createPlace = getCreatePlace();

		if (createPlace != null) {
			csmapCacheJsonCacheModel.createPlace = createPlace.getTime();
		}
		else {
			csmapCacheJsonCacheModel.createPlace = Long.MIN_VALUE;
		}

		Date modifiedPlace = getModifiedPlace();

		if (modifiedPlace != null) {
			csmapCacheJsonCacheModel.modifiedPlace = modifiedPlace.getTime();
		}
		else {
			csmapCacheJsonCacheModel.modifiedPlace = Long.MIN_VALUE;
		}

		csmapCacheJsonCacheModel.isActive = isIsActive();

		return csmapCacheJsonCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CsmapCacheJson, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CsmapCacheJson, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CsmapCacheJson, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((CsmapCacheJson)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CsmapCacheJson>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CsmapCacheJson.class, ModelWrapper.class);

	}

	private String _uuid;
	private String _sigId;
	private String _jsonLieu;
	private String _jsonHoraire;
	private Date _createPlace;
	private Date _modifiedPlace;
	private boolean _isActive;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CsmapCacheJson, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CsmapCacheJson)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("sigId", _sigId);
		_columnOriginalValues.put("jsonLieu", _jsonLieu);
		_columnOriginalValues.put("jsonHoraire", _jsonHoraire);
		_columnOriginalValues.put("createPlace", _createPlace);
		_columnOriginalValues.put("modifiedPlace", _modifiedPlace);
		_columnOriginalValues.put("isActive", _isActive);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("sigId", 2L);

		columnBitmasks.put("jsonLieu", 4L);

		columnBitmasks.put("jsonHoraire", 8L);

		columnBitmasks.put("createPlace", 16L);

		columnBitmasks.put("modifiedPlace", 32L);

		columnBitmasks.put("isActive", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CsmapCacheJson _escapedModel;

}