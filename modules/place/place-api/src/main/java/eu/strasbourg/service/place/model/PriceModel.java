/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.place.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Price service. Represents a row in the &quot;place_Price&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link eu.strasbourg.service.place.model.impl.PriceModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link eu.strasbourg.service.place.model.impl.PriceImpl}.
 * </p>
 *
 * @author Angelique Zunino Champougny
 * @see Price
 * @see eu.strasbourg.service.place.model.impl.PriceImpl
 * @see eu.strasbourg.service.place.model.impl.PriceModelImpl
 * @generated
 */
@ProviderType
public interface PriceModel extends BaseModel<Price>, LocalizedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a price model instance should use the {@link Price} interface instead.
	 */

	/**
	 * Returns the primary key of this price.
	 *
	 * @return the primary key of this price
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this price.
	 *
	 * @param primaryKey the primary key of this price
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this price.
	 *
	 * @return the uuid of this price
	 */
	@AutoEscape
	public String getUuid();

	/**
	 * Sets the uuid of this price.
	 *
	 * @param uuid the uuid of this price
	 */
	public void setUuid(String uuid);

	/**
	 * Returns the price ID of this price.
	 *
	 * @return the price ID of this price
	 */
	public long getPriceId();

	/**
	 * Sets the price ID of this price.
	 *
	 * @param priceId the price ID of this price
	 */
	public void setPriceId(long priceId);

	/**
	 * Returns the title of this price.
	 *
	 * @return the title of this price
	 */
	public String getTitle();

	/**
	 * Returns the localized title of this price in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized title of this price
	 */
	@AutoEscape
	public String getTitle(Locale locale);

	/**
	 * Returns the localized title of this price in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this price. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized title of this price in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized title of this price
	 */
	@AutoEscape
	public String getTitle(String languageId);

	/**
	 * Returns the localized title of this price in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this price
	 */
	@AutoEscape
	public String getTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getTitleCurrentLanguageId();

	@AutoEscape
	public String getTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized titles of this price.
	 *
	 * @return the locales and localized titles of this price
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this price.
	 *
	 * @param title the title of this price
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this price in the language.
	 *
	 * @param title the localized title of this price
	 * @param locale the locale of the language
	 */
	public void setTitle(String title, Locale locale);

	/**
	 * Sets the localized title of this price in the language, and sets the default locale.
	 *
	 * @param title the localized title of this price
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTitle(String title, Locale locale, Locale defaultLocale);

	public void setTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized titles of this price from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this price
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	/**
	 * Sets the localized titles of this price from the map of locales and localized titles, and sets the default locale.
	 *
	 * @param titleMap the locales and localized titles of this price
	 * @param defaultLocale the default locale
	 */
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Returns the price of this price.
	 *
	 * @return the price of this price
	 */
	public String getPrice();

	/**
	 * Returns the localized price of this price in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized price of this price
	 */
	@AutoEscape
	public String getPrice(Locale locale);

	/**
	 * Returns the localized price of this price in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized price of this price. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getPrice(Locale locale, boolean useDefault);

	/**
	 * Returns the localized price of this price in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized price of this price
	 */
	@AutoEscape
	public String getPrice(String languageId);

	/**
	 * Returns the localized price of this price in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized price of this price
	 */
	@AutoEscape
	public String getPrice(String languageId, boolean useDefault);

	@AutoEscape
	public String getPriceCurrentLanguageId();

	@AutoEscape
	public String getPriceCurrentValue();

	/**
	 * Returns a map of the locales and localized prices of this price.
	 *
	 * @return the locales and localized prices of this price
	 */
	public Map<Locale, String> getPriceMap();

	/**
	 * Sets the price of this price.
	 *
	 * @param price the price of this price
	 */
	public void setPrice(String price);

	/**
	 * Sets the localized price of this price in the language.
	 *
	 * @param price the localized price of this price
	 * @param locale the locale of the language
	 */
	public void setPrice(String price, Locale locale);

	/**
	 * Sets the localized price of this price in the language, and sets the default locale.
	 *
	 * @param price the localized price of this price
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setPrice(String price, Locale locale, Locale defaultLocale);

	public void setPriceCurrentLanguageId(String languageId);

	/**
	 * Sets the localized prices of this price from the map of locales and localized prices.
	 *
	 * @param priceMap the locales and localized prices of this price
	 */
	public void setPriceMap(Map<Locale, String> priceMap);

	/**
	 * Sets the localized prices of this price from the map of locales and localized prices, and sets the default locale.
	 *
	 * @param priceMap the locales and localized prices of this price
	 * @param defaultLocale the default locale
	 */
	public void setPriceMap(Map<Locale, String> priceMap, Locale defaultLocale);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(eu.strasbourg.service.place.model.Price price);

	@Override
	public int hashCode();

	@Override
	public CacheModel<eu.strasbourg.service.place.model.Price> toCacheModel();

	@Override
	public eu.strasbourg.service.place.model.Price toEscapedModel();

	@Override
	public eu.strasbourg.service.place.model.Price toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}