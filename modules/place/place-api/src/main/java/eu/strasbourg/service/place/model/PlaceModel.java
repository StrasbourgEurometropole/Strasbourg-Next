/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.place.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedGroupedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Place service. Represents a row in the &quot;place_Place&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link eu.strasbourg.service.place.model.impl.PlaceModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link eu.strasbourg.service.place.model.impl.PlaceImpl}.
 * </p>
 *
 * @author Angelique Zunino Champougny
 * @see Place
 * @see eu.strasbourg.service.place.model.impl.PlaceImpl
 * @see eu.strasbourg.service.place.model.impl.PlaceModelImpl
 * @generated
 */
@ProviderType
public interface PlaceModel extends BaseModel<Place>, LocalizedModel,
	ShardedModel, StagedGroupedModel, WorkflowedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a place model instance should use the {@link Place} interface instead.
	 */

	/**
	 * Returns the primary key of this place.
	 *
	 * @return the primary key of this place
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this place.
	 *
	 * @param primaryKey the primary key of this place
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this place.
	 *
	 * @return the uuid of this place
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this place.
	 *
	 * @param uuid the uuid of this place
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the place ID of this place.
	 *
	 * @return the place ID of this place
	 */
	public long getPlaceId();

	/**
	 * Sets the place ID of this place.
	 *
	 * @param placeId the place ID of this place
	 */
	public void setPlaceId(long placeId);

	/**
	 * Returns the group ID of this place.
	 *
	 * @return the group ID of this place
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this place.
	 *
	 * @param groupId the group ID of this place
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this place.
	 *
	 * @return the company ID of this place
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this place.
	 *
	 * @param companyId the company ID of this place
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this place.
	 *
	 * @return the user ID of this place
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this place.
	 *
	 * @param userId the user ID of this place
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this place.
	 *
	 * @return the user uuid of this place
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this place.
	 *
	 * @param userUuid the user uuid of this place
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this place.
	 *
	 * @return the user name of this place
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this place.
	 *
	 * @param userName the user name of this place
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this place.
	 *
	 * @return the create date of this place
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this place.
	 *
	 * @param createDate the create date of this place
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this place.
	 *
	 * @return the modified date of this place
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this place.
	 *
	 * @param modifiedDate the modified date of this place
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the last publish date of this place.
	 *
	 * @return the last publish date of this place
	 */
	@Override
	public Date getLastPublishDate();

	/**
	 * Sets the last publish date of this place.
	 *
	 * @param lastPublishDate the last publish date of this place
	 */
	@Override
	public void setLastPublishDate(Date lastPublishDate);

	/**
	 * Returns the status of this place.
	 *
	 * @return the status of this place
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this place.
	 *
	 * @param status the status of this place
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this place.
	 *
	 * @return the status by user ID of this place
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this place.
	 *
	 * @param statusByUserId the status by user ID of this place
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this place.
	 *
	 * @return the status by user uuid of this place
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this place.
	 *
	 * @param statusByUserUuid the status by user uuid of this place
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this place.
	 *
	 * @return the status by user name of this place
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this place.
	 *
	 * @param statusByUserName the status by user name of this place
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this place.
	 *
	 * @return the status date of this place
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this place.
	 *
	 * @param statusDate the status date of this place
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the s i gid of this place.
	 *
	 * @return the s i gid of this place
	 */
	@AutoEscape
	public String getSIGid();

	/**
	 * Sets the s i gid of this place.
	 *
	 * @param SIGid the s i gid of this place
	 */
	public void setSIGid(String SIGid);

	/**
	 * Returns the name of this place.
	 *
	 * @return the name of this place
	 */
	@AutoEscape
	public String getName();

	/**
	 * Sets the name of this place.
	 *
	 * @param name the name of this place
	 */
	public void setName(String name);

	/**
	 * Returns the address complement of this place.
	 *
	 * @return the address complement of this place
	 */
	@AutoEscape
	public String getAddressComplement();

	/**
	 * Sets the address complement of this place.
	 *
	 * @param addressComplement the address complement of this place
	 */
	public void setAddressComplement(String addressComplement);

	/**
	 * Returns the address street of this place.
	 *
	 * @return the address street of this place
	 */
	@AutoEscape
	public String getAddressStreet();

	/**
	 * Sets the address street of this place.
	 *
	 * @param addressStreet the address street of this place
	 */
	public void setAddressStreet(String addressStreet);

	/**
	 * Returns the address distribution of this place.
	 *
	 * @return the address distribution of this place
	 */
	@AutoEscape
	public String getAddressDistribution();

	/**
	 * Sets the address distribution of this place.
	 *
	 * @param addressDistribution the address distribution of this place
	 */
	public void setAddressDistribution(String addressDistribution);

	/**
	 * Returns the address zip code of this place.
	 *
	 * @return the address zip code of this place
	 */
	@AutoEscape
	public String getAddressZipCode();

	/**
	 * Sets the address zip code of this place.
	 *
	 * @param addressZipCode the address zip code of this place
	 */
	public void setAddressZipCode(String addressZipCode);

	/**
	 * Returns the address country of this place.
	 *
	 * @return the address country of this place
	 */
	@AutoEscape
	public String getAddressCountry();

	/**
	 * Sets the address country of this place.
	 *
	 * @param addressCountry the address country of this place
	 */
	public void setAddressCountry(String addressCountry);

	/**
	 * Returns the mercator x of this place.
	 *
	 * @return the mercator x of this place
	 */
	@AutoEscape
	public String getMercatorX();

	/**
	 * Sets the mercator x of this place.
	 *
	 * @param mercatorX the mercator x of this place
	 */
	public void setMercatorX(String mercatorX);

	/**
	 * Returns the mercator y of this place.
	 *
	 * @return the mercator y of this place
	 */
	@AutoEscape
	public String getMercatorY();

	/**
	 * Sets the mercator y of this place.
	 *
	 * @param mercatorY the mercator y of this place
	 */
	public void setMercatorY(String mercatorY);

	/**
	 * Returns the r g f93 x of this place.
	 *
	 * @return the r g f93 x of this place
	 */
	@AutoEscape
	public String getRGF93X();

	/**
	 * Sets the r g f93 x of this place.
	 *
	 * @param RGF93X the r g f93 x of this place
	 */
	public void setRGF93X(String RGF93X);

	/**
	 * Returns the r g f93 y of this place.
	 *
	 * @return the r g f93 y of this place
	 */
	@AutoEscape
	public String getRGF93Y();

	/**
	 * Sets the r g f93 y of this place.
	 *
	 * @param RGF93Y the r g f93 y of this place
	 */
	public void setRGF93Y(String RGF93Y);

	/**
	 * Returns the alias of this place.
	 *
	 * @return the alias of this place
	 */
	public String getAlias();

	/**
	 * Returns the localized alias of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized alias of this place
	 */
	@AutoEscape
	public String getAlias(Locale locale);

	/**
	 * Returns the localized alias of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized alias of this place. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getAlias(Locale locale, boolean useDefault);

	/**
	 * Returns the localized alias of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized alias of this place
	 */
	@AutoEscape
	public String getAlias(String languageId);

	/**
	 * Returns the localized alias of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized alias of this place
	 */
	@AutoEscape
	public String getAlias(String languageId, boolean useDefault);

	@AutoEscape
	public String getAliasCurrentLanguageId();

	@AutoEscape
	public String getAliasCurrentValue();

	/**
	 * Returns a map of the locales and localized aliases of this place.
	 *
	 * @return the locales and localized aliases of this place
	 */
	public Map<Locale, String> getAliasMap();

	/**
	 * Sets the alias of this place.
	 *
	 * @param alias the alias of this place
	 */
	public void setAlias(String alias);

	/**
	 * Sets the localized alias of this place in the language.
	 *
	 * @param alias the localized alias of this place
	 * @param locale the locale of the language
	 */
	public void setAlias(String alias, Locale locale);

	/**
	 * Sets the localized alias of this place in the language, and sets the default locale.
	 *
	 * @param alias the localized alias of this place
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setAlias(String alias, Locale locale, Locale defaultLocale);

	public void setAliasCurrentLanguageId(String languageId);

	/**
	 * Sets the localized aliases of this place from the map of locales and localized aliases.
	 *
	 * @param aliasMap the locales and localized aliases of this place
	 */
	public void setAliasMap(Map<Locale, String> aliasMap);

	/**
	 * Sets the localized aliases of this place from the map of locales and localized aliases, and sets the default locale.
	 *
	 * @param aliasMap the locales and localized aliases of this place
	 * @param defaultLocale the default locale
	 */
	public void setAliasMap(Map<Locale, String> aliasMap, Locale defaultLocale);

	/**
	 * Returns the presentation of this place.
	 *
	 * @return the presentation of this place
	 */
	public String getPresentation();

	/**
	 * Returns the localized presentation of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized presentation of this place
	 */
	@AutoEscape
	public String getPresentation(Locale locale);

	/**
	 * Returns the localized presentation of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized presentation of this place. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getPresentation(Locale locale, boolean useDefault);

	/**
	 * Returns the localized presentation of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized presentation of this place
	 */
	@AutoEscape
	public String getPresentation(String languageId);

	/**
	 * Returns the localized presentation of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized presentation of this place
	 */
	@AutoEscape
	public String getPresentation(String languageId, boolean useDefault);

	@AutoEscape
	public String getPresentationCurrentLanguageId();

	@AutoEscape
	public String getPresentationCurrentValue();

	/**
	 * Returns a map of the locales and localized presentations of this place.
	 *
	 * @return the locales and localized presentations of this place
	 */
	public Map<Locale, String> getPresentationMap();

	/**
	 * Sets the presentation of this place.
	 *
	 * @param presentation the presentation of this place
	 */
	public void setPresentation(String presentation);

	/**
	 * Sets the localized presentation of this place in the language.
	 *
	 * @param presentation the localized presentation of this place
	 * @param locale the locale of the language
	 */
	public void setPresentation(String presentation, Locale locale);

	/**
	 * Sets the localized presentation of this place in the language, and sets the default locale.
	 *
	 * @param presentation the localized presentation of this place
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setPresentation(String presentation, Locale locale,
		Locale defaultLocale);

	public void setPresentationCurrentLanguageId(String languageId);

	/**
	 * Sets the localized presentations of this place from the map of locales and localized presentations.
	 *
	 * @param presentationMap the locales and localized presentations of this place
	 */
	public void setPresentationMap(Map<Locale, String> presentationMap);

	/**
	 * Sets the localized presentations of this place from the map of locales and localized presentations, and sets the default locale.
	 *
	 * @param presentationMap the locales and localized presentations of this place
	 * @param defaultLocale the default locale
	 */
	public void setPresentationMap(Map<Locale, String> presentationMap,
		Locale defaultLocale);

	/**
	 * Returns the service and activities of this place.
	 *
	 * @return the service and activities of this place
	 */
	public String getServiceAndActivities();

	/**
	 * Returns the localized service and activities of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized service and activities of this place
	 */
	@AutoEscape
	public String getServiceAndActivities(Locale locale);

	/**
	 * Returns the localized service and activities of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized service and activities of this place. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getServiceAndActivities(Locale locale, boolean useDefault);

	/**
	 * Returns the localized service and activities of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized service and activities of this place
	 */
	@AutoEscape
	public String getServiceAndActivities(String languageId);

	/**
	 * Returns the localized service and activities of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized service and activities of this place
	 */
	@AutoEscape
	public String getServiceAndActivities(String languageId, boolean useDefault);

	@AutoEscape
	public String getServiceAndActivitiesCurrentLanguageId();

	@AutoEscape
	public String getServiceAndActivitiesCurrentValue();

	/**
	 * Returns a map of the locales and localized service and activitieses of this place.
	 *
	 * @return the locales and localized service and activitieses of this place
	 */
	public Map<Locale, String> getServiceAndActivitiesMap();

	/**
	 * Sets the service and activities of this place.
	 *
	 * @param serviceAndActivities the service and activities of this place
	 */
	public void setServiceAndActivities(String serviceAndActivities);

	/**
	 * Sets the localized service and activities of this place in the language.
	 *
	 * @param serviceAndActivities the localized service and activities of this place
	 * @param locale the locale of the language
	 */
	public void setServiceAndActivities(String serviceAndActivities,
		Locale locale);

	/**
	 * Sets the localized service and activities of this place in the language, and sets the default locale.
	 *
	 * @param serviceAndActivities the localized service and activities of this place
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setServiceAndActivities(String serviceAndActivities,
		Locale locale, Locale defaultLocale);

	public void setServiceAndActivitiesCurrentLanguageId(String languageId);

	/**
	 * Sets the localized service and activitieses of this place from the map of locales and localized service and activitieses.
	 *
	 * @param serviceAndActivitiesMap the locales and localized service and activitieses of this place
	 */
	public void setServiceAndActivitiesMap(
		Map<Locale, String> serviceAndActivitiesMap);

	/**
	 * Sets the localized service and activitieses of this place from the map of locales and localized service and activitieses, and sets the default locale.
	 *
	 * @param serviceAndActivitiesMap the locales and localized service and activitieses of this place
	 * @param defaultLocale the default locale
	 */
	public void setServiceAndActivitiesMap(
		Map<Locale, String> serviceAndActivitiesMap, Locale defaultLocale);

	/**
	 * Returns the characteristics of this place.
	 *
	 * @return the characteristics of this place
	 */
	public String getCharacteristics();

	/**
	 * Returns the localized characteristics of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized characteristics of this place
	 */
	@AutoEscape
	public String getCharacteristics(Locale locale);

	/**
	 * Returns the localized characteristics of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized characteristics of this place. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getCharacteristics(Locale locale, boolean useDefault);

	/**
	 * Returns the localized characteristics of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized characteristics of this place
	 */
	@AutoEscape
	public String getCharacteristics(String languageId);

	/**
	 * Returns the localized characteristics of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized characteristics of this place
	 */
	@AutoEscape
	public String getCharacteristics(String languageId, boolean useDefault);

	@AutoEscape
	public String getCharacteristicsCurrentLanguageId();

	@AutoEscape
	public String getCharacteristicsCurrentValue();

	/**
	 * Returns a map of the locales and localized characteristicses of this place.
	 *
	 * @return the locales and localized characteristicses of this place
	 */
	public Map<Locale, String> getCharacteristicsMap();

	/**
	 * Sets the characteristics of this place.
	 *
	 * @param characteristics the characteristics of this place
	 */
	public void setCharacteristics(String characteristics);

	/**
	 * Sets the localized characteristics of this place in the language.
	 *
	 * @param characteristics the localized characteristics of this place
	 * @param locale the locale of the language
	 */
	public void setCharacteristics(String characteristics, Locale locale);

	/**
	 * Sets the localized characteristics of this place in the language, and sets the default locale.
	 *
	 * @param characteristics the localized characteristics of this place
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setCharacteristics(String characteristics, Locale locale,
		Locale defaultLocale);

	public void setCharacteristicsCurrentLanguageId(String languageId);

	/**
	 * Sets the localized characteristicses of this place from the map of locales and localized characteristicses.
	 *
	 * @param characteristicsMap the locales and localized characteristicses of this place
	 */
	public void setCharacteristicsMap(Map<Locale, String> characteristicsMap);

	/**
	 * Sets the localized characteristicses of this place from the map of locales and localized characteristicses, and sets the default locale.
	 *
	 * @param characteristicsMap the locales and localized characteristicses of this place
	 * @param defaultLocale the default locale
	 */
	public void setCharacteristicsMap(Map<Locale, String> characteristicsMap,
		Locale defaultLocale);

	/**
	 * Returns the subject to public holiday of this place.
	 *
	 * @return the subject to public holiday of this place
	 */
	public boolean getSubjectToPublicHoliday();

	/**
	 * Returns <code>true</code> if this place is subject to public holiday.
	 *
	 * @return <code>true</code> if this place is subject to public holiday; <code>false</code> otherwise
	 */
	public boolean isSubjectToPublicHoliday();

	/**
	 * Sets whether this place is subject to public holiday.
	 *
	 * @param subjectToPublicHoliday the subject to public holiday of this place
	 */
	public void setSubjectToPublicHoliday(boolean subjectToPublicHoliday);

	/**
	 * Returns the exceptional schedule of this place.
	 *
	 * @return the exceptional schedule of this place
	 */
	public String getExceptionalSchedule();

	/**
	 * Returns the localized exceptional schedule of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized exceptional schedule of this place
	 */
	@AutoEscape
	public String getExceptionalSchedule(Locale locale);

	/**
	 * Returns the localized exceptional schedule of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized exceptional schedule of this place. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getExceptionalSchedule(Locale locale, boolean useDefault);

	/**
	 * Returns the localized exceptional schedule of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized exceptional schedule of this place
	 */
	@AutoEscape
	public String getExceptionalSchedule(String languageId);

	/**
	 * Returns the localized exceptional schedule of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized exceptional schedule of this place
	 */
	@AutoEscape
	public String getExceptionalSchedule(String languageId, boolean useDefault);

	@AutoEscape
	public String getExceptionalScheduleCurrentLanguageId();

	@AutoEscape
	public String getExceptionalScheduleCurrentValue();

	/**
	 * Returns a map of the locales and localized exceptional schedules of this place.
	 *
	 * @return the locales and localized exceptional schedules of this place
	 */
	public Map<Locale, String> getExceptionalScheduleMap();

	/**
	 * Sets the exceptional schedule of this place.
	 *
	 * @param exceptionalSchedule the exceptional schedule of this place
	 */
	public void setExceptionalSchedule(String exceptionalSchedule);

	/**
	 * Sets the localized exceptional schedule of this place in the language.
	 *
	 * @param exceptionalSchedule the localized exceptional schedule of this place
	 * @param locale the locale of the language
	 */
	public void setExceptionalSchedule(String exceptionalSchedule, Locale locale);

	/**
	 * Sets the localized exceptional schedule of this place in the language, and sets the default locale.
	 *
	 * @param exceptionalSchedule the localized exceptional schedule of this place
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setExceptionalSchedule(String exceptionalSchedule,
		Locale locale, Locale defaultLocale);

	public void setExceptionalScheduleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized exceptional schedules of this place from the map of locales and localized exceptional schedules.
	 *
	 * @param exceptionalScheduleMap the locales and localized exceptional schedules of this place
	 */
	public void setExceptionalScheduleMap(
		Map<Locale, String> exceptionalScheduleMap);

	/**
	 * Sets the localized exceptional schedules of this place from the map of locales and localized exceptional schedules, and sets the default locale.
	 *
	 * @param exceptionalScheduleMap the locales and localized exceptional schedules of this place
	 * @param defaultLocale the default locale
	 */
	public void setExceptionalScheduleMap(
		Map<Locale, String> exceptionalScheduleMap, Locale defaultLocale);

	/**
	 * Returns the display events of this place.
	 *
	 * @return the display events of this place
	 */
	public boolean getDisplayEvents();

	/**
	 * Returns <code>true</code> if this place is display events.
	 *
	 * @return <code>true</code> if this place is display events; <code>false</code> otherwise
	 */
	public boolean isDisplayEvents();

	/**
	 * Sets whether this place is display events.
	 *
	 * @param displayEvents the display events of this place
	 */
	public void setDisplayEvents(boolean displayEvents);

	/**
	 * Returns the additional information of this place.
	 *
	 * @return the additional information of this place
	 */
	public String getAdditionalInformation();

	/**
	 * Returns the localized additional information of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized additional information of this place
	 */
	@AutoEscape
	public String getAdditionalInformation(Locale locale);

	/**
	 * Returns the localized additional information of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized additional information of this place. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getAdditionalInformation(Locale locale, boolean useDefault);

	/**
	 * Returns the localized additional information of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized additional information of this place
	 */
	@AutoEscape
	public String getAdditionalInformation(String languageId);

	/**
	 * Returns the localized additional information of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized additional information of this place
	 */
	@AutoEscape
	public String getAdditionalInformation(String languageId, boolean useDefault);

	@AutoEscape
	public String getAdditionalInformationCurrentLanguageId();

	@AutoEscape
	public String getAdditionalInformationCurrentValue();

	/**
	 * Returns a map of the locales and localized additional informations of this place.
	 *
	 * @return the locales and localized additional informations of this place
	 */
	public Map<Locale, String> getAdditionalInformationMap();

	/**
	 * Sets the additional information of this place.
	 *
	 * @param additionalInformation the additional information of this place
	 */
	public void setAdditionalInformation(String additionalInformation);

	/**
	 * Sets the localized additional information of this place in the language.
	 *
	 * @param additionalInformation the localized additional information of this place
	 * @param locale the locale of the language
	 */
	public void setAdditionalInformation(String additionalInformation,
		Locale locale);

	/**
	 * Sets the localized additional information of this place in the language, and sets the default locale.
	 *
	 * @param additionalInformation the localized additional information of this place
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setAdditionalInformation(String additionalInformation,
		Locale locale, Locale defaultLocale);

	public void setAdditionalInformationCurrentLanguageId(String languageId);

	/**
	 * Sets the localized additional informations of this place from the map of locales and localized additional informations.
	 *
	 * @param additionalInformationMap the locales and localized additional informations of this place
	 */
	public void setAdditionalInformationMap(
		Map<Locale, String> additionalInformationMap);

	/**
	 * Sets the localized additional informations of this place from the map of locales and localized additional informations, and sets the default locale.
	 *
	 * @param additionalInformationMap the locales and localized additional informations of this place
	 * @param defaultLocale the default locale
	 */
	public void setAdditionalInformationMap(
		Map<Locale, String> additionalInformationMap, Locale defaultLocale);

	/**
	 * Returns the phone of this place.
	 *
	 * @return the phone of this place
	 */
	@AutoEscape
	public String getPhone();

	/**
	 * Sets the phone of this place.
	 *
	 * @param phone the phone of this place
	 */
	public void setPhone(String phone);

	/**
	 * Returns the mail of this place.
	 *
	 * @return the mail of this place
	 */
	@AutoEscape
	public String getMail();

	/**
	 * Sets the mail of this place.
	 *
	 * @param mail the mail of this place
	 */
	public void setMail(String mail);

	/**
	 * Returns the site u r l of this place.
	 *
	 * @return the site u r l of this place
	 */
	public String getSiteURL();

	/**
	 * Returns the localized site u r l of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized site u r l of this place
	 */
	@AutoEscape
	public String getSiteURL(Locale locale);

	/**
	 * Returns the localized site u r l of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized site u r l of this place. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getSiteURL(Locale locale, boolean useDefault);

	/**
	 * Returns the localized site u r l of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized site u r l of this place
	 */
	@AutoEscape
	public String getSiteURL(String languageId);

	/**
	 * Returns the localized site u r l of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized site u r l of this place
	 */
	@AutoEscape
	public String getSiteURL(String languageId, boolean useDefault);

	@AutoEscape
	public String getSiteURLCurrentLanguageId();

	@AutoEscape
	public String getSiteURLCurrentValue();

	/**
	 * Returns a map of the locales and localized site u r ls of this place.
	 *
	 * @return the locales and localized site u r ls of this place
	 */
	public Map<Locale, String> getSiteURLMap();

	/**
	 * Sets the site u r l of this place.
	 *
	 * @param siteURL the site u r l of this place
	 */
	public void setSiteURL(String siteURL);

	/**
	 * Sets the localized site u r l of this place in the language.
	 *
	 * @param siteURL the localized site u r l of this place
	 * @param locale the locale of the language
	 */
	public void setSiteURL(String siteURL, Locale locale);

	/**
	 * Sets the localized site u r l of this place in the language, and sets the default locale.
	 *
	 * @param siteURL the localized site u r l of this place
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setSiteURL(String siteURL, Locale locale, Locale defaultLocale);

	public void setSiteURLCurrentLanguageId(String languageId);

	/**
	 * Sets the localized site u r ls of this place from the map of locales and localized site u r ls.
	 *
	 * @param siteURLMap the locales and localized site u r ls of this place
	 */
	public void setSiteURLMap(Map<Locale, String> siteURLMap);

	/**
	 * Sets the localized site u r ls of this place from the map of locales and localized site u r ls, and sets the default locale.
	 *
	 * @param siteURLMap the locales and localized site u r ls of this place
	 * @param defaultLocale the default locale
	 */
	public void setSiteURLMap(Map<Locale, String> siteURLMap,
		Locale defaultLocale);

	/**
	 * Returns the site label of this place.
	 *
	 * @return the site label of this place
	 */
	public String getSiteLabel();

	/**
	 * Returns the localized site label of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized site label of this place
	 */
	@AutoEscape
	public String getSiteLabel(Locale locale);

	/**
	 * Returns the localized site label of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized site label of this place. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getSiteLabel(Locale locale, boolean useDefault);

	/**
	 * Returns the localized site label of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized site label of this place
	 */
	@AutoEscape
	public String getSiteLabel(String languageId);

	/**
	 * Returns the localized site label of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized site label of this place
	 */
	@AutoEscape
	public String getSiteLabel(String languageId, boolean useDefault);

	@AutoEscape
	public String getSiteLabelCurrentLanguageId();

	@AutoEscape
	public String getSiteLabelCurrentValue();

	/**
	 * Returns a map of the locales and localized site labels of this place.
	 *
	 * @return the locales and localized site labels of this place
	 */
	public Map<Locale, String> getSiteLabelMap();

	/**
	 * Sets the site label of this place.
	 *
	 * @param siteLabel the site label of this place
	 */
	public void setSiteLabel(String siteLabel);

	/**
	 * Sets the localized site label of this place in the language.
	 *
	 * @param siteLabel the localized site label of this place
	 * @param locale the locale of the language
	 */
	public void setSiteLabel(String siteLabel, Locale locale);

	/**
	 * Sets the localized site label of this place in the language, and sets the default locale.
	 *
	 * @param siteLabel the localized site label of this place
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setSiteLabel(String siteLabel, Locale locale,
		Locale defaultLocale);

	public void setSiteLabelCurrentLanguageId(String languageId);

	/**
	 * Sets the localized site labels of this place from the map of locales and localized site labels.
	 *
	 * @param siteLabelMap the locales and localized site labels of this place
	 */
	public void setSiteLabelMap(Map<Locale, String> siteLabelMap);

	/**
	 * Sets the localized site labels of this place from the map of locales and localized site labels, and sets the default locale.
	 *
	 * @param siteLabelMap the locales and localized site labels of this place
	 * @param defaultLocale the default locale
	 */
	public void setSiteLabelMap(Map<Locale, String> siteLabelMap,
		Locale defaultLocale);

	/**
	 * Returns the facebook u r l of this place.
	 *
	 * @return the facebook u r l of this place
	 */
	public String getFacebookURL();

	/**
	 * Returns the localized facebook u r l of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized facebook u r l of this place
	 */
	@AutoEscape
	public String getFacebookURL(Locale locale);

	/**
	 * Returns the localized facebook u r l of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized facebook u r l of this place. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getFacebookURL(Locale locale, boolean useDefault);

	/**
	 * Returns the localized facebook u r l of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized facebook u r l of this place
	 */
	@AutoEscape
	public String getFacebookURL(String languageId);

	/**
	 * Returns the localized facebook u r l of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized facebook u r l of this place
	 */
	@AutoEscape
	public String getFacebookURL(String languageId, boolean useDefault);

	@AutoEscape
	public String getFacebookURLCurrentLanguageId();

	@AutoEscape
	public String getFacebookURLCurrentValue();

	/**
	 * Returns a map of the locales and localized facebook u r ls of this place.
	 *
	 * @return the locales and localized facebook u r ls of this place
	 */
	public Map<Locale, String> getFacebookURLMap();

	/**
	 * Sets the facebook u r l of this place.
	 *
	 * @param facebookURL the facebook u r l of this place
	 */
	public void setFacebookURL(String facebookURL);

	/**
	 * Sets the localized facebook u r l of this place in the language.
	 *
	 * @param facebookURL the localized facebook u r l of this place
	 * @param locale the locale of the language
	 */
	public void setFacebookURL(String facebookURL, Locale locale);

	/**
	 * Sets the localized facebook u r l of this place in the language, and sets the default locale.
	 *
	 * @param facebookURL the localized facebook u r l of this place
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setFacebookURL(String facebookURL, Locale locale,
		Locale defaultLocale);

	public void setFacebookURLCurrentLanguageId(String languageId);

	/**
	 * Sets the localized facebook u r ls of this place from the map of locales and localized facebook u r ls.
	 *
	 * @param facebookURLMap the locales and localized facebook u r ls of this place
	 */
	public void setFacebookURLMap(Map<Locale, String> facebookURLMap);

	/**
	 * Sets the localized facebook u r ls of this place from the map of locales and localized facebook u r ls, and sets the default locale.
	 *
	 * @param facebookURLMap the locales and localized facebook u r ls of this place
	 * @param defaultLocale the default locale
	 */
	public void setFacebookURLMap(Map<Locale, String> facebookURLMap,
		Locale defaultLocale);

	/**
	 * Returns the facebook label of this place.
	 *
	 * @return the facebook label of this place
	 */
	public String getFacebookLabel();

	/**
	 * Returns the localized facebook label of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized facebook label of this place
	 */
	@AutoEscape
	public String getFacebookLabel(Locale locale);

	/**
	 * Returns the localized facebook label of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized facebook label of this place. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getFacebookLabel(Locale locale, boolean useDefault);

	/**
	 * Returns the localized facebook label of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized facebook label of this place
	 */
	@AutoEscape
	public String getFacebookLabel(String languageId);

	/**
	 * Returns the localized facebook label of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized facebook label of this place
	 */
	@AutoEscape
	public String getFacebookLabel(String languageId, boolean useDefault);

	@AutoEscape
	public String getFacebookLabelCurrentLanguageId();

	@AutoEscape
	public String getFacebookLabelCurrentValue();

	/**
	 * Returns a map of the locales and localized facebook labels of this place.
	 *
	 * @return the locales and localized facebook labels of this place
	 */
	public Map<Locale, String> getFacebookLabelMap();

	/**
	 * Sets the facebook label of this place.
	 *
	 * @param facebookLabel the facebook label of this place
	 */
	public void setFacebookLabel(String facebookLabel);

	/**
	 * Sets the localized facebook label of this place in the language.
	 *
	 * @param facebookLabel the localized facebook label of this place
	 * @param locale the locale of the language
	 */
	public void setFacebookLabel(String facebookLabel, Locale locale);

	/**
	 * Sets the localized facebook label of this place in the language, and sets the default locale.
	 *
	 * @param facebookLabel the localized facebook label of this place
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setFacebookLabel(String facebookLabel, Locale locale,
		Locale defaultLocale);

	public void setFacebookLabelCurrentLanguageId(String languageId);

	/**
	 * Sets the localized facebook labels of this place from the map of locales and localized facebook labels.
	 *
	 * @param facebookLabelMap the locales and localized facebook labels of this place
	 */
	public void setFacebookLabelMap(Map<Locale, String> facebookLabelMap);

	/**
	 * Sets the localized facebook labels of this place from the map of locales and localized facebook labels, and sets the default locale.
	 *
	 * @param facebookLabelMap the locales and localized facebook labels of this place
	 * @param defaultLocale the default locale
	 */
	public void setFacebookLabelMap(Map<Locale, String> facebookLabelMap,
		Locale defaultLocale);

	/**
	 * Returns the acces map of this place.
	 *
	 * @return the acces map of this place
	 */
	public String getAccesMap();

	/**
	 * Returns the localized acces map of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized acces map of this place
	 */
	@AutoEscape
	public String getAccesMap(Locale locale);

	/**
	 * Returns the localized acces map of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized acces map of this place. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getAccesMap(Locale locale, boolean useDefault);

	/**
	 * Returns the localized acces map of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized acces map of this place
	 */
	@AutoEscape
	public String getAccesMap(String languageId);

	/**
	 * Returns the localized acces map of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized acces map of this place
	 */
	@AutoEscape
	public String getAccesMap(String languageId, boolean useDefault);

	@AutoEscape
	public String getAccesMapCurrentLanguageId();

	@AutoEscape
	public String getAccesMapCurrentValue();

	/**
	 * Returns a map of the locales and localized acces maps of this place.
	 *
	 * @return the locales and localized acces maps of this place
	 */
	public Map<Locale, String> getAccesMapMap();

	/**
	 * Sets the acces map of this place.
	 *
	 * @param accesMap the acces map of this place
	 */
	public void setAccesMap(String accesMap);

	/**
	 * Sets the localized acces map of this place in the language.
	 *
	 * @param accesMap the localized acces map of this place
	 * @param locale the locale of the language
	 */
	public void setAccesMap(String accesMap, Locale locale);

	/**
	 * Sets the localized acces map of this place in the language, and sets the default locale.
	 *
	 * @param accesMap the localized acces map of this place
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setAccesMap(String accesMap, Locale locale, Locale defaultLocale);

	public void setAccesMapCurrentLanguageId(String languageId);

	/**
	 * Sets the localized acces maps of this place from the map of locales and localized acces maps.
	 *
	 * @param accesMapMap the locales and localized acces maps of this place
	 */
	public void setAccesMapMap(Map<Locale, String> accesMapMap);

	/**
	 * Sets the localized acces maps of this place from the map of locales and localized acces maps, and sets the default locale.
	 *
	 * @param accesMapMap the locales and localized acces maps of this place
	 * @param defaultLocale the default locale
	 */
	public void setAccesMapMap(Map<Locale, String> accesMapMap,
		Locale defaultLocale);

	/**
	 * Returns the access of this place.
	 *
	 * @return the access of this place
	 */
	public String getAccess();

	/**
	 * Returns the localized access of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized access of this place
	 */
	@AutoEscape
	public String getAccess(Locale locale);

	/**
	 * Returns the localized access of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized access of this place. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getAccess(Locale locale, boolean useDefault);

	/**
	 * Returns the localized access of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized access of this place
	 */
	@AutoEscape
	public String getAccess(String languageId);

	/**
	 * Returns the localized access of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized access of this place
	 */
	@AutoEscape
	public String getAccess(String languageId, boolean useDefault);

	@AutoEscape
	public String getAccessCurrentLanguageId();

	@AutoEscape
	public String getAccessCurrentValue();

	/**
	 * Returns a map of the locales and localized accesses of this place.
	 *
	 * @return the locales and localized accesses of this place
	 */
	public Map<Locale, String> getAccessMap();

	/**
	 * Sets the access of this place.
	 *
	 * @param access the access of this place
	 */
	public void setAccess(String access);

	/**
	 * Sets the localized access of this place in the language.
	 *
	 * @param access the localized access of this place
	 * @param locale the locale of the language
	 */
	public void setAccess(String access, Locale locale);

	/**
	 * Sets the localized access of this place in the language, and sets the default locale.
	 *
	 * @param access the localized access of this place
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setAccess(String access, Locale locale, Locale defaultLocale);

	public void setAccessCurrentLanguageId(String languageId);

	/**
	 * Sets the localized accesses of this place from the map of locales and localized accesses.
	 *
	 * @param accessMap the locales and localized accesses of this place
	 */
	public void setAccessMap(Map<Locale, String> accessMap);

	/**
	 * Sets the localized accesses of this place from the map of locales and localized accesses, and sets the default locale.
	 *
	 * @param accessMap the locales and localized accesses of this place
	 * @param defaultLocale the default locale
	 */
	public void setAccessMap(Map<Locale, String> accessMap, Locale defaultLocale);

	/**
	 * Returns the access for disabled of this place.
	 *
	 * @return the access for disabled of this place
	 */
	public String getAccessForDisabled();

	/**
	 * Returns the localized access for disabled of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized access for disabled of this place
	 */
	@AutoEscape
	public String getAccessForDisabled(Locale locale);

	/**
	 * Returns the localized access for disabled of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized access for disabled of this place. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getAccessForDisabled(Locale locale, boolean useDefault);

	/**
	 * Returns the localized access for disabled of this place in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized access for disabled of this place
	 */
	@AutoEscape
	public String getAccessForDisabled(String languageId);

	/**
	 * Returns the localized access for disabled of this place in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized access for disabled of this place
	 */
	@AutoEscape
	public String getAccessForDisabled(String languageId, boolean useDefault);

	@AutoEscape
	public String getAccessForDisabledCurrentLanguageId();

	@AutoEscape
	public String getAccessForDisabledCurrentValue();

	/**
	 * Returns a map of the locales and localized access for disableds of this place.
	 *
	 * @return the locales and localized access for disableds of this place
	 */
	public Map<Locale, String> getAccessForDisabledMap();

	/**
	 * Sets the access for disabled of this place.
	 *
	 * @param accessForDisabled the access for disabled of this place
	 */
	public void setAccessForDisabled(String accessForDisabled);

	/**
	 * Sets the localized access for disabled of this place in the language.
	 *
	 * @param accessForDisabled the localized access for disabled of this place
	 * @param locale the locale of the language
	 */
	public void setAccessForDisabled(String accessForDisabled, Locale locale);

	/**
	 * Sets the localized access for disabled of this place in the language, and sets the default locale.
	 *
	 * @param accessForDisabled the localized access for disabled of this place
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setAccessForDisabled(String accessForDisabled, Locale locale,
		Locale defaultLocale);

	public void setAccessForDisabledCurrentLanguageId(String languageId);

	/**
	 * Sets the localized access for disableds of this place from the map of locales and localized access for disableds.
	 *
	 * @param accessForDisabledMap the locales and localized access for disableds of this place
	 */
	public void setAccessForDisabledMap(
		Map<Locale, String> accessForDisabledMap);

	/**
	 * Sets the localized access for disableds of this place from the map of locales and localized access for disableds, and sets the default locale.
	 *
	 * @param accessForDisabledMap the locales and localized access for disableds of this place
	 * @param defaultLocale the default locale
	 */
	public void setAccessForDisabledMap(
		Map<Locale, String> accessForDisabledMap, Locale defaultLocale);

	/**
	 * Returns the access for blind of this place.
	 *
	 * @return the access for blind of this place
	 */
	public Boolean getAccessForBlind();

	/**
	 * Sets the access for blind of this place.
	 *
	 * @param accessForBlind the access for blind of this place
	 */
	public void setAccessForBlind(Boolean accessForBlind);

	/**
	 * Returns the access for deaf of this place.
	 *
	 * @return the access for deaf of this place
	 */
	public Boolean getAccessForDeaf();

	/**
	 * Sets the access for deaf of this place.
	 *
	 * @param accessForDeaf the access for deaf of this place
	 */
	public void setAccessForDeaf(Boolean accessForDeaf);

	/**
	 * Returns the access for wheelchair of this place.
	 *
	 * @return the access for wheelchair of this place
	 */
	public Boolean getAccessForWheelchair();

	/**
	 * Sets the access for wheelchair of this place.
	 *
	 * @param accessForWheelchair the access for wheelchair of this place
	 */
	public void setAccessForWheelchair(Boolean accessForWheelchair);

	/**
	 * Returns the access for elder of this place.
	 *
	 * @return the access for elder of this place
	 */
	public Boolean getAccessForElder();

	/**
	 * Sets the access for elder of this place.
	 *
	 * @param accessForElder the access for elder of this place
	 */
	public void setAccessForElder(Boolean accessForElder);

	/**
	 * Returns the access for deficient of this place.
	 *
	 * @return the access for deficient of this place
	 */
	public Boolean getAccessForDeficient();

	/**
	 * Sets the access for deficient of this place.
	 *
	 * @param accessForDeficient the access for deficient of this place
	 */
	public void setAccessForDeficient(Boolean accessForDeficient);

	/**
	 * Returns the r t enabled of this place.
	 *
	 * @return the r t enabled of this place
	 */
	public boolean getRTEnabled();

	/**
	 * Returns <code>true</code> if this place is r t enabled.
	 *
	 * @return <code>true</code> if this place is r t enabled; <code>false</code> otherwise
	 */
	public boolean isRTEnabled();

	/**
	 * Sets whether this place is r t enabled.
	 *
	 * @param RTEnabled the r t enabled of this place
	 */
	public void setRTEnabled(boolean RTEnabled);

	/**
	 * Returns the r t external ID of this place.
	 *
	 * @return the r t external ID of this place
	 */
	@AutoEscape
	public String getRTExternalId();

	/**
	 * Sets the r t external ID of this place.
	 *
	 * @param RTExternalId the r t external ID of this place
	 */
	public void setRTExternalId(String RTExternalId);

	/**
	 * Returns the r t green threshold of this place.
	 *
	 * @return the r t green threshold of this place
	 */
	public long getRTGreenThreshold();

	/**
	 * Sets the r t green threshold of this place.
	 *
	 * @param RTGreenThreshold the r t green threshold of this place
	 */
	public void setRTGreenThreshold(long RTGreenThreshold);

	/**
	 * Returns the r t orange threshold of this place.
	 *
	 * @return the r t orange threshold of this place
	 */
	public long getRTOrangeThreshold();

	/**
	 * Sets the r t orange threshold of this place.
	 *
	 * @param RTOrangeThreshold the r t orange threshold of this place
	 */
	public void setRTOrangeThreshold(long RTOrangeThreshold);

	/**
	 * Returns the r t red threshold of this place.
	 *
	 * @return the r t red threshold of this place
	 */
	public long getRTRedThreshold();

	/**
	 * Sets the r t red threshold of this place.
	 *
	 * @param RTRedThreshold the r t red threshold of this place
	 */
	public void setRTRedThreshold(long RTRedThreshold);

	/**
	 * Returns the r t max threshold of this place.
	 *
	 * @return the r t max threshold of this place
	 */
	public long getRTMaxThreshold();

	/**
	 * Sets the r t max threshold of this place.
	 *
	 * @param RTMaxThreshold the r t max threshold of this place
	 */
	public void setRTMaxThreshold(long RTMaxThreshold);

	/**
	 * Returns the image ID of this place.
	 *
	 * @return the image ID of this place
	 */
	public long getImageId();

	/**
	 * Sets the image ID of this place.
	 *
	 * @param imageId the image ID of this place
	 */
	public void setImageId(long imageId);

	/**
	 * Returns the image IDs of this place.
	 *
	 * @return the image IDs of this place
	 */
	@AutoEscape
	public String getImageIds();

	/**
	 * Sets the image IDs of this place.
	 *
	 * @param imageIds the image IDs of this place
	 */
	public void setImageIds(String imageIds);

	/**
	 * Returns the videos IDs of this place.
	 *
	 * @return the videos IDs of this place
	 */
	@AutoEscape
	public String getVideosIds();

	/**
	 * Sets the videos IDs of this place.
	 *
	 * @param videosIds the videos IDs of this place
	 */
	public void setVideosIds(String videosIds);

	/**
	 * Returns the price ID of this place.
	 *
	 * @return the price ID of this place
	 */
	public long getPriceId();

	/**
	 * Sets the price ID of this place.
	 *
	 * @param priceId the price ID of this place
	 */
	public void setPriceId(long priceId);

	/**
	 * Returns the documents IDs of this place.
	 *
	 * @return the documents IDs of this place
	 */
	@AutoEscape
	public String getDocumentsIds();

	/**
	 * Sets the documents IDs of this place.
	 *
	 * @param documentsIds the documents IDs of this place
	 */
	public void setDocumentsIds(String documentsIds);

	/**
	 * Returns <code>true</code> if this place is approved.
	 *
	 * @return <code>true</code> if this place is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this place is denied.
	 *
	 * @return <code>true</code> if this place is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this place is a draft.
	 *
	 * @return <code>true</code> if this place is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this place is expired.
	 *
	 * @return <code>true</code> if this place is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this place is inactive.
	 *
	 * @return <code>true</code> if this place is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this place is incomplete.
	 *
	 * @return <code>true</code> if this place is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this place is pending.
	 *
	 * @return <code>true</code> if this place is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this place is scheduled.
	 *
	 * @return <code>true</code> if this place is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(eu.strasbourg.service.place.model.Place place);

	@Override
	public int hashCode();

	@Override
	public CacheModel<eu.strasbourg.service.place.model.Place> toCacheModel();

	@Override
	public eu.strasbourg.service.place.model.Place toEscapedModel();

	@Override
	public eu.strasbourg.service.place.model.Place toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}