/**
 * SPDX-FileCopyrightText: (c) 2023 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package eu.strasbourg.service.formSendRecordField.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.formSendRecordField.model.FormSendRecordField;
import eu.strasbourg.service.formSendRecordField.model.FormSendRecordFieldModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FormSendRecordField service. Represents a row in the &quot;formSendRecordField_FormSendRecordField&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FormSendRecordFieldModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FormSendRecordFieldImpl}.
 * </p>
 *
 * @author Ang√©lique Zunino
 * @see FormSendRecordFieldImpl
 * @generated
 */
public class FormSendRecordFieldModelImpl
	extends BaseModelImpl<FormSendRecordField>
	implements FormSendRecordFieldModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a form send record field model instance should use the <code>FormSendRecordField</code> interface instead.
	 */
	public static final String TABLE_NAME =
		"formSendRecordField_FormSendRecordField";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"formSendRecordFieldId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"response", Types.CLOB}, {"assetEntryId", Types.BIGINT},
		{"contentId", Types.BIGINT}, {"instanceId", Types.VARCHAR},
		{"responseUserId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formSendRecordFieldId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("response", Types.CLOB);
		TABLE_COLUMNS_MAP.put("assetEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("contentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("instanceId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("responseUserId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table formSendRecordField_FormSendRecordField (uuid_ VARCHAR(75) null,formSendRecordFieldId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,response TEXT null,assetEntryId LONG,contentId LONG,instanceId VARCHAR(75) null,responseUserId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table formSendRecordField_FormSendRecordField";

	public static final String ORDER_BY_JPQL =
		" ORDER BY formSendRecordField.formSendRecordFieldId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY formSendRecordField_FormSendRecordField.formSendRecordFieldId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ASSETENTRYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CONTENTID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long INSTANCEID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FORMSENDRECORDFIELDID_COLUMN_BITMASK = 128L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.formSendRecordField.service.util.ServiceProps.get(
			"lock.expiration.time.eu.strasbourg.service.formSendRecordField.model.FormSendRecordField"));

	public FormSendRecordFieldModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _formSendRecordFieldId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFormSendRecordFieldId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _formSendRecordFieldId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FormSendRecordField.class;
	}

	@Override
	public String getModelClassName() {
		return FormSendRecordField.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FormSendRecordField, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FormSendRecordField, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FormSendRecordField, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FormSendRecordField)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FormSendRecordField, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FormSendRecordField, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FormSendRecordField)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FormSendRecordField, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FormSendRecordField, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<FormSendRecordField, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<FormSendRecordField, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<FormSendRecordField, Object>>();

			attributeGetterFunctions.put("uuid", FormSendRecordField::getUuid);
			attributeGetterFunctions.put(
				"formSendRecordFieldId",
				FormSendRecordField::getFormSendRecordFieldId);
			attributeGetterFunctions.put(
				"groupId", FormSendRecordField::getGroupId);
			attributeGetterFunctions.put(
				"companyId", FormSendRecordField::getCompanyId);
			attributeGetterFunctions.put(
				"userId", FormSendRecordField::getUserId);
			attributeGetterFunctions.put(
				"userName", FormSendRecordField::getUserName);
			attributeGetterFunctions.put(
				"createDate", FormSendRecordField::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", FormSendRecordField::getModifiedDate);
			attributeGetterFunctions.put(
				"status", FormSendRecordField::getStatus);
			attributeGetterFunctions.put(
				"statusByUserId", FormSendRecordField::getStatusByUserId);
			attributeGetterFunctions.put(
				"statusByUserName", FormSendRecordField::getStatusByUserName);
			attributeGetterFunctions.put(
				"statusDate", FormSendRecordField::getStatusDate);
			attributeGetterFunctions.put(
				"response", FormSendRecordField::getResponse);
			attributeGetterFunctions.put(
				"assetEntryId", FormSendRecordField::getAssetEntryId);
			attributeGetterFunctions.put(
				"contentId", FormSendRecordField::getContentId);
			attributeGetterFunctions.put(
				"instanceId", FormSendRecordField::getInstanceId);
			attributeGetterFunctions.put(
				"responseUserId", FormSendRecordField::getResponseUserId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<FormSendRecordField, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<FormSendRecordField, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<FormSendRecordField, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<FormSendRecordField, String>)
					FormSendRecordField::setUuid);
			attributeSetterBiConsumers.put(
				"formSendRecordFieldId",
				(BiConsumer<FormSendRecordField, Long>)
					FormSendRecordField::setFormSendRecordFieldId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<FormSendRecordField, Long>)
					FormSendRecordField::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<FormSendRecordField, Long>)
					FormSendRecordField::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<FormSendRecordField, Long>)
					FormSendRecordField::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<FormSendRecordField, String>)
					FormSendRecordField::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<FormSendRecordField, Date>)
					FormSendRecordField::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<FormSendRecordField, Date>)
					FormSendRecordField::setModifiedDate);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<FormSendRecordField, Integer>)
					FormSendRecordField::setStatus);
			attributeSetterBiConsumers.put(
				"statusByUserId",
				(BiConsumer<FormSendRecordField, Long>)
					FormSendRecordField::setStatusByUserId);
			attributeSetterBiConsumers.put(
				"statusByUserName",
				(BiConsumer<FormSendRecordField, String>)
					FormSendRecordField::setStatusByUserName);
			attributeSetterBiConsumers.put(
				"statusDate",
				(BiConsumer<FormSendRecordField, Date>)
					FormSendRecordField::setStatusDate);
			attributeSetterBiConsumers.put(
				"response",
				(BiConsumer<FormSendRecordField, String>)
					FormSendRecordField::setResponse);
			attributeSetterBiConsumers.put(
				"assetEntryId",
				(BiConsumer<FormSendRecordField, Long>)
					FormSendRecordField::setAssetEntryId);
			attributeSetterBiConsumers.put(
				"contentId",
				(BiConsumer<FormSendRecordField, Long>)
					FormSendRecordField::setContentId);
			attributeSetterBiConsumers.put(
				"instanceId",
				(BiConsumer<FormSendRecordField, String>)
					FormSendRecordField::setInstanceId);
			attributeSetterBiConsumers.put(
				"responseUserId",
				(BiConsumer<FormSendRecordField, Long>)
					FormSendRecordField::setResponseUserId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getFormSendRecordFieldId() {
		return _formSendRecordFieldId;
	}

	@Override
	public void setFormSendRecordFieldId(long formSendRecordFieldId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_formSendRecordFieldId = formSendRecordFieldId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public String getResponse() {
		if (_response == null) {
			return "";
		}
		else {
			return _response;
		}
	}

	@Override
	public String getResponse(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getResponse(languageId);
	}

	@Override
	public String getResponse(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getResponse(languageId, useDefault);
	}

	@Override
	public String getResponse(String languageId) {
		return LocalizationUtil.getLocalization(getResponse(), languageId);
	}

	@Override
	public String getResponse(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getResponse(), languageId, useDefault);
	}

	@Override
	public String getResponseCurrentLanguageId() {
		return _responseCurrentLanguageId;
	}

	@JSON
	@Override
	public String getResponseCurrentValue() {
		Locale locale = getLocale(_responseCurrentLanguageId);

		return getResponse(locale);
	}

	@Override
	public Map<Locale, String> getResponseMap() {
		return LocalizationUtil.getLocalizationMap(getResponse());
	}

	@Override
	public void setResponse(String response) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_response = response;
	}

	@Override
	public void setResponse(String response, Locale locale) {
		setResponse(response, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setResponse(
		String response, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(response)) {
			setResponse(
				LocalizationUtil.updateLocalization(
					getResponse(), "Response", response, languageId,
					defaultLanguageId));
		}
		else {
			setResponse(
				LocalizationUtil.removeLocalization(
					getResponse(), "Response", languageId));
		}
	}

	@Override
	public void setResponseCurrentLanguageId(String languageId) {
		_responseCurrentLanguageId = languageId;
	}

	@Override
	public void setResponseMap(Map<Locale, String> responseMap) {
		setResponseMap(responseMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setResponseMap(
		Map<Locale, String> responseMap, Locale defaultLocale) {

		if (responseMap == null) {
			return;
		}

		setResponse(
			LocalizationUtil.updateLocalization(
				responseMap, getResponse(), "Response",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public long getAssetEntryId() {
		return _assetEntryId;
	}

	@Override
	public void setAssetEntryId(long assetEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_assetEntryId = assetEntryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAssetEntryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("assetEntryId"));
	}

	@Override
	public long getContentId() {
		return _contentId;
	}

	@Override
	public void setContentId(long contentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contentId = contentId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalContentId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("contentId"));
	}

	@Override
	public String getInstanceId() {
		if (_instanceId == null) {
			return "";
		}
		else {
			return _instanceId;
		}
	}

	@Override
	public void setInstanceId(String instanceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_instanceId = instanceId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalInstanceId() {
		return getColumnOriginalValue("instanceId");
	}

	@Override
	public long getResponseUserId() {
		return _responseUserId;
	}

	@Override
	public void setResponseUserId(long responseUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_responseUserId = responseUserId;
	}

	@Override
	public String getResponseUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getResponseUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setResponseUserUuid(String responseUserUuid) {
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(FormSendRecordField.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FormSendRecordField.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> responseMap = getResponseMap();

		for (Map.Entry<Locale, String> entry : responseMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getResponse();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			FormSendRecordField.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String response = getResponse(defaultLocale);

		if (Validator.isNull(response)) {
			setResponse(getResponse(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setResponse(
				getResponse(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public FormSendRecordField toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FormSendRecordField>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FormSendRecordFieldImpl formSendRecordFieldImpl =
			new FormSendRecordFieldImpl();

		formSendRecordFieldImpl.setUuid(getUuid());
		formSendRecordFieldImpl.setFormSendRecordFieldId(
			getFormSendRecordFieldId());
		formSendRecordFieldImpl.setGroupId(getGroupId());
		formSendRecordFieldImpl.setCompanyId(getCompanyId());
		formSendRecordFieldImpl.setUserId(getUserId());
		formSendRecordFieldImpl.setUserName(getUserName());
		formSendRecordFieldImpl.setCreateDate(getCreateDate());
		formSendRecordFieldImpl.setModifiedDate(getModifiedDate());
		formSendRecordFieldImpl.setStatus(getStatus());
		formSendRecordFieldImpl.setStatusByUserId(getStatusByUserId());
		formSendRecordFieldImpl.setStatusByUserName(getStatusByUserName());
		formSendRecordFieldImpl.setStatusDate(getStatusDate());
		formSendRecordFieldImpl.setResponse(getResponse());
		formSendRecordFieldImpl.setAssetEntryId(getAssetEntryId());
		formSendRecordFieldImpl.setContentId(getContentId());
		formSendRecordFieldImpl.setInstanceId(getInstanceId());
		formSendRecordFieldImpl.setResponseUserId(getResponseUserId());

		formSendRecordFieldImpl.resetOriginalValues();

		return formSendRecordFieldImpl;
	}

	@Override
	public FormSendRecordField cloneWithOriginalValues() {
		FormSendRecordFieldImpl formSendRecordFieldImpl =
			new FormSendRecordFieldImpl();

		formSendRecordFieldImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		formSendRecordFieldImpl.setFormSendRecordFieldId(
			this.<Long>getColumnOriginalValue("formSendRecordFieldId"));
		formSendRecordFieldImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		formSendRecordFieldImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		formSendRecordFieldImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		formSendRecordFieldImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		formSendRecordFieldImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		formSendRecordFieldImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		formSendRecordFieldImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		formSendRecordFieldImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		formSendRecordFieldImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		formSendRecordFieldImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));
		formSendRecordFieldImpl.setResponse(
			this.<String>getColumnOriginalValue("response"));
		formSendRecordFieldImpl.setAssetEntryId(
			this.<Long>getColumnOriginalValue("assetEntryId"));
		formSendRecordFieldImpl.setContentId(
			this.<Long>getColumnOriginalValue("contentId"));
		formSendRecordFieldImpl.setInstanceId(
			this.<String>getColumnOriginalValue("instanceId"));
		formSendRecordFieldImpl.setResponseUserId(
			this.<Long>getColumnOriginalValue("responseUserId"));

		return formSendRecordFieldImpl;
	}

	@Override
	public int compareTo(FormSendRecordField formSendRecordField) {
		long primaryKey = formSendRecordField.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FormSendRecordField)) {
			return false;
		}

		FormSendRecordField formSendRecordField = (FormSendRecordField)object;

		long primaryKey = formSendRecordField.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FormSendRecordField> toCacheModel() {
		FormSendRecordFieldCacheModel formSendRecordFieldCacheModel =
			new FormSendRecordFieldCacheModel();

		formSendRecordFieldCacheModel.uuid = getUuid();

		String uuid = formSendRecordFieldCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			formSendRecordFieldCacheModel.uuid = null;
		}

		formSendRecordFieldCacheModel.formSendRecordFieldId =
			getFormSendRecordFieldId();

		formSendRecordFieldCacheModel.groupId = getGroupId();

		formSendRecordFieldCacheModel.companyId = getCompanyId();

		formSendRecordFieldCacheModel.userId = getUserId();

		formSendRecordFieldCacheModel.userName = getUserName();

		String userName = formSendRecordFieldCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			formSendRecordFieldCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			formSendRecordFieldCacheModel.createDate = createDate.getTime();
		}
		else {
			formSendRecordFieldCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			formSendRecordFieldCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			formSendRecordFieldCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		formSendRecordFieldCacheModel.status = getStatus();

		formSendRecordFieldCacheModel.statusByUserId = getStatusByUserId();

		formSendRecordFieldCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName =
			formSendRecordFieldCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			formSendRecordFieldCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			formSendRecordFieldCacheModel.statusDate = statusDate.getTime();
		}
		else {
			formSendRecordFieldCacheModel.statusDate = Long.MIN_VALUE;
		}

		formSendRecordFieldCacheModel.response = getResponse();

		String response = formSendRecordFieldCacheModel.response;

		if ((response != null) && (response.length() == 0)) {
			formSendRecordFieldCacheModel.response = null;
		}

		formSendRecordFieldCacheModel.assetEntryId = getAssetEntryId();

		formSendRecordFieldCacheModel.contentId = getContentId();

		formSendRecordFieldCacheModel.instanceId = getInstanceId();

		String instanceId = formSendRecordFieldCacheModel.instanceId;

		if ((instanceId != null) && (instanceId.length() == 0)) {
			formSendRecordFieldCacheModel.instanceId = null;
		}

		formSendRecordFieldCacheModel.responseUserId = getResponseUserId();

		return formSendRecordFieldCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FormSendRecordField, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FormSendRecordField, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FormSendRecordField, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FormSendRecordField)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FormSendRecordField>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FormSendRecordField.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _formSendRecordFieldId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _response;
	private String _responseCurrentLanguageId;
	private long _assetEntryId;
	private long _contentId;
	private String _instanceId;
	private long _responseUserId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<FormSendRecordField, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FormSendRecordField)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"formSendRecordFieldId", _formSendRecordFieldId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("response", _response);
		_columnOriginalValues.put("assetEntryId", _assetEntryId);
		_columnOriginalValues.put("contentId", _contentId);
		_columnOriginalValues.put("instanceId", _instanceId);
		_columnOriginalValues.put("responseUserId", _responseUserId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("formSendRecordFieldId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("status", 256L);

		columnBitmasks.put("statusByUserId", 512L);

		columnBitmasks.put("statusByUserName", 1024L);

		columnBitmasks.put("statusDate", 2048L);

		columnBitmasks.put("response", 4096L);

		columnBitmasks.put("assetEntryId", 8192L);

		columnBitmasks.put("contentId", 16384L);

		columnBitmasks.put("instanceId", 32768L);

		columnBitmasks.put("responseUserId", 65536L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FormSendRecordField _escapedModel;

}