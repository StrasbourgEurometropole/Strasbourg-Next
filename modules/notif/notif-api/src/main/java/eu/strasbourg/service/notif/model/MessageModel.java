/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.notif.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import org.osgi.annotation.versioning.ProviderType;

import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Message service. Represents a row in the &quot;notif_Message&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>eu.strasbourg.service.notif.model.impl.MessageModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>eu.strasbourg.service.notif.model.impl.MessageImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Message
 * @generated
 */
@ProviderType
public interface MessageModel extends BaseModel<Message>, LocalizedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a message model instance should use the {@link Message} interface instead.
	 */

	/**
	 * Returns the primary key of this message.
	 *
	 * @return the primary key of this message
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this message.
	 *
	 * @param primaryKey the primary key of this message
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the message ID of this message.
	 *
	 * @return the message ID of this message
	 */
	public long getMessageId();

	/**
	 * Sets the message ID of this message.
	 *
	 * @param messageId the message ID of this message
	 */
	public void setMessageId(long messageId);

	/**
	 * Returns the service ID of this message.
	 *
	 * @return the service ID of this message
	 */
	public long getServiceId();

	/**
	 * Sets the service ID of this message.
	 *
	 * @param serviceId the service ID of this message
	 */
	public void setServiceId(long serviceId);

	/**
	 * Returns the content of this message.
	 *
	 * @return the content of this message
	 */
	public String getContent();

	/**
	 * Returns the localized content of this message in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized content of this message
	 */
	@AutoEscape
	public String getContent(Locale locale);

	/**
	 * Returns the localized content of this message in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized content of this message. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getContent(Locale locale, boolean useDefault);

	/**
	 * Returns the localized content of this message in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized content of this message
	 */
	@AutoEscape
	public String getContent(String languageId);

	/**
	 * Returns the localized content of this message in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized content of this message
	 */
	@AutoEscape
	public String getContent(String languageId, boolean useDefault);

	@AutoEscape
	public String getContentCurrentLanguageId();

	@AutoEscape
	public String getContentCurrentValue();

	/**
	 * Returns a map of the locales and localized contents of this message.
	 *
	 * @return the locales and localized contents of this message
	 */
	public Map<Locale, String> getContentMap();

	/**
	 * Sets the content of this message.
	 *
	 * @param content the content of this message
	 */
	public void setContent(String content);

	/**
	 * Sets the localized content of this message in the language.
	 *
	 * @param content the localized content of this message
	 * @param locale the locale of the language
	 */
	public void setContent(String content, Locale locale);

	/**
	 * Sets the localized content of this message in the language, and sets the default locale.
	 *
	 * @param content the localized content of this message
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setContent(String content, Locale locale, Locale defaultLocale);

	public void setContentCurrentLanguageId(String languageId);

	/**
	 * Sets the localized contents of this message from the map of locales and localized contents.
	 *
	 * @param contentMap the locales and localized contents of this message
	 */
	public void setContentMap(Map<Locale, String> contentMap);

	/**
	 * Sets the localized contents of this message from the map of locales and localized contents, and sets the default locale.
	 *
	 * @param contentMap the locales and localized contents of this message
	 * @param defaultLocale the default locale
	 */
	public void setContentMap(
		Map<Locale, String> contentMap, Locale defaultLocale);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Message cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}