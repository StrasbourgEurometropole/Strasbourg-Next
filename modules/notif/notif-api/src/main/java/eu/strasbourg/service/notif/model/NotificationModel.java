/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.notif.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedAuditedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Notification service. Represents a row in the &quot;notif_Notification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>eu.strasbourg.service.notif.model.impl.NotificationModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>eu.strasbourg.service.notif.model.impl.NotificationImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Notification
 * @generated
 */
@ProviderType
public interface NotificationModel
	extends BaseModel<Notification>, GroupedModel, LocalizedModel, ShardedModel,
			StagedAuditedModel, WorkflowedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a notification model instance should use the {@link Notification} interface instead.
	 */

	/**
	 * Returns the primary key of this notification.
	 *
	 * @return the primary key of this notification
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this notification.
	 *
	 * @param primaryKey the primary key of this notification
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this notification.
	 *
	 * @return the uuid of this notification
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this notification.
	 *
	 * @param uuid the uuid of this notification
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the notification ID of this notification.
	 *
	 * @return the notification ID of this notification
	 */
	public long getNotificationId();

	/**
	 * Sets the notification ID of this notification.
	 *
	 * @param notificationId the notification ID of this notification
	 */
	public void setNotificationId(long notificationId);

	/**
	 * Returns the group ID of this notification.
	 *
	 * @return the group ID of this notification
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this notification.
	 *
	 * @param groupId the group ID of this notification
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this notification.
	 *
	 * @return the company ID of this notification
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this notification.
	 *
	 * @param companyId the company ID of this notification
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this notification.
	 *
	 * @return the user ID of this notification
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this notification.
	 *
	 * @param userId the user ID of this notification
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this notification.
	 *
	 * @return the user uuid of this notification
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this notification.
	 *
	 * @param userUuid the user uuid of this notification
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this notification.
	 *
	 * @return the user name of this notification
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this notification.
	 *
	 * @param userName the user name of this notification
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this notification.
	 *
	 * @return the create date of this notification
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this notification.
	 *
	 * @param createDate the create date of this notification
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this notification.
	 *
	 * @return the modified date of this notification
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this notification.
	 *
	 * @param modifiedDate the modified date of this notification
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the status of this notification.
	 *
	 * @return the status of this notification
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this notification.
	 *
	 * @param status the status of this notification
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this notification.
	 *
	 * @return the status by user ID of this notification
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this notification.
	 *
	 * @param statusByUserId the status by user ID of this notification
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this notification.
	 *
	 * @return the status by user uuid of this notification
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this notification.
	 *
	 * @param statusByUserUuid the status by user uuid of this notification
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this notification.
	 *
	 * @return the status by user name of this notification
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this notification.
	 *
	 * @param statusByUserName the status by user name of this notification
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this notification.
	 *
	 * @return the status date of this notification
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this notification.
	 *
	 * @param statusDate the status date of this notification
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the service ID of this notification.
	 *
	 * @return the service ID of this notification
	 */
	public long getServiceId();

	/**
	 * Sets the service ID of this notification.
	 *
	 * @param serviceId the service ID of this notification
	 */
	public void setServiceId(long serviceId);

	/**
	 * Returns the is alert of this notification.
	 *
	 * @return the is alert of this notification
	 */
	public int getIsAlert();

	/**
	 * Sets the is alert of this notification.
	 *
	 * @param isAlert the is alert of this notification
	 */
	public void setIsAlert(int isAlert);

	/**
	 * Returns the nature ID of this notification.
	 *
	 * @return the nature ID of this notification
	 */
	public long getNatureId();

	/**
	 * Sets the nature ID of this notification.
	 *
	 * @param natureId the nature ID of this notification
	 */
	public void setNatureId(long natureId);

	/**
	 * Returns the title of this notification.
	 *
	 * @return the title of this notification
	 */
	public String getTitle();

	/**
	 * Returns the localized title of this notification in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized title of this notification
	 */
	@AutoEscape
	public String getTitle(Locale locale);

	/**
	 * Returns the localized title of this notification in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this notification. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized title of this notification in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized title of this notification
	 */
	@AutoEscape
	public String getTitle(String languageId);

	/**
	 * Returns the localized title of this notification in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this notification
	 */
	@AutoEscape
	public String getTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getTitleCurrentLanguageId();

	@AutoEscape
	public String getTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized titles of this notification.
	 *
	 * @return the locales and localized titles of this notification
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this notification.
	 *
	 * @param title the title of this notification
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this notification in the language.
	 *
	 * @param title the localized title of this notification
	 * @param locale the locale of the language
	 */
	public void setTitle(String title, Locale locale);

	/**
	 * Sets the localized title of this notification in the language, and sets the default locale.
	 *
	 * @param title the localized title of this notification
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTitle(String title, Locale locale, Locale defaultLocale);

	public void setTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized titles of this notification from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this notification
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	/**
	 * Sets the localized titles of this notification from the map of locales and localized titles, and sets the default locale.
	 *
	 * @param titleMap the locales and localized titles of this notification
	 * @param defaultLocale the default locale
	 */
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Returns the subtitle of this notification.
	 *
	 * @return the subtitle of this notification
	 */
	public String getSubtitle();

	/**
	 * Returns the localized subtitle of this notification in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized subtitle of this notification
	 */
	@AutoEscape
	public String getSubtitle(Locale locale);

	/**
	 * Returns the localized subtitle of this notification in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized subtitle of this notification. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getSubtitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized subtitle of this notification in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized subtitle of this notification
	 */
	@AutoEscape
	public String getSubtitle(String languageId);

	/**
	 * Returns the localized subtitle of this notification in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized subtitle of this notification
	 */
	@AutoEscape
	public String getSubtitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getSubtitleCurrentLanguageId();

	@AutoEscape
	public String getSubtitleCurrentValue();

	/**
	 * Returns a map of the locales and localized subtitles of this notification.
	 *
	 * @return the locales and localized subtitles of this notification
	 */
	public Map<Locale, String> getSubtitleMap();

	/**
	 * Sets the subtitle of this notification.
	 *
	 * @param subtitle the subtitle of this notification
	 */
	public void setSubtitle(String subtitle);

	/**
	 * Sets the localized subtitle of this notification in the language.
	 *
	 * @param subtitle the localized subtitle of this notification
	 * @param locale the locale of the language
	 */
	public void setSubtitle(String subtitle, Locale locale);

	/**
	 * Sets the localized subtitle of this notification in the language, and sets the default locale.
	 *
	 * @param subtitle the localized subtitle of this notification
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setSubtitle(
		String subtitle, Locale locale, Locale defaultLocale);

	public void setSubtitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized subtitles of this notification from the map of locales and localized subtitles.
	 *
	 * @param subtitleMap the locales and localized subtitles of this notification
	 */
	public void setSubtitleMap(Map<Locale, String> subtitleMap);

	/**
	 * Sets the localized subtitles of this notification from the map of locales and localized subtitles, and sets the default locale.
	 *
	 * @param subtitleMap the locales and localized subtitles of this notification
	 * @param defaultLocale the default locale
	 */
	public void setSubtitleMap(
		Map<Locale, String> subtitleMap, Locale defaultLocale);

	/**
	 * Returns the start date of this notification.
	 *
	 * @return the start date of this notification
	 */
	public Date getStartDate();

	/**
	 * Sets the start date of this notification.
	 *
	 * @param startDate the start date of this notification
	 */
	public void setStartDate(Date startDate);

	/**
	 * Returns the end date of this notification.
	 *
	 * @return the end date of this notification
	 */
	public Date getEndDate();

	/**
	 * Sets the end date of this notification.
	 *
	 * @param endDate the end date of this notification
	 */
	public void setEndDate(Date endDate);

	/**
	 * Returns the broadcast date of this notification.
	 *
	 * @return the broadcast date of this notification
	 */
	public Date getBroadcastDate();

	/**
	 * Sets the broadcast date of this notification.
	 *
	 * @param broadcastDate the broadcast date of this notification
	 */
	public void setBroadcastDate(Date broadcastDate);

	/**
	 * Returns the message ID of this notification.
	 *
	 * @return the message ID of this notification
	 */
	public long getMessageId();

	/**
	 * Sets the message ID of this notification.
	 *
	 * @param messageId the message ID of this notification
	 */
	public void setMessageId(long messageId);

	/**
	 * Returns the content of this notification.
	 *
	 * @return the content of this notification
	 */
	public String getContent();

	/**
	 * Returns the localized content of this notification in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized content of this notification
	 */
	@AutoEscape
	public String getContent(Locale locale);

	/**
	 * Returns the localized content of this notification in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized content of this notification. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getContent(Locale locale, boolean useDefault);

	/**
	 * Returns the localized content of this notification in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized content of this notification
	 */
	@AutoEscape
	public String getContent(String languageId);

	/**
	 * Returns the localized content of this notification in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized content of this notification
	 */
	@AutoEscape
	public String getContent(String languageId, boolean useDefault);

	@AutoEscape
	public String getContentCurrentLanguageId();

	@AutoEscape
	public String getContentCurrentValue();

	/**
	 * Returns a map of the locales and localized contents of this notification.
	 *
	 * @return the locales and localized contents of this notification
	 */
	public Map<Locale, String> getContentMap();

	/**
	 * Sets the content of this notification.
	 *
	 * @param content the content of this notification
	 */
	public void setContent(String content);

	/**
	 * Sets the localized content of this notification in the language.
	 *
	 * @param content the localized content of this notification
	 * @param locale the locale of the language
	 */
	public void setContent(String content, Locale locale);

	/**
	 * Sets the localized content of this notification in the language, and sets the default locale.
	 *
	 * @param content the localized content of this notification
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setContent(String content, Locale locale, Locale defaultLocale);

	public void setContentCurrentLanguageId(String languageId);

	/**
	 * Sets the localized contents of this notification from the map of locales and localized contents.
	 *
	 * @param contentMap the locales and localized contents of this notification
	 */
	public void setContentMap(Map<Locale, String> contentMap);

	/**
	 * Sets the localized contents of this notification from the map of locales and localized contents, and sets the default locale.
	 *
	 * @param contentMap the locales and localized contents of this notification
	 * @param defaultLocale the default locale
	 */
	public void setContentMap(
		Map<Locale, String> contentMap, Locale defaultLocale);

	/**
	 * Returns the label url of this notification.
	 *
	 * @return the label url of this notification
	 */
	public String getLabelUrl();

	/**
	 * Returns the localized label url of this notification in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized label url of this notification
	 */
	@AutoEscape
	public String getLabelUrl(Locale locale);

	/**
	 * Returns the localized label url of this notification in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized label url of this notification. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getLabelUrl(Locale locale, boolean useDefault);

	/**
	 * Returns the localized label url of this notification in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized label url of this notification
	 */
	@AutoEscape
	public String getLabelUrl(String languageId);

	/**
	 * Returns the localized label url of this notification in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized label url of this notification
	 */
	@AutoEscape
	public String getLabelUrl(String languageId, boolean useDefault);

	@AutoEscape
	public String getLabelUrlCurrentLanguageId();

	@AutoEscape
	public String getLabelUrlCurrentValue();

	/**
	 * Returns a map of the locales and localized label urls of this notification.
	 *
	 * @return the locales and localized label urls of this notification
	 */
	public Map<Locale, String> getLabelUrlMap();

	/**
	 * Sets the label url of this notification.
	 *
	 * @param labelUrl the label url of this notification
	 */
	public void setLabelUrl(String labelUrl);

	/**
	 * Sets the localized label url of this notification in the language.
	 *
	 * @param labelUrl the localized label url of this notification
	 * @param locale the locale of the language
	 */
	public void setLabelUrl(String labelUrl, Locale locale);

	/**
	 * Sets the localized label url of this notification in the language, and sets the default locale.
	 *
	 * @param labelUrl the localized label url of this notification
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setLabelUrl(
		String labelUrl, Locale locale, Locale defaultLocale);

	public void setLabelUrlCurrentLanguageId(String languageId);

	/**
	 * Sets the localized label urls of this notification from the map of locales and localized label urls.
	 *
	 * @param labelUrlMap the locales and localized label urls of this notification
	 */
	public void setLabelUrlMap(Map<Locale, String> labelUrlMap);

	/**
	 * Sets the localized label urls of this notification from the map of locales and localized label urls, and sets the default locale.
	 *
	 * @param labelUrlMap the locales and localized label urls of this notification
	 * @param defaultLocale the default locale
	 */
	public void setLabelUrlMap(
		Map<Locale, String> labelUrlMap, Locale defaultLocale);

	/**
	 * Returns the url of this notification.
	 *
	 * @return the url of this notification
	 */
	public String getUrl();

	/**
	 * Returns the localized url of this notification in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized url of this notification
	 */
	@AutoEscape
	public String getUrl(Locale locale);

	/**
	 * Returns the localized url of this notification in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized url of this notification. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getUrl(Locale locale, boolean useDefault);

	/**
	 * Returns the localized url of this notification in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized url of this notification
	 */
	@AutoEscape
	public String getUrl(String languageId);

	/**
	 * Returns the localized url of this notification in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized url of this notification
	 */
	@AutoEscape
	public String getUrl(String languageId, boolean useDefault);

	@AutoEscape
	public String getUrlCurrentLanguageId();

	@AutoEscape
	public String getUrlCurrentValue();

	/**
	 * Returns a map of the locales and localized urls of this notification.
	 *
	 * @return the locales and localized urls of this notification
	 */
	public Map<Locale, String> getUrlMap();

	/**
	 * Sets the url of this notification.
	 *
	 * @param url the url of this notification
	 */
	public void setUrl(String url);

	/**
	 * Sets the localized url of this notification in the language.
	 *
	 * @param url the localized url of this notification
	 * @param locale the locale of the language
	 */
	public void setUrl(String url, Locale locale);

	/**
	 * Sets the localized url of this notification in the language, and sets the default locale.
	 *
	 * @param url the localized url of this notification
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setUrl(String url, Locale locale, Locale defaultLocale);

	public void setUrlCurrentLanguageId(String languageId);

	/**
	 * Sets the localized urls of this notification from the map of locales and localized urls.
	 *
	 * @param urlMap the locales and localized urls of this notification
	 */
	public void setUrlMap(Map<Locale, String> urlMap);

	/**
	 * Sets the localized urls of this notification from the map of locales and localized urls, and sets the default locale.
	 *
	 * @param urlMap the locales and localized urls of this notification
	 * @param defaultLocale the default locale
	 */
	public void setUrlMap(Map<Locale, String> urlMap, Locale defaultLocale);

	/**
	 * Returns the type broadcast of this notification.
	 *
	 * @return the type broadcast of this notification
	 */
	public long getTypeBroadcast();

	/**
	 * Sets the type broadcast of this notification.
	 *
	 * @param typeBroadcast the type broadcast of this notification
	 */
	public void setTypeBroadcast(long typeBroadcast);

	/**
	 * Returns the district of this notification.
	 *
	 * @return the district of this notification
	 */
	public long getDistrict();

	/**
	 * Sets the district of this notification.
	 *
	 * @param district the district of this notification
	 */
	public void setDistrict(long district);

	/**
	 * Returns the broadcast channels of this notification.
	 *
	 * @return the broadcast channels of this notification
	 */
	@AutoEscape
	public String getBroadcastChannels();

	/**
	 * Sets the broadcast channels of this notification.
	 *
	 * @param broadcastChannels the broadcast channels of this notification
	 */
	public void setBroadcastChannels(String broadcastChannels);

	/**
	 * Returns the send status csmap of this notification.
	 *
	 * @return the send status csmap of this notification
	 */
	public long getSendStatusCsmap();

	/**
	 * Sets the send status csmap of this notification.
	 *
	 * @param sendStatusCsmap the send status csmap of this notification
	 */
	public void setSendStatusCsmap(long sendStatusCsmap);

	/**
	 * Returns the send status twitter of this notification.
	 *
	 * @return the send status twitter of this notification
	 */
	public long getSendStatusTwitter();

	/**
	 * Sets the send status twitter of this notification.
	 *
	 * @param sendStatusTwitter the send status twitter of this notification
	 */
	public void setSendStatusTwitter(long sendStatusTwitter);

	/**
	 * Returns the send status monst of this notification.
	 *
	 * @return the send status monst of this notification
	 */
	public long getSendStatusMonst();

	/**
	 * Sets the send status monst of this notification.
	 *
	 * @param sendStatusMonst the send status monst of this notification
	 */
	public void setSendStatusMonst(long sendStatusMonst);

	/**
	 * Returns the send status mail of this notification.
	 *
	 * @return the send status mail of this notification
	 */
	public long getSendStatusMail();

	/**
	 * Sets the send status mail of this notification.
	 *
	 * @param sendStatusMail the send status mail of this notification
	 */
	public void setSendStatusMail(long sendStatusMail);

	/**
	 * Returns the send status segur of this notification.
	 *
	 * @return the send status segur of this notification
	 */
	public long getSendStatusSegur();

	/**
	 * Sets the send status segur of this notification.
	 *
	 * @param sendStatusSegur the send status segur of this notification
	 */
	public void setSendStatusSegur(long sendStatusSegur);

	/**
	 * Returns the is send of this notification.
	 *
	 * @return the is send of this notification
	 */
	public Boolean getIsSend();

	/**
	 * Sets the is send of this notification.
	 *
	 * @param isSend the is send of this notification
	 */
	public void setIsSend(Boolean isSend);

	/**
	 * Returns <code>true</code> if this notification is approved.
	 *
	 * @return <code>true</code> if this notification is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this notification is denied.
	 *
	 * @return <code>true</code> if this notification is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this notification is a draft.
	 *
	 * @return <code>true</code> if this notification is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this notification is expired.
	 *
	 * @return <code>true</code> if this notification is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this notification is inactive.
	 *
	 * @return <code>true</code> if this notification is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this notification is incomplete.
	 *
	 * @return <code>true</code> if this notification is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this notification is pending.
	 *
	 * @return <code>true</code> if this notification is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this notification is scheduled.
	 *
	 * @return <code>true</code> if this notification is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		eu.strasbourg.service.notif.model.Notification notification);

	@Override
	public int hashCode();

	@Override
	public CacheModel<eu.strasbourg.service.notif.model.Notification>
		toCacheModel();

	@Override
	public eu.strasbourg.service.notif.model.Notification toEscapedModel();

	@Override
	public eu.strasbourg.service.notif.model.Notification toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();

}