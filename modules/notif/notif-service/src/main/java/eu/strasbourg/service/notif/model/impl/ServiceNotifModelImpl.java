/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.notif.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import eu.strasbourg.service.notif.model.ServiceNotif;
import eu.strasbourg.service.notif.model.ServiceNotifModel;

import java.io.Serializable;
import java.lang.reflect.InvocationHandler;
import java.sql.Blob;
import java.sql.Types;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ServiceNotif service. Represents a row in the &quot;notif_ServiceNotif&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ServiceNotifModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServiceNotifImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ServiceNotifImpl
 * @generated
 */
public class ServiceNotifModelImpl
	extends BaseModelImpl<ServiceNotif> implements ServiceNotifModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a service notif model instance should use the <code>ServiceNotif</code> interface instead.
	 */
	public static final String TABLE_NAME = "notif_ServiceNotif";

	public static final Object[][] TABLE_COLUMNS = {
		{"serviceId", Types.BIGINT}, {"organisationId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"pictoId", Types.BIGINT},
		{"csmapSubscriptionLabel", Types.VARCHAR},
		{"csmapSubscriptionMandatory", Types.BOOLEAN},
		{"csmapTopic", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("serviceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organisationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pictoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("csmapSubscriptionLabel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("csmapSubscriptionMandatory", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("csmapTopic", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table notif_ServiceNotif (serviceId LONG not null primary key,organisationId LONG,name VARCHAR(400) null,pictoId LONG,csmapSubscriptionLabel VARCHAR(200) null,csmapSubscriptionMandatory BOOLEAN,csmapTopic VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table notif_ServiceNotif";

	public static final String ORDER_BY_JPQL =
		" ORDER BY serviceNotif.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY notif_ServiceNotif.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CSMAPTOPIC_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ORGANISATIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAME_COLUMN_BITMASK = 4L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.notif.service.util.ServiceProps.get(
			"lock.expiration.time.eu.strasbourg.service.notif.model.ServiceNotif"));

	public ServiceNotifModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _serviceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setServiceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _serviceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ServiceNotif.class;
	}

	@Override
	public String getModelClassName() {
		return ServiceNotif.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ServiceNotif, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ServiceNotif, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ServiceNotif, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ServiceNotif)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ServiceNotif, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ServiceNotif, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ServiceNotif)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ServiceNotif, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ServiceNotif, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ServiceNotif, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ServiceNotif, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ServiceNotif, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ServiceNotif, Object>>();
		Map<String, BiConsumer<ServiceNotif, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ServiceNotif, ?>>();

		attributeGetterFunctions.put("serviceId", ServiceNotif::getServiceId);
		attributeSetterBiConsumers.put(
			"serviceId",
			(BiConsumer<ServiceNotif, Long>)ServiceNotif::setServiceId);
		attributeGetterFunctions.put(
			"organisationId", ServiceNotif::getOrganisationId);
		attributeSetterBiConsumers.put(
			"organisationId",
			(BiConsumer<ServiceNotif, Long>)ServiceNotif::setOrganisationId);
		attributeGetterFunctions.put("name", ServiceNotif::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<ServiceNotif, String>)ServiceNotif::setName);
		attributeGetterFunctions.put("pictoId", ServiceNotif::getPictoId);
		attributeSetterBiConsumers.put(
			"pictoId",
			(BiConsumer<ServiceNotif, Long>)ServiceNotif::setPictoId);
		attributeGetterFunctions.put(
			"csmapSubscriptionLabel", ServiceNotif::getCsmapSubscriptionLabel);
		attributeSetterBiConsumers.put(
			"csmapSubscriptionLabel",
			(BiConsumer<ServiceNotif, String>)
				ServiceNotif::setCsmapSubscriptionLabel);
		attributeGetterFunctions.put(
			"csmapSubscriptionMandatory",
			ServiceNotif::getCsmapSubscriptionMandatory);
		attributeSetterBiConsumers.put(
			"csmapSubscriptionMandatory",
			(BiConsumer<ServiceNotif, Boolean>)
				ServiceNotif::setCsmapSubscriptionMandatory);
		attributeGetterFunctions.put("csmapTopic", ServiceNotif::getCsmapTopic);
		attributeSetterBiConsumers.put(
			"csmapTopic",
			(BiConsumer<ServiceNotif, String>)ServiceNotif::setCsmapTopic);
		attributeGetterFunctions.put("createDate", ServiceNotif::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ServiceNotif, Date>)ServiceNotif::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ServiceNotif::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ServiceNotif, Date>)ServiceNotif::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getServiceId() {
		return _serviceId;
	}

	@Override
	public void setServiceId(long serviceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serviceId = serviceId;
	}

	@Override
	public long getOrganisationId() {
		return _organisationId;
	}

	@Override
	public void setOrganisationId(long organisationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organisationId = organisationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalOrganisationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("organisationId"));
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public long getPictoId() {
		return _pictoId;
	}

	@Override
	public void setPictoId(long pictoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pictoId = pictoId;
	}

	@Override
	public String getCsmapSubscriptionLabel() {
		if (_csmapSubscriptionLabel == null) {
			return "";
		}
		else {
			return _csmapSubscriptionLabel;
		}
	}

	@Override
	public void setCsmapSubscriptionLabel(String csmapSubscriptionLabel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_csmapSubscriptionLabel = csmapSubscriptionLabel;
	}

	@Override
	public boolean getCsmapSubscriptionMandatory() {
		return _csmapSubscriptionMandatory;
	}

	@Override
	public boolean isCsmapSubscriptionMandatory() {
		return _csmapSubscriptionMandatory;
	}

	@Override
	public void setCsmapSubscriptionMandatory(
		boolean csmapSubscriptionMandatory) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_csmapSubscriptionMandatory = csmapSubscriptionMandatory;
	}

	@Override
	public String getCsmapTopic() {
		if (_csmapTopic == null) {
			return "";
		}
		else {
			return _csmapTopic;
		}
	}

	@Override
	public void setCsmapTopic(String csmapTopic) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_csmapTopic = csmapTopic;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCsmapTopic() {
		return getColumnOriginalValue("csmapTopic");
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ServiceNotif.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ServiceNotif toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ServiceNotif>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServiceNotifImpl serviceNotifImpl = new ServiceNotifImpl();

		serviceNotifImpl.setServiceId(getServiceId());
		serviceNotifImpl.setOrganisationId(getOrganisationId());
		serviceNotifImpl.setName(getName());
		serviceNotifImpl.setPictoId(getPictoId());
		serviceNotifImpl.setCsmapSubscriptionLabel(getCsmapSubscriptionLabel());
		serviceNotifImpl.setCsmapSubscriptionMandatory(
			isCsmapSubscriptionMandatory());
		serviceNotifImpl.setCsmapTopic(getCsmapTopic());
		serviceNotifImpl.setCreateDate(getCreateDate());
		serviceNotifImpl.setModifiedDate(getModifiedDate());

		serviceNotifImpl.resetOriginalValues();

		return serviceNotifImpl;
	}

	@Override
	public ServiceNotif cloneWithOriginalValues() {
		ServiceNotifImpl serviceNotifImpl = new ServiceNotifImpl();

		serviceNotifImpl.setServiceId(
			this.<Long>getColumnOriginalValue("serviceId"));
		serviceNotifImpl.setOrganisationId(
			this.<Long>getColumnOriginalValue("organisationId"));
		serviceNotifImpl.setName(this.<String>getColumnOriginalValue("name"));
		serviceNotifImpl.setPictoId(
			this.<Long>getColumnOriginalValue("pictoId"));
		serviceNotifImpl.setCsmapSubscriptionLabel(
			this.<String>getColumnOriginalValue("csmapSubscriptionLabel"));
		serviceNotifImpl.setCsmapSubscriptionMandatory(
			this.<Boolean>getColumnOriginalValue("csmapSubscriptionMandatory"));
		serviceNotifImpl.setCsmapTopic(
			this.<String>getColumnOriginalValue("csmapTopic"));
		serviceNotifImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		serviceNotifImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return serviceNotifImpl;
	}

	@Override
	public int compareTo(ServiceNotif serviceNotif) {
		int value = 0;

		value = getName().compareToIgnoreCase(serviceNotif.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ServiceNotif)) {
			return false;
		}

		ServiceNotif serviceNotif = (ServiceNotif)object;

		long primaryKey = serviceNotif.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ServiceNotif> toCacheModel() {
		ServiceNotifCacheModel serviceNotifCacheModel =
			new ServiceNotifCacheModel();

		serviceNotifCacheModel.serviceId = getServiceId();

		serviceNotifCacheModel.organisationId = getOrganisationId();

		serviceNotifCacheModel.name = getName();

		String name = serviceNotifCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			serviceNotifCacheModel.name = null;
		}

		serviceNotifCacheModel.pictoId = getPictoId();

		serviceNotifCacheModel.csmapSubscriptionLabel =
			getCsmapSubscriptionLabel();

		String csmapSubscriptionLabel =
			serviceNotifCacheModel.csmapSubscriptionLabel;

		if ((csmapSubscriptionLabel != null) &&
			(csmapSubscriptionLabel.length() == 0)) {

			serviceNotifCacheModel.csmapSubscriptionLabel = null;
		}

		serviceNotifCacheModel.csmapSubscriptionMandatory =
			isCsmapSubscriptionMandatory();

		serviceNotifCacheModel.csmapTopic = getCsmapTopic();

		String csmapTopic = serviceNotifCacheModel.csmapTopic;

		if ((csmapTopic != null) && (csmapTopic.length() == 0)) {
			serviceNotifCacheModel.csmapTopic = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			serviceNotifCacheModel.createDate = createDate.getTime();
		}
		else {
			serviceNotifCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			serviceNotifCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			serviceNotifCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return serviceNotifCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ServiceNotif, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ServiceNotif, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ServiceNotif, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ServiceNotif)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ServiceNotif>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ServiceNotif.class, ModelWrapper.class);

	}

	private long _serviceId;
	private long _organisationId;
	private String _name;
	private long _pictoId;
	private String _csmapSubscriptionLabel;
	private boolean _csmapSubscriptionMandatory;
	private String _csmapTopic;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		Function<ServiceNotif, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ServiceNotif)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("serviceId", _serviceId);
		_columnOriginalValues.put("organisationId", _organisationId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("pictoId", _pictoId);
		_columnOriginalValues.put(
			"csmapSubscriptionLabel", _csmapSubscriptionLabel);
		_columnOriginalValues.put(
			"csmapSubscriptionMandatory", _csmapSubscriptionMandatory);
		_columnOriginalValues.put("csmapTopic", _csmapTopic);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("serviceId", 1L);

		columnBitmasks.put("organisationId", 2L);

		columnBitmasks.put("name", 4L);

		columnBitmasks.put("pictoId", 8L);

		columnBitmasks.put("csmapSubscriptionLabel", 16L);

		columnBitmasks.put("csmapSubscriptionMandatory", 32L);

		columnBitmasks.put("csmapTopic", 64L);

		columnBitmasks.put("createDate", 128L);

		columnBitmasks.put("modifiedDate", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ServiceNotif _escapedModel;

}