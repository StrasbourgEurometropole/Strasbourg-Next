/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.notif.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import eu.strasbourg.service.notif.model.ServiceNotif;
import eu.strasbourg.service.notif.model.ServiceNotifModel;
import eu.strasbourg.service.notif.model.ServiceNotifSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ServiceNotif service. Represents a row in the &quot;notif_ServiceNotif&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ServiceNotifModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServiceNotifImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ServiceNotifImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ServiceNotifModelImpl
	extends BaseModelImpl<ServiceNotif> implements ServiceNotifModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a service notif model instance should use the <code>ServiceNotif</code> interface instead.
	 */
	public static final String TABLE_NAME = "notif_ServiceNotif";

	public static final Object[][] TABLE_COLUMNS = {
		{"serviceId", Types.BIGINT}, {"organisationId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"pictoId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("serviceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organisationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pictoId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table notif_ServiceNotif (serviceId LONG not null primary key,organisationId LONG,name VARCHAR(75) null,pictoId LONG)";

	public static final String TABLE_SQL_DROP = "drop table notif_ServiceNotif";

	public static final String ORDER_BY_JPQL =
		" ORDER BY serviceNotif.name DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY notif_ServiceNotif.name DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.notif.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.notif.model.ServiceNotif"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.notif.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.notif.model.ServiceNotif"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ServiceNotif toModel(ServiceNotifSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ServiceNotif model = new ServiceNotifImpl();

		model.setServiceId(soapModel.getServiceId());
		model.setOrganisationId(soapModel.getOrganisationId());
		model.setName(soapModel.getName());
		model.setPictoId(soapModel.getPictoId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ServiceNotif> toModels(ServiceNotifSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ServiceNotif> models = new ArrayList<ServiceNotif>(
			soapModels.length);

		for (ServiceNotifSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.notif.service.util.ServiceProps.get(
			"lock.expiration.time.eu.strasbourg.service.notif.model.ServiceNotif"));

	public ServiceNotifModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _serviceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setServiceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _serviceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ServiceNotif.class;
	}

	@Override
	public String getModelClassName() {
		return ServiceNotif.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ServiceNotif, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ServiceNotif, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ServiceNotif, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ServiceNotif)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ServiceNotif, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ServiceNotif, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ServiceNotif)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ServiceNotif, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ServiceNotif, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ServiceNotif>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ServiceNotif.class.getClassLoader(), ServiceNotif.class,
			ModelWrapper.class);

		try {
			Constructor<ServiceNotif> constructor =
				(Constructor<ServiceNotif>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<ServiceNotif, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ServiceNotif, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ServiceNotif, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ServiceNotif, Object>>();
		Map<String, BiConsumer<ServiceNotif, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ServiceNotif, ?>>();

		attributeGetterFunctions.put(
			"serviceId",
			new Function<ServiceNotif, Object>() {

				@Override
				public Object apply(ServiceNotif serviceNotif) {
					return serviceNotif.getServiceId();
				}

			});
		attributeSetterBiConsumers.put(
			"serviceId",
			new BiConsumer<ServiceNotif, Object>() {

				@Override
				public void accept(
					ServiceNotif serviceNotif, Object serviceId) {

					serviceNotif.setServiceId((Long)serviceId);
				}

			});
		attributeGetterFunctions.put(
			"organisationId",
			new Function<ServiceNotif, Object>() {

				@Override
				public Object apply(ServiceNotif serviceNotif) {
					return serviceNotif.getOrganisationId();
				}

			});
		attributeSetterBiConsumers.put(
			"organisationId",
			new BiConsumer<ServiceNotif, Object>() {

				@Override
				public void accept(
					ServiceNotif serviceNotif, Object organisationId) {

					serviceNotif.setOrganisationId((Long)organisationId);
				}

			});
		attributeGetterFunctions.put(
			"name",
			new Function<ServiceNotif, Object>() {

				@Override
				public Object apply(ServiceNotif serviceNotif) {
					return serviceNotif.getName();
				}

			});
		attributeSetterBiConsumers.put(
			"name",
			new BiConsumer<ServiceNotif, Object>() {

				@Override
				public void accept(ServiceNotif serviceNotif, Object name) {
					serviceNotif.setName((String)name);
				}

			});
		attributeGetterFunctions.put(
			"pictoId",
			new Function<ServiceNotif, Object>() {

				@Override
				public Object apply(ServiceNotif serviceNotif) {
					return serviceNotif.getPictoId();
				}

			});
		attributeSetterBiConsumers.put(
			"pictoId",
			new BiConsumer<ServiceNotif, Object>() {

				@Override
				public void accept(ServiceNotif serviceNotif, Object pictoId) {
					serviceNotif.setPictoId((Long)pictoId);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getServiceId() {
		return _serviceId;
	}

	@Override
	public void setServiceId(long serviceId) {
		_serviceId = serviceId;
	}

	@JSON
	@Override
	public long getOrganisationId() {
		return _organisationId;
	}

	@Override
	public void setOrganisationId(long organisationId) {
		_organisationId = organisationId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public long getPictoId() {
		return _pictoId;
	}

	@Override
	public void setPictoId(long pictoId) {
		_pictoId = pictoId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ServiceNotif.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ServiceNotif toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServiceNotifImpl serviceNotifImpl = new ServiceNotifImpl();

		serviceNotifImpl.setServiceId(getServiceId());
		serviceNotifImpl.setOrganisationId(getOrganisationId());
		serviceNotifImpl.setName(getName());
		serviceNotifImpl.setPictoId(getPictoId());

		serviceNotifImpl.resetOriginalValues();

		return serviceNotifImpl;
	}

	@Override
	public int compareTo(ServiceNotif serviceNotif) {
		int value = 0;

		value = getName().compareToIgnoreCase(serviceNotif.getName());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ServiceNotif)) {
			return false;
		}

		ServiceNotif serviceNotif = (ServiceNotif)obj;

		long primaryKey = serviceNotif.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ServiceNotif> toCacheModel() {
		ServiceNotifCacheModel serviceNotifCacheModel =
			new ServiceNotifCacheModel();

		serviceNotifCacheModel.serviceId = getServiceId();

		serviceNotifCacheModel.organisationId = getOrganisationId();

		serviceNotifCacheModel.name = getName();

		String name = serviceNotifCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			serviceNotifCacheModel.name = null;
		}

		serviceNotifCacheModel.pictoId = getPictoId();

		return serviceNotifCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ServiceNotif, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ServiceNotif, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ServiceNotif, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ServiceNotif)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ServiceNotif, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ServiceNotif, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ServiceNotif, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ServiceNotif)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, ServiceNotif>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _serviceId;
	private long _organisationId;
	private String _name;
	private long _pictoId;
	private ServiceNotif _escapedModel;

}