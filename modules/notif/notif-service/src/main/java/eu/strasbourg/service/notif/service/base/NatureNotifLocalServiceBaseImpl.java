/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.notif.service.base;

import com.liferay.petra.sql.dsl.query.DSLQuery;
import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.BasePersistence;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;
import eu.strasbourg.service.notif.model.NatureNotif;
import eu.strasbourg.service.notif.service.NatureNotifLocalService;
import eu.strasbourg.service.notif.service.NatureNotifLocalServiceUtil;
import eu.strasbourg.service.notif.service.persistence.MessagePersistence;
import eu.strasbourg.service.notif.service.persistence.NatureNotifPersistence;
import eu.strasbourg.service.notif.service.persistence.NotificationPersistence;
import eu.strasbourg.service.notif.service.persistence.ServiceNotifPersistence;

import javax.sql.DataSource;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.List;

/**
 * Provides the base implementation for the nature notif local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link eu.strasbourg.service.notif.service.impl.NatureNotifLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see eu.strasbourg.service.notif.service.impl.NatureNotifLocalServiceImpl
 * @generated
 */
public abstract class NatureNotifLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements IdentifiableOSGiService, NatureNotifLocalService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>NatureNotifLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>NatureNotifLocalServiceUtil</code>.
	 */

	/**
	 * Adds the nature notif to the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect NatureNotifLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param natureNotif the nature notif
	 * @return the nature notif that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public NatureNotif addNatureNotif(NatureNotif natureNotif) {
		natureNotif.setNew(true);

		return natureNotifPersistence.update(natureNotif);
	}

	/**
	 * Creates a new nature notif with the primary key. Does not add the nature notif to the database.
	 *
	 * @param natureId the primary key for the new nature notif
	 * @return the new nature notif
	 */
	@Override
	@Transactional(enabled = false)
	public NatureNotif createNatureNotif(long natureId) {
		return natureNotifPersistence.create(natureId);
	}

	/**
	 * Deletes the nature notif with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect NatureNotifLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param natureId the primary key of the nature notif
	 * @return the nature notif that was removed
	 * @throws PortalException if a nature notif with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public NatureNotif deleteNatureNotif(long natureId) throws PortalException {
		return natureNotifPersistence.remove(natureId);
	}

	/**
	 * Deletes the nature notif from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect NatureNotifLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param natureNotif the nature notif
	 * @return the nature notif that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public NatureNotif deleteNatureNotif(NatureNotif natureNotif) {
		return natureNotifPersistence.remove(natureNotif);
	}

	@Override
	public <T> T dslQuery(DSLQuery dslQuery) {
		return natureNotifPersistence.dslQuery(dslQuery);
	}

	@Override
	public int dslQueryCount(DSLQuery dslQuery) {
		Long count = dslQuery(dslQuery);

		return count.intValue();
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			NatureNotif.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return natureNotifPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>eu.strasbourg.service.notif.model.impl.NatureNotifModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return natureNotifPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>eu.strasbourg.service.notif.model.impl.NatureNotifModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return natureNotifPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return natureNotifPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return natureNotifPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public NatureNotif fetchNatureNotif(long natureId) {
		return natureNotifPersistence.fetchByPrimaryKey(natureId);
	}

	/**
	 * Returns the nature notif with the primary key.
	 *
	 * @param natureId the primary key of the nature notif
	 * @return the nature notif
	 * @throws PortalException if a nature notif with the primary key could not be found
	 */
	@Override
	public NatureNotif getNatureNotif(long natureId) throws PortalException {
		return natureNotifPersistence.findByPrimaryKey(natureId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(natureNotifLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(NatureNotif.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("natureId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			natureNotifLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(NatureNotif.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("natureId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(natureNotifLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(NatureNotif.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("natureId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel createPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return natureNotifPersistence.create(((Long)primaryKeyObj).longValue());
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		if (_log.isWarnEnabled()) {
			_log.warn(
				"Implement NatureNotifLocalServiceImpl#deleteNatureNotif(NatureNotif) to avoid orphaned data");
		}

		return natureNotifLocalService.deleteNatureNotif(
			(NatureNotif)persistedModel);
	}

	@Override
	public BasePersistence<NatureNotif> getBasePersistence() {
		return natureNotifPersistence;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return natureNotifPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the nature notifs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>eu.strasbourg.service.notif.model.impl.NatureNotifModelImpl</code>.
	 * </p>
	 *
	 * @param start the lower bound of the range of nature notifs
	 * @param end the upper bound of the range of nature notifs (not inclusive)
	 * @return the range of nature notifs
	 */
	@Override
	public List<NatureNotif> getNatureNotifs(int start, int end) {
		return natureNotifPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of nature notifs.
	 *
	 * @return the number of nature notifs
	 */
	@Override
	public int getNatureNotifsCount() {
		return natureNotifPersistence.countAll();
	}

	/**
	 * Updates the nature notif in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect NatureNotifLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param natureNotif the nature notif
	 * @return the nature notif that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public NatureNotif updateNatureNotif(NatureNotif natureNotif) {
		return natureNotifPersistence.update(natureNotif);
	}

	/**
	 * Returns the message local service.
	 *
	 * @return the message local service
	 */
	public eu.strasbourg.service.notif.service.MessageLocalService
		getMessageLocalService() {

		return messageLocalService;
	}

	/**
	 * Sets the message local service.
	 *
	 * @param messageLocalService the message local service
	 */
	public void setMessageLocalService(
		eu.strasbourg.service.notif.service.MessageLocalService
			messageLocalService) {

		this.messageLocalService = messageLocalService;
	}

	/**
	 * Returns the message persistence.
	 *
	 * @return the message persistence
	 */
	public MessagePersistence getMessagePersistence() {
		return messagePersistence;
	}

	/**
	 * Sets the message persistence.
	 *
	 * @param messagePersistence the message persistence
	 */
	public void setMessagePersistence(MessagePersistence messagePersistence) {
		this.messagePersistence = messagePersistence;
	}

	/**
	 * Returns the nature notif local service.
	 *
	 * @return the nature notif local service
	 */
	public NatureNotifLocalService getNatureNotifLocalService() {
		return natureNotifLocalService;
	}

	/**
	 * Sets the nature notif local service.
	 *
	 * @param natureNotifLocalService the nature notif local service
	 */
	public void setNatureNotifLocalService(
		NatureNotifLocalService natureNotifLocalService) {

		this.natureNotifLocalService = natureNotifLocalService;
	}

	/**
	 * Returns the nature notif persistence.
	 *
	 * @return the nature notif persistence
	 */
	public NatureNotifPersistence getNatureNotifPersistence() {
		return natureNotifPersistence;
	}

	/**
	 * Sets the nature notif persistence.
	 *
	 * @param natureNotifPersistence the nature notif persistence
	 */
	public void setNatureNotifPersistence(
		NatureNotifPersistence natureNotifPersistence) {

		this.natureNotifPersistence = natureNotifPersistence;
	}

	/**
	 * Returns the notification local service.
	 *
	 * @return the notification local service
	 */
	public eu.strasbourg.service.notif.service.NotificationLocalService
		getNotificationLocalService() {

		return notificationLocalService;
	}

	/**
	 * Sets the notification local service.
	 *
	 * @param notificationLocalService the notification local service
	 */
	public void setNotificationLocalService(
		eu.strasbourg.service.notif.service.NotificationLocalService
			notificationLocalService) {

		this.notificationLocalService = notificationLocalService;
	}

	/**
	 * Returns the notification persistence.
	 *
	 * @return the notification persistence
	 */
	public NotificationPersistence getNotificationPersistence() {
		return notificationPersistence;
	}

	/**
	 * Sets the notification persistence.
	 *
	 * @param notificationPersistence the notification persistence
	 */
	public void setNotificationPersistence(
		NotificationPersistence notificationPersistence) {

		this.notificationPersistence = notificationPersistence;
	}

	/**
	 * Returns the service notif local service.
	 *
	 * @return the service notif local service
	 */
	public eu.strasbourg.service.notif.service.ServiceNotifLocalService
		getServiceNotifLocalService() {

		return serviceNotifLocalService;
	}

	/**
	 * Sets the service notif local service.
	 *
	 * @param serviceNotifLocalService the service notif local service
	 */
	public void setServiceNotifLocalService(
		eu.strasbourg.service.notif.service.ServiceNotifLocalService
			serviceNotifLocalService) {

		this.serviceNotifLocalService = serviceNotifLocalService;
	}

	/**
	 * Returns the service notif persistence.
	 *
	 * @return the service notif persistence
	 */
	public ServiceNotifPersistence getServiceNotifPersistence() {
		return serviceNotifPersistence;
	}

	/**
	 * Sets the service notif persistence.
	 *
	 * @param serviceNotifPersistence the service notif persistence
	 */
	public void setServiceNotifPersistence(
		ServiceNotifPersistence serviceNotifPersistence) {

		this.serviceNotifPersistence = serviceNotifPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService
		getClassNameLocalService() {

		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService
			classNameLocalService) {

		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {

		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService
		getResourceLocalService() {

		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService
			resourceLocalService) {

		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService
		getUserLocalService() {

		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {

		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register(
			"eu.strasbourg.service.notif.model.NatureNotif",
			natureNotifLocalService);

		_setLocalServiceUtilService(natureNotifLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"eu.strasbourg.service.notif.model.NatureNotif");

		_setLocalServiceUtilService(null);
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return NatureNotifLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return NatureNotif.class;
	}

	protected String getModelClassName() {
		return NatureNotif.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = natureNotifPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception exception) {
			throw new SystemException(exception);
		}
	}

	private void _setLocalServiceUtilService(
		NatureNotifLocalService natureNotifLocalService) {

		try {
			Field field = NatureNotifLocalServiceUtil.class.getDeclaredField(
				"_service");

			field.setAccessible(true);

			field.set(null, natureNotifLocalService);
		}
		catch (ReflectiveOperationException reflectiveOperationException) {
			throw new RuntimeException(reflectiveOperationException);
		}
	}

	@BeanReference(
		type = eu.strasbourg.service.notif.service.MessageLocalService.class
	)
	protected eu.strasbourg.service.notif.service.MessageLocalService
		messageLocalService;

	@BeanReference(type = MessagePersistence.class)
	protected MessagePersistence messagePersistence;

	@BeanReference(type = NatureNotifLocalService.class)
	protected NatureNotifLocalService natureNotifLocalService;

	@BeanReference(type = NatureNotifPersistence.class)
	protected NatureNotifPersistence natureNotifPersistence;

	@BeanReference(
		type = eu.strasbourg.service.notif.service.NotificationLocalService.class
	)
	protected eu.strasbourg.service.notif.service.NotificationLocalService
		notificationLocalService;

	@BeanReference(type = NotificationPersistence.class)
	protected NotificationPersistence notificationPersistence;

	@BeanReference(
		type = eu.strasbourg.service.notif.service.ServiceNotifLocalService.class
	)
	protected eu.strasbourg.service.notif.service.ServiceNotifLocalService
		serviceNotifLocalService;

	@BeanReference(type = ServiceNotifPersistence.class)
	protected ServiceNotifPersistence serviceNotifPersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameLocalService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ResourceLocalService.class
	)
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserLocalService.class
	)
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;

	private static final Log _log = LogFactoryUtil.getLog(
		NatureNotifLocalServiceBaseImpl.class);

	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry
		persistedModelLocalServiceRegistry;

}