/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.notif.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.notif.model.Notification;
import eu.strasbourg.service.notif.model.NotificationModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Notification service. Represents a row in the &quot;notif_Notification&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NotificationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotificationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NotificationImpl
 * @generated
 */
public class NotificationModelImpl
	extends BaseModelImpl<Notification> implements NotificationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a notification model instance should use the <code>Notification</code> interface instead.
	 */
	public static final String TABLE_NAME = "notif_Notification";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"notificationId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"serviceId", Types.BIGINT}, {"isAlert", Types.INTEGER},
		{"natureId", Types.BIGINT}, {"title", Types.VARCHAR},
		{"subtitle", Types.VARCHAR}, {"startDate", Types.TIMESTAMP},
		{"endDate", Types.TIMESTAMP}, {"broadcastDate", Types.TIMESTAMP},
		{"messageId", Types.BIGINT}, {"content", Types.VARCHAR},
		{"labelUrl", Types.VARCHAR}, {"url", Types.VARCHAR},
		{"typeBroadcast", Types.BIGINT}, {"district", Types.BIGINT},
		{"broadcastChannels", Types.VARCHAR}, {"sendStatusCsmap", Types.BIGINT},
		{"sendStatusTwitter", Types.BIGINT}, {"sendStatusMonst", Types.BIGINT},
		{"sendStatusMail", Types.BIGINT}, {"sendStatusSegur", Types.BIGINT},
		{"isSend", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notificationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("serviceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isAlert", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("natureId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subtitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("broadcastDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("messageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("labelUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeBroadcast", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("district", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("broadcastChannels", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sendStatusCsmap", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sendStatusTwitter", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sendStatusMonst", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sendStatusMail", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sendStatusSegur", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isSend", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table notif_Notification (uuid_ VARCHAR(75) null,notificationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,serviceId LONG,isAlert INTEGER,natureId LONG,title STRING null,subtitle STRING null,startDate DATE null,endDate DATE null,broadcastDate DATE null,messageId LONG,content STRING null,labelUrl STRING null,url STRING null,typeBroadcast LONG,district LONG,broadcastChannels VARCHAR(75) null,sendStatusCsmap LONG,sendStatusTwitter LONG,sendStatusMonst LONG,sendStatusMail LONG,sendStatusSegur LONG,isSend BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table notif_Notification";

	public static final String ORDER_BY_JPQL =
		" ORDER BY notification.startDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY notif_Notification.startDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SERVICEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STARTDATE_COLUMN_BITMASK = 16L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.notif.service.util.ServiceProps.get(
			"lock.expiration.time.eu.strasbourg.service.notif.model.Notification"));

	public NotificationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _notificationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNotificationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _notificationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Notification.class;
	}

	@Override
	public String getModelClassName() {
		return Notification.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Notification, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Notification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Notification, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Notification)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Notification, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Notification, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Notification)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Notification, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Notification, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Notification, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Notification, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Notification, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Notification, Object>>();
		Map<String, BiConsumer<Notification, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Notification, ?>>();

		attributeGetterFunctions.put("uuid", Notification::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Notification, String>)Notification::setUuid);
		attributeGetterFunctions.put(
			"notificationId", Notification::getNotificationId);
		attributeSetterBiConsumers.put(
			"notificationId",
			(BiConsumer<Notification, Long>)Notification::setNotificationId);
		attributeGetterFunctions.put("groupId", Notification::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<Notification, Long>)Notification::setGroupId);
		attributeGetterFunctions.put("companyId", Notification::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<Notification, Long>)Notification::setCompanyId);
		attributeGetterFunctions.put("userId", Notification::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Notification, Long>)Notification::setUserId);
		attributeGetterFunctions.put("userName", Notification::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<Notification, String>)Notification::setUserName);
		attributeGetterFunctions.put("createDate", Notification::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Notification, Date>)Notification::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Notification::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Notification, Date>)Notification::setModifiedDate);
		attributeGetterFunctions.put("status", Notification::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<Notification, Integer>)Notification::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", Notification::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<Notification, Long>)Notification::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", Notification::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<Notification, String>)
				Notification::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", Notification::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<Notification, Date>)Notification::setStatusDate);
		attributeGetterFunctions.put("serviceId", Notification::getServiceId);
		attributeSetterBiConsumers.put(
			"serviceId",
			(BiConsumer<Notification, Long>)Notification::setServiceId);
		attributeGetterFunctions.put("isAlert", Notification::getIsAlert);
		attributeSetterBiConsumers.put(
			"isAlert",
			(BiConsumer<Notification, Integer>)Notification::setIsAlert);
		attributeGetterFunctions.put("natureId", Notification::getNatureId);
		attributeSetterBiConsumers.put(
			"natureId",
			(BiConsumer<Notification, Long>)Notification::setNatureId);
		attributeGetterFunctions.put("title", Notification::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Notification, String>)Notification::setTitle);
		attributeGetterFunctions.put("subtitle", Notification::getSubtitle);
		attributeSetterBiConsumers.put(
			"subtitle",
			(BiConsumer<Notification, String>)Notification::setSubtitle);
		attributeGetterFunctions.put("startDate", Notification::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<Notification, Date>)Notification::setStartDate);
		attributeGetterFunctions.put("endDate", Notification::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<Notification, Date>)Notification::setEndDate);
		attributeGetterFunctions.put(
			"broadcastDate", Notification::getBroadcastDate);
		attributeSetterBiConsumers.put(
			"broadcastDate",
			(BiConsumer<Notification, Date>)Notification::setBroadcastDate);
		attributeGetterFunctions.put("messageId", Notification::getMessageId);
		attributeSetterBiConsumers.put(
			"messageId",
			(BiConsumer<Notification, Long>)Notification::setMessageId);
		attributeGetterFunctions.put("content", Notification::getContent);
		attributeSetterBiConsumers.put(
			"content",
			(BiConsumer<Notification, String>)Notification::setContent);
		attributeGetterFunctions.put("labelUrl", Notification::getLabelUrl);
		attributeSetterBiConsumers.put(
			"labelUrl",
			(BiConsumer<Notification, String>)Notification::setLabelUrl);
		attributeGetterFunctions.put("url", Notification::getUrl);
		attributeSetterBiConsumers.put(
			"url", (BiConsumer<Notification, String>)Notification::setUrl);
		attributeGetterFunctions.put(
			"typeBroadcast", Notification::getTypeBroadcast);
		attributeSetterBiConsumers.put(
			"typeBroadcast",
			(BiConsumer<Notification, Long>)Notification::setTypeBroadcast);
		attributeGetterFunctions.put("district", Notification::getDistrict);
		attributeSetterBiConsumers.put(
			"district",
			(BiConsumer<Notification, Long>)Notification::setDistrict);
		attributeGetterFunctions.put(
			"broadcastChannels", Notification::getBroadcastChannels);
		attributeSetterBiConsumers.put(
			"broadcastChannels",
			(BiConsumer<Notification, String>)
				Notification::setBroadcastChannels);
		attributeGetterFunctions.put(
			"sendStatusCsmap", Notification::getSendStatusCsmap);
		attributeSetterBiConsumers.put(
			"sendStatusCsmap",
			(BiConsumer<Notification, Long>)Notification::setSendStatusCsmap);
		attributeGetterFunctions.put(
			"sendStatusTwitter", Notification::getSendStatusTwitter);
		attributeSetterBiConsumers.put(
			"sendStatusTwitter",
			(BiConsumer<Notification, Long>)Notification::setSendStatusTwitter);
		attributeGetterFunctions.put(
			"sendStatusMonst", Notification::getSendStatusMonst);
		attributeSetterBiConsumers.put(
			"sendStatusMonst",
			(BiConsumer<Notification, Long>)Notification::setSendStatusMonst);
		attributeGetterFunctions.put(
			"sendStatusMail", Notification::getSendStatusMail);
		attributeSetterBiConsumers.put(
			"sendStatusMail",
			(BiConsumer<Notification, Long>)Notification::setSendStatusMail);
		attributeGetterFunctions.put(
			"sendStatusSegur", Notification::getSendStatusSegur);
		attributeSetterBiConsumers.put(
			"sendStatusSegur",
			(BiConsumer<Notification, Long>)Notification::setSendStatusSegur);
		attributeGetterFunctions.put("isSend", Notification::getIsSend);
		attributeSetterBiConsumers.put(
			"isSend",
			(BiConsumer<Notification, Boolean>)Notification::setIsSend);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getNotificationId() {
		return _notificationId;
	}

	@Override
	public void setNotificationId(long notificationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_notificationId = notificationId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public long getServiceId() {
		return _serviceId;
	}

	@Override
	public void setServiceId(long serviceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serviceId = serviceId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalServiceId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("serviceId"));
	}

	@Override
	public int getIsAlert() {
		return _isAlert;
	}

	@Override
	public void setIsAlert(int isAlert) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isAlert = isAlert;
	}

	@Override
	public long getNatureId() {
		return _natureId;
	}

	@Override
	public void setNatureId(long natureId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_natureId = natureId;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTitle(), languageId, useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(
				LocalizationUtil.updateLocalization(
					getTitle(), "Title", title, languageId, defaultLanguageId));
		}
		else {
			setTitle(
				LocalizationUtil.removeLocalization(
					getTitle(), "Title", languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(
		Map<Locale, String> titleMap, Locale defaultLocale) {

		if (titleMap == null) {
			return;
		}

		setTitle(
			LocalizationUtil.updateLocalization(
				titleMap, getTitle(), "Title",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getSubtitle() {
		if (_subtitle == null) {
			return "";
		}
		else {
			return _subtitle;
		}
	}

	@Override
	public String getSubtitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSubtitle(languageId);
	}

	@Override
	public String getSubtitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSubtitle(languageId, useDefault);
	}

	@Override
	public String getSubtitle(String languageId) {
		return LocalizationUtil.getLocalization(getSubtitle(), languageId);
	}

	@Override
	public String getSubtitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getSubtitle(), languageId, useDefault);
	}

	@Override
	public String getSubtitleCurrentLanguageId() {
		return _subtitleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSubtitleCurrentValue() {
		Locale locale = getLocale(_subtitleCurrentLanguageId);

		return getSubtitle(locale);
	}

	@Override
	public Map<Locale, String> getSubtitleMap() {
		return LocalizationUtil.getLocalizationMap(getSubtitle());
	}

	@Override
	public void setSubtitle(String subtitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subtitle = subtitle;
	}

	@Override
	public void setSubtitle(String subtitle, Locale locale) {
		setSubtitle(subtitle, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSubtitle(
		String subtitle, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(subtitle)) {
			setSubtitle(
				LocalizationUtil.updateLocalization(
					getSubtitle(), "Subtitle", subtitle, languageId,
					defaultLanguageId));
		}
		else {
			setSubtitle(
				LocalizationUtil.removeLocalization(
					getSubtitle(), "Subtitle", languageId));
		}
	}

	@Override
	public void setSubtitleCurrentLanguageId(String languageId) {
		_subtitleCurrentLanguageId = languageId;
	}

	@Override
	public void setSubtitleMap(Map<Locale, String> subtitleMap) {
		setSubtitleMap(subtitleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSubtitleMap(
		Map<Locale, String> subtitleMap, Locale defaultLocale) {

		if (subtitleMap == null) {
			return;
		}

		setSubtitle(
			LocalizationUtil.updateLocalization(
				subtitleMap, getSubtitle(), "Subtitle",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	@Override
	public Date getBroadcastDate() {
		return _broadcastDate;
	}

	@Override
	public void setBroadcastDate(Date broadcastDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_broadcastDate = broadcastDate;
	}

	@Override
	public long getMessageId() {
		return _messageId;
	}

	@Override
	public void setMessageId(long messageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_messageId = messageId;
	}

	@Override
	public String getContent() {
		if (_content == null) {
			return "";
		}
		else {
			return _content;
		}
	}

	@Override
	public String getContent(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContent(languageId);
	}

	@Override
	public String getContent(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getContent(languageId, useDefault);
	}

	@Override
	public String getContent(String languageId) {
		return LocalizationUtil.getLocalization(getContent(), languageId);
	}

	@Override
	public String getContent(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getContent(), languageId, useDefault);
	}

	@Override
	public String getContentCurrentLanguageId() {
		return _contentCurrentLanguageId;
	}

	@JSON
	@Override
	public String getContentCurrentValue() {
		Locale locale = getLocale(_contentCurrentLanguageId);

		return getContent(locale);
	}

	@Override
	public Map<Locale, String> getContentMap() {
		return LocalizationUtil.getLocalizationMap(getContent());
	}

	@Override
	public void setContent(String content) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_content = content;
	}

	@Override
	public void setContent(String content, Locale locale) {
		setContent(content, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setContent(
		String content, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(content)) {
			setContent(
				LocalizationUtil.updateLocalization(
					getContent(), "Content", content, languageId,
					defaultLanguageId));
		}
		else {
			setContent(
				LocalizationUtil.removeLocalization(
					getContent(), "Content", languageId));
		}
	}

	@Override
	public void setContentCurrentLanguageId(String languageId) {
		_contentCurrentLanguageId = languageId;
	}

	@Override
	public void setContentMap(Map<Locale, String> contentMap) {
		setContentMap(contentMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setContentMap(
		Map<Locale, String> contentMap, Locale defaultLocale) {

		if (contentMap == null) {
			return;
		}

		setContent(
			LocalizationUtil.updateLocalization(
				contentMap, getContent(), "Content",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getLabelUrl() {
		if (_labelUrl == null) {
			return "";
		}
		else {
			return _labelUrl;
		}
	}

	@Override
	public String getLabelUrl(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLabelUrl(languageId);
	}

	@Override
	public String getLabelUrl(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLabelUrl(languageId, useDefault);
	}

	@Override
	public String getLabelUrl(String languageId) {
		return LocalizationUtil.getLocalization(getLabelUrl(), languageId);
	}

	@Override
	public String getLabelUrl(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getLabelUrl(), languageId, useDefault);
	}

	@Override
	public String getLabelUrlCurrentLanguageId() {
		return _labelUrlCurrentLanguageId;
	}

	@JSON
	@Override
	public String getLabelUrlCurrentValue() {
		Locale locale = getLocale(_labelUrlCurrentLanguageId);

		return getLabelUrl(locale);
	}

	@Override
	public Map<Locale, String> getLabelUrlMap() {
		return LocalizationUtil.getLocalizationMap(getLabelUrl());
	}

	@Override
	public void setLabelUrl(String labelUrl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_labelUrl = labelUrl;
	}

	@Override
	public void setLabelUrl(String labelUrl, Locale locale) {
		setLabelUrl(labelUrl, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setLabelUrl(
		String labelUrl, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(labelUrl)) {
			setLabelUrl(
				LocalizationUtil.updateLocalization(
					getLabelUrl(), "LabelUrl", labelUrl, languageId,
					defaultLanguageId));
		}
		else {
			setLabelUrl(
				LocalizationUtil.removeLocalization(
					getLabelUrl(), "LabelUrl", languageId));
		}
	}

	@Override
	public void setLabelUrlCurrentLanguageId(String languageId) {
		_labelUrlCurrentLanguageId = languageId;
	}

	@Override
	public void setLabelUrlMap(Map<Locale, String> labelUrlMap) {
		setLabelUrlMap(labelUrlMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setLabelUrlMap(
		Map<Locale, String> labelUrlMap, Locale defaultLocale) {

		if (labelUrlMap == null) {
			return;
		}

		setLabelUrl(
			LocalizationUtil.updateLocalization(
				labelUrlMap, getLabelUrl(), "LabelUrl",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public String getUrl(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getUrl(languageId);
	}

	@Override
	public String getUrl(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getUrl(languageId, useDefault);
	}

	@Override
	public String getUrl(String languageId) {
		return LocalizationUtil.getLocalization(getUrl(), languageId);
	}

	@Override
	public String getUrl(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getUrl(), languageId, useDefault);
	}

	@Override
	public String getUrlCurrentLanguageId() {
		return _urlCurrentLanguageId;
	}

	@JSON
	@Override
	public String getUrlCurrentValue() {
		Locale locale = getLocale(_urlCurrentLanguageId);

		return getUrl(locale);
	}

	@Override
	public Map<Locale, String> getUrlMap() {
		return LocalizationUtil.getLocalizationMap(getUrl());
	}

	@Override
	public void setUrl(String url) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_url = url;
	}

	@Override
	public void setUrl(String url, Locale locale) {
		setUrl(url, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setUrl(String url, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(url)) {
			setUrl(
				LocalizationUtil.updateLocalization(
					getUrl(), "Url", url, languageId, defaultLanguageId));
		}
		else {
			setUrl(
				LocalizationUtil.removeLocalization(
					getUrl(), "Url", languageId));
		}
	}

	@Override
	public void setUrlCurrentLanguageId(String languageId) {
		_urlCurrentLanguageId = languageId;
	}

	@Override
	public void setUrlMap(Map<Locale, String> urlMap) {
		setUrlMap(urlMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setUrlMap(Map<Locale, String> urlMap, Locale defaultLocale) {
		if (urlMap == null) {
			return;
		}

		setUrl(
			LocalizationUtil.updateLocalization(
				urlMap, getUrl(), "Url",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public long getTypeBroadcast() {
		return _typeBroadcast;
	}

	@Override
	public void setTypeBroadcast(long typeBroadcast) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeBroadcast = typeBroadcast;
	}

	@Override
	public long getDistrict() {
		return _district;
	}

	@Override
	public void setDistrict(long district) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_district = district;
	}

	@Override
	public String getBroadcastChannels() {
		if (_broadcastChannels == null) {
			return "";
		}
		else {
			return _broadcastChannels;
		}
	}

	@Override
	public void setBroadcastChannels(String broadcastChannels) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_broadcastChannels = broadcastChannels;
	}

	@Override
	public long getSendStatusCsmap() {
		return _sendStatusCsmap;
	}

	@Override
	public void setSendStatusCsmap(long sendStatusCsmap) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sendStatusCsmap = sendStatusCsmap;
	}

	@Override
	public long getSendStatusTwitter() {
		return _sendStatusTwitter;
	}

	@Override
	public void setSendStatusTwitter(long sendStatusTwitter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sendStatusTwitter = sendStatusTwitter;
	}

	@Override
	public long getSendStatusMonst() {
		return _sendStatusMonst;
	}

	@Override
	public void setSendStatusMonst(long sendStatusMonst) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sendStatusMonst = sendStatusMonst;
	}

	@Override
	public long getSendStatusMail() {
		return _sendStatusMail;
	}

	@Override
	public void setSendStatusMail(long sendStatusMail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sendStatusMail = sendStatusMail;
	}

	@Override
	public long getSendStatusSegur() {
		return _sendStatusSegur;
	}

	@Override
	public void setSendStatusSegur(long sendStatusSegur) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sendStatusSegur = sendStatusSegur;
	}

	@Override
	public Boolean getIsSend() {
		return _isSend;
	}

	@Override
	public void setIsSend(Boolean isSend) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isSend = isSend;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Notification.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Notification.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> subtitleMap = getSubtitleMap();

		for (Map.Entry<Locale, String> entry : subtitleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> contentMap = getContentMap();

		for (Map.Entry<Locale, String> entry : contentMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> labelUrlMap = getLabelUrlMap();

		for (Map.Entry<Locale, String> entry : labelUrlMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> urlMap = getUrlMap();

		for (Map.Entry<Locale, String> entry : urlMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			Notification.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String subtitle = getSubtitle(defaultLocale);

		if (Validator.isNull(subtitle)) {
			setSubtitle(getSubtitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSubtitle(
				getSubtitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String content = getContent(defaultLocale);

		if (Validator.isNull(content)) {
			setContent(getContent(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setContent(getContent(defaultLocale), defaultLocale, defaultLocale);
		}

		String labelUrl = getLabelUrl(defaultLocale);

		if (Validator.isNull(labelUrl)) {
			setLabelUrl(getLabelUrl(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setLabelUrl(
				getLabelUrl(defaultLocale), defaultLocale, defaultLocale);
		}

		String url = getUrl(defaultLocale);

		if (Validator.isNull(url)) {
			setUrl(getUrl(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setUrl(getUrl(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Notification toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Notification>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotificationImpl notificationImpl = new NotificationImpl();

		notificationImpl.setUuid(getUuid());
		notificationImpl.setNotificationId(getNotificationId());
		notificationImpl.setGroupId(getGroupId());
		notificationImpl.setCompanyId(getCompanyId());
		notificationImpl.setUserId(getUserId());
		notificationImpl.setUserName(getUserName());
		notificationImpl.setCreateDate(getCreateDate());
		notificationImpl.setModifiedDate(getModifiedDate());
		notificationImpl.setStatus(getStatus());
		notificationImpl.setStatusByUserId(getStatusByUserId());
		notificationImpl.setStatusByUserName(getStatusByUserName());
		notificationImpl.setStatusDate(getStatusDate());
		notificationImpl.setServiceId(getServiceId());
		notificationImpl.setIsAlert(getIsAlert());
		notificationImpl.setNatureId(getNatureId());
		notificationImpl.setTitle(getTitle());
		notificationImpl.setSubtitle(getSubtitle());
		notificationImpl.setStartDate(getStartDate());
		notificationImpl.setEndDate(getEndDate());
		notificationImpl.setBroadcastDate(getBroadcastDate());
		notificationImpl.setMessageId(getMessageId());
		notificationImpl.setContent(getContent());
		notificationImpl.setLabelUrl(getLabelUrl());
		notificationImpl.setUrl(getUrl());
		notificationImpl.setTypeBroadcast(getTypeBroadcast());
		notificationImpl.setDistrict(getDistrict());
		notificationImpl.setBroadcastChannels(getBroadcastChannels());
		notificationImpl.setSendStatusCsmap(getSendStatusCsmap());
		notificationImpl.setSendStatusTwitter(getSendStatusTwitter());
		notificationImpl.setSendStatusMonst(getSendStatusMonst());
		notificationImpl.setSendStatusMail(getSendStatusMail());
		notificationImpl.setSendStatusSegur(getSendStatusSegur());
		notificationImpl.setIsSend(getIsSend());

		notificationImpl.resetOriginalValues();

		return notificationImpl;
	}

	@Override
	public Notification cloneWithOriginalValues() {
		NotificationImpl notificationImpl = new NotificationImpl();

		notificationImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		notificationImpl.setNotificationId(
			this.<Long>getColumnOriginalValue("notificationId"));
		notificationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		notificationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		notificationImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		notificationImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		notificationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		notificationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		notificationImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		notificationImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		notificationImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		notificationImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));
		notificationImpl.setServiceId(
			this.<Long>getColumnOriginalValue("serviceId"));
		notificationImpl.setIsAlert(
			this.<Integer>getColumnOriginalValue("isAlert"));
		notificationImpl.setNatureId(
			this.<Long>getColumnOriginalValue("natureId"));
		notificationImpl.setTitle(this.<String>getColumnOriginalValue("title"));
		notificationImpl.setSubtitle(
			this.<String>getColumnOriginalValue("subtitle"));
		notificationImpl.setStartDate(
			this.<Date>getColumnOriginalValue("startDate"));
		notificationImpl.setEndDate(
			this.<Date>getColumnOriginalValue("endDate"));
		notificationImpl.setBroadcastDate(
			this.<Date>getColumnOriginalValue("broadcastDate"));
		notificationImpl.setMessageId(
			this.<Long>getColumnOriginalValue("messageId"));
		notificationImpl.setContent(
			this.<String>getColumnOriginalValue("content"));
		notificationImpl.setLabelUrl(
			this.<String>getColumnOriginalValue("labelUrl"));
		notificationImpl.setUrl(this.<String>getColumnOriginalValue("url"));
		notificationImpl.setTypeBroadcast(
			this.<Long>getColumnOriginalValue("typeBroadcast"));
		notificationImpl.setDistrict(
			this.<Long>getColumnOriginalValue("district"));
		notificationImpl.setBroadcastChannels(
			this.<String>getColumnOriginalValue("broadcastChannels"));
		notificationImpl.setSendStatusCsmap(
			this.<Long>getColumnOriginalValue("sendStatusCsmap"));
		notificationImpl.setSendStatusTwitter(
			this.<Long>getColumnOriginalValue("sendStatusTwitter"));
		notificationImpl.setSendStatusMonst(
			this.<Long>getColumnOriginalValue("sendStatusMonst"));
		notificationImpl.setSendStatusMail(
			this.<Long>getColumnOriginalValue("sendStatusMail"));
		notificationImpl.setSendStatusSegur(
			this.<Long>getColumnOriginalValue("sendStatusSegur"));
		notificationImpl.setIsSend(
			this.<Boolean>getColumnOriginalValue("isSend"));

		return notificationImpl;
	}

	@Override
	public int compareTo(Notification notification) {
		int value = 0;

		value = DateUtil.compareTo(getStartDate(), notification.getStartDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Notification)) {
			return false;
		}

		Notification notification = (Notification)object;

		long primaryKey = notification.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Notification> toCacheModel() {
		NotificationCacheModel notificationCacheModel =
			new NotificationCacheModel();

		notificationCacheModel.uuid = getUuid();

		String uuid = notificationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			notificationCacheModel.uuid = null;
		}

		notificationCacheModel.notificationId = getNotificationId();

		notificationCacheModel.groupId = getGroupId();

		notificationCacheModel.companyId = getCompanyId();

		notificationCacheModel.userId = getUserId();

		notificationCacheModel.userName = getUserName();

		String userName = notificationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			notificationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			notificationCacheModel.createDate = createDate.getTime();
		}
		else {
			notificationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			notificationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			notificationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		notificationCacheModel.status = getStatus();

		notificationCacheModel.statusByUserId = getStatusByUserId();

		notificationCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = notificationCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			notificationCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			notificationCacheModel.statusDate = statusDate.getTime();
		}
		else {
			notificationCacheModel.statusDate = Long.MIN_VALUE;
		}

		notificationCacheModel.serviceId = getServiceId();

		notificationCacheModel.isAlert = getIsAlert();

		notificationCacheModel.natureId = getNatureId();

		notificationCacheModel.title = getTitle();

		String title = notificationCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			notificationCacheModel.title = null;
		}

		notificationCacheModel.subtitle = getSubtitle();

		String subtitle = notificationCacheModel.subtitle;

		if ((subtitle != null) && (subtitle.length() == 0)) {
			notificationCacheModel.subtitle = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			notificationCacheModel.startDate = startDate.getTime();
		}
		else {
			notificationCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			notificationCacheModel.endDate = endDate.getTime();
		}
		else {
			notificationCacheModel.endDate = Long.MIN_VALUE;
		}

		Date broadcastDate = getBroadcastDate();

		if (broadcastDate != null) {
			notificationCacheModel.broadcastDate = broadcastDate.getTime();
		}
		else {
			notificationCacheModel.broadcastDate = Long.MIN_VALUE;
		}

		notificationCacheModel.messageId = getMessageId();

		notificationCacheModel.content = getContent();

		String content = notificationCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			notificationCacheModel.content = null;
		}

		notificationCacheModel.labelUrl = getLabelUrl();

		String labelUrl = notificationCacheModel.labelUrl;

		if ((labelUrl != null) && (labelUrl.length() == 0)) {
			notificationCacheModel.labelUrl = null;
		}

		notificationCacheModel.url = getUrl();

		String url = notificationCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			notificationCacheModel.url = null;
		}

		notificationCacheModel.typeBroadcast = getTypeBroadcast();

		notificationCacheModel.district = getDistrict();

		notificationCacheModel.broadcastChannels = getBroadcastChannels();

		String broadcastChannels = notificationCacheModel.broadcastChannels;

		if ((broadcastChannels != null) && (broadcastChannels.length() == 0)) {
			notificationCacheModel.broadcastChannels = null;
		}

		notificationCacheModel.sendStatusCsmap = getSendStatusCsmap();

		notificationCacheModel.sendStatusTwitter = getSendStatusTwitter();

		notificationCacheModel.sendStatusMonst = getSendStatusMonst();

		notificationCacheModel.sendStatusMail = getSendStatusMail();

		notificationCacheModel.sendStatusSegur = getSendStatusSegur();

		Boolean isSend = getIsSend();

		if (isSend != null) {
			notificationCacheModel.isSend = isSend;
		}

		return notificationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Notification, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Notification, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Notification, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Notification)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Notification>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Notification.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _notificationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _serviceId;
	private int _isAlert;
	private long _natureId;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _subtitle;
	private String _subtitleCurrentLanguageId;
	private Date _startDate;
	private Date _endDate;
	private Date _broadcastDate;
	private long _messageId;
	private String _content;
	private String _contentCurrentLanguageId;
	private String _labelUrl;
	private String _labelUrlCurrentLanguageId;
	private String _url;
	private String _urlCurrentLanguageId;
	private long _typeBroadcast;
	private long _district;
	private String _broadcastChannels;
	private long _sendStatusCsmap;
	private long _sendStatusTwitter;
	private long _sendStatusMonst;
	private long _sendStatusMail;
	private long _sendStatusSegur;
	private Boolean _isSend;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Notification, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Notification)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("notificationId", _notificationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("serviceId", _serviceId);
		_columnOriginalValues.put("isAlert", _isAlert);
		_columnOriginalValues.put("natureId", _natureId);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("subtitle", _subtitle);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put("endDate", _endDate);
		_columnOriginalValues.put("broadcastDate", _broadcastDate);
		_columnOriginalValues.put("messageId", _messageId);
		_columnOriginalValues.put("content", _content);
		_columnOriginalValues.put("labelUrl", _labelUrl);
		_columnOriginalValues.put("url", _url);
		_columnOriginalValues.put("typeBroadcast", _typeBroadcast);
		_columnOriginalValues.put("district", _district);
		_columnOriginalValues.put("broadcastChannels", _broadcastChannels);
		_columnOriginalValues.put("sendStatusCsmap", _sendStatusCsmap);
		_columnOriginalValues.put("sendStatusTwitter", _sendStatusTwitter);
		_columnOriginalValues.put("sendStatusMonst", _sendStatusMonst);
		_columnOriginalValues.put("sendStatusMail", _sendStatusMail);
		_columnOriginalValues.put("sendStatusSegur", _sendStatusSegur);
		_columnOriginalValues.put("isSend", _isSend);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("notificationId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("status", 256L);

		columnBitmasks.put("statusByUserId", 512L);

		columnBitmasks.put("statusByUserName", 1024L);

		columnBitmasks.put("statusDate", 2048L);

		columnBitmasks.put("serviceId", 4096L);

		columnBitmasks.put("isAlert", 8192L);

		columnBitmasks.put("natureId", 16384L);

		columnBitmasks.put("title", 32768L);

		columnBitmasks.put("subtitle", 65536L);

		columnBitmasks.put("startDate", 131072L);

		columnBitmasks.put("endDate", 262144L);

		columnBitmasks.put("broadcastDate", 524288L);

		columnBitmasks.put("messageId", 1048576L);

		columnBitmasks.put("content", 2097152L);

		columnBitmasks.put("labelUrl", 4194304L);

		columnBitmasks.put("url", 8388608L);

		columnBitmasks.put("typeBroadcast", 16777216L);

		columnBitmasks.put("district", 33554432L);

		columnBitmasks.put("broadcastChannels", 67108864L);

		columnBitmasks.put("sendStatusCsmap", 134217728L);

		columnBitmasks.put("sendStatusTwitter", 268435456L);

		columnBitmasks.put("sendStatusMonst", 536870912L);

		columnBitmasks.put("sendStatusMail", 1073741824L);

		columnBitmasks.put("sendStatusSegur", 2147483648L);

		columnBitmasks.put("isSend", 4294967296L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Notification _escapedModel;

}