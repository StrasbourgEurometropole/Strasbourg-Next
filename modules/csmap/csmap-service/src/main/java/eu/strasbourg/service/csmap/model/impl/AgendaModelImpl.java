/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.csmap.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import eu.strasbourg.service.csmap.model.Agenda;
import eu.strasbourg.service.csmap.model.AgendaModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Agenda service. Represents a row in the &quot;csmap_Agenda&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AgendaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AgendaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AgendaImpl
 * @generated
 */
public class AgendaModelImpl
	extends BaseModelImpl<Agenda> implements AgendaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a agenda model instance should use the <code>Agenda</code> interface instead.
	 */
	public static final String TABLE_NAME = "csmap_Agenda";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"agendaId", Types.BIGINT},
		{"title", Types.VARCHAR}, {"editorialTitle", Types.VARCHAR},
		{"subtitle", Types.VARCHAR}, {"imageId", Types.BIGINT},
		{"isPrincipal", Types.BOOLEAN}, {"isActive", Types.BOOLEAN},
		{"campaignsIds", Types.VARCHAR}, {"themesIds", Types.VARCHAR},
		{"typesIds", Types.VARCHAR}, {"territoriesIds", Types.VARCHAR},
		{"tags", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("agendaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("editorialTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subtitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isPrincipal", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("isActive", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("campaignsIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("themesIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typesIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("territoriesIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tags", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table csmap_Agenda (uuid_ VARCHAR(75) null,agendaId LONG not null primary key,title STRING null,editorialTitle STRING null,subtitle STRING null,imageId LONG,isPrincipal BOOLEAN,isActive BOOLEAN,campaignsIds STRING null,themesIds STRING null,typesIds STRING null,territoriesIds STRING null,tags STRING null)";

	public static final String TABLE_SQL_DROP = "drop table csmap_Agenda";

	public static final String ORDER_BY_JPQL = " ORDER BY agenda.agendaId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY csmap_Agenda.agendaId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ISACTIVE_COLUMN_BITMASK = 1L;

	public static final long ISPRINCIPAL_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long AGENDAID_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public AgendaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _agendaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAgendaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _agendaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Agenda.class;
	}

	@Override
	public String getModelClassName() {
		return Agenda.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Agenda, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Agenda, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Agenda, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Agenda)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Agenda, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Agenda, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Agenda)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Agenda, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Agenda, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Agenda>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Agenda.class.getClassLoader(), Agenda.class, ModelWrapper.class);

		try {
			Constructor<Agenda> constructor =
				(Constructor<Agenda>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Agenda, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Agenda, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Agenda, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Agenda, Object>>();
		Map<String, BiConsumer<Agenda, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Agenda, ?>>();

		attributeGetterFunctions.put("uuid", Agenda::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Agenda, String>)Agenda::setUuid);
		attributeGetterFunctions.put("agendaId", Agenda::getAgendaId);
		attributeSetterBiConsumers.put(
			"agendaId", (BiConsumer<Agenda, Long>)Agenda::setAgendaId);
		attributeGetterFunctions.put("title", Agenda::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Agenda, String>)Agenda::setTitle);
		attributeGetterFunctions.put(
			"editorialTitle", Agenda::getEditorialTitle);
		attributeSetterBiConsumers.put(
			"editorialTitle",
			(BiConsumer<Agenda, String>)Agenda::setEditorialTitle);
		attributeGetterFunctions.put("subtitle", Agenda::getSubtitle);
		attributeSetterBiConsumers.put(
			"subtitle", (BiConsumer<Agenda, String>)Agenda::setSubtitle);
		attributeGetterFunctions.put("imageId", Agenda::getImageId);
		attributeSetterBiConsumers.put(
			"imageId", (BiConsumer<Agenda, Long>)Agenda::setImageId);
		attributeGetterFunctions.put("isPrincipal", Agenda::getIsPrincipal);
		attributeSetterBiConsumers.put(
			"isPrincipal", (BiConsumer<Agenda, Boolean>)Agenda::setIsPrincipal);
		attributeGetterFunctions.put("isActive", Agenda::getIsActive);
		attributeSetterBiConsumers.put(
			"isActive", (BiConsumer<Agenda, Boolean>)Agenda::setIsActive);
		attributeGetterFunctions.put("campaignsIds", Agenda::getCampaignsIds);
		attributeSetterBiConsumers.put(
			"campaignsIds",
			(BiConsumer<Agenda, String>)Agenda::setCampaignsIds);
		attributeGetterFunctions.put("themesIds", Agenda::getThemesIds);
		attributeSetterBiConsumers.put(
			"themesIds", (BiConsumer<Agenda, String>)Agenda::setThemesIds);
		attributeGetterFunctions.put("typesIds", Agenda::getTypesIds);
		attributeSetterBiConsumers.put(
			"typesIds", (BiConsumer<Agenda, String>)Agenda::setTypesIds);
		attributeGetterFunctions.put(
			"territoriesIds", Agenda::getTerritoriesIds);
		attributeSetterBiConsumers.put(
			"territoriesIds",
			(BiConsumer<Agenda, String>)Agenda::setTerritoriesIds);
		attributeGetterFunctions.put("tags", Agenda::getTags);
		attributeSetterBiConsumers.put(
			"tags", (BiConsumer<Agenda, String>)Agenda::setTags);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getAgendaId() {
		return _agendaId;
	}

	@Override
	public void setAgendaId(long agendaId) {
		_agendaId = agendaId;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTitle(), languageId, useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(
				LocalizationUtil.updateLocalization(
					getTitle(), "Title", title, languageId, defaultLanguageId));
		}
		else {
			setTitle(
				LocalizationUtil.removeLocalization(
					getTitle(), "Title", languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTitleMap(
		Map<Locale, String> titleMap, Locale defaultLocale) {

		if (titleMap == null) {
			return;
		}

		setTitle(
			LocalizationUtil.updateLocalization(
				titleMap, getTitle(), "Title",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getEditorialTitle() {
		if (_editorialTitle == null) {
			return "";
		}
		else {
			return _editorialTitle;
		}
	}

	@Override
	public String getEditorialTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getEditorialTitle(languageId);
	}

	@Override
	public String getEditorialTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getEditorialTitle(languageId, useDefault);
	}

	@Override
	public String getEditorialTitle(String languageId) {
		return LocalizationUtil.getLocalization(
			getEditorialTitle(), languageId);
	}

	@Override
	public String getEditorialTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getEditorialTitle(), languageId, useDefault);
	}

	@Override
	public String getEditorialTitleCurrentLanguageId() {
		return _editorialTitleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getEditorialTitleCurrentValue() {
		Locale locale = getLocale(_editorialTitleCurrentLanguageId);

		return getEditorialTitle(locale);
	}

	@Override
	public Map<Locale, String> getEditorialTitleMap() {
		return LocalizationUtil.getLocalizationMap(getEditorialTitle());
	}

	@Override
	public void setEditorialTitle(String editorialTitle) {
		_editorialTitle = editorialTitle;
	}

	@Override
	public void setEditorialTitle(String editorialTitle, Locale locale) {
		setEditorialTitle(editorialTitle, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setEditorialTitle(
		String editorialTitle, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(editorialTitle)) {
			setEditorialTitle(
				LocalizationUtil.updateLocalization(
					getEditorialTitle(), "EditorialTitle", editorialTitle,
					languageId, defaultLanguageId));
		}
		else {
			setEditorialTitle(
				LocalizationUtil.removeLocalization(
					getEditorialTitle(), "EditorialTitle", languageId));
		}
	}

	@Override
	public void setEditorialTitleCurrentLanguageId(String languageId) {
		_editorialTitleCurrentLanguageId = languageId;
	}

	@Override
	public void setEditorialTitleMap(Map<Locale, String> editorialTitleMap) {
		setEditorialTitleMap(editorialTitleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setEditorialTitleMap(
		Map<Locale, String> editorialTitleMap, Locale defaultLocale) {

		if (editorialTitleMap == null) {
			return;
		}

		setEditorialTitle(
			LocalizationUtil.updateLocalization(
				editorialTitleMap, getEditorialTitle(), "EditorialTitle",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getSubtitle() {
		if (_subtitle == null) {
			return "";
		}
		else {
			return _subtitle;
		}
	}

	@Override
	public String getSubtitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSubtitle(languageId);
	}

	@Override
	public String getSubtitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSubtitle(languageId, useDefault);
	}

	@Override
	public String getSubtitle(String languageId) {
		return LocalizationUtil.getLocalization(getSubtitle(), languageId);
	}

	@Override
	public String getSubtitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getSubtitle(), languageId, useDefault);
	}

	@Override
	public String getSubtitleCurrentLanguageId() {
		return _subtitleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSubtitleCurrentValue() {
		Locale locale = getLocale(_subtitleCurrentLanguageId);

		return getSubtitle(locale);
	}

	@Override
	public Map<Locale, String> getSubtitleMap() {
		return LocalizationUtil.getLocalizationMap(getSubtitle());
	}

	@Override
	public void setSubtitle(String subtitle) {
		_subtitle = subtitle;
	}

	@Override
	public void setSubtitle(String subtitle, Locale locale) {
		setSubtitle(subtitle, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setSubtitle(
		String subtitle, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(subtitle)) {
			setSubtitle(
				LocalizationUtil.updateLocalization(
					getSubtitle(), "Subtitle", subtitle, languageId,
					defaultLanguageId));
		}
		else {
			setSubtitle(
				LocalizationUtil.removeLocalization(
					getSubtitle(), "Subtitle", languageId));
		}
	}

	@Override
	public void setSubtitleCurrentLanguageId(String languageId) {
		_subtitleCurrentLanguageId = languageId;
	}

	@Override
	public void setSubtitleMap(Map<Locale, String> subtitleMap) {
		setSubtitleMap(subtitleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setSubtitleMap(
		Map<Locale, String> subtitleMap, Locale defaultLocale) {

		if (subtitleMap == null) {
			return;
		}

		setSubtitle(
			LocalizationUtil.updateLocalization(
				subtitleMap, getSubtitle(), "Subtitle",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public Long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(Long imageId) {
		_imageId = imageId;
	}

	@Override
	public Boolean getIsPrincipal() {
		return _isPrincipal;
	}

	@Override
	public void setIsPrincipal(Boolean isPrincipal) {
		_columnBitmask |= ISPRINCIPAL_COLUMN_BITMASK;

		if (!_setOriginalIsPrincipal) {
			_setOriginalIsPrincipal = true;

			_originalIsPrincipal = _isPrincipal;
		}

		_isPrincipal = isPrincipal;
	}

	public Boolean getOriginalIsPrincipal() {
		return _originalIsPrincipal;
	}

	@Override
	public Boolean getIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(Boolean isActive) {
		_columnBitmask |= ISACTIVE_COLUMN_BITMASK;

		if (!_setOriginalIsActive) {
			_setOriginalIsActive = true;

			_originalIsActive = _isActive;
		}

		_isActive = isActive;
	}

	public Boolean getOriginalIsActive() {
		return _originalIsActive;
	}

	@Override
	public String getCampaignsIds() {
		if (_campaignsIds == null) {
			return "";
		}
		else {
			return _campaignsIds;
		}
	}

	@Override
	public void setCampaignsIds(String campaignsIds) {
		_campaignsIds = campaignsIds;
	}

	@Override
	public String getThemesIds() {
		if (_themesIds == null) {
			return "";
		}
		else {
			return _themesIds;
		}
	}

	@Override
	public void setThemesIds(String themesIds) {
		_themesIds = themesIds;
	}

	@Override
	public String getTypesIds() {
		if (_typesIds == null) {
			return "";
		}
		else {
			return _typesIds;
		}
	}

	@Override
	public void setTypesIds(String typesIds) {
		_typesIds = typesIds;
	}

	@Override
	public String getTerritoriesIds() {
		if (_territoriesIds == null) {
			return "";
		}
		else {
			return _territoriesIds;
		}
	}

	@Override
	public void setTerritoriesIds(String territoriesIds) {
		_territoriesIds = territoriesIds;
	}

	@Override
	public String getTags() {
		if (_tags == null) {
			return "";
		}
		else {
			return _tags;
		}
	}

	@Override
	public void setTags(String tags) {
		_tags = tags;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Agenda.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> editorialTitleMap = getEditorialTitleMap();

		for (Map.Entry<Locale, String> entry : editorialTitleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> subtitleMap = getSubtitleMap();

		for (Map.Entry<Locale, String> entry : subtitleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			Agenda.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String editorialTitle = getEditorialTitle(defaultLocale);

		if (Validator.isNull(editorialTitle)) {
			setEditorialTitle(
				getEditorialTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setEditorialTitle(
				getEditorialTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String subtitle = getSubtitle(defaultLocale);

		if (Validator.isNull(subtitle)) {
			setSubtitle(getSubtitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSubtitle(
				getSubtitle(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Agenda toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Agenda>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AgendaImpl agendaImpl = new AgendaImpl();

		agendaImpl.setUuid(getUuid());
		agendaImpl.setAgendaId(getAgendaId());
		agendaImpl.setTitle(getTitle());
		agendaImpl.setEditorialTitle(getEditorialTitle());
		agendaImpl.setSubtitle(getSubtitle());
		agendaImpl.setImageId(getImageId());
		agendaImpl.setIsPrincipal(getIsPrincipal());
		agendaImpl.setIsActive(getIsActive());
		agendaImpl.setCampaignsIds(getCampaignsIds());
		agendaImpl.setThemesIds(getThemesIds());
		agendaImpl.setTypesIds(getTypesIds());
		agendaImpl.setTerritoriesIds(getTerritoriesIds());
		agendaImpl.setTags(getTags());

		agendaImpl.resetOriginalValues();

		return agendaImpl;
	}

	@Override
	public int compareTo(Agenda agenda) {
		long primaryKey = agenda.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Agenda)) {
			return false;
		}

		Agenda agenda = (Agenda)object;

		long primaryKey = agenda.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		AgendaModelImpl agendaModelImpl = this;

		agendaModelImpl._originalUuid = agendaModelImpl._uuid;

		agendaModelImpl._originalIsPrincipal = agendaModelImpl._isPrincipal;

		agendaModelImpl._setOriginalIsPrincipal = false;

		agendaModelImpl._originalIsActive = agendaModelImpl._isActive;

		agendaModelImpl._setOriginalIsActive = false;

		agendaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Agenda> toCacheModel() {
		AgendaCacheModel agendaCacheModel = new AgendaCacheModel();

		agendaCacheModel.uuid = getUuid();

		String uuid = agendaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			agendaCacheModel.uuid = null;
		}

		agendaCacheModel.agendaId = getAgendaId();

		agendaCacheModel.title = getTitle();

		String title = agendaCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			agendaCacheModel.title = null;
		}

		agendaCacheModel.editorialTitle = getEditorialTitle();

		String editorialTitle = agendaCacheModel.editorialTitle;

		if ((editorialTitle != null) && (editorialTitle.length() == 0)) {
			agendaCacheModel.editorialTitle = null;
		}

		agendaCacheModel.subtitle = getSubtitle();

		String subtitle = agendaCacheModel.subtitle;

		if ((subtitle != null) && (subtitle.length() == 0)) {
			agendaCacheModel.subtitle = null;
		}

		Long imageId = getImageId();

		if (imageId != null) {
			agendaCacheModel.imageId = imageId;
		}

		Boolean isPrincipal = getIsPrincipal();

		if (isPrincipal != null) {
			agendaCacheModel.isPrincipal = isPrincipal;
		}

		Boolean isActive = getIsActive();

		if (isActive != null) {
			agendaCacheModel.isActive = isActive;
		}

		agendaCacheModel.campaignsIds = getCampaignsIds();

		String campaignsIds = agendaCacheModel.campaignsIds;

		if ((campaignsIds != null) && (campaignsIds.length() == 0)) {
			agendaCacheModel.campaignsIds = null;
		}

		agendaCacheModel.themesIds = getThemesIds();

		String themesIds = agendaCacheModel.themesIds;

		if ((themesIds != null) && (themesIds.length() == 0)) {
			agendaCacheModel.themesIds = null;
		}

		agendaCacheModel.typesIds = getTypesIds();

		String typesIds = agendaCacheModel.typesIds;

		if ((typesIds != null) && (typesIds.length() == 0)) {
			agendaCacheModel.typesIds = null;
		}

		agendaCacheModel.territoriesIds = getTerritoriesIds();

		String territoriesIds = agendaCacheModel.territoriesIds;

		if ((territoriesIds != null) && (territoriesIds.length() == 0)) {
			agendaCacheModel.territoriesIds = null;
		}

		agendaCacheModel.tags = getTags();

		String tags = agendaCacheModel.tags;

		if ((tags != null) && (tags.length() == 0)) {
			agendaCacheModel.tags = null;
		}

		return agendaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Agenda, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Agenda, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Agenda, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Agenda)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Agenda, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Agenda, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Agenda, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Agenda)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Agenda>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _agendaId;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _editorialTitle;
	private String _editorialTitleCurrentLanguageId;
	private String _subtitle;
	private String _subtitleCurrentLanguageId;
	private Long _imageId;
	private Boolean _isPrincipal;
	private Boolean _originalIsPrincipal;
	private boolean _setOriginalIsPrincipal;
	private Boolean _isActive;
	private Boolean _originalIsActive;
	private boolean _setOriginalIsActive;
	private String _campaignsIds;
	private String _themesIds;
	private String _typesIds;
	private String _territoriesIds;
	private String _tags;
	private long _columnBitmask;
	private Agenda _escapedModel;

}