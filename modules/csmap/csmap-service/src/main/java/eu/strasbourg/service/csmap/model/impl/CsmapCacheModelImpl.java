/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.csmap.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import eu.strasbourg.service.csmap.model.CsmapCache;
import eu.strasbourg.service.csmap.model.CsmapCacheModel;

import java.io.Serializable;
import java.lang.reflect.InvocationHandler;
import java.sql.Blob;
import java.sql.Types;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CsmapCache service. Represents a row in the &quot;csmap_CsmapCache&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CsmapCacheModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CsmapCacheImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CsmapCacheImpl
 * @generated
 */
public class CsmapCacheModelImpl
	extends BaseModelImpl<CsmapCache> implements CsmapCacheModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a csmap cache model instance should use the <code>CsmapCache</code> interface instead.
	 */
	public static final String TABLE_NAME = "csmap_CsmapCache";

	public static final Object[][] TABLE_COLUMNS = {
		{"cacheId", Types.BIGINT}, {"codeCache", Types.BIGINT},
		{"description", Types.VARCHAR}, {"cacheJson", Types.VARCHAR},
		{"isLastProcessSuccess", Types.BOOLEAN},
		{"modifiedDate", Types.TIMESTAMP}, {"processedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("cacheId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("codeCache", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cacheJson", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isLastProcessSuccess", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("processedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table csmap_CsmapCache (cacheId LONG not null primary key,codeCache LONG,description VARCHAR(75) null,cacheJson STRING null,isLastProcessSuccess BOOLEAN,modifiedDate DATE null,processedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table csmap_CsmapCache";

	public static final String ORDER_BY_JPQL =
		" ORDER BY csmapCache.cacheId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY csmap_CsmapCache.cacheId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CODECACHE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ISLASTPROCESSSUCCESS_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CACHEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CsmapCacheModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cacheId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCacheId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cacheId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CsmapCache.class;
	}

	@Override
	public String getModelClassName() {
		return CsmapCache.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CsmapCache, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CsmapCache, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CsmapCache, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((CsmapCache)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CsmapCache, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CsmapCache, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CsmapCache)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CsmapCache, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CsmapCache, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<CsmapCache, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CsmapCache, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CsmapCache, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CsmapCache, Object>>();
		Map<String, BiConsumer<CsmapCache, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CsmapCache, ?>>();

		attributeGetterFunctions.put("cacheId", CsmapCache::getCacheId);
		attributeSetterBiConsumers.put(
			"cacheId", (BiConsumer<CsmapCache, Long>)CsmapCache::setCacheId);
		attributeGetterFunctions.put("codeCache", CsmapCache::getCodeCache);
		attributeSetterBiConsumers.put(
			"codeCache",
			(BiConsumer<CsmapCache, Long>)CsmapCache::setCodeCache);
		attributeGetterFunctions.put("description", CsmapCache::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<CsmapCache, String>)CsmapCache::setDescription);
		attributeGetterFunctions.put("cacheJson", CsmapCache::getCacheJson);
		attributeSetterBiConsumers.put(
			"cacheJson",
			(BiConsumer<CsmapCache, String>)CsmapCache::setCacheJson);
		attributeGetterFunctions.put(
			"isLastProcessSuccess", CsmapCache::getIsLastProcessSuccess);
		attributeSetterBiConsumers.put(
			"isLastProcessSuccess",
			(BiConsumer<CsmapCache, Boolean>)
				CsmapCache::setIsLastProcessSuccess);
		attributeGetterFunctions.put(
			"modifiedDate", CsmapCache::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<CsmapCache, Date>)CsmapCache::setModifiedDate);
		attributeGetterFunctions.put(
			"processedDate", CsmapCache::getProcessedDate);
		attributeSetterBiConsumers.put(
			"processedDate",
			(BiConsumer<CsmapCache, Date>)CsmapCache::setProcessedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getCacheId() {
		return _cacheId;
	}

	@Override
	public void setCacheId(long cacheId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cacheId = cacheId;
	}

	@Override
	public long getCodeCache() {
		return _codeCache;
	}

	@Override
	public void setCodeCache(long codeCache) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codeCache = codeCache;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCodeCache() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("codeCache"));
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@Override
	public String getCacheJson() {
		if (_cacheJson == null) {
			return "";
		}
		else {
			return _cacheJson;
		}
	}

	@Override
	public void setCacheJson(String cacheJson) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cacheJson = cacheJson;
	}

	@Override
	public Boolean getIsLastProcessSuccess() {
		return _isLastProcessSuccess;
	}

	@Override
	public void setIsLastProcessSuccess(Boolean isLastProcessSuccess) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isLastProcessSuccess = isLastProcessSuccess;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Boolean getOriginalIsLastProcessSuccess() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("isLastProcessSuccess"));
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getProcessedDate() {
		return _processedDate;
	}

	@Override
	public void setProcessedDate(Date processedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_processedDate = processedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, CsmapCache.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CsmapCache toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CsmapCache>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CsmapCacheImpl csmapCacheImpl = new CsmapCacheImpl();

		csmapCacheImpl.setCacheId(getCacheId());
		csmapCacheImpl.setCodeCache(getCodeCache());
		csmapCacheImpl.setDescription(getDescription());
		csmapCacheImpl.setCacheJson(getCacheJson());
		csmapCacheImpl.setIsLastProcessSuccess(getIsLastProcessSuccess());
		csmapCacheImpl.setModifiedDate(getModifiedDate());
		csmapCacheImpl.setProcessedDate(getProcessedDate());

		csmapCacheImpl.resetOriginalValues();

		return csmapCacheImpl;
	}

	@Override
	public CsmapCache cloneWithOriginalValues() {
		CsmapCacheImpl csmapCacheImpl = new CsmapCacheImpl();

		csmapCacheImpl.setCacheId(this.<Long>getColumnOriginalValue("cacheId"));
		csmapCacheImpl.setCodeCache(
			this.<Long>getColumnOriginalValue("codeCache"));
		csmapCacheImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		csmapCacheImpl.setCacheJson(
			this.<String>getColumnOriginalValue("cacheJson"));
		csmapCacheImpl.setIsLastProcessSuccess(
			this.<Boolean>getColumnOriginalValue("isLastProcessSuccess"));
		csmapCacheImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		csmapCacheImpl.setProcessedDate(
			this.<Date>getColumnOriginalValue("processedDate"));

		return csmapCacheImpl;
	}

	@Override
	public int compareTo(CsmapCache csmapCache) {
		long primaryKey = csmapCache.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CsmapCache)) {
			return false;
		}

		CsmapCache csmapCache = (CsmapCache)object;

		long primaryKey = csmapCache.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CsmapCache> toCacheModel() {
		CsmapCacheCacheModel csmapCacheCacheModel = new CsmapCacheCacheModel();

		csmapCacheCacheModel.cacheId = getCacheId();

		csmapCacheCacheModel.codeCache = getCodeCache();

		csmapCacheCacheModel.description = getDescription();

		String description = csmapCacheCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			csmapCacheCacheModel.description = null;
		}

		csmapCacheCacheModel.cacheJson = getCacheJson();

		String cacheJson = csmapCacheCacheModel.cacheJson;

		if ((cacheJson != null) && (cacheJson.length() == 0)) {
			csmapCacheCacheModel.cacheJson = null;
		}

		Boolean isLastProcessSuccess = getIsLastProcessSuccess();

		if (isLastProcessSuccess != null) {
			csmapCacheCacheModel.isLastProcessSuccess = isLastProcessSuccess;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			csmapCacheCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			csmapCacheCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date processedDate = getProcessedDate();

		if (processedDate != null) {
			csmapCacheCacheModel.processedDate = processedDate.getTime();
		}
		else {
			csmapCacheCacheModel.processedDate = Long.MIN_VALUE;
		}

		return csmapCacheCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CsmapCache, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CsmapCache, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CsmapCache, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((CsmapCache)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CsmapCache>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CsmapCache.class, ModelWrapper.class);

	}

	private long _cacheId;
	private long _codeCache;
	private String _description;
	private String _cacheJson;
	private Boolean _isLastProcessSuccess;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _processedDate;

	public <T> T getColumnValue(String columnName) {
		Function<CsmapCache, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CsmapCache)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("cacheId", _cacheId);
		_columnOriginalValues.put("codeCache", _codeCache);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("cacheJson", _cacheJson);
		_columnOriginalValues.put(
			"isLastProcessSuccess", _isLastProcessSuccess);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("processedDate", _processedDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("cacheId", 1L);

		columnBitmasks.put("codeCache", 2L);

		columnBitmasks.put("description", 4L);

		columnBitmasks.put("cacheJson", 8L);

		columnBitmasks.put("isLastProcessSuccess", 16L);

		columnBitmasks.put("modifiedDate", 32L);

		columnBitmasks.put("processedDate", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CsmapCache _escapedModel;

}