/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.csmap.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import eu.strasbourg.service.csmap.model.Thematic;
import eu.strasbourg.service.csmap.model.ThematicModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Thematic service. Represents a row in the &quot;csmap_Thematic&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ThematicModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ThematicImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ThematicImpl
 * @generated
 */
@ProviderType
public class ThematicModelImpl
	extends BaseModelImpl<Thematic> implements ThematicModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a thematic model instance should use the <code>Thematic</code> interface instead.
	 */
	public static final String TABLE_NAME = "csmap_Thematic";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"thematicId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"favorite", Types.VARCHAR},
		{"topics", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thematicId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("favorite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("topics", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table csmap_Thematic (uuid_ VARCHAR(75) null,thematicId LONG not null primary key,name VARCHAR(75) null,favorite STRING null,topics STRING null)";

	public static final String TABLE_SQL_DROP = "drop table csmap_Thematic";

	public static final String ORDER_BY_JPQL =
		" ORDER BY thematic.thematicId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY csmap_Thematic.thematicId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long THEMATICID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public ThematicModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _thematicId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setThematicId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _thematicId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Thematic.class;
	}

	@Override
	public String getModelClassName() {
		return Thematic.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Thematic, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Thematic, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Thematic, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Thematic)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Thematic, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Thematic, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Thematic)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Thematic, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Thematic, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Thematic>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Thematic.class.getClassLoader(), Thematic.class,
			ModelWrapper.class);

		try {
			Constructor<Thematic> constructor =
				(Constructor<Thematic>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Thematic, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Thematic, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Thematic, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Thematic, Object>>();
		Map<String, BiConsumer<Thematic, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Thematic, ?>>();

		attributeGetterFunctions.put("uuid", Thematic::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Thematic, String>)Thematic::setUuid);
		attributeGetterFunctions.put("thematicId", Thematic::getThematicId);
		attributeSetterBiConsumers.put(
			"thematicId", (BiConsumer<Thematic, Long>)Thematic::setThematicId);
		attributeGetterFunctions.put("name", Thematic::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Thematic, String>)Thematic::setName);
		attributeGetterFunctions.put("favorite", Thematic::getFavorite);
		attributeSetterBiConsumers.put(
			"favorite", (BiConsumer<Thematic, String>)Thematic::setFavorite);
		attributeGetterFunctions.put("topics", Thematic::getTopics);
		attributeSetterBiConsumers.put(
			"topics", (BiConsumer<Thematic, String>)Thematic::setTopics);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getThematicId() {
		return _thematicId;
	}

	@Override
	public void setThematicId(long thematicId) {
		_thematicId = thematicId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getFavorite() {
		if (_favorite == null) {
			return "";
		}
		else {
			return _favorite;
		}
	}

	@Override
	public void setFavorite(String favorite) {
		_favorite = favorite;
	}

	@Override
	public String getTopics() {
		if (_topics == null) {
			return "";
		}
		else {
			return _topics;
		}
	}

	@Override
	public void setTopics(String topics) {
		_topics = topics;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Thematic.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Thematic toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ThematicImpl thematicImpl = new ThematicImpl();

		thematicImpl.setUuid(getUuid());
		thematicImpl.setThematicId(getThematicId());
		thematicImpl.setName(getName());
		thematicImpl.setFavorite(getFavorite());
		thematicImpl.setTopics(getTopics());

		thematicImpl.resetOriginalValues();

		return thematicImpl;
	}

	@Override
	public int compareTo(Thematic thematic) {
		long primaryKey = thematic.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Thematic)) {
			return false;
		}

		Thematic thematic = (Thematic)obj;

		long primaryKey = thematic.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ThematicModelImpl thematicModelImpl = this;

		thematicModelImpl._originalUuid = thematicModelImpl._uuid;

		thematicModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Thematic> toCacheModel() {
		ThematicCacheModel thematicCacheModel = new ThematicCacheModel();

		thematicCacheModel.uuid = getUuid();

		String uuid = thematicCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			thematicCacheModel.uuid = null;
		}

		thematicCacheModel.thematicId = getThematicId();

		thematicCacheModel.name = getName();

		String name = thematicCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			thematicCacheModel.name = null;
		}

		thematicCacheModel.favorite = getFavorite();

		String favorite = thematicCacheModel.favorite;

		if ((favorite != null) && (favorite.length() == 0)) {
			thematicCacheModel.favorite = null;
		}

		thematicCacheModel.topics = getTopics();

		String topics = thematicCacheModel.topics;

		if ((topics != null) && (topics.length() == 0)) {
			thematicCacheModel.topics = null;
		}

		return thematicCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Thematic, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Thematic, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Thematic, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Thematic)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Thematic, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Thematic, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Thematic, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Thematic)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Thematic>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _thematicId;
	private String _name;
	private String _favorite;
	private String _topics;
	private long _columnBitmask;
	private Thematic _escapedModel;

}