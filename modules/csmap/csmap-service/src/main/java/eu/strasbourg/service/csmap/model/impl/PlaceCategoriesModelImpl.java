/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.csmap.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import eu.strasbourg.service.csmap.model.PlaceCategories;
import eu.strasbourg.service.csmap.model.PlaceCategoriesModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the PlaceCategories service. Represents a row in the &quot;csmap_PlaceCategories&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>PlaceCategoriesModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlaceCategoriesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PlaceCategoriesImpl
 * @generated
 */
@ProviderType
public class PlaceCategoriesModelImpl
	extends BaseModelImpl<PlaceCategories> implements PlaceCategoriesModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a place categories model instance should use the <code>PlaceCategories</code> interface instead.
	 */
	public static final String TABLE_NAME = "csmap_PlaceCategories";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"placeCategoriesId", Types.BIGINT},
		{"categoriesIds", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("placeCategoriesId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("categoriesIds", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table csmap_PlaceCategories (uuid_ VARCHAR(75) null,placeCategoriesId LONG not null primary key,categoriesIds STRING null)";

	public static final String TABLE_SQL_DROP =
		"drop table csmap_PlaceCategories";

	public static final String ORDER_BY_JPQL =
		" ORDER BY placeCategories.placeCategoriesId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY csmap_PlaceCategories.placeCategoriesId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CATEGORIESIDS_COLUMN_BITMASK = 1L;

	public static final long UUID_COLUMN_BITMASK = 2L;

	public static final long PLACECATEGORIESID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public PlaceCategoriesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _placeCategoriesId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPlaceCategoriesId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _placeCategoriesId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PlaceCategories.class;
	}

	@Override
	public String getModelClassName() {
		return PlaceCategories.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PlaceCategories, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PlaceCategories, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PlaceCategories, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PlaceCategories)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PlaceCategories, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PlaceCategories, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PlaceCategories)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PlaceCategories, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PlaceCategories, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, PlaceCategories>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			PlaceCategories.class.getClassLoader(), PlaceCategories.class,
			ModelWrapper.class);

		try {
			Constructor<PlaceCategories> constructor =
				(Constructor<PlaceCategories>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<PlaceCategories, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PlaceCategories, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PlaceCategories, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<PlaceCategories, Object>>();
		Map<String, BiConsumer<PlaceCategories, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<PlaceCategories, ?>>();

		attributeGetterFunctions.put("uuid", PlaceCategories::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<PlaceCategories, String>)PlaceCategories::setUuid);
		attributeGetterFunctions.put(
			"placeCategoriesId", PlaceCategories::getPlaceCategoriesId);
		attributeSetterBiConsumers.put(
			"placeCategoriesId",
			(BiConsumer<PlaceCategories, Long>)
				PlaceCategories::setPlaceCategoriesId);
		attributeGetterFunctions.put(
			"categoriesIds", PlaceCategories::getCategoriesIds);
		attributeSetterBiConsumers.put(
			"categoriesIds",
			(BiConsumer<PlaceCategories, String>)
				PlaceCategories::setCategoriesIds);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getPlaceCategoriesId() {
		return _placeCategoriesId;
	}

	@Override
	public void setPlaceCategoriesId(long placeCategoriesId) {
		_placeCategoriesId = placeCategoriesId;
	}

	@Override
	public String getCategoriesIds() {
		if (_categoriesIds == null) {
			return "";
		}
		else {
			return _categoriesIds;
		}
	}

	@Override
	public void setCategoriesIds(String categoriesIds) {
		_columnBitmask |= CATEGORIESIDS_COLUMN_BITMASK;

		if (_originalCategoriesIds == null) {
			_originalCategoriesIds = _categoriesIds;
		}

		_categoriesIds = categoriesIds;
	}

	public String getOriginalCategoriesIds() {
		return GetterUtil.getString(_originalCategoriesIds);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, PlaceCategories.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PlaceCategories toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PlaceCategoriesImpl placeCategoriesImpl = new PlaceCategoriesImpl();

		placeCategoriesImpl.setUuid(getUuid());
		placeCategoriesImpl.setPlaceCategoriesId(getPlaceCategoriesId());
		placeCategoriesImpl.setCategoriesIds(getCategoriesIds());

		placeCategoriesImpl.resetOriginalValues();

		return placeCategoriesImpl;
	}

	@Override
	public int compareTo(PlaceCategories placeCategories) {
		long primaryKey = placeCategories.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PlaceCategories)) {
			return false;
		}

		PlaceCategories placeCategories = (PlaceCategories)obj;

		long primaryKey = placeCategories.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		PlaceCategoriesModelImpl placeCategoriesModelImpl = this;

		placeCategoriesModelImpl._originalUuid = placeCategoriesModelImpl._uuid;

		placeCategoriesModelImpl._originalCategoriesIds =
			placeCategoriesModelImpl._categoriesIds;

		placeCategoriesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PlaceCategories> toCacheModel() {
		PlaceCategoriesCacheModel placeCategoriesCacheModel =
			new PlaceCategoriesCacheModel();

		placeCategoriesCacheModel.uuid = getUuid();

		String uuid = placeCategoriesCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			placeCategoriesCacheModel.uuid = null;
		}

		placeCategoriesCacheModel.placeCategoriesId = getPlaceCategoriesId();

		placeCategoriesCacheModel.categoriesIds = getCategoriesIds();

		String categoriesIds = placeCategoriesCacheModel.categoriesIds;

		if ((categoriesIds != null) && (categoriesIds.length() == 0)) {
			placeCategoriesCacheModel.categoriesIds = null;
		}

		return placeCategoriesCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PlaceCategories, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PlaceCategories, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PlaceCategories, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((PlaceCategories)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<PlaceCategories, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<PlaceCategories, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PlaceCategories, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((PlaceCategories)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, PlaceCategories>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _placeCategoriesId;
	private String _categoriesIds;
	private String _originalCategoriesIds;
	private long _columnBitmask;
	private PlaceCategories _escapedModel;

}