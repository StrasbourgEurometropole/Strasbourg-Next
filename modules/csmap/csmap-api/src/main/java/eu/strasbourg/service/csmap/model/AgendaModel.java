/**
 * SPDX-FileCopyrightText: (c) 2023 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package eu.strasbourg.service.csmap.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.LocalizedModel;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the Agenda service. Represents a row in the &quot;csmap_Agenda&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>eu.strasbourg.service.csmap.model.impl.AgendaModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>eu.strasbourg.service.csmap.model.impl.AgendaImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Agenda
 * @generated
 */
@ProviderType
public interface AgendaModel extends BaseModel<Agenda>, LocalizedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a agenda model instance should use the {@link Agenda} interface instead.
	 */

	/**
	 * Returns the primary key of this agenda.
	 *
	 * @return the primary key of this agenda
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this agenda.
	 *
	 * @param primaryKey the primary key of this agenda
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this agenda.
	 *
	 * @return the uuid of this agenda
	 */
	@AutoEscape
	public String getUuid();

	/**
	 * Sets the uuid of this agenda.
	 *
	 * @param uuid the uuid of this agenda
	 */
	public void setUuid(String uuid);

	/**
	 * Returns the agenda ID of this agenda.
	 *
	 * @return the agenda ID of this agenda
	 */
	public long getAgendaId();

	/**
	 * Sets the agenda ID of this agenda.
	 *
	 * @param agendaId the agenda ID of this agenda
	 */
	public void setAgendaId(long agendaId);

	/**
	 * Returns the title of this agenda.
	 *
	 * @return the title of this agenda
	 */
	public String getTitle();

	/**
	 * Returns the localized title of this agenda in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized title of this agenda
	 */
	@AutoEscape
	public String getTitle(Locale locale);

	/**
	 * Returns the localized title of this agenda in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this agenda. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized title of this agenda in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized title of this agenda
	 */
	@AutoEscape
	public String getTitle(String languageId);

	/**
	 * Returns the localized title of this agenda in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this agenda
	 */
	@AutoEscape
	public String getTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getTitleCurrentLanguageId();

	@AutoEscape
	public String getTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized titles of this agenda.
	 *
	 * @return the locales and localized titles of this agenda
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this agenda.
	 *
	 * @param title the title of this agenda
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this agenda in the language.
	 *
	 * @param title the localized title of this agenda
	 * @param locale the locale of the language
	 */
	public void setTitle(String title, Locale locale);

	/**
	 * Sets the localized title of this agenda in the language, and sets the default locale.
	 *
	 * @param title the localized title of this agenda
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTitle(String title, Locale locale, Locale defaultLocale);

	public void setTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized titles of this agenda from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this agenda
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	/**
	 * Sets the localized titles of this agenda from the map of locales and localized titles, and sets the default locale.
	 *
	 * @param titleMap the locales and localized titles of this agenda
	 * @param defaultLocale the default locale
	 */
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Returns the editorial title of this agenda.
	 *
	 * @return the editorial title of this agenda
	 */
	public String getEditorialTitle();

	/**
	 * Returns the localized editorial title of this agenda in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized editorial title of this agenda
	 */
	@AutoEscape
	public String getEditorialTitle(Locale locale);

	/**
	 * Returns the localized editorial title of this agenda in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized editorial title of this agenda. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getEditorialTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized editorial title of this agenda in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized editorial title of this agenda
	 */
	@AutoEscape
	public String getEditorialTitle(String languageId);

	/**
	 * Returns the localized editorial title of this agenda in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized editorial title of this agenda
	 */
	@AutoEscape
	public String getEditorialTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getEditorialTitleCurrentLanguageId();

	@AutoEscape
	public String getEditorialTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized editorial titles of this agenda.
	 *
	 * @return the locales and localized editorial titles of this agenda
	 */
	public Map<Locale, String> getEditorialTitleMap();

	/**
	 * Sets the editorial title of this agenda.
	 *
	 * @param editorialTitle the editorial title of this agenda
	 */
	public void setEditorialTitle(String editorialTitle);

	/**
	 * Sets the localized editorial title of this agenda in the language.
	 *
	 * @param editorialTitle the localized editorial title of this agenda
	 * @param locale the locale of the language
	 */
	public void setEditorialTitle(String editorialTitle, Locale locale);

	/**
	 * Sets the localized editorial title of this agenda in the language, and sets the default locale.
	 *
	 * @param editorialTitle the localized editorial title of this agenda
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setEditorialTitle(
		String editorialTitle, Locale locale, Locale defaultLocale);

	public void setEditorialTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized editorial titles of this agenda from the map of locales and localized editorial titles.
	 *
	 * @param editorialTitleMap the locales and localized editorial titles of this agenda
	 */
	public void setEditorialTitleMap(Map<Locale, String> editorialTitleMap);

	/**
	 * Sets the localized editorial titles of this agenda from the map of locales and localized editorial titles, and sets the default locale.
	 *
	 * @param editorialTitleMap the locales and localized editorial titles of this agenda
	 * @param defaultLocale the default locale
	 */
	public void setEditorialTitleMap(
		Map<Locale, String> editorialTitleMap, Locale defaultLocale);

	/**
	 * Returns the subtitle of this agenda.
	 *
	 * @return the subtitle of this agenda
	 */
	public String getSubtitle();

	/**
	 * Returns the localized subtitle of this agenda in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized subtitle of this agenda
	 */
	@AutoEscape
	public String getSubtitle(Locale locale);

	/**
	 * Returns the localized subtitle of this agenda in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized subtitle of this agenda. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getSubtitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized subtitle of this agenda in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized subtitle of this agenda
	 */
	@AutoEscape
	public String getSubtitle(String languageId);

	/**
	 * Returns the localized subtitle of this agenda in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized subtitle of this agenda
	 */
	@AutoEscape
	public String getSubtitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getSubtitleCurrentLanguageId();

	@AutoEscape
	public String getSubtitleCurrentValue();

	/**
	 * Returns a map of the locales and localized subtitles of this agenda.
	 *
	 * @return the locales and localized subtitles of this agenda
	 */
	public Map<Locale, String> getSubtitleMap();

	/**
	 * Sets the subtitle of this agenda.
	 *
	 * @param subtitle the subtitle of this agenda
	 */
	public void setSubtitle(String subtitle);

	/**
	 * Sets the localized subtitle of this agenda in the language.
	 *
	 * @param subtitle the localized subtitle of this agenda
	 * @param locale the locale of the language
	 */
	public void setSubtitle(String subtitle, Locale locale);

	/**
	 * Sets the localized subtitle of this agenda in the language, and sets the default locale.
	 *
	 * @param subtitle the localized subtitle of this agenda
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setSubtitle(
		String subtitle, Locale locale, Locale defaultLocale);

	public void setSubtitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized subtitles of this agenda from the map of locales and localized subtitles.
	 *
	 * @param subtitleMap the locales and localized subtitles of this agenda
	 */
	public void setSubtitleMap(Map<Locale, String> subtitleMap);

	/**
	 * Sets the localized subtitles of this agenda from the map of locales and localized subtitles, and sets the default locale.
	 *
	 * @param subtitleMap the locales and localized subtitles of this agenda
	 * @param defaultLocale the default locale
	 */
	public void setSubtitleMap(
		Map<Locale, String> subtitleMap, Locale defaultLocale);

	/**
	 * Returns the image ID of this agenda.
	 *
	 * @return the image ID of this agenda
	 */
	public Long getImageId();

	/**
	 * Sets the image ID of this agenda.
	 *
	 * @param imageId the image ID of this agenda
	 */
	public void setImageId(Long imageId);

	/**
	 * Returns the label link of this agenda.
	 *
	 * @return the label link of this agenda
	 */
	public String getLabelLink();

	/**
	 * Returns the localized label link of this agenda in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized label link of this agenda
	 */
	@AutoEscape
	public String getLabelLink(Locale locale);

	/**
	 * Returns the localized label link of this agenda in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized label link of this agenda. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getLabelLink(Locale locale, boolean useDefault);

	/**
	 * Returns the localized label link of this agenda in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized label link of this agenda
	 */
	@AutoEscape
	public String getLabelLink(String languageId);

	/**
	 * Returns the localized label link of this agenda in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized label link of this agenda
	 */
	@AutoEscape
	public String getLabelLink(String languageId, boolean useDefault);

	@AutoEscape
	public String getLabelLinkCurrentLanguageId();

	@AutoEscape
	public String getLabelLinkCurrentValue();

	/**
	 * Returns a map of the locales and localized label links of this agenda.
	 *
	 * @return the locales and localized label links of this agenda
	 */
	public Map<Locale, String> getLabelLinkMap();

	/**
	 * Sets the label link of this agenda.
	 *
	 * @param labelLink the label link of this agenda
	 */
	public void setLabelLink(String labelLink);

	/**
	 * Sets the localized label link of this agenda in the language.
	 *
	 * @param labelLink the localized label link of this agenda
	 * @param locale the locale of the language
	 */
	public void setLabelLink(String labelLink, Locale locale);

	/**
	 * Sets the localized label link of this agenda in the language, and sets the default locale.
	 *
	 * @param labelLink the localized label link of this agenda
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setLabelLink(
		String labelLink, Locale locale, Locale defaultLocale);

	public void setLabelLinkCurrentLanguageId(String languageId);

	/**
	 * Sets the localized label links of this agenda from the map of locales and localized label links.
	 *
	 * @param labelLinkMap the locales and localized label links of this agenda
	 */
	public void setLabelLinkMap(Map<Locale, String> labelLinkMap);

	/**
	 * Sets the localized label links of this agenda from the map of locales and localized label links, and sets the default locale.
	 *
	 * @param labelLinkMap the locales and localized label links of this agenda
	 * @param defaultLocale the default locale
	 */
	public void setLabelLinkMap(
		Map<Locale, String> labelLinkMap, Locale defaultLocale);

	/**
	 * Returns the link of this agenda.
	 *
	 * @return the link of this agenda
	 */
	public String getLink();

	/**
	 * Returns the localized link of this agenda in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized link of this agenda
	 */
	@AutoEscape
	public String getLink(Locale locale);

	/**
	 * Returns the localized link of this agenda in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized link of this agenda. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getLink(Locale locale, boolean useDefault);

	/**
	 * Returns the localized link of this agenda in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized link of this agenda
	 */
	@AutoEscape
	public String getLink(String languageId);

	/**
	 * Returns the localized link of this agenda in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized link of this agenda
	 */
	@AutoEscape
	public String getLink(String languageId, boolean useDefault);

	@AutoEscape
	public String getLinkCurrentLanguageId();

	@AutoEscape
	public String getLinkCurrentValue();

	/**
	 * Returns a map of the locales and localized links of this agenda.
	 *
	 * @return the locales and localized links of this agenda
	 */
	public Map<Locale, String> getLinkMap();

	/**
	 * Sets the link of this agenda.
	 *
	 * @param link the link of this agenda
	 */
	public void setLink(String link);

	/**
	 * Sets the localized link of this agenda in the language.
	 *
	 * @param link the localized link of this agenda
	 * @param locale the locale of the language
	 */
	public void setLink(String link, Locale locale);

	/**
	 * Sets the localized link of this agenda in the language, and sets the default locale.
	 *
	 * @param link the localized link of this agenda
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setLink(String link, Locale locale, Locale defaultLocale);

	public void setLinkCurrentLanguageId(String languageId);

	/**
	 * Sets the localized links of this agenda from the map of locales and localized links.
	 *
	 * @param linkMap the locales and localized links of this agenda
	 */
	public void setLinkMap(Map<Locale, String> linkMap);

	/**
	 * Sets the localized links of this agenda from the map of locales and localized links, and sets the default locale.
	 *
	 * @param linkMap the locales and localized links of this agenda
	 * @param defaultLocale the default locale
	 */
	public void setLinkMap(Map<Locale, String> linkMap, Locale defaultLocale);

	/**
	 * Returns the publication start date of this agenda.
	 *
	 * @return the publication start date of this agenda
	 */
	public Date getPublicationStartDate();

	/**
	 * Sets the publication start date of this agenda.
	 *
	 * @param publicationStartDate the publication start date of this agenda
	 */
	public void setPublicationStartDate(Date publicationStartDate);

	/**
	 * Returns the publication end date of this agenda.
	 *
	 * @return the publication end date of this agenda
	 */
	public Date getPublicationEndDate();

	/**
	 * Sets the publication end date of this agenda.
	 *
	 * @param publicationEndDate the publication end date of this agenda
	 */
	public void setPublicationEndDate(Date publicationEndDate);

	/**
	 * Returns the is principal of this agenda.
	 *
	 * @return the is principal of this agenda
	 */
	public Boolean getIsPrincipal();

	/**
	 * Sets the is principal of this agenda.
	 *
	 * @param isPrincipal the is principal of this agenda
	 */
	public void setIsPrincipal(Boolean isPrincipal);

	/**
	 * Returns the is active of this agenda.
	 *
	 * @return the is active of this agenda
	 */
	public Boolean getIsActive();

	/**
	 * Sets the is active of this agenda.
	 *
	 * @param isActive the is active of this agenda
	 */
	public void setIsActive(Boolean isActive);

	/**
	 * Returns the campaigns IDs of this agenda.
	 *
	 * @return the campaigns IDs of this agenda
	 */
	@AutoEscape
	public String getCampaignsIds();

	/**
	 * Sets the campaigns IDs of this agenda.
	 *
	 * @param campaignsIds the campaigns IDs of this agenda
	 */
	public void setCampaignsIds(String campaignsIds);

	/**
	 * Returns the themes IDs of this agenda.
	 *
	 * @return the themes IDs of this agenda
	 */
	@AutoEscape
	public String getThemesIds();

	/**
	 * Sets the themes IDs of this agenda.
	 *
	 * @param themesIds the themes IDs of this agenda
	 */
	public void setThemesIds(String themesIds);

	/**
	 * Returns the types IDs of this agenda.
	 *
	 * @return the types IDs of this agenda
	 */
	@AutoEscape
	public String getTypesIds();

	/**
	 * Sets the types IDs of this agenda.
	 *
	 * @param typesIds the types IDs of this agenda
	 */
	public void setTypesIds(String typesIds);

	/**
	 * Returns the territories IDs of this agenda.
	 *
	 * @return the territories IDs of this agenda
	 */
	@AutoEscape
	public String getTerritoriesIds();

	/**
	 * Sets the territories IDs of this agenda.
	 *
	 * @param territoriesIds the territories IDs of this agenda
	 */
	public void setTerritoriesIds(String territoriesIds);

	/**
	 * Returns the tags of this agenda.
	 *
	 * @return the tags of this agenda
	 */
	@AutoEscape
	public String getTags();

	/**
	 * Sets the tags of this agenda.
	 *
	 * @param tags the tags of this agenda
	 */
	public void setTags(String tags);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Agenda cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}