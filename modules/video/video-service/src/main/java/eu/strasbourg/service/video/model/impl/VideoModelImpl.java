/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.video.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import eu.strasbourg.service.video.model.Video;
import eu.strasbourg.service.video.model.VideoModel;
import eu.strasbourg.service.video.model.VideoSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Video service. Represents a row in the &quot;video_Video&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>VideoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VideoImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see VideoImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class VideoModelImpl extends BaseModelImpl<Video> implements VideoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a video model instance should use the <code>Video</code> interface instead.
	 */
	public static final String TABLE_NAME = "video_Video";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"videoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"lastPublishDate", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}, {"title", Types.VARCHAR},
		{"description", Types.CLOB}, {"copyright", Types.VARCHAR},
		{"source", Types.VARCHAR}, {"publicationDate", Types.TIMESTAMP},
		{"imageId", Types.BIGINT}, {"transcriptionFileId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("videoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("copyright", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("source", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publicationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("transcriptionFileId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table video_Video (uuid_ VARCHAR(75) null,videoId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,lastPublishDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,title STRING null,description TEXT null,copyright STRING null,source STRING null,publicationDate DATE null,imageId LONG,transcriptionFileId LONG)";

	public static final String TABLE_SQL_DROP = "drop table video_Video";

	public static final String ORDER_BY_JPQL =
		" ORDER BY video.modifiedDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY video_Video.modifiedDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.video.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.eu.strasbourg.service.video.model.Video"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.video.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.eu.strasbourg.service.video.model.Video"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		eu.strasbourg.service.video.service.util.PropsUtil.get(
			"value.object.column.bitmask.enabled.eu.strasbourg.service.video.model.Video"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long PUBLICATIONDATE_COLUMN_BITMASK = 4L;

	public static final long STATUS_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long MODIFIEDDATE_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Video toModel(VideoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Video model = new VideoImpl();

		model.setUuid(soapModel.getUuid());
		model.setVideoId(soapModel.getVideoId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLastPublishDate(soapModel.getLastPublishDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setCopyright(soapModel.getCopyright());
		model.setSource(soapModel.getSource());
		model.setPublicationDate(soapModel.getPublicationDate());
		model.setImageId(soapModel.getImageId());
		model.setTranscriptionFileId(soapModel.getTranscriptionFileId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Video> toModels(VideoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Video> models = new ArrayList<Video>(soapModels.length);

		for (VideoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_VIDEO_VIDEOTOVIDEOGALLERY_NAME =
		"video_VideoToVideoGallery";

	public static final Object[][]
		MAPPING_TABLE_VIDEO_VIDEOTOVIDEOGALLERY_COLUMNS = {
			{"companyId", Types.BIGINT}, {"videoId", Types.BIGINT},
			{"galleryId", Types.BIGINT}
		};

	public static final String
		MAPPING_TABLE_VIDEO_VIDEOTOVIDEOGALLERY_SQL_CREATE =
			"create table video_VideoToVideoGallery (companyId LONG not null,videoId LONG not null,galleryId LONG not null,primary key (videoId, galleryId))";

	public static final boolean FINDER_CACHE_ENABLED_VIDEO_VIDEOTOVIDEOGALLERY =
		GetterUtil.getBoolean(
			eu.strasbourg.service.video.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.video_VideoToVideoGallery"),
			true);

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		eu.strasbourg.service.video.service.util.PropsUtil.get(
			"lock.expiration.time.eu.strasbourg.service.video.model.Video"));

	public VideoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _videoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVideoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _videoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Video.class;
	}

	@Override
	public String getModelClassName() {
		return Video.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Video, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Video, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Video, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Video)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Video, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Video, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Video)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Video, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Video, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Video>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Video.class.getClassLoader(), Video.class, ModelWrapper.class);

		try {
			Constructor<Video> constructor =
				(Constructor<Video>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Video, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Video, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Video, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Video, Object>>();
		Map<String, BiConsumer<Video, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Video, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object uuid) {
					video.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"videoId",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getVideoId();
				}

			});
		attributeSetterBiConsumers.put(
			"videoId",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object videoId) {
					video.setVideoId((Long)videoId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object groupId) {
					video.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object companyId) {
					video.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object userId) {
					video.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object userName) {
					video.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object createDate) {
					video.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object modifiedDate) {
					video.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"lastPublishDate",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getLastPublishDate();
				}

			});
		attributeSetterBiConsumers.put(
			"lastPublishDate",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object lastPublishDate) {
					video.setLastPublishDate((Date)lastPublishDate);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object status) {
					video.setStatus((Integer)status);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserId",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getStatusByUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserId",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object statusByUserId) {
					video.setStatusByUserId((Long)statusByUserId);
				}

			});
		attributeGetterFunctions.put(
			"statusByUserName",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getStatusByUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"statusByUserName",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object statusByUserName) {
					video.setStatusByUserName((String)statusByUserName);
				}

			});
		attributeGetterFunctions.put(
			"statusDate",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getStatusDate();
				}

			});
		attributeSetterBiConsumers.put(
			"statusDate",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object statusDate) {
					video.setStatusDate((Date)statusDate);
				}

			});
		attributeGetterFunctions.put(
			"title",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getTitle();
				}

			});
		attributeSetterBiConsumers.put(
			"title",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object title) {
					video.setTitle((String)title);
				}

			});
		attributeGetterFunctions.put(
			"description",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getDescription();
				}

			});
		attributeSetterBiConsumers.put(
			"description",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object description) {
					video.setDescription((String)description);
				}

			});
		attributeGetterFunctions.put(
			"copyright",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getCopyright();
				}

			});
		attributeSetterBiConsumers.put(
			"copyright",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object copyright) {
					video.setCopyright((String)copyright);
				}

			});
		attributeGetterFunctions.put(
			"source",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getSource();
				}

			});
		attributeSetterBiConsumers.put(
			"source",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object source) {
					video.setSource((String)source);
				}

			});
		attributeGetterFunctions.put(
			"publicationDate",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getPublicationDate();
				}

			});
		attributeSetterBiConsumers.put(
			"publicationDate",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object publicationDate) {
					video.setPublicationDate((Date)publicationDate);
				}

			});
		attributeGetterFunctions.put(
			"imageId",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getImageId();
				}

			});
		attributeSetterBiConsumers.put(
			"imageId",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object imageId) {
					video.setImageId((Long)imageId);
				}

			});
		attributeGetterFunctions.put(
			"transcriptionFileId",
			new Function<Video, Object>() {

				@Override
				public Object apply(Video video) {
					return video.getTranscriptionFileId();
				}

			});
		attributeSetterBiConsumers.put(
			"transcriptionFileId",
			new BiConsumer<Video, Object>() {

				@Override
				public void accept(Video video, Object transcriptionFileId) {
					video.setTranscriptionFileId((Long)transcriptionFileId);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getVideoId() {
		return _videoId;
	}

	@Override
	public void setVideoId(long videoId) {
		_videoId = videoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		_lastPublishDate = lastPublishDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTitle(), languageId, useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(
				LocalizationUtil.updateLocalization(
					getTitle(), "Title", title, languageId, defaultLanguageId));
		}
		else {
			setTitle(
				LocalizationUtil.removeLocalization(
					getTitle(), "Title", languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(
		Map<Locale, String> titleMap, Locale defaultLocale) {

		if (titleMap == null) {
			return;
		}

		setTitle(
			LocalizationUtil.updateLocalization(
				titleMap, getTitle(), "Title",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDescription(), languageId, useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(
		String description, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(
				LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(
				LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(
		Map<Locale, String> descriptionMap, Locale defaultLocale) {

		if (descriptionMap == null) {
			return;
		}

		setDescription(
			LocalizationUtil.updateLocalization(
				descriptionMap, getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getCopyright() {
		if (_copyright == null) {
			return "";
		}
		else {
			return _copyright;
		}
	}

	@Override
	public String getCopyright(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getCopyright(languageId);
	}

	@Override
	public String getCopyright(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getCopyright(languageId, useDefault);
	}

	@Override
	public String getCopyright(String languageId) {
		return LocalizationUtil.getLocalization(getCopyright(), languageId);
	}

	@Override
	public String getCopyright(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getCopyright(), languageId, useDefault);
	}

	@Override
	public String getCopyrightCurrentLanguageId() {
		return _copyrightCurrentLanguageId;
	}

	@JSON
	@Override
	public String getCopyrightCurrentValue() {
		Locale locale = getLocale(_copyrightCurrentLanguageId);

		return getCopyright(locale);
	}

	@Override
	public Map<Locale, String> getCopyrightMap() {
		return LocalizationUtil.getLocalizationMap(getCopyright());
	}

	@Override
	public void setCopyright(String copyright) {
		_copyright = copyright;
	}

	@Override
	public void setCopyright(String copyright, Locale locale) {
		setCopyright(copyright, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setCopyright(
		String copyright, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(copyright)) {
			setCopyright(
				LocalizationUtil.updateLocalization(
					getCopyright(), "Copyright", copyright, languageId,
					defaultLanguageId));
		}
		else {
			setCopyright(
				LocalizationUtil.removeLocalization(
					getCopyright(), "Copyright", languageId));
		}
	}

	@Override
	public void setCopyrightCurrentLanguageId(String languageId) {
		_copyrightCurrentLanguageId = languageId;
	}

	@Override
	public void setCopyrightMap(Map<Locale, String> copyrightMap) {
		setCopyrightMap(copyrightMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setCopyrightMap(
		Map<Locale, String> copyrightMap, Locale defaultLocale) {

		if (copyrightMap == null) {
			return;
		}

		setCopyright(
			LocalizationUtil.updateLocalization(
				copyrightMap, getCopyright(), "Copyright",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getSource() {
		if (_source == null) {
			return "";
		}
		else {
			return _source;
		}
	}

	@Override
	public String getSource(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSource(languageId);
	}

	@Override
	public String getSource(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSource(languageId, useDefault);
	}

	@Override
	public String getSource(String languageId) {
		return LocalizationUtil.getLocalization(getSource(), languageId);
	}

	@Override
	public String getSource(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getSource(), languageId, useDefault);
	}

	@Override
	public String getSourceCurrentLanguageId() {
		return _sourceCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSourceCurrentValue() {
		Locale locale = getLocale(_sourceCurrentLanguageId);

		return getSource(locale);
	}

	@Override
	public Map<Locale, String> getSourceMap() {
		return LocalizationUtil.getLocalizationMap(getSource());
	}

	@Override
	public void setSource(String source) {
		_source = source;
	}

	@Override
	public void setSource(String source, Locale locale) {
		setSource(source, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSource(String source, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(source)) {
			setSource(
				LocalizationUtil.updateLocalization(
					getSource(), "Source", source, languageId,
					defaultLanguageId));
		}
		else {
			setSource(
				LocalizationUtil.removeLocalization(
					getSource(), "Source", languageId));
		}
	}

	@Override
	public void setSourceCurrentLanguageId(String languageId) {
		_sourceCurrentLanguageId = languageId;
	}

	@Override
	public void setSourceMap(Map<Locale, String> sourceMap) {
		setSourceMap(sourceMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setSourceMap(
		Map<Locale, String> sourceMap, Locale defaultLocale) {

		if (sourceMap == null) {
			return;
		}

		setSource(
			LocalizationUtil.updateLocalization(
				sourceMap, getSource(), "Source",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Date getPublicationDate() {
		return _publicationDate;
	}

	@Override
	public void setPublicationDate(Date publicationDate) {
		_columnBitmask |= PUBLICATIONDATE_COLUMN_BITMASK;

		if (_originalPublicationDate == null) {
			_originalPublicationDate = _publicationDate;
		}

		_publicationDate = publicationDate;
	}

	public Date getOriginalPublicationDate() {
		return _originalPublicationDate;
	}

	@JSON
	@Override
	public Long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(Long imageId) {
		_imageId = imageId;
	}

	@JSON
	@Override
	public Long getTranscriptionFileId() {
		return _transcriptionFileId;
	}

	@Override
	public void setTranscriptionFileId(Long transcriptionFileId) {
		_transcriptionFileId = transcriptionFileId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Video.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Video.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> copyrightMap = getCopyrightMap();

		for (Map.Entry<Locale, String> entry : copyrightMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> sourceMap = getSourceMap();

		for (Map.Entry<Locale, String> entry : sourceMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			Video.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(
				getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(
				getDescription(defaultLocale), defaultLocale, defaultLocale);
		}

		String copyright = getCopyright(defaultLocale);

		if (Validator.isNull(copyright)) {
			setCopyright(getCopyright(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setCopyright(
				getCopyright(defaultLocale), defaultLocale, defaultLocale);
		}

		String source = getSource(defaultLocale);

		if (Validator.isNull(source)) {
			setSource(getSource(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setSource(getSource(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Video toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VideoImpl videoImpl = new VideoImpl();

		videoImpl.setUuid(getUuid());
		videoImpl.setVideoId(getVideoId());
		videoImpl.setGroupId(getGroupId());
		videoImpl.setCompanyId(getCompanyId());
		videoImpl.setUserId(getUserId());
		videoImpl.setUserName(getUserName());
		videoImpl.setCreateDate(getCreateDate());
		videoImpl.setModifiedDate(getModifiedDate());
		videoImpl.setLastPublishDate(getLastPublishDate());
		videoImpl.setStatus(getStatus());
		videoImpl.setStatusByUserId(getStatusByUserId());
		videoImpl.setStatusByUserName(getStatusByUserName());
		videoImpl.setStatusDate(getStatusDate());
		videoImpl.setTitle(getTitle());
		videoImpl.setDescription(getDescription());
		videoImpl.setCopyright(getCopyright());
		videoImpl.setSource(getSource());
		videoImpl.setPublicationDate(getPublicationDate());
		videoImpl.setImageId(getImageId());
		videoImpl.setTranscriptionFileId(getTranscriptionFileId());

		videoImpl.resetOriginalValues();

		return videoImpl;
	}

	@Override
	public int compareTo(Video video) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(), video.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Video)) {
			return false;
		}

		Video video = (Video)obj;

		long primaryKey = video.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VideoModelImpl videoModelImpl = this;

		videoModelImpl._originalUuid = videoModelImpl._uuid;

		videoModelImpl._originalGroupId = videoModelImpl._groupId;

		videoModelImpl._setOriginalGroupId = false;

		videoModelImpl._originalCompanyId = videoModelImpl._companyId;

		videoModelImpl._setOriginalCompanyId = false;

		videoModelImpl._setModifiedDate = false;

		videoModelImpl._originalStatus = videoModelImpl._status;

		videoModelImpl._setOriginalStatus = false;

		videoModelImpl._originalPublicationDate =
			videoModelImpl._publicationDate;

		videoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Video> toCacheModel() {
		VideoCacheModel videoCacheModel = new VideoCacheModel();

		videoCacheModel.uuid = getUuid();

		String uuid = videoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			videoCacheModel.uuid = null;
		}

		videoCacheModel.videoId = getVideoId();

		videoCacheModel.groupId = getGroupId();

		videoCacheModel.companyId = getCompanyId();

		videoCacheModel.userId = getUserId();

		videoCacheModel.userName = getUserName();

		String userName = videoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			videoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			videoCacheModel.createDate = createDate.getTime();
		}
		else {
			videoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			videoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			videoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			videoCacheModel.lastPublishDate = lastPublishDate.getTime();
		}
		else {
			videoCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		videoCacheModel.status = getStatus();

		videoCacheModel.statusByUserId = getStatusByUserId();

		videoCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = videoCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			videoCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			videoCacheModel.statusDate = statusDate.getTime();
		}
		else {
			videoCacheModel.statusDate = Long.MIN_VALUE;
		}

		videoCacheModel.title = getTitle();

		String title = videoCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			videoCacheModel.title = null;
		}

		videoCacheModel.description = getDescription();

		String description = videoCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			videoCacheModel.description = null;
		}

		videoCacheModel.copyright = getCopyright();

		String copyright = videoCacheModel.copyright;

		if ((copyright != null) && (copyright.length() == 0)) {
			videoCacheModel.copyright = null;
		}

		videoCacheModel.source = getSource();

		String source = videoCacheModel.source;

		if ((source != null) && (source.length() == 0)) {
			videoCacheModel.source = null;
		}

		Date publicationDate = getPublicationDate();

		if (publicationDate != null) {
			videoCacheModel.publicationDate = publicationDate.getTime();
		}
		else {
			videoCacheModel.publicationDate = Long.MIN_VALUE;
		}

		videoCacheModel.imageId = getImageId();

		videoCacheModel.transcriptionFileId = getTranscriptionFileId();

		return videoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Video, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Video, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Video, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Video)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Video, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Video, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Video, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Video)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Video>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private String _uuid;
	private String _originalUuid;
	private long _videoId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _lastPublishDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _copyright;
	private String _copyrightCurrentLanguageId;
	private String _source;
	private String _sourceCurrentLanguageId;
	private Date _publicationDate;
	private Date _originalPublicationDate;
	private Long _imageId;
	private Long _transcriptionFileId;
	private long _columnBitmask;
	private Video _escapedModel;

}