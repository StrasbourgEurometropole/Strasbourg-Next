/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.strasbourg.service.interest.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import eu.strasbourg.service.interest.model.UserInterest;
import eu.strasbourg.service.interest.model.UserInterestModel;
import eu.strasbourg.service.interest.service.persistence.UserInterestPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserInterest service. Represents a row in the &quot;interest_UserInterest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UserInterestModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserInterestImpl}.
 * </p>
 *
 * @author BenjaminBini
 * @see UserInterestImpl
 * @see UserInterest
 * @see UserInterestModel
 * @generated
 */
@ProviderType
public class UserInterestModelImpl extends BaseModelImpl<UserInterest>
	implements UserInterestModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user interest model instance should use the {@link UserInterest} interface instead.
	 */
	public static final String TABLE_NAME = "interest_UserInterest";
	public static final Object[][] TABLE_COLUMNS = {
			{ "interestId", Types.BIGINT },
			{ "publikUserId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("interestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("publikUserId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table interest_UserInterest (interestId LONG not null,publikUserId LONG not null,primary key (interestId, publikUserId))";
	public static final String TABLE_SQL_DROP = "drop table interest_UserInterest";
	public static final String ORDER_BY_JPQL = " ORDER BY userInterest.id.interestId ASC, userInterest.id.publikUserId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY interest_UserInterest.interestId ASC, interest_UserInterest.publikUserId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.interest.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.eu.strasbourg.service.interest.model.UserInterest"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.interest.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.eu.strasbourg.service.interest.model.UserInterest"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(eu.strasbourg.service.interest.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.eu.strasbourg.service.interest.model.UserInterest"),
			true);
	public static final long INTERESTID_COLUMN_BITMASK = 1L;
	public static final long PUBLIKUSERID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.strasbourg.service.interest.service.util.ServiceProps.get(
				"lock.expiration.time.eu.strasbourg.service.interest.model.UserInterest"));

	public UserInterestModelImpl() {
	}

	@Override
	public UserInterestPK getPrimaryKey() {
		return new UserInterestPK(_interestId, _publikUserId);
	}

	@Override
	public void setPrimaryKey(UserInterestPK primaryKey) {
		setInterestId(primaryKey.interestId);
		setPublikUserId(primaryKey.publikUserId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new UserInterestPK(_interestId, _publikUserId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((UserInterestPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return UserInterest.class;
	}

	@Override
	public String getModelClassName() {
		return UserInterest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("interestId", getInterestId());
		attributes.put("publikUserId", getPublikUserId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long interestId = (Long)attributes.get("interestId");

		if (interestId != null) {
			setInterestId(interestId);
		}

		Long publikUserId = (Long)attributes.get("publikUserId");

		if (publikUserId != null) {
			setPublikUserId(publikUserId);
		}
	}

	@Override
	public long getInterestId() {
		return _interestId;
	}

	@Override
	public void setInterestId(long interestId) {
		_columnBitmask |= INTERESTID_COLUMN_BITMASK;

		if (!_setOriginalInterestId) {
			_setOriginalInterestId = true;

			_originalInterestId = _interestId;
		}

		_interestId = interestId;
	}

	public long getOriginalInterestId() {
		return _originalInterestId;
	}

	@Override
	public long getPublikUserId() {
		return _publikUserId;
	}

	@Override
	public void setPublikUserId(long publikUserId) {
		_columnBitmask |= PUBLIKUSERID_COLUMN_BITMASK;

		if (!_setOriginalPublikUserId) {
			_setOriginalPublikUserId = true;

			_originalPublikUserId = _publikUserId;
		}

		_publikUserId = publikUserId;
	}

	@Override
	public String getPublikUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getPublikUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setPublikUserUuid(String publikUserUuid) {
	}

	public long getOriginalPublikUserId() {
		return _originalPublikUserId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public UserInterest toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserInterest)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserInterestImpl userInterestImpl = new UserInterestImpl();

		userInterestImpl.setInterestId(getInterestId());
		userInterestImpl.setPublikUserId(getPublikUserId());

		userInterestImpl.resetOriginalValues();

		return userInterestImpl;
	}

	@Override
	public int compareTo(UserInterest userInterest) {
		UserInterestPK primaryKey = userInterest.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserInterest)) {
			return false;
		}

		UserInterest userInterest = (UserInterest)obj;

		UserInterestPK primaryKey = userInterest.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		UserInterestModelImpl userInterestModelImpl = this;

		userInterestModelImpl._originalInterestId = userInterestModelImpl._interestId;

		userInterestModelImpl._setOriginalInterestId = false;

		userInterestModelImpl._originalPublikUserId = userInterestModelImpl._publikUserId;

		userInterestModelImpl._setOriginalPublikUserId = false;

		userInterestModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserInterest> toCacheModel() {
		UserInterestCacheModel userInterestCacheModel = new UserInterestCacheModel();

		userInterestCacheModel.userInterestPK = getPrimaryKey();

		userInterestCacheModel.interestId = getInterestId();

		userInterestCacheModel.publikUserId = getPublikUserId();

		return userInterestCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{interestId=");
		sb.append(getInterestId());
		sb.append(", publikUserId=");
		sb.append(getPublikUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("eu.strasbourg.service.interest.model.UserInterest");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>interestId</column-name><column-value><![CDATA[");
		sb.append(getInterestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publikUserId</column-name><column-value><![CDATA[");
		sb.append(getPublikUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UserInterest.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UserInterest.class
		};
	private long _interestId;
	private long _originalInterestId;
	private boolean _setOriginalInterestId;
	private long _publikUserId;
	private long _originalPublikUserId;
	private boolean _setOriginalPublikUserId;
	private long _columnBitmask;
	private UserInterest _escapedModel;
}